    1	from threading import local into default name space .
    2	import module warnings .
    3	from django.conf import settings into default name space .
    4	from django.core import signals into default name space .
    5	from django.core.cache.backends.base import InvalidCacheBackendError , CacheKeyWarning and BaseCache into default name space .
    6	from django.core.exceptions import ImproperlyConfigured into default name space .
    7	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
    8	from django.utils.module_loading import import_string into default name space .
    9	__all__ is an list containing 6 elements : STR0 , STR1 , STR2 , STR3 , STR4 and STR5
   10	DEFAULT_CACHE_ALIAS is a string STR0 .
   11	if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES ,
   12	raise an exception ImproperlyConfigured with string STR0 as argument , with STR1 replaced with DEFAULT_CACHE_ALIAS converted into a string .
   13	define the function get_cache with backend and dictionary pair of elements kwargs as arguments .
   14	call the function warnings.warn with string STR0 , RemovedInDjango19Warning , and stacklevel set to 2 as arguments .
   15	call the _create_cache with backend and dictionary kwargs as arguments , substitute the result for cache .
   16	call the function signals.request_finished.connect with argument cache.close .
   17	return cache .
   18	define the function _create_cache with backend and dictionary pair of elements kwargs as arguments .
   19	try ,
   20	try ,
   21	substitute value under the backend key of settings.CACHES dictionary for conf .
   22	if KeyError exception is caught ,
   23	try ,
   24	call the function import_string with argument backend .
   25	if ImportError , renamed to e , exception is caught ,
   26	raise and exception InvalidCacheBackendError with string STR0 as argument , replace STR1 with backend and e , respectively .
   27	remove STR0 key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
   28	substitute kwargs for params .
   29	if not ,
   30	call the function conf.copy , substitute it for params .
   31	call the function params.update with argument kwargs .
   32	remove STR0 key from params dictionary and put it into backend .
   33	remove STR0 key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
   34	call the import_string with argument backend , substitute it for backend_cls .
   35	if ImportError , renamed to e , is caught ,
   36	raise and exception InvalidCacheBackendError with string STR0 as argument , replace STR1 with backend and e , respectively .
   37	evaluate the function backend_cls with location and params as arguments , return the result .
   38	derive the class CacheHandler from the object base class .
   39	define the __init__ method with argument self .
   40	call the function local , substitute the result for self._caches .
   41	define the __getitem__ method with self and alias arguments .
   42	try ,
   43	return value under the alias key of self._caches.caches dictionary .
   44	except if AttributeError is caught ,
   45	self._caches.caches is an empty dictionary .
   46	except if KeyError exception is caught ,
   47	do nothing .
   48	if alias is not contained in setting.CACHES ,
   49	raise and exception InvalidCacheBackendError with string STR0 as argument , replace STR1 with alias .
   50	call the function _create_cache with argument alias .
   51	substitute cache for value under the alias key of self._caches.caches dictionary .
   52	return cache .
   53	define the method all with argument self .
   54	get attribute STR0 from the self._caches if exists , otherwise get an empty dictionary , call the values method on the return value , return it .
   55	call the CacheHandler function , substitute the result for caches .
   56	derive the class DefaultCacheProxy from the base class object .
   57	define the method __getattr__ with self and name as arguments .
   58	get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return it .
   59	define the method __setattr__ with self , name and value as arguments .
   60	set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value , return it .
   61	define the method __delattr__ with self and name as arguments .
   62	delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key .
   63	define the method __contains__ with self and key as arguments .
   64	if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return boolean True , otherwise return False .
   65	define the method __eq__ with self and other as arguments .
   66	if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other , return boolean True , otherwise return False .
   67	define the method __ne__ with self and other as arguments .
   68	if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other , return boolean True , otherwise return False .
   69	call the DefaultCacheProxy function , substitute it for cache .
   70	define the function close_caches with dictionary pair of elements kwargs as argument .
   71	for every cache in return value of the function caches.all .
   72	call the function cache.close .
   73	call the function signals.request_finished.connect with argument close_caches .
   74	from __future__ import unicode_literals into default name space .
   75	import module time .
   76	import module warnings .
   77	from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space .
   78	from django.utils.module_loading import import_string into default name space .
   79	derive class InvalidCacheBackendError from the ImproperlyConfigured base class .
   80	do nothing .
   81	derive class CacheKeyWarning from the DjangoRuntimeWarning base class .
   82	do nothing .
   83	DEFAULT_TIMEOUT is a instance of the class object .
   84	MEMCACHE_MAX_KEY_LENGTH is integer 250 .
   85	define the function default_key_func with 3 arguments , key , key_prefix and version .
   86	convert key_prefix , version and key into strings , concatenate them respectively , with character STR0 as delimiter , return the result .
   87	define the function get_key_func with argument key_func .
   88	if key_func is not of None type ,
   89	if key_function is callable object ,
   90	return key_func .
   91	if not ,
   92	evaluate the function import_string with key_func as argument , return the result .
   93	return default_key_func .
   94	derive the class BaseCache from the object base class .
   95	define the initialization function __init__ with self class instance and params as arguments .
   96	call the params.get method with string STR0 and integer 300 as arguments , use the string STR1 and previous result as the arguments for the call to the params.get method , substitute the result for timeout .
   97	if timeout is not None ,
   98	try ,
   99	convert timeout into an integer .
  100	if ValueError or TypeError exceptions occurred ,
  101	timeout is integer 300 .
  102	substitute timeout for self.default_timeout .
  103	call the params.get with string STR0 and empty dictionary as arguments , substitute the result for options .
  104	call the options.get method with string STR0 and integer 300 as arguments , use the string STR1 and previous result as the arguments for the call to the params.get method , substitute the result for max_entries .
  105	try ,
  106	convert max_entries into a string , substitute it for self._max_entries .
  107	if ValueError or TypeError exceptions occurred ,
  108	self._max_entries is integer 300 .
  109	call the options.get method with string STR0 and integer 3 as arguments , use the string STR1 and previous result as the arguments for the call to the params.get method , substitute the result for cull_frequency .
  110	try ,
  111	convert cull_frequency into an integer and substitute it for self._cull_frequency .
  112	if ValueError or TypeError exceptions occurred ,
  113	self._cull_frequency is integer 3 .
  114	call the params.get method with string STR0 and an empty string as arguments , substitute the result for self._key_prefix .
  115	call the params.get method wit string STR0 and integer 1 as arguments , substitute the result for self.version .
  116	call the method params.get with 2 arguments , string STR0 and None , use the result as the argument for the call to the function get_key_func , substitute the result for the self.key_func .
  117	define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments ,
  118	if timeout equals to DEFAULT_TIMEOUT ,
  119	substitute self.default_timeout for timeout .
  120	else if timeout equals to integer 0 ,
  121	timeout is a integer -1 .
  122	if timeouts is None return None , otherwise return the sum of function time.time return value and timeout .
  123	define the function make_key with self class instance , key and version set to None as arguments .
  124	if version is None ,
  125	substitute self.version for version .
  126	call the method self.key_function with key , self.key_prefix and version as arguments , substitute the result for new_key .
  127	return new_key .
  128	define the method add with 5 arguments , self , key , value , timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None .
  129	docsring
  130	raise an exception of class NotImplementedError with string STR0 as argument .
  131	define the method get with 4 arguments , self , key , default set to None and version set to None .
  132	raise an exception of class NotImplementedError , with string STR0 as argument .
  133	define the method set with 5 arguments , self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  134	raise an exception of class NotImplementedError , with string STR0 as argument .
  135	define delete method with self class instance , key and version set to None , as arguments .
  136	raise an exception of class NotImplementedError , with string STR0 as argument .
  137	define the get_many method with self class instance , keys and version set to None as arguments .
  138	d is an empty dictionary .
  139	for every k in keys ,
  140	call the self.get method with k and version set to version as arguments , substitute the result for val .
  141	if val is not None ,
  142	substitute val for value under the k key of dictionary d .
  143	return d .
  144	define method has_key with self class instance , key and version set to None as arguments .
  145	call the self.get method with key and version set to version as arguments , return it if it is not None .
  146	define the method incr with 4 arguments , self class instance , key , delta defaulting to integer 1 and version defaulting to None .
  147	call the method self.get with key and version set to version as arguments , substitute the result for value .
  148	if value is None ,
  149	raise an exception of class ValueError , with string STR0 as argument , where STR1 is substituted for key .
  150	add value and delta together , substitute the result for new_value .
  151	call the self.set method with key , new_value and version set to version as arguments .
  152	return new_value .
  153	define the method decr with arguments self , key , delta defaulting to integer 1 and version defaulting to None .
  154	call the self.incr method with key , negative delta and version set to version as arguments .
  155	define the private method __contains__ with self class instance and key as arguments .
  156	evaluate the self.has_key method with key as argument , return the result .
  157	define the method set_many with arguments , self , data , timeout defaulting to DEFAULT_TIMEOUT and version set to None .
  158	for every key and value in data.items method return value ,
  159	call the method self.set with arguments key , value , timeout set to timeout , version set to version .
  160	define the method delete_many with arguments self , keys and version defaulting to None .
  161	for every key in keys ,
  162	call the delete method with key and version set to version as arguments .
  163	define the method clear with self class instance as the argument ,
  164	raise an exception NotImplementedError with string STR0 as argument .
  165	define the method validate_key with self class instance and key as arguments .
  166	if length of key is greater than MEMCACHE_MAX_KEY_LENGTH ,
  167	substitute STR0 in string STR1 with key ,
  168	and MEMCACHE_MAX_KEY_LENGTH , call the function warnings.warn with previous string and CacheKeyWarning as arguments .
  169	for every char in key , if ascii value of char is smaller than integer 33 or is equal to integer 127 ,
  170	substitute STR0 in string STR1 with key , call the function warnings.warn with previous string and CacheKeyWarning as arguments .
  171	define the method incr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
  172	if version is None ,
  173	substitute self.version for version .
  174	call the self.get method with arguments key and version set to version , substitute the result for value .
  175	if value is None ,
  176	raise an exception of the class ValueError with string STR0 as argument , STR1 is substituted for key .
  177	call the method self.set with key , value , version incremented by delta , as arguments .
  178	call the self.delete method with key and version set to version as arguments .
  179	sum version and delta together , return the result .
  180	define the method decr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
  181	call the method self.incr_version with key , negative delta and version as arguments .
  182	define the close method with 2 arguments , self and dictionary of argument pairs kwargs .
  183	docstirng
  184	do nothing .
  185	import module base64 .
  186	from datetime import datetime into default name space .
  187	try ,
  188	from django.utils.six.moves import cPickle as pickle , into default namespace .
  189	if ImportError exception occurred ,
  190	import pickle .
  191	from django.conf import settings into default name space .
  192	from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
  193	from django.db import connections , transaction , router and DatabaseError into default name space .
  194	from django.db.backends.utils import typecast_timestamp into default name space .
  195	from django.utils import timezone and six into default name space .
  196	from django.utils.encoding import force_bytes into default name space .
  197	derive class Options from the base class object .
  198	define the initialization method __init__ with self class instance and table as arguments .
  199	substitute table for self.db_table .
  200	self.app_label is a string STR0 .
  201	self.model_name is a string STR0 .
  202	self.verbose_name is a string STR0 .
  203	self.verbose_name_plural is a string STR0 .
  204	self.object_name is a string STR0 .
  205	self.abstract is boolean False .
  206	self.managed is boolean True .
  207	self.proxy is boolean False .
  208	derive class BaseDatabaseCache from BaseCache base class .
  209	define the initialization method __init__ with self , table and params as arguments .
  210	call the BaseCache.__init__ method with self class instance and params as the arguments .
  211	substitute table for self._table .
  212	derive CacheEntry class from the object base class .
  213	_meta is class Options class instance initialized with table argument .
  214	substitute CacheEntry for self.cache_model_class .
  215	derive DatabaseCache from the BaseDatabaseCache base class .
  216	define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
  217	call the method self.make_key Whit key and version set to version as arguments , substitute the result for key .
  218	call the method self.validate_key with argument key .
  219	call the method router.db_for_read with self.cache_model_class as argument , substitute the result for db .
  220	call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary , substitute the result for table .
  221	call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
  222	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and list containing key , respectively .
  223	call the cursor.fetchone method , substitute the result for row .
  224	if row is None ,
  225	return default .
  226	call the timezone.now function , substitute the result for now .
  227	substitute third element of row list for expires .
  228	if features.needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true , and expires is not an instance of datetime .
  229	convert expires to a string , use it as argument for the call to the function typecast_timestamp , substitute the result for expires .
  230	if expires is lesser than now ,
  231	call the method router.db_for_write with argument self.cache_model_class , substitute the result for db .
  232	call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
  233	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and list containing key , respectively .
  234	return default .
  235	call the method ops.process_clob with second element of row as argument , on the object under the db key of connections dictionary , substitute the result for value .
  236	call the function force_bytes with argument value , use the result as an argument for the call to the method base64.b64decode , use the result as the argument for the function call to the pickle.loads , return the result .
  237	define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  238	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  239	call the method self.validate_key with key as argument .
  240	call the method self._base_set with string STR0 , key , value and timeout as arguments .
  241	define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  242	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  243	call the method self.validate_key with key as argument .
  244	call the method self._base_set with string STR0 , key , value and timeout as arguments , return the result .
  245	define the protected method _base_set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT .
  246	call the method self.get_backend_timeout with argument timeout , substitute the result for timeout .
  247	call the method router.db_for_write with argument self.cache_model_class , substitute the result for db .
  248	call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table .
  249	call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
  250	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table .
  251	fetch one record from the database cursor points at , substitute the first element of return value for num .
  252	call the timezone.now function , substitute the result for now .
  253	call the function now.replace with microseconds set to integer 0 , substitute the result for now .
  254	if timeout is None ,
  255	substitute the datetime.max for exp .
  256	otherwise is settings.USE_TI is true ,
  257	call the function datetime.utcfromtimestamp with argument timeout , substitute it for exp .
  258	if not ,
  259	call the function datetime.fromtimestamp with argument timeout , substitute it for exp .
  260	call the exp.replace with microsecond set to integer 0 , substitute the result for exp .
  261	if num is greater than self._max_entries ,
  262	call the method self._cull with db , cursor and now as arguments .
  263	call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments , substitute it for pickled .
  264	call the method base64.b64encode with argument pickled , substitute the result for b64encoded .
  265	if six.PY3 is true ,
  266	call the method b64encoded.decode with string STR0 as argument , substitute the result for b64encoded .
  267	try ,
  268	with return value of the function transaction.atomic with using set to db as arguments , perform the following ,
  269	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and list containing key , respectively .
  270	fetch one entry from the database that cursor points at , substitute it for the result .
  271	if result is true ,
  272	substitute the second element of result for current_expires .
  273	if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object .
  274	convert current_expires to a string , use it as the argument for the call to the function typecast_timestamp , substitute the result for current_expires .
  275	on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp , substitute the result for the exp .
  276	if mode equals to string STR0 and current_expires is lesser than now , or mode equals to string STR1 , and result is true ,
  277	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and 3 elements of a list : b64encoded , exp and key , respectively .
  278	if not ,
  279	call the method cursor.execute with string STR0 , substitute the STR1 with table and 3 elements of a list : b64encoded , exp and key , respectively .
  280	if DatabaseError exception is caught ,
  281	return boolean False .
  282	if not ,
  283	return boolean True .
  284	define the method delete with self class instance , key and version set to None as arguments .
  285	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  286	call the method self.validate_key with argument key .
  287	call the method router.db_for_write with argument self.cache_model_class , substitute the result for db .
  288	call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table .
  289	call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
  290	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and list containing key , respectively .
  291	define the method has_key with self class instance , key and version defaulting to None as arguments .
  292	call the self.make_key with key and version set to version as arguments , substitute the result for key .
  293	call the self.validate_key method with argument key .
  294	call the method router.db_for_write with argument self.cache_model_class , substitute the result for db .
  295	call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table .
  296	if settings.USE_TZ is true ,
  297	call the function datetime.utcnow , substitute the result for now .
  298	if not ,
  299	call the function datetime.now , substitute the result to now .
  300	call the method now.replace with the argument microsecond set to integer 0 , substitute the result for now .
  301	call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
  302	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively .
  303	if exists return next entry from the database that cursor points at .
  304	define the protected method _cull with self class instance , db , cursor and now as arguments .
  305	if self._cull_frequency equals to integer 0 .
  306	call the self.clear method .
  307	if not ,
  308	call the method now.replace with argument tzinfo set to None , substitute it for now .
  309	call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table .
  310	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively .
  311	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table .
  312	fetch next entry for the database that cursor points into , substitute first element of it for num .
  313	if num is greater than self._max_entries ,
  314	divide num by self._cull_frequency , floor the result and substitute it for cull_num .
  315	evaluate the method connections [ db ] .ops.cache_key_culling_sql , evaluate the result by table modulus , call the method cursor.execute , with previous result and list containing cull_num , respectively as arguments .
  316	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table and list containing first element of cursor.fetchone method , respectively .
  317	define the method clear with argument self .
  318	call the method router.db_for_write with argument self.cache_model_class , substitute the result for db .
  319	call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table .
  320	call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
  321	call the method cursor.execute with string STR0 as argument , substitute the STR1 with table .
  322	derive the class CacheClass from the DatabaseCache base class .
  323	do nothing .
  324	from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
  325	derive the class DummyCache from the base class BaseCache .
  326	define initialization method __init__ with 4 arguments : self , host , list of arguments args and dictionary of arguments kwargs .
  327	call the BaseCache initialization method __init__ with 3 arguments self , list of arguments args and dictionary of arguments kwargs .
  328	define the method add with 5 arguments : self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  329	call the method self.make_key with key and version set to version as arguments , substitute it for key .
  330	call the method self.validate_key with argument key .
  331	return boolean True .
  332	define the method get with 4 arguments : self , key , default set to None and version set to None .
  333	call the method self.make_key with key and version set to version as arguments , substitute it for key .
  334	call the method self.validate_key with argument key .
  335	return default .
  336	define the method set with 5 arguments : self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  337	call the method self.make_key with key and version set to version as arguments , substitute it for key .
  338	call the method self.validate_key with argument key .
  339	define the method delete with 3 arguments : self , key , and version set to None .
  340	call the method self.make_key with key and version set to version as arguments , substitute it for key .
  341	call the method self.validate_key with argument key .
  342	define the method get_many with 3 arguments : self , keys , and version set to None .
  343	return an empty dictionary .
  344	define the method has_key with 3 arguments : self , key , and version set to None .
  345	call the method self.make_key with key and version set to version as arguments , substitute it for key .
  346	call the method self.validate_key with argument key .
  347	return boolean False .
  348	define the method set_many with 4 arguments : self , data , timeout set to DEFAULT_TIMEOUT and version set to None .
  349	do nothing
  350	define the method delete_many with 3 arguments : self , keys , and version set to None .
  351	do nothing .
  352	define the method clear with argument self .
  353	do nothing .
  354	derive the class CacheClass from the DummyCache base class .
  355	do nothing .
  356	import module errno .
  357	import module glob .
  358	import module hashlib .
  359	import module io .
  360	import module os .
  361	import module random .
  362	import module tempfile .
  363	import module time .
  364	import module zlib .
  365	from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
  366	from django.core.files.move import file_move_safe into default name space .
  367	from django.utils.encoding import force_bytes into default name space .
  368	try ,
  369	from django.utils.six.moves import cPickle as pickle into default name space .
  370	if ImportError exception is caught ,
  371	import pickle .
  372	derive the class FileBasedCache from BaseCache base class .
  373	cache_suffix is a string STR0 .
  374	define the initialization method __init__ with arguments : self class instance , dir and params .
  375	call method __init__ with argument params from the base class of the FileBaseCache .
  376	get absolute directory path of dir , substitute it for self._dir .
  377	call the self._createdir method .
  378	define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  379	evaluate method self.has_key with key and version as arguments , if the result is true ,
  380	return boolean False .
  381	call the method self.set with key , value , timeout and version as arguments .
  382	return boolean True .
  383	define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
  384	call the function self._key_to_file with key and version as arguments , substitute it for fname .
  385	if fname file path exists ,
  386	try ,
  387	with return value of the function io.open with fname and string STR0 as arguments , named as f ,
  388	evaluate self._is_expired method with f as argument , if the result is false ,
  389	call f.read function , use the result as the argument for zlib.decompress function call , call the pickle.loads function with the previous result as argument , return the result .
  390	if IOError , renamed to e , exception is caught ,
  391	if e.errno equals to errno.ENOENT ,
  392	do nothing .
  393	return default .
  394	define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  395	call the self._createdir method .
  396	call the function self._key_to_file with key and version as arguments , substitute it for fname .
  397	call the method self._cull .
  398	call the method tempfile.mkstemp with dir set to self._dir , substitute result for fd and tmp_path , respectively .
  399	renamed is boolean False .
  400	try ,
  401	with return value of the function io.open with fname and string STR0 as arguments , named as f ,
  402	call the method self.get_backend_timeout with argument timeout , substitute it for expiry .
  403	call the function pickle.dumps with expiry and integer -1 as arguments , use the result as the argument for the call to f.write function .
  404	call the function pickle.dumps with argument value , use the result and integer -1 as arguments for the call to the function zlib.compress , use the result as an argument for the call to the f.write method .
  405	call the function file_move_safe with tmp_path , fname , allow_overwrite set to boolean True as arguments .
  406	renamed is boolean True .
  407	finally perform ,
  408	if renamed is boolean False ,
  409	remove file tmp_path .
  410	define the method delete with self class instance , key and version defaulting to None as arguments .
  411	call the function self._key_to_file with key and version as arguments , use the result as an argument for the call to the self._delete method .
  412	define the method _delete with self and fname as arguments .
  413	if fname doesnt start with self._dir and fname file path doesnt exists ,
  414	return nothing .
  415	try ,
  416	call the function os.remove with argument fname .
  417	if exception OSError , renamed to e , is caught ,
  418	if e.errno does not equals to errno.ENOENT ,
  419	raise an exception .
  420	define the method has_key with self class instance , key and version defaulting to None as arguments .
  421	call the function self._key_to_file with key and version as arguments , substitute it for fname .
  422	if fname file path exists ,
  423	with call to the io.open function with fname and string STR0 as arguments , renamed to f ,
  424	call the method self._is_expired with argument f , invert the boolean result and return it .
  425	return boolean False .
  426	define the method _cull with argument self .
  427	call the self._list_cache_files method , substitute the result for filelist .
  428	num_entries is length of filelist .
  429	if num_entries is lesser than self._max_entries ,
  430	return nothing .
  431	if self._cull_frequency equals to integer 0 .
  432	evaluate self.clear method and return the result .
  433	divide num_entries by self._cull_frequency , convert the result to an integer , call the random.sample function with filelist and previous result as arguments , substitute the result for filelist .
  434	for every fname in filelist ,
  435	call self._delete method with argument fname .
  436	define the method _createdir with argument self .
  437	if self._dir path doesnt exists ,
  438	try ,
  439	call os.makedirs function with self._dir and hexadecimal 700 as arguments .
  440	if OSError , renamed to e , exception is caught ,
  441	if e.errno is not equal to errno.EEXIST ,
  442	raise an EnvironmentError exception with string STR0 as argument , substitute STR1 with self._dir converted to a string .
  443	define the method key_to_file with self class instance , key and version defaulting to None as arguments .
  444	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  445	call the method self.validate_key with argument key .
  446	join into a string : md5 hash sum of force_bytes ( key ) and self.cache_suffix , compose root file path out of self._dir and previous result , return it .
  447	define the method clear with argument self .
  448	if self._dir file path does not exists ,
  449	return nothing .
  450	if fname is contained in self._list_cache_files method return value ,
  451	call the self._delete method with argument fname .
  452	define the method _is_expired with self and f as arguments .
  453	call the function pickle.load with argument f , substitute the result for exp .
  454	if exp is not None and exp is lesser than return value of the function time.time ,
  455	call close method on a file stream .
  456	call the self._delete method with argument f.name .
  457	return boolean True .
  458	return boolean False .
  459	define the method _list_cache_files with argument self .
  460	if self._dir file path does not exists ,
  461	return an empty list .
  462	for every fname in return value of the glob.glob1 function called with 2 arguments : self._dir and , self.cache_suffix converted to a string , appended to the character STR0 , call os.path.join with self._dir and fname as arguments , filelist is a list containing all the previous results .
  463	return filelist .
  464	derive the class CacheClass from the base class FileBasedCache .
  465	do nothing .
  466	import module time .
  467	try ,
  468	from django.utils.six.moves import cPickle as pickle into default name space .
  469	if ImportError exception is caught ,
  470	import pickle .
  471	from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
  472	from django.utils.synch import RWLock into default name space .
  473	__caches is an empty dictionary .
  474	__expire_info is an empty dictionary .
  475	__locks is an empty dictionary .
  476	derive the class LocMemCache from the base class BaseCache .
  477	define the initialization method __init__ with 3 arguments : self , name and params .
  478	call the __init__ method with self and params arguments from the base class BaseCache .
  479	call the _caches.setdefault method with name and empty dictionary as arguments , substitute the result for self_cache .
  480	call the _expire_info.setdefault method with name and empty dictionary as arguments , substitute the result for self_expire_info .
  481	call the _lock.setdefault method with name and RWLock ( ) as arguments , substitute the result for self_lock .
  482	define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  483	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  484	call the method self.validate_key with argument key .
  485	call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments .
  486	call the self._lock.writer method , with the result perform the following ,
  487	evaluate self._has_expired with argument key , if the result is True ,
  488	call the method self._set with key , pickled and timeout as arguments .
  489	return boolean True .
  490	return boolean False .
  491	define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
  492	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  493	call the method self.validate_key with argument key .
  494	substitute None for pickled .
  495	call the self._lock.reader method , with the result perform the following ,
  496	evaluate the method self._has_expired with argument key , if it as False ,
  497	substitute value under the key key of self._cache dictionary for pickled .
  498	if pickled is not None .
  499	try ,
  500	evaluate pickle.loads with argument pickled , return the result .
  501	if pickle.PickleError exception is caught ,
  502	return default .
  503	call the self._lock.writer method , with the result perform the following ,
  504	try ,
  505	delete the value under key key of self._cache dictionary .
  506	delete the value under key key of self._expire_info .
  507	if KeyError exception is caught ,
  508	do nothing .
  509	return default .
  510	define the method _set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT .
  511	if length of self._cache is greater or equal to self._max_entries ,
  512	call the self._cull method .
  513	substitute value for the value under the key key of self._cache dictionary .
  514	call the self.get_backend_timeout with argument timeout , substitute it for the value under the key key of self._expire_info dictionary .
  515	define the method get with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  516	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  517	call the method self.validate_key with argument key .
  518	call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments , substitute the result for pickled .
  519	call the self._lock.writer method , with the result perform the following ,
  520	call the method self._set with key , pickled and timeout as arguments .
  521	define the method incr with self class instance , key , delta set to integer 1 and version set to None , as arguments .
  522	call the self.get method with key and version set to version as arguments , substitute the result for value .
  523	if value is None ,
  524	raise an ValueError exception with string STR0 as argument , substitute STR1 with key converted into a string .
  525	new_value is a sum of value and delta .
  526	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  527	call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments , substitute the result for pickled .
  528	call the self._lock.writer method , with the result perform the following ,
  529	substitute pickled for value under the key key of self._cache dictionary .
  530	return new_value .
  531	define the method has_key with self class instance , key and version defaulting to None as arguments .
  532	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  533	call the method self.validate_key with argument key .
  534	call the self._lock.reader method , with the result perform the following ,
  535	if call to the _has_expired method with argument key evaluates to boolean False ,
  536	return boolean True .
  537	call the self._lock.writer method , with the result perform the following ,
  538	try ,
  539	delete the value under the key key of self._cache dictionary .
  540	delete the value under the key key of self._expire_info dictionary .
  541	if KeyError exception is caught ,
  542	do nothing .
  543	return boolean False .
  544	define the method _has_expired with self and key as arguments .
  545	call the method self._expire_info.get with key and integer -1 as arguments , substitute the result for exp .
  546	if exp is None or exp is greater than the return value of the call to the function time.time ,
  547	return boolean False .
  548	return boolean True .
  549	define the method _cull with argument self .
  550	if self._cull_frequency equals to integer 0 .
  551	call self.clear method .
  552	if not ,
  553	for every i and k in enumerated values of self._cache , if i is divisible by self._cull_frequency , append k to doomed list .
  554	for every k in doomed ,
  555	call the method self._delete with argument k .
  556	define the method _delete with arguments self and key .
  557	try ,
  558	delete the value under the key key of self._cache dictionary .
  559	if KeyError exception is caught ,
  560	do nothing .
  561	try ,
  562	delete the value under the key key of the self._expire_info dictionary .
  563	if KeyError exception is caught ,
  564	do nothing .
  565	define the method delete with self class instance , key and version defaulting to None as arguments .
  566	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  567	call the method self.validate_key with argument key .
  568	call the self._lock.writer method , with the result perform the following ,
  569	call the method self._delete with argument key .
  570	define the method clear with argument self .
  571	call the method self._cache.clear .
  572	call the method self._expire_info.clear .
  573	derive the class CacheClass from the base class LocMemCache .
  574	do nothing .
  575	import module time .
  576	import module pickle .
  577	from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
  578	from django.utils import six into default name space .
  579	from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space .
  580	from django.utils.encoding import force_str into default name space .
  581	from django.utils.functional import cached_property into default name space .
  582	derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class .
  583	renamed methods is a tuple containing 3 elements : STR0 , STR1 and RemovedInDjango19Warning .
  584	derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache .
  585	define the method __init__ with , self , server , params , library , value_not_found_exception as arguments .
  586	call the initialization method with argument params for the base class of the BaseMemcachedCache class .
  587	if server is an instance of six.string_types ,
  588	split server with STR0 as delimiter , substitute the result for self._servers .
  589	if not ,
  590	substitute server for self._servers .
  591	substitute value_not_found_exception for self.LibraryValueNotFoundException .
  592	substitute library for self._lib .
  593	call the params.get function with string STR0 and None as arguments , substitute the result for self._options .
  594	property decorator ,
  595	define the method _cache with argument self .
  596	if self object has an attribute STR0 ,
  597	call the self._lib.Client with argument self._servers , substitute the result for self._client .
  598	return self._client .
  599	define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments .
  600	if timeout equals to DEFAULT_TIMEOUT ,
  601	substitute self.default_timeout for timeout .
  602	if timeout is None ,
  603	return integer 0 .
  604	else if timeout converted into an integer equals to integer 0 ,
  605	timeout is a integer -1 .
  606	if timeout is greater than integer 2592000 ,
  607	convert return value of the function time.time to an integer , increment timeout by it .
  608	convert timeout into an integer , return it .
  609	define the method make_key with self class instance , key and version defaulting to None as arguments .
  610	call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache , use it as an argument for the call to the function force_str , return the result .
  611	define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  612	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  613	call the method self._cache.add with key , value , self.get_backend_timeout ( timeout ) as arguments .
  614	define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
  615	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  616	call the self._cache.get method with argument key , substitute the result for val .
  617	if val is None ,
  618	return default .
  619	return val .
  620	define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
  621	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  622	call the method self._cache.set with key , value , self.get_backend_timeout ( timeout ) as arguments .
  623	define the method delete with self , key and version set to None as arguments .
  624	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  625	call the method self._cache.delete with argument key .
  626	define the method get_many with self class instance , keys and version defaulting to None as arguments .
  627	define the method get_many with 3 arguments , self class instance , keys and version set to None .
  628	call the method self._cache.get_multi with argument new_keys , substitute the result for ret .
  629	if ret is true .
  630	_ is an empty dictionary .
  631	zip together new_keys and keys , convert it to dictionary , assign it to m .
  632	for every k and v in return value of the ret.items function ,
  633	substitute v for value under the k-th element of m key of _ dictionary .
  634	substitute _ for ret .
  635	return ret .
  636	define the method close with self and dictionary pairs of elements kwargs .
  637	call the method self._cache.disconnect_all .
  638	define the method incr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
  639	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  640	if delta is smaller than integer 0 ,
  641	evaluate the method self._cache.decr with key and negative delta as arguments , return the result .
  642	try ,
  643	call the method self._cache.incr with key and delta as arguments , substitute the result for val .
  644	if self.LibraryValueNotFoundException exception is caught ,
  645	val is None .
  646	if val is None ,
  647	raise an ValueError exception with string STR0 as argument , substitute STR1 for key .
  648	return val .
  649	define the method decr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
  650	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  651	if delta is smaller than integer 0 .
  652	evaluate the method self._cache.incr with key and negative delta as arguments , return the result .
  653	try ,
  654	call the method self._cache.decr with key and delta as arguments , substitute the result for val .
  655	if self.LibraryValueNotFoundException exception is caught ,
  656	val is None .
  657	if val is None ,
  658	raise an ValueError exception with string STR0 as argument , substitute STR1 for key .
  659	return val .
  660	define the method set_many with self , data , timeout set to DEFAULT_TIMEOUT and version set to None as arguments .
  661	safe_data is an empty dictionary .
  662	for every key and value in data.items function return value ,
  663	call the method self.make_key with key and version set to version as arguments , substitute the result for key .
  664	substitute value for value under the key key of safe_data dictionary .
  665	call the method self._cache.set_multi with safe_data , self.get_backend_timeout ( timeout ) as arguments .
  666	define the function delete_many with self , keys and version set to None as arguments .
  667	l is lambda function with argument x , that calls the method self.make_key with x and version set to version as arguments .
  668	call the method self_cache.delete_multi with argument list containing keys mapped through function l .
  669	define the method clear with argument self .
  670	call the method self._cache_flush_all .
  671	derive the class MemcachedCache from the BaseMemcachedCache base class .
  672	define the method __init__ with argument self , server and params .
  673	import memcache .
  674	call method __init__ from the base class of the class MemcachedCache with arguments : server , params , library set to memcache and value_not_found_exception set to ValueError .
  675	property decorator ,
  676	define the method _cache with self class instance as an argument .
  677	if attribute STR0 of the self object is None ,
  678	call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments , substitute the result for self._client .
  679	return self._client .
  680	derive the class PyLibMCCache from BaseMemcachedCache base class .
  681	define the method __init__ with self , server and params as arguments .
  682	import pylibmc .
  683	call method __init__ from the base class of the class PyLibMCCache with arguments : server , params , library set to pylibmc and value_not_found_exception set to pylibmc.NotFound .
  684	decorator cached_property ,
  685	define the method _cache with argument self .
  686	call the method self._lib.Client with argument self._servers .
  687	if self._options exists ,
  688	substitute self._options for client.behaviors .
  689	return client .
  690	from __future__ import unicode_literals into default name space .
  691	import module hashlib .
  692	from django.utils.encoding import force_bytes into default name space .
  693	from django.utils.http import urlquote into default name space .
  694	TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string STR0 .
  695	define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments .
  696	if vary_on is None ,
  697	vary_on is an empty tuple .
  698	call the function urlquote with argument var for every var in vary_on , join the results into a string separated by STR0 , substitute it for key .
  699	call the hashlib.md5 fuction with force_bytes ( key ) as argument .
  700	substitute STR0 in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest ( ) , respectively , return the result .
  701	from __future__ import unicode_literals into default name space .
  702	from .messages import CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR and CRITICAL into default name space .
  703	from .registry import register , run_checks , tag_exists and Tags into default name space .
  704	import module django.core.checks.compatibility.django_1_6_0 .
  705	import module django.core.checks.compatibility.django_1_7_0 .
  706	import module django.core.checks.model_checks .
  707	__all__ is a list containing next strings , STR0 , STR1 , STR2 , STR3 , STR4 , STR5 ,
  708	from __future__ import unicode_literals into default name space .
  709	from django.apps import apps into default name space .
  710	from .. import Warning , register and Tags into default name space .
  711	decorator register with argument Tags.compatibility .
  712	define the function check_1_6_compatibility with argument kwargs dictionary .
  713	errors is an empty list
  714	call the function _check_test_runner with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend .
  715	call the function _check_boolean_field_default_value with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend .
  716	return errors .
  717	define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments .
  718	from django.conf import settings into default name space .
  719	weight is an integer 0 .
  720	if call to the settings.is_overridden with string STR0 evaluates to boolean False .
  721	try ,
  722	settings.SITE_ID .
  723	increment weight by integer 2 .
  724	if AttributeError exception is caught ,
  725	do nothing .
  726	try ,
  727	settings.BASE_DIR .
  728	if AttributeError exception is caught ,
  729	increment weight by integer 2 .
  730	call the function settings.is_overridden with argument string STR0 , if it evaluates to boolean True ,
  731	increment weight by integer 2 .
  732	call the function settings.is_overridden with argument string STR0 , if it evaluates to boolean True ,
  733	increment weight by integer 2 .
  734	call the function settings.is_overridden with argument string STR0 , if it evaluates to boolean True ,
  735	increment weight by integer 2 .
  736	if string STR0 is not contained in settings.MIDDLEWARE_CLASSES set ,
  737	increment weight by integer 2 .
  738	if weight is greater or equal to integer 6 ,
  739	call the Warning function with 3 arguments : hint tuple containing one string , Django 1.6 introduced a new default test runner . It looks like this project was generated using Django 1.5 or earlier . You should ensure your tests are all running & behaving as expected . See https : //docs.djangoproject.com/en/dev/releases/1.6/ # new-test-runner for more information . `` , obj set to None and id set to a string STR0 , put the result into a list and return it .
  740	if not ,
  741	return an empty list .
  742	define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments .
  743	from django.db import models into default name space .
  744	append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary , only if app_configs is None ,
  745	or model._meta.app_config is contained in app_configs , for every field in model._meta.local_fields , # ANNOTATION only if field is an instance of models.BooleanField and field.has_default ( ) evaluates to False . call the Warning function with 4 arguments : string STR0 ,
  746	from __future__ import unicode_literals into default name space .
  747	from .. import Warning , register and Tags into default name space .
  748	decorator register with argument Tags.compatibility .
  749	define the function check_1_7_compatibility with argument kwargs dictionary .
  750	errors is an empty list .
  751	call the function _check_middleware_classes with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend .
  752	return errors .
  753	define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments .
  754	from django.conf import settings into default name space .
  755	call the function settings.is_overridden with argument string STR0 , if the result is boolean False ,
  756	call the Warning function with 4 arguments : string STR0 , hint tuple containing one string , STR1 , obj set to None , and id set to a string STR2 , put the result into a list and return it .
  757	if not ,
  758	return an empty list .
  759	from __future__ import unicode_literals into default name space .
  760	from django.utils.encoding import python_2_unicode_compatible and force_st into default name space .
  761	DEBUG is integer 10 .
  762	INFO is integer 20 .
  763	WARNING is integer 30 .
  764	ERROR is integer 40 .
  765	CRITICAL is integer 50 .
  766	decorator python_2_unicode_compatible .
  767	derive class CheckMessage from object base class .
  768	define initialization method __init__ with self class instance , level , msg , hint defaulting to None , obj defaulting to None and if defaulting to None as arguments .
  769	if level is not an integer raise an error with message string STR0 .
  770	substitute level for self.level .
  771	substitute msg for self.msg .
  772	substitute hint for self.hint .
  773	substitute obj for self.obj .
  774	substitute id for self.id .
  775	define private method __eq__ with self class instance and other as arguments .
  776	if for all attr in list of attributes STR0 , STR1 , STR2 , STR3 and STR4 , self and other have the same attribute attr , return boolean True , otherwise return boolean False .
  777	define private method __ne__ with self class instance and other as arguments .
  778	if self equals to other return boolean False , otherwise return True .
  779	define private method __str__ with argument self .
  780	from django.db import models into default name space .
  781	if self.obj is None ,
  782	obj is a string STR0 .
  783	otherwise if self.object is an instance of the models.base.ModelBase class ,
  784	substitute self.obj for model .
  785	substitute model._meta.app_label for app .
  786	convert app and model._meta.object_name to strings , join them with separating STR0 character , substitute it for obj .
  787	if not ,
  788	call the function force_str with argument self.obj , substitute the result for obj .
  789	if self.id exists , convert self.id to a string , surround it with round brackets , substitute id for it , otherwise id is an empty string .
  790	if self.hint exists , replace STR1 in a string STR0 with value of self.hint , substitute it for hint , otherwise hint is an empty string .
  791	replace all STR1 from string STR0 with values of obj , id , self.msg and hint , respectively , return the result .
  792	define private method __repr__ with argument self .
  793	in the string STR0 , replace STR1 with the name of the type of this class instance , replace all the STR2 with self.level , self.msg , self.hint . self.obj and self.id , respectively , return the result .
  794	define the method is_serious with argument self .
  795	return boolean True if self.level is greater than or equals to ERROR , otherwise return boolean False .
  796	define the method is_silence with argument self .
  797	from django.conf import settings into default name space .
  798	if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True , False otherwise .
  799	derive the class Debug from base class CheckMessage .
  800	define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
  801	call the __init__ method with 3 arguments : DEBUG , unpacked list args and unpacked dictionary kwargs from the base class of Debug .
  802	derive the class Info from base class CheckMessage .
  803	define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
  804	call the __init__ method with 3 arguments : INFO , unpacked list args and unpacked dictionary kwargs from the base class of Info .
  805	derive the class Warning from base class CheckMessage .
  806	define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
  807	call the __init__ method with 3 arguments : WARNING , unpacked list args and unpacked dictionary kwargs from the base class of Warning .
  808	derive the class Error from base class CheckMessage .
  809	define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
  810	call the __init__ method with 3 arguments : ERROR , unpacked list args and unpacked dictionary kwargs from the base class of Error .
  811	derive the class Critical from base class CheckMessage .
  812	define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
  813	call the __init__ method with 3 arguments : CRITICAL , unpacked list args and unpacked dictionary kwargs from the base class of Critical .
  814	from __future__ import unicode_literals into default name space .
  815	from itertools import chain into default name space .
  816	import module types .
  817	from django.apps import apps into default name space .
  818	from . import Error , Tags and register into default name space .
  819	decorator register with Tags.models as an argument .
  820	define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments .
  821	call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models , only if app_configs is None ot model._meta.app_config is contained in app_configs , error is a list containing all the previous elements .
  822	chain all errors elements into a list , return it .
  823	decorator register with Tags.models and Tags.signals as arguments .
  824	define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments ,
  825	from django.db import models into default name space .
  826	errors is an empty list .
  827	for name in attributes of models_signals object ,
  828	get models.signals name attribute , store it in obj .
  829	if obj is instance of models.signals.ModelSignal class ,
  830	for every reference and receivers in return value of the call of obj.unresolved_references.items method ,
  831	for every receiver , _ and _ in receivers ,
  832	if receiver is an instance of types.FunctionType type ,
  833	description is a string STR0 replaced by value of receiver.__name__ .
  834	if not ,
  835	description is a string STR0 with STR1 replaced by value of receiver.__class__.__name__ .
  836	call the Error function with 4 arguments , string STR0 with all the STR1 replaced by values of description , name and reference joined into a string delimited by STR2 , respectively , obj set to receiver.__module__ , hint set to None and id set to string STR3 , append the result to errors .
  837	return errors .
  838	from __future__ import unicode_literals into default name space .
  839	from itertools import chain into default name space .
  840	from django.utils.itercompat import is_iterable into default name space .
  841	derive the class Tags with base class object .
  842	admin is a string STR0
  843	compatibility is a string STR0 .
  844	models is a string STR0
  845	signal is a string STR0
  846	derive the class CheckRegistry with object as base class .
  847	define initialization method __init__ with argument self .
  848	self.registered_checks is an empty list .
  849	define the method register with self ans unpacked list tags as arguments .
  850	define the method inner with argument check .
  851	replace tags for check.tags .
  852	if check is not contained in self.registered_checks .
  853	call the method self.registered_checks.append with argument check .
  854	return check .
  855	return inner .
  856	define the method run_checks with self class instance , app_configs defaulting to None , tags defaulting to None as argument .
  857	errors is an empty list .
  858	if tags is not None .
  859	append check to checks list , for every check in self.register_checks , if check has an attribute STR0 and check.tags and tags set intersection is a non empty set .
  860	if not .
  861	substitute self.registered_checks for checks .
  862	for every check in checks ,
  863	call the check function with argument app_config set to app_config , substitute the result for new_errors .
  864	if new_errors is not an iterable object raise an error with error message STR0 , with STR1 replaced by value of check .
  865	call the method errors.extend with argument new_errors .
  866	return errors .
  867	define the method tag_exists with self class instance and tag as arguments .
  868	return boolean True if tag is contained in self.tags_available method return value , return False otherwise .
  869	define the method tags_available with argument self .
  870	append check.tags into a list for every check in self.registered_checks if check has STR0 attribute , put the elements into a set and return it .
  871	call the function CheckRegistry , substitute the result for registry .
  872	substitute registry.register for register .
  873	substitute registry.run_checks for run_checks .
  874	substitute registry.tag_exists for tag_exists .
  875	from __future__ import unicode_literals into default name space .
  876	from django.conf import settings into default name space .
  877	from django.middleware.csrf import get_token into default name space .
  878	from django.utils import six into default name space .
  879	from django.utils.encoding import smart_text into default name space .
  880	from django.utils.functional import lazy into default name space .
  881	define the function csrf with an argument request .
  882	define the function _get_val .
  883	call the function get_token with an argument request , substitute the result for token .
  884	if token is None ,
  885	return string STR0 .
  886	if not ,
  887	call the smart_text function with an argument token , return the result .
  888	call the function lazy with arguments _get_val and six.text_type , substitute the result for _get_val .
  889	return an dictionary containing 1 entry : return value of the function _get_val for STR0 .
  890	define the function debug with an argument request .
  891	context_extras is an empty dictionary .
  892	if settings.DEBUG is true and value of the request.META dictionary under the STR0 key is contained in settings.INTERNAL_IPS ,
  893	value under the STR0 key of the context_extras dictionary is boolean True .
  894	from django.db import connection into default name space .
  895	substitute connection.queries for value under the STR0 key of the context_extras dictionary .
  896	return context_extras .
  897	define the function i18n with an argument request .
  898	from django.utils import translation into default name space .
  899	context_extras is an empty dictionary .
  900	substitute settings.LANGUAGES for the value under the STR0 key of the context_extras dictionary .
  901	call the translation.get_language function , substitute the result for the value under the STR0 key of the context_extras dictionary .
  902	call the translation.get_language_bidi function , substitute the result for the value under the STR0 key of the context_extras dictionary .
  903	return context_extras .
  904	define the function tz with an argument request .
  905	from django.utils import timezone into default name space .
  906	return an dictionary containing 1 entry : return value of the function timezone.get_current_timezone_name for STR0 .
  907	define the function static with an argument request .
  908	return an dictionary containing 1 entry : settings.STATIC_URL for STR0 .
  909	define the function media with an argument request .
  910	return an dictionary containing 1 entry : settings.MEDIA_URL for STR0 .
  911	define the function request with an argument request .
  912	return an dictionary containing 1 entry : request for STR0 .
  913	from functools import reduce into default name space .
  914	import module operator .
  915	from django.utils import six into default name space .
  916	from django.utils.encoding import force_text into default name space .
  917	derive the class DjangoRuntimeWarning from the RuntimeWarning base class .
  918	do nothing .
  919	derive the class AppRegistryNotReady from the Exception base class .
  920	do nothing .
  921	derive the class ObjectDoesNotExist from the Exception base class .
  922	silent_variable_failure is an boolean True .
  923	derive the class MultipleObjectsReturned from the Exception base class .
  924	do nothing .
  925	derive the class SuspiciousOperation from the Exception base class .
  926	derive the class SuspiciousMultipartForm from the SuspiciousOperation base class .
  927	do nothing .
  928	derive the class SuspiciousFileOperation from the SuspiciousOperation base class .
  929	do nothing .
  930	derive the class DisallowedHost from the SuspiciousOperation base class .
  931	do nothing .
  932	derive the class DisallowedRedirect from the SuspiciousOperation base class .
  933	do nothing .
  934	derive the class PermissionDenied from the Exception base class .
  935	do nothing .
  936	derive the class ViewDoesNotExist from the Exception base class .
  937	do nothing .
  938	derive the class MiddlewareNotUsed from the Exception base class .
  939	do nothing .
  940	derive the class ImproperlyConfigured from the Exception base class .
  941	do nothing .
  942	derive the class FieldError from the Exception base class .
  943	do nothing .
  944	NON_FIELD_ERRORS is an string STR0 .
  945	derive the class ValidationError from the Exception base class .
  946	define the method __init__ with 4 arguments : self , message , code set to None and params set to None .
  947	call the __init__ method from the base class of the class ValidationError with arguments message , code and params .
  948	if message is an instance of ValidationError class ,
  949	if message has an STR0 attribute ,
  950	substitute message.error_dict for message .
  951	alternatively , if six.PY3 is true check if message does not have an attribute STR0 , if six.PY3 is false , check if message doesnt have an attribute STR1 , perform the following ,
  952	substitute message.error_list for message .
  953	if not ,
  954	substitute message.message , message.code , message.params for message , code and params , respectively .
  955	if message is an instance of dict type ,
  956	self.error_dict is an empty dictionary .
  957	for every field , messages in return value of the message.items method ,
  958	if messages is not an instance of the ValidationError class ,
  959	messages is an instance of the ValidationError class created with an argument messages .
  960	substitute messages.error_list for the value under the field key of the self.error_dict dictionary .
  961	otherwise if message is an instance of the list type .
  962	self.error_list is an empty list .
  963	for every message is message ,
  964	if message is not an instance of the ValidationError class ,
  965	message is an instance of the ValidationError class created with an argument message .
  966	extend the self.error_list list with message.error_list .
  967	if not ,
  968	substitute message for self.message .
  969	substitute code for self.code .
  970	substitute params for self.params .
  971	substitute list containing element self for self.error_list .
  972	property getter decorator ,
  973	define the method message_dict with an argument self .
  974	get attribute STR0 from the self object .
  975	convert object self to a dictionary , return it .
  976	property getter decorator ,
  977	define the messages with an argument self .
  978	if self has an STR0 attribute ,
  979	call the operator.add on the values of the self object converted into a dictionary , until it is reduced to a single value , return it .
  980	convert self to a list and return it .
  981	define the method update_error_dict with arguments self and error_dict .
  982	if self has an STR0 attribute ,
  983	for every field , error_list in self.error_dict.items method return value ,
  984	call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments : field and an empty list .
  985	if not ,
  986	call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments : NON_FIELD_ERRORS and an empty list .
  987	return error_dict .
  988	define the method __iter__ with an argument self .
  989	if self has an STR0 attribute ,
  990	for every field , errors in self.error_dict.items method return value ,
  991	yield field and ValidationError object converted to an list , created with an argument errors .
  992	if not ,
  993	for every error in self.error_list ,
  994	substitute error.message for message .
  995	if error.params is true ,
  996	divide message by error.params , substitute the residue of the division for message .
  997	call the force_text with an argument message , yield the result .
  998	define the method __str__ with an argument self .
  999	if self has an attribute STR0 ,
 1000	return the printable representation of the self object converted to a dictionary .
 1001	return the printable representation of the self object converted to a list .
 1002	define the method __repr__ with an argument self .
 1003	return the string STR0 , replace STR1 with self .
 1004	from django.core.files.base import File into default name space .
 1005	__all__ is an list containing a string STR0 .
 1006	from __future__ import unicode_literals into default name space .
 1007	import module os .
 1008	from io import BytesIO , StringIO and UnsupportedOperation into default name space .
 1009	from django.utils.encoding import smart_text into default name space .
 1010	from django.core.files.utils import FileProxyMixin into default name space .
 1011	from django.utils import six into default name space .
 1012	from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space .
 1013	decorator python_2_unicode_compatible ,
 1014	derive the class File from the FileProxyMixin base class .
 1015	bring integer 2 to the power of 10 , multiply it by 64 , substitute the result for DEFAULT_CHUNK_SIZE .
 1016	define the method __init__ with self class instance , file , and name defaulting to None as arguments .
 1017	substitute file for self.file .
 1018	if name is None ,
 1019	get STR0 attribute from the file object , if it doesnt exists use None , substitute it for name .
 1020	substitute name for self.name .
 1021	if file object has an attribute STR0 ,
 1022	substitute file.mode for self.mode .
 1023	define the method __str__ with argument self .
 1024	evaluate the function smart_text with argument self.name , if exists , or an empty string , if not , return the result .
 1025	define the method __repr__ with argument self .
 1026	substitute STR0 in string STR1 with self.__class__.__name__ and self , if exists , or string STR2 if it doesnt , return it .
 1027	define the method __bool__ with argument self .
 1028	convert self.name into an boolean , return it .
 1029	define the method __nonzero__ with argument self .
 1030	call the __bool__ method with argument self , on the return value of the type function with argument self , return the result .
 1031	define the method __len__ with argument self .
 1032	return self.size .
 1033	define the method _get_size_from_underlying_file with argument self .
 1034	if self.file has an attribute STR0 ,
 1035	return self.file.size .
 1036	if self.file has an attribute STR0 ,
 1037	try ,
 1038	call the os.path.getsize function with argument self.file.name , return the result .
 1039	if OSError or TypeError errors occurred .
 1040	do nothing .
 1041	if self.file has an attribute STR0 and an attribute STR1 ,
 1042	get the position of the self.file file pointer , substitute it for pos .
 1043	position the file self.file pointer at the end .
 1044	get the position of the file self.file pointer , substitute it for size .
 1045	position file self.file pointer at the pos position .
 1046	return size .
 1047	raise an AttributeError exception with string STR0 as argument .
 1048	define the method _get_size with argument self .
 1049	if self has an attribute STR0 .
 1050	return self._size .
 1051	call the method self._get_size_from_underlying_file , substitute the result for self._size .
 1052	return self._size .
 1053	define the method _set_size with arguments self and size .
 1054	substitute size for self._size .
 1055	size is a property object with _get_size as getter method and _set_size as setter method .
 1056	define the method _get_closed with argument self .
 1057	if self.file is false or self.file.closed is true , return boolean true , otherwise return boolean false .
 1058	closed is a property object with _get_closed as a getter method .
 1059	define the method chunks with arguments self and chunk_size defaulting to None .
 1060	if chunk_size is false ,
 1061	substitute the self.DEFAULT_CHUNK_SIZE for chunk_size .
 1062	try ,
 1063	position the file pointer at the beginning of self file .
 1064	if AttributeError or UnsupportedOperation exception occurred .
 1065	do nothing .
 1066	endless loop ,
 1067	call the self.read method with argument chunk_size , substitute the result for data .
 1068	if data is false ,
 1069	break from the smallest enclosing loop .
 1070	yield one element of data iterable .
 1071	define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None .
 1072	if chunk_size is false ,
 1073	substitute self.DEFAULT_CHUNK_SIZE for chunk_size .
 1074	if self.size is greater than chunk_size , return boolean True , otherwise return boolean False .
 1075	define the method __iter__ with argument self .
 1076	buffer_ is None .
 1077	for every chunk in return value of the method self.chunks ,
 1078	evaluate the function BytesIO with argument chunk , substitute it for chunk_buffer .
 1079	for every line in chunk_buffer ,
 1080	if buffer_ is true ,
 1081	increment line by buffer_ .
 1082	buffer_ is None .
 1083	if last element of line is newline or carriage return character ,
 1084	yield one element of line iterable .
 1085	if not ,
 1086	substitute line for buffer_ .
 1087	if buffer_ is not None ,
 1088	yield one element from the buffer_ iterable .
 1089	define the method __enter__ with argument self .
 1090	return self .
 1091	define the method __exit__ with self , exc_type , exc_value and tb as arguments .
 1092	close the file self .
 1093	define the method open with arguments self and mode defaulting to None .
 1094	if file self is not closed ,
 1095	position the file pointer at the beginning of self file .
 1096	otherwise if self.name exists and self.name file path exists ,
 1097	open the file self.name in mode or self.mode mode , whichever exists , assign the file handler to self.file .
 1098	if not ,
 1099	raise an ValueError exception with string STR0 as an argument .
 1100	define the method close with argument self .
 1101	call the method self.file.close .
 1102	decorator python_2_unicode_compatible ,
 1103	derive the class ContentFile from File base class .
 1104	define the method __init__ with arguments self , content and name defaulting to None .
 1105	if six.PY3 is boolean True ,
 1106	substitute StringIO for stream_class if content is an instance of six.text_type , otherwise substitute BytesIO for stream_class .
 1107	if not ,
 1108	substitute BytesIO for stream_class .
 1109	call the function force_bytes with argument content , substitute it for content .
 1110	call the __init__ method with stream_class ( content ) and name set to name arguments , from the base class of the ContentFile class .
 1111	substitute length of content for self.size .
 1112	define the method __str__ with argument self .
 1113	return a string STR0 .
 1114	define the method __bool__ with argument self .
 1115	return boolean True .
 1116	define the method __nonzero__ with argument self .
 1117	evaluate the method type ( self ) .__bool__ with argument self , return the result .
 1118	define the method open with arguments self and mode set to None .
 1119	call the self.seek method with argument integer 0 .
 1120	define the method close with argument self .
 1121	do nothing .
 1122	import module zlib .
 1123	from django.core.files import File into default name space .
 1124	derive class ImageFile from the base class File .
 1125	define method _get_width with self class instance as the argument .
 1126	return the first element of the return value of the call to the self._det_image_dimensions method .
 1127	get property attribute _get_width , and substitute it for width .
 1128	define method _get_height with self class instance as the argument .
 1129	return the second element of the return value of the call to the self._det_image_dimensions method .
 1130	get property attribute _get_height , and substitute it for width .
 1131	define the method _get_image_dimensions with self class instance as the argument .
 1132	if self does not have an attribute named STR0 .
 1133	substitute self.closed for close .
 1134	call the method self.open ( )
 1135	evaluate the method get_image_dimensions with self class instance and close set to close as the arguments , substitute the result for self._dimensions_cache .
 1136	return self._dimensions_cache .
 1137	define the function get_image_dimension with file_or_path and close set to boolean False as the arguments .
 1138	from PIL module import ImageFile as PillowImageFile .
 1139	p is image parser object , set by calling the PillowImageFile.Parser method .
 1140	if file_or_path has an attribute STR0 ,
 1141	substitute file_or_path for file .
 1142	get the position in bytes from the start of the file , store it in file_pos .
 1143	set the file position pointer at the beginning .
 1144	if not ,
 1145	open file named file_or_path for reading , store the file object handle in file .
 1146	close is boolean True .
 1147	try ,
 1148	chunk_size is an integer 1024 .
 1149	endless while loop ,
 1150	read chunk_size bytes from file and store it in data .
 1151	if data is empty .
 1152	break from the endless loop .
 1153	try ,
 1154	feed data to the parser p .
 1155	if zlib.error as e exception is raised ,
 1156	if e.args list first element starts with string STR0 ,
 1157	do nothig .
 1158	if not ,
 1159	raise an exception .
 1160	if p.image is not empty ,
 1161	return size of the image that was fed to the parser p .
 1162	double the chunk size .
 1163	return None .
 1164	execute regardless of the exception being raised ,
 1165	if close is True ,
 1166	close file file .
 1167	if not ,
 1168	set the file position pointer at file_pos .
 1169	import module os .
 1170	__all__ is a tuple containing strings : STR0 , STR1 , STR2 , STR3 and STR4 .
 1171	define the _fd function with argument f .
 1172	return result of the f.fileno method if f has an STR0 attribute , otherwise return f .
 1173	if os.name equals to STR0 ,
 1174	import msvcrt .
 1175	from ctypes import sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll and byref into default name space .
 1176	from ctypes.wintypes import BOOL , DWORD and HANDLE into default name space .
 1177	LOCK_SH is a integer 0 .
 1178	LOCK_NB is a hexadecimal 1 .
 1179	LOCK_EX is a hexadecimal 2 .
 1180	if size of c_ulong does not equals to size of c_void_p ,
 1181	substitute c_int64 for ULONG_PTR .
 1182	if not ,
 1183	substitute c_ulong for ULONG_PTR .
 1184	substitute c_void_p for PVOID .
 1185	derive the class _OFFSET from the Structure base class .
 1186	_fields_ is a list containing 2 tuples : first tuple contains : string STR0 and DWORD , second contains : string STR1 and DWORD .
 1187	derive the class _OFFSET_UNION from the Union base class .
 1188	_anonymous_ is a list containing one string : STR0 .
 1189	_fields_ is a list containing 2 tuples : first tuple contains : string STR0 and _OFFSET , second contains : string STR1 and PVOID .
 1190	derive the class OVERLAPPED from the Structure base class .
 1191	_anonymous_ is a list containing one string : STR0 .
 1192	_fields_ is a list containing 4 tuples : first tuple contains : string STR0 and ULONG_PTR , second contains : string STR1_offset_union STR2hEvent ' and HANDLE .
 1193	call the function POINTER with argument OVERLAPPED , substitute the result for LPOVERLAPPED .
 1194	substitute windll.kernel32.LockFileEx for LockFileEx .
 1195	substitute BOOL for LockFileEx.restype .
 1196	LockFileEx.argtypes is a list containing 6 elements : HANDLE , DWORD , DWORD , DWORD , DWORD and LPOVERLAPPED .
 1197	substitute windll.kernel32.UnlockFileEx for UnlockFileEx .
 1198	substitute BOOL for UnlockFileEx.restype .
 1199	UnlockFileEx.argtypes is a list containing 5 elements : HANDLE , DWORD , DWORD , DWORD and LPOVERLAPPED .
 1200	define the function lock with arguments f and flags .
 1201	call the function msvcrt.get_osfhandle with return value of the _fd ( f ) function as argument , substitute the result for hfile .
 1202	call the OVERLAPPED function , substitute the result for overlapped .
 1203	call the LockFileEx function with 6 arguments : hfile , flags , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
 1204	convert ret to a boolean , return it .
 1205	define the function unlock with argument f .
 1206	call the function msvcrt.get_osfhandle with return value of the _fd ( f ) function as argument , substitute the result for hfile .
 1207	call the OVERLAPPED function , substitute the result for overlapped .
 1208	call the LockFileEx function with 5 arguments : hfile , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
 1209	convert ret to a boolean , return it .
 1210	if not ,
 1211	try ,
 1212	import fcntl .
 1213	substitute fcntl.LOCK_SH for LOCK_SH .
 1214	substitute fcntl.LOCK_NB for LOCK_NB .
 1215	substitute fcntl.LOCK_EX for LOCK_EX .
 1216	if ImportError or AttributeError exception occurred ,
 1217	LOCK_EX , LOCK_SH and LOCK_NB are all equal to integer 0 .
 1218	define the function lock with arguments f and flags .
 1219	return boolean False .
 1220	define the function unlock with argument f .
 1221	return boolean True .
 1222	if not ,
 1223	define the function lock with arguments f and flags .
 1224	call the function fcntl.flock with return value of the _fd ( f ) function and flags as arguments , substitute the result for ret .
 1225	if ret equals to integer 0 , return boolean True , otherwise return boolean False .
 1226	define the function unlock with argument f .
 1227	all the function fcntl.flock with return value of the _fd ( f ) function and fcntl.LOCK_UN as arguments , substitute the result for ret .
 1228	if ret equals to integer 0 , return boolean True , otherwise return boolean False .
 1229	import module os .
 1230	from django.core.files import locks into default name space .
 1231	try ,
 1232	from shutil import copystat into default name space .
 1233	if ImportError exception occurred ,
 1234	import stat .
 1235	define the function copystat with arguments src and dst .
 1236	call the os.stat function with argument src , substitute the result for st .
 1237	call the function stat.S_IMODE with argument st.st_mode , substitute the result for mode .
 1238	if os has an attribute STR0 ,
 1239	call the os.utime function with arguments dst and tuple containing 2 elements : st.st_atime and st.st_mtime .
 1240	if os has an attribute STR0 ,
 1241	call the function os.chmod with arguments dst and mode .
 1242	__all__ is a list containing a string STR0 .
 1243	define the function _samefile with arguments src and dst .
 1244	if os.path has an attribute STR0 ,
 1245	try ,
 1246	call the os.path.samefile with arguments src and dst , return the result .
 1247	if exception OSError occurred ,
 1248	return boolean False .
 1249	if file path of src and dst files are the same , return boolean True , otherwise return boolean False .
 1250	define the function file_move_safe with 4 arguments : old_file_name , new_file_name , chunk_size set to multiple of integers 1024 and 64 ,
 1251	if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True ,
 1252	return nothing .
 1253	try ,
 1254	if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True ,
 1255	raise an IOError exception with string STR0 as argument , where STR1 is replaced by new_file_name .
 1256	call the os.rename function with arguments old_file_name and new_file_name .
 1257	return nothing .
 1258	if OSError exception is caught ,
 1259	do nothing .
 1260	open file old_file_name in read bytes mode , with file descriptor as f ,
 1261	evaluate the binary expression with 4 operands : os.O_WRONLY , binary or os.O_CREATE , binary or STR0 attribute of object os , binary or os.O_EXCL if allow_overwrite is boolean False , use the previous as the mode to open new_file_name file , assign the file descriptor to fd .
 1262	try ,
 1263	call the function locks.lock with arguments fd and locks.LOCK_EX .
 1264	current_chunk is None .
 1265	as long as current_chunk is not an empty string ,
 1266	read chunk_size bytes from the old_file file , substitute the result for current_chunk .
 1267	write current_chunk to file fd .
 1268	finally perform ,
 1269	call the function locks.unlock with fd as argument .
 1270	close the file fd .
 1271	call the function copystat with old_file_name and new_file_name as arguments .
 1272	tr ,
 1273	remove the old_file_name file .
 1274	if OSError , renamed to e , is caught ,
 1275	if attribute STR0 of object e is not equal to integer 32 and if STR1 attribute is not equal to integer 13 ,
 1276	raise an exception .
 1277	import module os .
 1278	import module errno .
 1279	import module itertools .
 1280	from datetime import datetime into default name space .
 1281	from django.conf import settings into default name space .
 1282	from django.core.exceptions import SuspiciousFileOperation into default name space .
 1283	from django.core.files import locks and File into default name space .
 1284	from django.core.files.move import file_move_safe into default name space .
 1285	from django.utils.encoding import force_text and filepath_to_uri into default name space .
 1286	from django.utils.functional import LazyObject into default name space .
 1287	from django.utils.module_loading import import_string into default name space .
 1288	from django.utils.six.moves.urllib.parse import urljoin into default name space .
 1289	from django.utils.text import get_valid_filename into default name space .
 1290	from django.utils._os import safe_join and abspathu into default name space .
 1291	from django.utils.deconstruct import deconstructible into default name space .
 1292	__all__ is a tuple containing strings : STR0 , STR1 , STR2 and STR3 .
 1293	derive the class Storage from the object base class .
 1294	define the method open with arguments self , name and mode defaulting to string STR0 .
 1295	call the self._open method with name and mode arguments , return the result .
 1296	define the method save with arguments self , name and content .
 1297	if name is None ,
 1298	substitute content.name for name .
 1299	if content has an STR0 attribute ,
 1300	content is a File object instance created with content argument .
 1301	call the method self.get_available_name with argument name , substitute it for name .
 1302	call the method self._save with arguments name and content , substitute it for name .
 1303	replace all the strings STRspecial with STR0 in the string name , use it as an argument for the call to the force_text function , return the result .
 1304	define the method det_valid_name with arguments self and name .
 1305	call the get_valid_filename with argument name , return the result .
 1306	define the method get_available_name with arguments self and name .
 1307	call the os.path.split with argument name , assign the result to the dir_name and file_name respectively .
 1308	call the os.path.splitext with argument file_name , assign the result to the file_root and file_ext respectively .
 1309	call the itertools.count function with argument integer 1 , substitute the result for count .
 1310	as long as self.exists function with argument name evaluates to boolean True ,
 1311	substitute STR1 in string STR0 with : file_root , next ( count ) and file_ext , join the dir_name and previous string into a valid file path , substitute it for name .
 1312	return name .
 1313	define the method path with arguments self and name .
 1314	raise an NotImplementedError exception with argument string STR0 .
 1315	define the method delete with arguments self and name .
 1316	raise an NotImplementedError exception with argument string STR0 .
 1317	define the method exists with arguments self and name .
 1318	raise an NotImplementedError exception with argument string STR0 .
 1319	define the method listdir with arguments self and path .
 1320	raise an NotImplementedError exception with argument string STR0 .
 1321	define the method size with arguments self and name .
 1322	raise an NotImplementedError exception with argument string STR0 .
 1323	define the method url with arguments self and name .
 1324	raise an NotImplementedError exception with argument string STR0 .
 1325	define the method accessed_time with arguments self and name .
 1326	raise an NotImplementedError exception with argument string STR0 .
 1327	define the method created_time with arguments self and name .
 1328	raise an NotImplementedError exception with argument string STR0 .
 1329	define the method modified_time with arguments self and name .
 1330	raise an NotImplementedError exception with argument string STR0 .
 1331	decorator deconstructible ,
 1332	derive the class FileSystemStorage from the Storage base class .
 1333	define the method __init__ with 5 arguments : self , location set to None , base_url set to None , file_permissions_mode set to None , and directory_permissions_mode set to None .
 1334	if location is None ,
 1335	substitute the settings.MEDIA_ROOT for location .
 1336	substitute the location for self.base_location .
 1337	substitute the return value of the function abspathu with self.base_location as argument for self.location .
 1338	if base_url is None ,
 1339	substitute settings.MEDIA_URL for base_url .
 1340	otherwise if base_url does not ends with STR0 character ,
 1341	append character STR0 to the base_url .
 1342	substitute base_url for self.base_url .
 1343	self.file_permissions_mode is a tuple containing : file_permissions_mode if file_permissions_mode is not None , or settings.FILE_UPLOAD_PERMISSIONS if it is .
 1344	self.directory_permissions_mode is a tuple containing : directory_permissions_mode if directory_permissions_mode is not None , or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is .
 1345	define the method _open with arguments self , name and mode defaulting to string STR0 .
 1346	call the function self.path with argument name , use it and mode as arguments for the call to the function open , use it as an argument for creatinon of a File object instance , return it .
 1347	define the method _save with arguments self , name and content .
 1348	substitute result of the self.path function with argument name for full_path .
 1349	call the function os.path.dirname with argument full_path , substitute the result for directory .
 1350	if call to the function os.path.exists with argument directory evaluates to boolean False ,
 1351	try ,
 1352	if self.directory_permissions_mode is not None ,
 1353	call the os.umask function with argument integer 0 , substitute the result for old_umask .
 1354	try ,
 1355	call the os.makedirs function with directory and self.directory_permissions_mode as arguments .
 1356	finally perform ,
 1357	call the os.umask function with argument old_umask .
 1358	if not ,
 1359	call the function os.makedirs with argument directory .
 1360	if exception OSError , renamed to e , occurred ,
 1361	if e.errno is not equal to errno.EEXIST ,
 1362	raise an exception .
 1363	if directory is not an directory ,
 1364	raise an IOError exception with argument string STR0 , where STR1 is replaced by directory .
 1365	endless loop ,
 1366	try ,
 1367	if content has an attribute STR0 ,
 1368	call the function file_move_safe with content.temporary_file_path function result and full_path .
 1369	if not ,
 1370	evaluate binary expression with 4 operands : os.O_WRONLY , binary or os.O_CREAT , binary or os.O_EXCL , binary or STR0 attribute of the os object , or integer 0 if it doesnt exists .
 1371	call the os.open function with full_path , flags and octal number 666 as arguments , substitute the result for fd .
 1372	_file is None .
 1373	try ,
 1374	call the function locks.lock with fd and locks.LOCK_EX as arguments .
 1375	for every chunk in content.chunks function return value ,
 1376	if _file is None ,
 1377	mode is a string STR0 is chunk is instance of the type bytes , otherwise mode is a string STR1 .
 1378	call the function os.fdopen with arguments fd and mode , substitute it for _file .
 1379	write the chunk to the file _file .
 1380	finally perform ,
 1381	call the function locks.unlock with argument fd .
 1382	if _file is not None ,
 1383	close the _file file .
 1384	if not ,
 1385	close fd file .
 1386	if OSError , renamed to e , is caught ,
 1387	if e.errno equals to errno.EEXIST ,
 1388	call the method self.get_available_name with argument name , substitute the result for name .
 1389	call the method self.path with argument name , substitute the result for full_path .
 1390	if not ,
 1391	raise an exception .
 1392	if not ,
 1393	break from the smallest enclosing loop .
 1394	if self.file_permissions_mode is not None ,
 1395	call the function os.chmod with arguments full_path and self.file_permissions_mode .
 1396	return name .
 1397	define the method delete with arguments self and name .
 1398	if name is boolean False raise an assert error with message string STR0 .
 1399	call the self.path with argument name , substitute it for name .
 1400	if os.path.exists function with argument name , evaluates to boolean True ,
 1401	try ,
 1402	call the os.remove function with argument name .
 1403	if OSError , renamed to e , is caught ,
 1404	if e.errno equals to errno.EEXIST ,
 1405	raise an exception .
 1406	define the method exists with arguments self and name .
 1407	call the self.path function with argument name , use the result as the argument for the call to the os.path.exists function , return the result .
 1408	define the method listdir with arguments self and path .
 1409	call the self.path function with argument path , substitute it for path .
 1410	directories , files are empty lists .
 1411	for every entry in os.listdir function return value called with the argument path ,
 1412	join path and entry into a file path , if it exists ,
 1413	append entry to the directories list .
 1414	if not ,
 1415	append entry to files list .
 1416	return directories and files .
 1417	define the method path with arguments self and name .
 1418	try ,
 1419	call the safe_join function with arguments self.location and name , substitute it for path .
 1420	if ValueError exception is caught ,
 1421	raise an SuspiciousFileOperation exception with string STR0 as argument , replace STR1 with name .
 1422	call the os.path.normpath with argument path , return the result .
 1423	define the method size with arguments self and name .
 1424	call the self.path with argument name , use the result as an argument for the call to the os.path.getsize function , return the result .
 1425	define the method url with arguments self and name .
 1426	if self.base_url is None ,
 1427	raise an ValueError with string STR0 as argument .
 1428	call the urljoin function with arguments : self.base_url and result of the call to the function filepath_to_uri with argument name , return the result .
 1429	define the method accessed_time with arguments self and name .
 1430	call the function self.path with argument name , use the result as an argument for the call to the function os.path.getatime , use the result as an argument for the call to the function datetime.fromtimestamp , return the result .
 1431	define the method created_time with arguments self and name .
 1432	call the function self.path with argument name , use the result as an argument for the call to the function os.path.getctime , use the result as an argument for the call to the function datetime.fromtimestamp , return the result .
 1433	define the method modified_time with arguments self and name .
 1434	call the function self.path with argument name , use the result as an argument for the call to the function os.path.getmtime , use the result as an argument for the call to the function datetime.fromtimestamp , return the result .
 1435	define the function get_storage_class with argument import_path=None defaulting to None .
 1436	call the import_string with argument : import_path if exists or settings.DEFAULT_FILE_STORAGE , if not , return the result .
 1437	derive the class DefaultStorage from the LazyObject base class .
 1438	define the _setup method with argument self .
 1439	call the function that is the return value of get_storage_class method , substitute the result for self._wrapped .
 1440	call the DefaultStorage method , substitute the result for default_storage .
 1441	import module os .
 1442	import module tempfile .
 1443	from django.core.files.utils import FileProxyMixin into default name space .
 1444	__all__ is a tuple , containing strings STR0 and STR1 .
 1445	if module os field name equals to string STR0 ,
 1446	derive class TemporaryFile from the base class FileProxyMixin .
 1447	define method __init__ with self class instance , mode string STR0 , bufsize set to integer -1 , suffix and prefix set to empty strig , dir set to None as the arguments .
 1448	call the method tmpfile.mkstemp with suffix set to suffix , prefix set to prefix and dir set to dir , store the result in the fd and name , respective .
 1449	substitute name for self.name .
 1450	call the os.fdopen function with fd , mode and bufsize as the arguments , assign the file handle object to self.file .
 1451	substitute False for self.close_called .
 1452	substitute os.unlink for unlink .
 1453	define the method close with self class instance as the argument .
 1454	if self.close_called is False ,
 1455	substitute True for self.close_called .
 1456	try ,
 1457	close the file object .
 1458	if OSError or IOError exceptions were raised ,
 1459	do nothing .
 1460	try ,
 1461	call the method unlink on self with self.name as the argument .
 1462	if OSError exception was raised ,
 1463	do nothing .
 1464	property decorator , to be called by property built-in function .
 1465	define the method closed with self as the argument .
 1466	return self.file.closed .
 1467	define __del__ method with self as the argument .
 1468	call the method close on self .
 1469	define __enter__ method with self as the argument .
 1470	call the file.__enter__ method on self .
 1471	return self .
 1472	define method __exit__ with self , exc , value and tb as the arguments .
 1473	call the file.__exit__ method on self with exc , value and tb as the arguments .
 1474	substitute TemporaryFile for NamedTemporaryFile .
 1475	if not ,
 1476	substitute tempfile.NamedTemporaryFile for NamedTemporaryFile .
 1477	substitute tempfile.gettempdir for gettempdir .
 1478	import module errno .
 1479	import module os .
 1480	from io import BytesIO into default name space .
 1481	from django.conf import settings into default name space .
 1482	from django.core.files.base import File into default name space .
 1483	from django.core.files import temp as tempfile into default name space .
 1484	from django.utils.encoding import force_str into default name space .
 1485	__all__ is a tuple containing strings : STR0 , STR1 , STR2 and STR3 .
 1486	derive the UploadedFile class from the File base class .
 1487	bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for DEFAULT_CHUNK_SIZE .
 1488	define the method __init__ with 7 arguments : self , file set to None , name set to None , content_type set to None , size set to None , charset set to None and content_type_extra set to None .
 1489	call the __init__ method with arguments file and name , from the base class of the UploadedFile class .
 1490	substitute size for self.size .
 1491	substitute content_type for self.content_type .
 1492	substitute charset for self.charset .
 1493	substitute content_type_extra for self.content_type_extra .
 1494	define the method __repr__ with argument self .
 1495	substitute STR1 from string STR0 with self.__class__.__name__ , self.name and self.content_type , respectively , use it as an argument for the call to the function force_str , return the result .
 1496	define the method _get_name with argument self .
 1497	return self._name .
 1498	define the method _set_name with arguments self and name .
 1499	if name is not None ,
 1500	call the function os.path.basename with argument name , substitute the result for name .
 1501	if length of name is greater than integer 255 ,
 1502	call the os.path.splitex with argument name , assign the result to name and ext , respectively .
 1503	substitute the first 255 elements of ext for ext .
 1504	subtract length of the ext from the integer 255 , take first elements of the name list up to the previous result index , append ext to the end of it , substitute the resulting list for name .
 1505	substitute name for self._name .
 1506	name is a property object with _get_name as a getter method and _set_name as a setter method .
 1507	derive the TemporaryUploadedFile class from the UploadedFile base class .
 1508	define the __init__ method with 6 arguments : self , name , content_type , size , charset and content_type_extra set to None .
 1509	if settings.FILE_UPLOAD_TEMP_DIR is true ,
 1510	call the method tempfile.NamedTemporaryFile with arguments : suffix set to string STR0 and dir set to settings.FILE_UPLOAD_TEMP_DIR .
 1511	if not ,
 1512	call the method tempfile.NamedTemporaryFile with argument suffix set to string STR0 .
 1513	call the method __init__ from the base class of the TemporaryUploadedFile class with arguments : file , name , content_type , size , charset and content_type_extra .
 1514	define the method temporary_file_path with argument self .
 1515	return self.file.name .
 1516	define the method close with argument self .
 1517	try ,
 1518	call the self.file.close method , return the result .
 1519	if OSError , renamed to e , exception is caught ,
 1520	if e.errno is not equal to errno.ENOENT ,
 1521	raise an exception .
 1522	derive the InMemoryUploadedFile class from the UploadedFile base class .
 1523	define the method __init__ with 8 arguments : self , file , field_name , name , content_type , size , charset and content_type_extra set to None .
 1524	call the method __init__ from the base class of the InMemoryUploadedFile base class , with 6 arguments : file , name , content_type , size , charset , content_type_extra .
 1525	substitute field_name for self.field_name .
 1526	define the method open with arguments self and mode set to None .
 1527	set the file pointer at the beginning of the self.file file .
 1528	define the method chunks with arguments self ad chunk_size set to None .
 1529	set the file pointer at the beginning of the self.file file .
 1530	read the whole self file and yield it as a generator return value .
 1531	define the method multiple_chunks with arguments self and hunk_size set to None .
 1532	return boolean False .
 1533	derive the SimpleUploadedFile class from the InMemoryUploadedFile base class .
 1534	define the method __init__ with 4 arguments : self , name , content and content_type defaulting to a string STR0 .
 1535	if content is empty , substitute it for an empty string .
 1536	call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments : BytesIO ( content ) , None , name , content_type , length of content , None and None .
 1537	decorator classmethod .
 1538	define the method from_dict with argument cls and file_dict .
 1539	call the method cls with 3 arguments : value under the STR0 key of file_dict , value under the STR1 key of file_dict ,
 1540	from __future__ import unicode_literals into default name space .
 1541	from io import BytesIO into default name space .
 1542	from django.conf import settings into default name space .
 1543	from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space .
 1544	from django.utils.encoding import python_2_unicode_compatible into default name space .
 1545	from django.utils.module_loading import import_string into default name space .
 1546	__all__ is a string containing strings : STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 and STR7 .
 1547	derive the class UploadFileException from the Exception base class .
 1548	do nothing .
 1549	decorator python_2_unicode_compatible ,
 1550	derive the class StopUpload from the UploadFileException base class .
 1551	define the method __init__ with arguments self and connection_reset defaulting to boolean False .
 1552	substitute connection_reset for self.connection_reset .
 1553	define the method __str__ with argument self .
 1554	if self.connection_reset is true ,
 1555	return string STR0 .
 1556	if not ,
 1557	return string STR0 .
 1558	derive the class SkipFile from the UploadFileException base class .
 1559	do nothing .
 1560	derive the class StopFutureHandlers from the UploadFileException base class .
 1561	do nothing .
 1562	derive the class FileUploadHandler from the object base class .
 1563	bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for chunk_size .
 1564	define the method __init__ with arguments self and request defaulting to None .
 1565	self.file_name is None .
 1566	self.content_type is None .
 1567	self.content_length is None .
 1568	self.charset is None .
 1569	self.content_type_extra is None .
 1570	self.request is None .
 1571	define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None .
 1572	do nothing .
 1573	define the method new_file with arguments : self , field_name , file_name , content_type , content_length , charset set to None ,
 1574	substitute field_name for self.field_name .
 1575	substitute file_name for self.file_name .
 1576	substitute content_type for self.content_type .
 1577	substitute content_length for self.content_length .
 1578	substitute charset for self.charset .
 1579	substitute content_type_extra for self.content_type_extra .
 1580	define the method receive_data_chunk with arguments : self , raw_data and start .
 1581	raise an NotImplementedError with argument string STR0 .
 1582	define the method file_complete with arguments : self and file_size .
 1583	raise an NotImplementedError with argument string STR0 .
 1584	define the method upload_complete with argument self .
 1585	do nothing .
 1586	derive the class TemporaryFileUploadHandler from the FileUploadHandler base class .
 1587	define the method __init__ with arguments self , argument list args and dictionary of arguments kwargs .
 1588	call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments : unpacked list args , and unpacked dictionary kwargs .
 1589	define the method new_file with arguments : self , file_name , unpacked list args and unpacked dictionary kwargs .
 1590	call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments : file_name , unpacked list args and unpacked dictionary kwargs .
 1591	self.file is a instance of a class TemporaryUploadedFile initialized with arguments : self.file_name , self.content_type , integer 0 , self.charset and self.content_type_extra .
 1592	define the method receive_data_chunk with arguments : self , raw_data and start .
 1593	call the method self.file.write with argument raw_data .
 1594	define the method file_complete with arguments self and file_size .
 1595	position the file pointer at the start of the self.file file .
 1596	substitute file_size for self.file.size .
 1597	return self.file .
 1598	derive the class MemoryFileUploadHandler from the FileUploadHandler base class .
 1599	define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None .
 1600	if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE ,
 1601	self.activated is boolean False .
 1602	if not ,
 1603	self.activated is boolean True .
 1604	define the method new_file with arguments : self , unpacked list args and unpacked dictionary kwargs .
 1605	call the new_file method form the base class from the MemoryFileUploadHandler class with arguments : unpacked list args and unpacked list kwargs .
 1606	if self.activated is boolean True ,
 1607	call the function BytesIO , substitute the result for self.file .
 1608	raise an exception StopFutureHandlers .
 1609	define the function receive_data_chunk with arguments self , raw_data and start .
 1610	if self.activated is boolean True ,
 1611	write raw_data to self.file file .
 1612	if not ,
 1613	return raw_data .
 1614	define the function file_complete with arguments self and file_size .
 1615	if self.activated is boolean False ,
 1616	return nothing .
 1617	set file pointer at the beginning of the self.file file .
 1618	initialize the object of a InMemoryUploadedFile class with arguments : file set to self.file , field_name set to self.field_name , name set to self.file_name , content_type set to self.content_type , size set to file_size , charset set to self.charset , and content_type_extra set to self.content_type_extra , return it .
 1619	define the function load_handler with arguments : path , unpacked list args and unpacked dictionary kwargs .
 1620	call the import_string with arguments path , call the return function with arguments : unpacked list args and unpacked dictionary kwargs , return the result .
 1621	derive class FileProxyMixin from the base class object , making it a new-style class .
 1622	define lambda function that returns self.file.encoding field , use it as an argument for property function , put the result in encoding .
 1623	define lambda function that returns self.file.fileno field , use it as an argument for property function , put the result in fileno .
 1624	define lambda function that returns self.file.flush field , use it as an argument for property function , put the result in flush .
 1625	define lambda function that returns self.file.isatty field , use it as an argument for property function , put the result in isatty .
 1626	define lambda function that returns self.file.newlines field , use it as an argument for property function , put the result in newlines .
 1627	define lambda function that returns self.file.read field , use it as an argument for property function , put the result in read .
 1628	define lambda function that returns self.file.readinto field , use it as an argument for property function , put the result in readinto .
 1629	define lambda function that returns self.file.readline field , use it as an argument for property function , put the result in readline .
 1630	define lambda function that returns self.file.readlines field , use it as an argument for property function , put the result in readlines .
 1631	define lambda function that returns self.file.seek field , use it as an argument for property function , put the result in seek .
 1632	define lambda function that returns self.file.softspace field , use it as an argument for property function , put the result in softspace .
 1633	define lambda function that returns self.file.tell field , use it as an argument for property function , put the result in tell .
 1634	define lambda function that returns self.file.truncate field , use it as an argument for property function , put the result in truncate .
 1635	define lambda function that returns self.file.write field , use it as an argument for property function , put the result in write .
 1636	define lambda function that returns self.file.writelines field , use it as an argument for property function , put the result in writelines .
 1637	define lambda function that returns self.file.xreadlines field , use it as an argument for property function , put the result in xreadlines .
 1638	define iterator method __iter__ with self as the argument .
 1639	return iterator object based on the self.file collection object .
 1640	from __future__ import unicode_literals into default name space .
 1641	import module logging .
 1642	import module sys .
 1643	import module types .
 1644	from django import http into default name space .
 1645	from django.conf import settings into default name space .
 1646	from django.core import urlresolvers into default name space .
 1647	from django.core import signals into default name space .
 1648	from django.core.exceptions import MiddlewareNotUsed , PermissionDenied and SuspiciousOperation into default name space .
 1649	from django.db import connections and transaction into default name space .
 1650	from django.utils.encoding import force_text into default name space .
 1651	from django.utils.module_loading import import_string into default name space .
 1652	from django.utils import six into default name space .
 1653	from django.views import debug into default name space .
 1654	call the function logging.getLogger with string STR0 as the argument , assign the return object handle to logger .
 1655	derive class BaseHandler , derive from the base class object , making this a new style class .
 1656	response_fixes is a list with http.fix_location_header and http.conditional_content_removal as elements .
 1657	define initialization method __init__ , with self class instance as the argument .
 1658	set class fields _request_middleware , _view_middleware , _template_response_middleware , _response_middleware and _exception_middleware to None .
 1659	define method load_middleware with class instance self as the argument .
 1660	self._view_middleware is an empty list .
 1661	self._template_response_middleware is an empty list .
 1662	_response_middleware is an empty list .
 1663	exception_middleware is an empty list .
 1664	request_middleware is an empty list .
 1665	for every middleware_path in settings.MIDDLEWARE_CLASSES :
 1666	evaluate the function import_string with middleware_path as argument , substitute the result for my_class .
 1667	try ,
 1668	call the mw_class function , store the result in the mw_instance .
 1669	if MiddlewareNotUsed exception is raised ,
 1670	skip this iteration of he smallest enclosing loop .
 1671	if mw_instance has an attribute named STR0 .
 1672	append mw_instance.process_request at the end of request_middleware .
 1673	if mw_instance has an attribute named STR0 .
 1674	append mw_instance.process_view at the end of self._view_middleware .
 1675	if mw_instance has an attribute named STR0 .
 1676	insert mw_instance.process_template_response at the beginning of self._template_response_middleware .
 1677	if mw_instance has an attribute named STR0 .
 1678	insert mw_instance.process_response at the beginning of self._response_middleware .
 1679	if mw_instance has an attribute named STR0 .
 1680	insert mw_instance.process_exception at the beginning of self._exception_middleware .
 1681	substitute self._request_middleware for request_middleware .
 1682	define the method make_view_atomic , with self class instance and view as the arguments .
 1683	get attribute STR0 from the view object , if the attribute doesnt exist return the empty set , substitute the result for non_atomic_requests .
 1684	call the method connections.all ( ) , perform the following for every db in the result ,
 1685	if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests ,
 1686	call the function transaction.atomic , with using set to db.alias as the argument , return value is a function which is called , with the argument view , store the result in the view .
 1687	return view
 1688	define method get_exception_response , with self class instance , request , resolver and status_code as the arguments .
 1689	try ,
 1690	call the function resolver.resolve_error_handler with status_code as an argument , assign the result to the callback and param_dict , respectively .
 1691	call the callback function with request and dictionary argument param_dict as the arguments , substitute it for response .
 1692	if an exception occurred ,
 1693	call the method signals.got_request_exception.send with the sender set to the type of this class , and request set to request as the arguments .
 1694	call the method self.handle_uncaught_exception with request , resolver and return value of the function sys.exec_info as the arguments .
 1695	return response
 1696	define the method get_response , with self class instance and request as the arguments .
 1697	substitute settings.ROOT_URLCONF for urlconf .
 1698	call the method urlresolvers.set_urlconf with urlconf as the argument .
 1699	call the method urlresolvers.RegexURLResolver with raw literal string STR0 and urlconf as the arguments , substitute the result for resolver .
 1700	try ,
 1701	set response to None .
 1702	for every middleware_method in self._request_middleware ,
 1703	call the middleware_method with the request as an argument , substitute the result for response .
 1704	if response is True ,
 1705	breaks from the smallest enclosing loop execution .
 1706	if response is None ,
 1707	if request has an attribute named STR0 ,
 1708	substitute request.urlconf for urlconf .
 1709	call the function urlresolvers.set_urlconf with urlconf as the argument .
 1710	call the method urlresolvers.RegexURLResolver with raw literal string STR0 and urlconf as the arguments , substitute the result for resolver .
 1711	call to the resolver.resolve method with request.path_info as an argument .
 1712	assign the values to the callback , callback_args , callback_kwargs , respectively , from the resolver_match tuple .
 1713	substitute resolver_match for request.resolver_match .
 1714	for every middleware_method in self._view_middleware ,
 1715	call the middleware_method with request , callback , callback_args and callback_kwargs as the arguments , substitute the result for response .
 1716	if response is True ,
 1717	break from the smallest enclosing loop execution .
 1718	if response is None ,
 1719	call the method self.make_view_atomic with callback as the argument , substitute the result for the wrapped_callback .
 1720	try ,
 1721	call the function wrapped_callback with request , list or arguments callback_args and dictionary arguments callback_kwargs , as the arguments , substitute the result for response .
 1722	if Exception , renamed to e , exception is caught ,
 1723	for every middleware_method in self._exception_middleware ,
 1724	call the middleware_method with request and e as the arguments , substitute the result for response .
 1725	if response is True ,
 1726	break from the smallest enclosing loop execution .
 1727	if response is None ,
 1728	raise the exception .
 1729	if response is None ,
 1730	if callback is of instance types.FunctionType ,
 1731	get the name of the callback , substitute it for view_name .
 1732	if not ,
 1733	get the name of the type of the callback , append the string STR0 to it , substitute it for view_name .
 1734	substitute the STR1 in the string STR0 , with the name of the module callback is in and the view_name , respectively , use it as the argument for the ValueError exception raise .
 1735	if response has an attribute named STR0 and response.render is a callable function ,
 1736	for every middleware_method in self._template_response_middleware ,
 1737	call the function middleware_method with the request and response as the arguments , assign the result to response .
 1738	if response is None ,
 1739	replace STR1 in the string STR0 ,
 1740	with name of the class type of the middleware_method instance , use it as the argument for call to the ValueError exception raise . call the response.render ( ) method and assign the return to the response .
 1741	if exception http.Http404 as e is caught ,
 1742	substitute STR0 in STR1 with request.path , extra is an dictionary with two pairs of elements STR2 with value 404 ,
 1743	and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning function . if settings.DEBUG is True ,
 1744	call the function debug.technical_404_response with request and e as arguments , assign the result to response .
 1745	if not ,
 1746	call the method self.get_exception_response with request , resolver and integer 404 as the arguments , assign the result to response .
 1747	if exception PermissionDenied is caught ,
 1748	substitute STR0 in STR1 with request.path , extra is an dictionary with two pairs of elements , STR2 with value 403 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning function .
 1749	call the method self.get_exception_response with request , resolver and integer 403 as the arguments , assign the result to response .
 1750	if exception SuspiciousOperation as e is caught ,
 1751	substitute STR0 in STR1 with the name of the type of the class object e , use it as the argument for the call to the , function logging.getLogger , assign the result to the security_logger .
 1752	evaluate the function force_text with e as an argument , extra is an dictionary with two pair of elements , STR0 with integer value of 400 and STR1 with value request , respectively use the previous to call the function security_logger.error .
 1753	if settings.DEBUG is True ,
 1754	evaluate the function debug.technical_500_response with request , evaluated value of function sys.exc_info as a list , status code set to integer 400 , return the result .
 1755	call the method self.get_exception_response with the request , resolver and integer 400 as the arguments , substitute the result for response .
 1756	if SystemExit exception is caught ,
 1757	raise an exception .
 1758	otherwise if any other exception is caught ,
 1759	call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request .
 1760	call to the self.handle_uncaught_exception method with request , resolver and value of the evaluated function sys.exec_info , as the arguments , substitute the result for response .
 1761	try ,
 1762	for every middleware_method in self._response_middleware ,
 1763	call the function middleware_method with request and response as the arguments , substitute the result for response .
 1764	if response is None , substitute STR0 is `` % s.process_response didnot return an HttpResponse object .
 1765	It returned None instead . `` , with the name of the type of the self class instance of the middleware_method , raise the ValueError with the previous as the argument .
 1766	call the method self.apply_response_fixes with the request and response as the arguments , substitute the result for response .
 1767	if any exception is caught ,
 1768	call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request .
 1769	call to the self.handle_uncaught_exception method with request , resolver and value of the evaluated function sys.exec_info , as the arguments , substitute the result for response .
 1770	append the request to the end of the protected class member response._closable_objects .
 1771	return response .
 1772	define the method handle_uncaught_exception with self class instance , request , resolver and exec_info as arguments .
 1773	if settings.DEBUG_PROPAGATE_EXCEPTIONS is True ,
 1774	raise an exception .
 1775	substitute STR0 in STR1 with request.path , exc_info set to exc_info , extra is an dictionary with two pairs of elements STR2 with value 500 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.error function .
 1776	if settings.DEBUG is True ,
 1777	evaluate debug.technical_500_response with request and list of arguments exec_info , return the result .
 1778	if resolver.urlconf_module is None :
 1779	call the function reraise from the module six , with list of arguments exec_info .
 1780	call the resolver.resolve_error_handler with integer 500 as the argument , assign the resulting tuple elements to the callback , and param_dict , respectively .
 1781	evaluate the function callback with request and dictionary of parameters param_dict as the arguments , return the result .
 1782	define the method apply_response_fixes with self class instance , request and response as the arguments .
 1783	for every func in self.response_fixes ,
 1784	call the function func with request and response as arguments , assign the result to response .
 1785	return response .
 1786	from __future__ import unicode_literals into default name space .
 1787	import module cgi .
 1788	import module codecs .
 1789	import module logging .
 1790	import module sys .
 1791	from io import BytesIO into default name space .
 1792	from threading import Lock into default name space .
 1793	import module warnings .
 1794	from django import http into default name space .
 1795	from django.conf import settings into default name space .
 1796	from django.core import signals into default name space .
 1797	from django.core.handlers import base into default name space .
 1798	from django.core.urlresolvers import set_script_prefix into default name space .
 1799	from django.utils import datastructures into default name space .
 1800	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 1801	from django.utils.encoding import force_str and force_text into default name space .
 1802	from django.utils.functional import cached_property into default name space .
 1803	from django.utils import six into default name space .
 1804	from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT # NOQA into default name space .
 1805	call logging.getLogger method with string STR0 as argument , store the result in logger .
 1806	ISO_8859_1 is a string STR0 , UTF_8 is a string STR1 .
 1807	derive class LimitedStream from the object base class , making it a new-style class .
 1808	def initialization method __init__ with self class instance , stream , limit and buf_size set to integer value of the product 64*1024*1024 .
 1809	substitute stream for self.stream .
 1810	substitute limit for self.remaining .
 1811	substitute empty bytes string for self.buffer .
 1812	substitute buf_size for self.buf_size .
 1813	define the method _read_limited with self class instance and size set to None as arguments .
 1814	if size is None or size is greater than self.remaining ,
 1815	substitute self.remaining for size .
 1816	if size equals to integer zero .
 1817	return empty bytes string .
 1818	read size number of bytes from self.stream stream , store the result in the result .
 1819	decrement self.remaining by length of result .
 1820	return result .
 1821	define the method read with self class instance and size set to None as arguments .
 1822	if size is None ,
 1823	add self.buffer and self._read_limited method return value together , store it in result .
 1824	substitute empty bytes string for self.buffer .
 1825	otherwise if size is less than length of self.buffer ,
 1826	substitute first size elements of self.buffer for result .
 1827	truncate first size number of elements of self.buffer .
 1828	if not ,
 1829	call the method self.read_limited with length of self.buffer subtracted from size as argument , add result to self.buffer , store it in result .
 1830	substitute empty bytes string for self.buffer .
 1831	return result .
 1832	define method readline with self class instance and size set to None .
 1833	while newline character is not contained in self.buffer and , size is None or length of self.buffer is less than size ,
 1834	if size is not zero ,
 1835	call the self._read_limiter with length of self.buffer subtracted from size as argument , store the result into chunk .
 1836	if not ,
 1837	call the method self._read_limited , store the return value into chunk .
 1838	if chunk is empty ,
 1839	break the execution of the smallest enclosing loop .
 1840	increment self.buffer by chunk .
 1841	call the function BytesIO with self.buffer as argument , store the result is sio .
 1842	if size is not empty ,
 1843	call the sio.readline method with size as an argument , substitute the result for line .
 1844	if not ,
 1845	call the sio.readline method , substitute the result for line .
 1846	call the sio.read method , substitute the result for self.buffer .
 1847	return line .
 1848	derive the class WSGIRequest from base class http.HttpRequest .
 1849	define the initialization method __init__ with self class instance and environ as arguments .
 1850	call the get_script_name function with environ as argument , substitute the result for script_name .
 1851	call the get_path_info function with environ as argument , substitute the result for path_info .
 1852	if path_info is empty ,
 1853	path_info is a character STR0 .
 1854	substitute environ for self.environ .
 1855	substitute path_info for self.path_info .
 1856	strip trailing STR0 from the script_name string , remove first occurrence of STR1 in path_info string , append second result to the first , separated with STR2 , assign the result to self.path .
 1857	substitute environ for self.META .
 1858	assign path_info to the value under the STR0 key of the self.META dictionary .
 1859	assign script_name to the value under the STR0 key of the self.META dictionary .
 1860	convert value under the STR0 key of the environ dictionary to uppercase , substitute it for self.method .
 1861	get the value under the STR0 key of environ dictionary , if the key doesnt exist get the empty string , use it to call the cgi.parse_header method , assign the result to the _ and content_params respectively .
 1862	if string STR0 is contained in content_params ,
 1863	try ,
 1864	get the value under the STR0 key of content_params dictionary , use it to call the codec.lookup method .
 1865	if exception LookupError is caught ,
 1866	do nothing .
 1867	if not ,
 1868	get the value under the STR0 key of content_params dictionary , substitute it for self.encoding .
 1869	self._post_parse_error is boolean False .
 1870	try ,
 1871	convert value under the STR0 key of the environ dictionary to an integer , substitute it for content_length .
 1872	if exception ValueError or TypeError is caught ,
 1873	content_length is integer 0 .
 1874	self._stream is a class instance of a LimitedStream class , initialized with self.environ dictionary value under the STR0 key , and content_length .
 1875	self._read_started is boolean False .
 1876	self.resolver_match is None .
 1877	define the method _get_scheme with self class instance as argument .
 1878	return value under the STR0 key of self.environ dictionary .
 1879	define the method _get_request with self class instance as argument .
 1880	call the warnings.warn method with string STR0 , RemovedInDjango19Warning and integer 2 as arguments .
 1881	if self does not have an STR0 attribute ,
 1882	call the datastructures.MergeDict with self.POST and self.GET as arguments , assign the result to self._request .
 1883	return self._request .
 1884	decorator cached_property .
 1885	define method GET with self class instance as an argument .
 1886	call the get_bytes_from_wsgi function with self.environ , string STR0 and empty string as arguments , substitute the return value for raw_query_string .
 1887	evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments , return the result .
 1888	def _get_post method with self class instance as the argument .
 1889	if self does not has an STR0 attribute .
 1890	call the self._load_post_and_files method .
 1891	return self._post .
 1892	define the _set_post method with self class instance and post as the arguments .
 1893	substitute post for self._post .
 1894	decorator cached_property .
 1895	define COOKIES method with self as the argument .
 1896	call get_str_from_wsgi function with self.environ , string STR0 and empty string as arguments , substitute it for raw_cookie .
 1897	evaluate the function http.parse_cookie with raw_cookie as an argument , return the result .
 1898	define _get_files method with self class instance as the argument .
 1899	if self does not have STR0 attribute ,
 1900	call the method self._load_post_and_files .
 1901	return self._files .
 1902	_get_post is a getter function and _set_post is a setter function for POST attribute of this class .
 1903	_get_files is getter function for FILES attribute of this class .
 1904	_get_request is getter function for REQUEST attribute of this class .
 1905	derive the WSGIHandler class from the base class base.BaseHandler .
 1906	evaluate function Lock ( ) assign the result to initLock .
 1907	substitute WSGIRequest for request_class .
 1908	define private method __call__ with self class instance , environ and start_response as the arguments .
 1909	if self._request_middleware is None ,
 1910	with self.initLock ,
 1911	try ,
 1912	if self._request_middleware is None ,
 1913	call the self.load_middleware method .
 1914	if exception is caught ,
 1915	self._request_middleware is None .
 1916	re raise an exception .
 1917	call the get_script_name function with environ as argument , use the result as an argument for call to the set_script_prefix function .
 1918	call the signals.request_started.send method with sender set to self.__class__ as argument .
 1919	try ,
 1920	call the self.request_class method with environ as an argument , substitute the result for request .
 1921	if UnicodeDecodeError exception is caught ,
 1922	call the logger.warning method with string STR0 , exec_info set to sys.exec_info ( ) and dictionary extra with one entry STR1 is integer 400 , as arguments .
 1923	call the http.HttpResponseBadRequest function , assign the result to the response .
 1924	if not ,
 1925	call the self.get_response with request as the argument , substitute the result for response .
 1926	substitute self.__class__ for response._handler_class .
 1927	replace STR0 in the string STR1 with response.status_code and response.reason_phrase , respectively , substitute it for status .
 1928	convert to k and v to strings for every k and v in return value of the response.item method , response_headers is a list containing all the above iteration elements .
 1929	for every c in return value of the method response.cookies.values ,
 1930	convert STR0 to a string and convert the return value of method c.output ( header= STR ) call to a string , format the previous in a tuple , append the tuple to the response_headers .
 1931	call the start_response function with force_str ( status ) method return value and response_headers as arguments .
 1932	return response .
 1933	define the get_path_info function with environ as the argument .
 1934	call the function get_bytes_from_wsgi with environ , string STR0 and character STR1 as arguments , substitute the result for path_info .
 1935	return path_info.decode method return value called with UTF_8 as the argument .
 1936	define get_script_name function with environ as an argument .
 1937	if settings.FORCE_SCRIPT_NAME is not None ,
 1938	evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument , return the result .
 1939	call the get_bytes_from_wsgi function with environ , string STR0 and empty strings as arguments , substitute the result for script_url .
 1940	if script_url is false ,
 1941	call the get_bytes_from_wsgi function with environ , string STR0 and empty strings as arguments , substitute the result for script_url .
 1942	if script_url is true ,
 1943	call the get_bytes_from_wsgi function with environ , string STR0 and empty strings as arguments , substitute the result for path_info .
 1944	take all but the length of path_info last elements of script_url , substitute it for script_name .
 1945	if not ,
 1946	call the get_bytes_from_wsgi function with environ , string STR0 and empty strings as arguments , substitute the result for script_name .
 1947	return scrip_name.decode method result called with UTF_8 as argument .
 1948	define the function get_bytes_from_wsgi with environ , key and default as arguments .
 1949	convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the , default string value , substitute it for value .
 1950	return value if six.PY2 is true , if not return value.encode ( ISO_8859_1 ) .
 1951	define the get_str_from_wsgi function with environ , key and default as arguments .
 1952	convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the , default string value , substitute it for value .
 1953	return value if six.PY2 is true , if not return value.encode ( ISO_8859_1 ) .decode ( UTF_8 ) .
 1954	from __future__ import unicode_literals into default name space .
 1955	from django.conf import settings into default name space .
 1956	from django.utils.module_loading import import_string into default name space .
 1957	from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space .
 1958	from django.core.mail.message import EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart , DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError and forbid_multi_line_headers into default name space .
 1959	__all__ is a list of strings , STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , STR11 , STR12 , STR13 and STR14 .
 1960	define function get_connection with backend set to None , fail_silently set to boolean False and dictionary kwds as arguments .
 1961	call the function import_string with backend if exists or settings.EMAIL_BACKEND if not , store the result into klass .
 1962	call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments , return the result .
 1963	define send_mail funtion with subject , message , from_email , recipient_list , fail_silently set to boolean False ,
 1964	if connection exists dont modify it , if not call get_connection function with username set to auth_user , password set to auth_password , fail_silently set to fail_silently as arguments , assign it to connection .
 1965	call the EmailMultiAlternatives function with , subject , message , from_email , recipient_list and connection set to connection , as arguments , assign the result to mail .
 1966	if html_message is True ,
 1967	call the mail.attach_alternative method with html_message and string STR0 as arguments .
 1968	return the evaluated result of the mail.send method .
 1969	define the function send_mass_mail with , datatuple , fail_silently set to False , auth_user set to None , auth_password set to None ,
 1970	if connection exists dont change it , if not call the get_connection function with username set to auth_user , password set to auth_password , fail_silently set to fail_silently as arguments , assign the result to connection .
 1971	call the EmailMessage function wit subject , message , sender , recipient and connection set to connection , for every subject , message , sender and recipient in datatuple , store the results in the messages list .
 1972	return evaluated result of the method connection.send_messages with messages as argument .
 1973	define the function mail_admins with subject , message , fails_silently set to boolean False , connection set to None ,
 1974	if settings.ADMINS is false ,
 1975	return nothing .
 1976	call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated , message , settings.SERVER_EMAIL , list of second elements of a for every a in settings.Managers and connection set to connection , as arguments , assign the result to mail .
 1977	if html_message is true ,
 1978	call method mail.attach_alternative as html_message and string STR0 as arguments .
 1979	call the mail.send method with fail_silently=fail_silently as argument .
 1980	define the function mail_managers with subject , message , fails_silently set to boolean False , connection set to None ,
 1981	if settings.MANAGERS does not exist ,
 1982	return nothing .
 1983	call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated , message , settings.SERVER_EMAIL , list of second elements of a for every a in settings.Managers and connection set to connection , as arguments , assign the result to mail .
 1984	if html_message is true ,
 1985	call the mail.attach_alternative method with html_message and string STR0 as arguments .
 1986	call the mail.send method with fail_silently set to fail_silently as argument .
 1987	derive the class BaseEmailBackend from the object base class .
 1988	define the method __init__ with arguments : self , fail_silently set to boolean False and unpacked dictionary kwargs .
 1989	substitute fail_silently for self.fail_silently .
 1990	define the method open with argument self .
 1991	do nothing .
 1992	define the method close with argument self .
 1993	do nothing
 1994	define the method __enter__ with argument self .
 1995	call the method self.open .
 1996	return self .
 1997	define the method __exit__ with arguments : self , exc_type , exc_value and traceback .
 1998	call the method self.close .
 1999	define the method send_messages with arguments self and email_messages .
 2000	raise an NotImplementedError exception with argument string STR0 .
 2001	import module sys .
 2002	import module threading .
 2003	from django.core.mail.backends.base import BaseEmailBackend into default name space .
 2004	from django.utils import six into default name space .
 2005	derive the class EmailBackend from the BaseEmailBackend base class .
 2006	define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
 2007	pop the value under the STR0 key of the kwargs dictionary , if it exists replace it for self.stream , if not replace sys.stdout for self.stream .
 2008	call the method threading.RLock , substitute the result for self._lock .
 2009	call the __init__ method from the base class of the EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
 2010	define the method write_message with arguments self and message .
 2011	call the method message.message , substitute the result for msg .
 2012	call the method msg.as_bytes , substitute the result for msg_data .
 2013	if six.PY3 is boolean True ,
 2014	if method msg.get_charset evaluates to true , call the get_output_charset method on the return value of the msg.get_charset method , substitute the result for charset , otherwise if it is false , substitute the string STR0 for charset .
 2015	call the method msg_data.decode with argument charset , substitute the result for msg_data .
 2016	call the method self.stream.write with argument string STR0 , with STR1 replaced with msg_data .
 2017	write 79 STR0 characters into self.stream file stream .
 2018	write a newline into a self.stream file stream .
 2019	define the method send_messages with arguments self and email_messages .
 2020	if email_messages is false ,
 2021	return .
 2022	msg_count is an integer 0 .
 2023	call the method self._lock , with the result ,
 2024	try ,
 2025	call the method self.open , substitute the result for stream_created .
 2026	for every message in email_messages ,
 2027	call the method self.write_message with argument message .
 2028	call the method self.stream.flush .
 2029	increment msg_count by one .
 2030	if stream_created is true ,
 2031	call the method self.close .
 2032	if Exception exception is caught ,
 2033	if self.fail_silently is boolean False ,
 2034	raise an exception .
 2035	return msg_count .
 2036	from django.core.mail.backends.base import BaseEmailBackend into default name space .
 2037	derive the class EmailBackend from the BaseEmailBackend base class .
 2038	define the method send_messages with arguments self and email_messages .
 2039	create list out of email_messages , return the length of the list .
 2040	import module datetime .
 2041	import module os .
 2042	from django.conf import settings into default name space .
 2043	from django.core.exceptions import ImproperlyConfigured into default name space .
 2044	from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space .
 2045	from django.utils import six into default name space .
 2046	derive the class EmailBackend from the ConsoleEmailBackend base class .
 2047	define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
 2048	self._fname is None .
 2049	if STR0 is contained in kwargs ,
 2050	pop the value under the STR0 key of kwargs dictionary , substitute it for self.file_path .
 2051	if not ,
 2052	get STR0 from the settings , if it exists , substitute it for self.file_path , if not substitute None for self.file_path .
 2053	if self.file_path is not an instance of six.string_types ,
 2054	raise an ImproperlyConfigured exception with argument string STR0 , replace STR1 with self.file_path .
 2055	call the os.path.abspath with argument self.file_path , substitute the result for self.file_path .
 2056	if self.file_path file path exists and it is not a directory ,
 2057	raise an ImproperlyConfigured exception with argument string STR0 , replace STR1 with self.file_path .
 2058	otherwise if self.file_path file path doesnt exists ,
 2059	try ,
 2060	call the os.makedirs with argument self.file_path .
 2061	if OSError , renamed to err , is caught ,
 2062	raise an ImproperlyConfigured exception with argument string STR0 , replace STR1 with self.file_path and err , respectively .
 2063	if self.file_path file is not writable ,
 2064	raise an ImproperlyConfigured exception with argument string STR0 , replace STR1 with self.file_path .
 2065	set value under the STR0 key of kwargs dictionary to None .
 2066	call the __init__ method of the base class of the EmailBackend class with arguments : unpacked list args and unpacked dictionary kwargs .
 2067	define the method write_message with arguments self and message .
 2068	call the as_bytes method on the return value of the message.message method append to it STR0 character , use it as the argument for the call to the self.stream.write method .
 2069	write 79 STR0 characters into self.stream file stream .
 2070	write a newline character into self.stream file stream .
 2071	define the method _get_filename with argument self .
 2072	if self._fname is None :
 2073	call the strftime function with argument string STR0 on the return value of the function datetime.datetime.now , substitute the result for timestamp .
 2074	fname is a string STR0 , with STR1 replaced by timestamp and absolute value of the return value of the function id with argument self , respectively .
 2075	join self.file_path and fname into a valid file path , substitute it for self._fname .
 2076	return self._fname .
 2077	define the method open with argument self .
 2078	if self.stream is None :
 2079	open the file in mode STR0 and with file name obtained by calling the self._get_filename method .
 2080	return boolean True .
 2081	return boolean True .
 2082	define the method close with argument self .
 2083	try ,
 2084	if self.stream is not None ,
 2085	call the self.stream.close function .
 2086	finally perform ,
 2087	self.stream is None .
 2088	from django.core import mail into default name space .
 2089	from django.core.mail.backends.base import BaseEmailBackend into default name space .
 2090	derive the class EmailBackend from the BaseEmailBackend base class .
 2091	define the method __init__ with arguments : self , unpacked list args and unpacked dictionary kwargs .
 2092	call the method __init__ from the base class of EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
 2093	if mail doesnt have an STR0 attribute ,
 2094	mail.outbox is an empty list .
 2095	define the method send_messages with arguments self and messages .
 2096	msg_count is integer 0 .
 2097	for every message in messages ,
 2098	call the method message.message .
 2099	increment mes_count by one .
 2100	call the method mail.outbox.extend with messages .
 2101	return msg_count .
 2102	import module smtplib .
 2103	import module ssl .
 2104	import module threading .
 2105	from django.conf import settings into default name space .
 2106	from django.core.mail.backends.base import BaseEmailBackend into default name space .
 2107	from django.core.mail.utils import DNS_NAME into default name space .
 2108	from django.core.mail.message import sanitize_address into default name space .
 2109	derive the class EmailBackend from the BaseEmailBackend base class .
 2110	define the method __init__ with arguments : self , host set to None , port set to None , username set to None , password set to None , use_tls set to None , fail_silently set to False , use_ssl set to None , timeout set to None and unpacked dictionary kwargs .
 2111	call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently .
 2112	if host exists substitute it for self.host , if not substitute settings.EMAIL_HOST for self.host .
 2113	if port exists substitute it for self.host , if not substitute settings.EMAIL_PORT for self.port .
 2114	if username is None substitute settings.EMAIL_HOST_USER for self.username , if not substitute username for self.username .
 2115	if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username , if not substitute password for self.password .
 2116	if use_tls is None substitute settings.EMAIL_USE_TLS for self.username , if not substitute use_tls for self.use_tls .
 2117	if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username , if not substitute use_ssl for self.use_ssl .
 2118	substitute timeout for self.timeout .
 2119	if self.use_ssl and self.use_tls are boolean True ,
 2120	raise an ValueError exception with argument string STR0 .
 2121	self.connection is None .
 2122	call the method threading.RLock , substitute the result for self._lock .
 2123	define the method open with argument self .
 2124	if self.connection is true ,
 2125	return boolean False ,
 2126	substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true , if not substitute smtplib.SMTP for connection_class .
 2127	connection_params is a dictionary with 1 initial entry : return value of the function DNS_NAME.get_fqdn for STR0 .
 2128	if self.timeout is not None ,
 2129	set value under the STR0 key of the connection_params to self.timeout .
 2130	try ,
 2131	self.connection is a instance of a class contained in connection_class , instantiated with arguments : self.host , self.port , and unpacked dictionary connection_params .
 2132	if self.use_ssl and self.use_tls are false ,
 2133	call the method self.connection.ehlo .
 2134	call the method self.connection.starttls .
 2135	call the method self.connection.ehlo .
 2136	if self.username and self.password are true ,
 2137	call the method self.connection.login with arguments self.username and self.password .
 2138	return boolean True .
 2139	if smtplib.SMTPException exception is caught ,
 2140	if self.fail_silently is boolean False ,
 2141	raise an exception .
 2142	define the method close with argument self .
 2143	if self.connection is None ,
 2144	return nothing .
 2145	try ,
 2146	try ,
 2147	call the method self.connection.quit .
 2148	if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred ,
 2149	call the method self.connection.close .
 2150	if smtplib.SMTPException exception is caught ,
 2151	if self.fail_silently is boolean True ,
 2152	return nothing .
 2153	raise an exception .
 2154	finally perform ,
 2155	self.connection is None .
 2156	define the method send_messages with arguments self and email_message .
 2157	if email_messages is false ,
 2158	return nothing .
 2159	call the method self._lock , with the return value ,
 2160	call the method self.open , substitute the result for the new_conn_created .
 2161	if self.connection is false ,
 2162	return nothing .
 2163	num_sent is an integer 0 .
 2164	for every message in email_messages :
 2165	call the method self._send with argument message , substitute the result for sent .
 2166	if sent is true ,
 2167	increment num_sent by one .
 2168	if new_conn_created is true ,
 2169	call the self.close method .
 2170	return num_sent .
 2171	define the method _send with arguments self and email_message .
 2172	call the email_message.recipients method , if it evaluates to false ,
 2173	return boolean False .
 2174	call the function sanitize_address with arguments email_message.from_email and email_message.encoding , substitute the result for from_email .
 2175	call the function sanitize_address with arguments addr and email_message.encoding , for every addr in return value of the function email_message.recipients , store the results in a recipients list .
 2176	call the function email_message.message , substitute the result for message .
 2177	try ,
 2178	call the method self.connection.sendmail with arguments : from_email , recipients and return value of the function message.as_bytes .
 2179	if smtplib.SMTPException exception is caught ,
 2180	if self.fail_silently is false ,
 2181	raise an exception .
 2182	return boolean False .
 2183	return boolean True .
 2184	from __future__ import unicode_literals into default name space .
 2185	import module mimetypes .
 2186	import module os .
 2187	import module random .
 2188	import module sys .
 2189	import module time .
 2190	from email import charset as Charset , encoders as Encoders , message_from_string and generator .
 2191	from email.message import Message into default name space .
 2192	from email.mime.text import MIMEText into default name space .
 2193	from email.mime.multipart import MIMEMultipart into default name space .
 2194	from email.mime.base import MIMEBase into default name space .
 2195	from email.mime.message import MIMEMessage into default name space .
 2196	from email.header import Header into default name space .
 2197	from email.utils import formatdate , getaddresses , formataddr and parseaddr into default name space .
 2198	from django.conf import settings into default name space .
 2199	from django.core.mail.utils import DNS_NAME into default name space .
 2200	from django.utils.encoding import force_text into default name space .
 2201	from django.utils import six into default name space .
 2202	call the function Charset.Charset with argument string STR0 , substitute the result for utf8_charset .
 2203	utf8_charset.body_encoding is None .
 2204	DEFAULT_ATTACHMENT_MIME_TYPE is a string STR0 .
 2205	derive the class BadHeaderError from the ValueError base class .
 2206	do nothing .
 2207	define the function make_msgid with argument idstring set to None .
 2208	call the function time.time , substitute the result for timeval .
 2209	call the function time.gmtime with argument timeval , use string STR0 and the previous result as an argument for the call to the time.strftime function , substitute the result for utcdate .
 2210	try ,
 2211	call the function os.getpid , substitute it for pid .
 2212	if AttributeError exception is caught ,
 2213	pid is integer 1 .
 2214	call the function random.randrange with argument integer 100000 , substitute the result for randint .
 2215	if idstring is None ,
 2216	idstring is an empty string .
 2217	if not ,
 2218	append idstring to the STR0 character , substitute it for idstring .
 2219	substitute DNS_NAME for idhost .
 2220	msgid is a string STR0 , replace STR1 with utcdate , pid , randint , idstring and idhost , respectively .
 2221	return msgid .
 2222	ADDRESS_HEADERS is a set containing strings : STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 and STR10 .
 2223	define the function forbid_multi_line_headers with arguments : name , val and encoding .
 2224	if encoding does not exists substitute it for settings.DEFAULT_CHARSET .
 2225	call the function force_text with argument val , substitute it for val .
 2226	if characters STR0 or STR1 are contained in val ,
 2227	raise an BadHeaderError exception with argument string STR0 , where STR1 are replaced by val and name , respectively .
 2228	try ,
 2229	call the method val.encode with argument string STR0 .
 2230	if UnicodeEncodeError exception is caught ,
 2231	convert name to lower case , if it is contained in ADDRESS_HEADERS , s
 2232	call the function sanitize_address with arguments addr and encoding , for every addr in return value of the getadresses function with tuple containing val as argument , join all the results into a string separated by STR0 , substitute the result for val .
 2233	if not ,
 2234	call the encode function on the Header class instance , created with arguments val and encoding , substitute the result for val .
 2235	if not ,
 2236	if name converted to lower case equals to string STR0 ,
 2237	call the encode function on the Header class instance , created with argument val , substitute the result for val .
 2238	return name converted to a string and val .
 2239	define the function sanitize_address with arguments addr and encoding .
 2240	if addr is a instance of six.string_types ,
 2241	call the parseaddr function with return value of the force_text with argument addr , as argument , substitute the result for addr .
 2242	nm and addr are addr .
 2243	try ,
 2244	call the encode function on the Header class instance , created with arguments nm and encoding , substitute the result for nm .
 2245	if UnicodeEncodeError exception is caught ,
 2246	call the encode function on the Header class instance , created with arguments nm and string STR0 , substitute the result for nm .
 2247	try ,
 2248	call the addr.encode method with string STR0 as an argument .
 2249	if UnicodeEncodeError exception is caught ,
 2250	if character STR0 is contained in addr ,
 2251	call the addr.split method with character STR0 and integer 1 as arguments , substitute the result for localpart and domain , respectively .
 2252	instantiate Header class with localpart and encoding , convert it to a string , substitute the result for localpart .
 2253	call the decode function with argument string STR0 on the return value of the method domain.encode with argument string STR1 substitute the result for domain .
 2254	join localpart and domain in a string separated by STR0 character , substitute it for addr .
 2255	if not ,
 2256	call the encode function on the Header class instance , created with arguments addr and encoding , substitute the result for addr .
 2257	call the formataddr function with argument tuple containing 2 elements nm and addr .
 2258	derive the class MIMEMixin .
 2259	define the method as_string with arguments self and unixfrom set to boolean False .
 2260	fp is a instance of a class six.StringIO .
 2261	g is an instance of a class generator.Generator called with fp and mangle_from_ set to False .
 2262	call the method g.flatten with arguments self and unixfrom set to unixfrom .
 2263	call the method fp.getvalue , return the result .
 2264	if six.PY2 is boolean True ,
 2265	substitute as_string for as_bytes .
 2266	if not ,
 2267	define the method as_bytes with arguments self and unixfrom set to boolean False .
 2268	fp is a instance of a class six.BytesIO .
 2269	g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False .
 2270	call the method g.flatten with arguments self and unixfrom set to unixfrom .
 2271	call the method fp.getvalue , return the result .
 2272	derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class .
 2273	define the method __setitem__ with arguments self , name and val .
 2274	call the function forbid_multi_line_headers with 3 arguments : name , val and string STR0 , substitute the result for name and val , respectively .
 2275	call the method MIMEMessage.__setitem__ with arguments self , name and val .
 2276	derive the class SafeMIMEText from the MIMEMixin and MIMEText base class .
 2277	define the __init__ method with arguments : self , text , subtype and charset .
 2278	substitute charset for self.encoding .
 2279	if charset equals to string STR0 ,
 2280	call the method MIMEText.__init__ with 4 arguments : self , text , subtype and None .
 2281	delete the value under the STR0 key of self dictionary .
 2282	if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple , respectively ,
 2283	call the method text.encode with argument utf8_charset.output_charset , substitute the result for payload .
 2284	call the method payload.decode with 2 arguments : string STR0 and string STR1 , substitute the result for self._payload .
 2285	call the method self.set_charset with utf8_charset as an argument .
 2286	if not ,
 2287	call the method payload.decode with 2 arguments : text and utf8_charset , substitute the result for self._payload .
 2288	call the method self.replace_header with argument string STR1 , STR2 , where STR3 symbols are replaced by : subtype and charset , respectively .
 2289	if not ,
 2290	call the method MIMEText.__init__ with 4 arguments : self , text , subtype and charset .
 2291	define the method __setitem__ with arguments self , name and val .
 2292	call the function forbid_multi_line_headers with 3 arguments : name , val and self.encoding , substitute the result for name and val , respectively .
 2293	call the method MIMEText.__setitem__ with arguments self , name and val .
 2294	derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class .
 2295	define the method __init__ with 6 arguments : self , _subtype set to string STR0 , boundary set to None , _subparts set to None , encoding set to None and unpacked dictionary _params .
 2296	substitute encoding for self.encoding .
 2297	call the method MIMEMultipart.__init__ with 5 arguments : self , _subtype , boundary , _subparts and unpacked dictionary _params .
 2298	define the method __setitem__ with arguments self , name and val .
 2299	call the function forbid_multi_line_headers with 3 arguments : name , val and self.encoding , substitute the result for name and val , respectively .
 2300	call the method MIMEMultipart.__setitem__ with arguments self , name and val .
 2301	derive the class EmailMessage from the object base class .
 2302	content_subtype is a string STR0 .
 2303	mixed_subtype is a string STR0 .
 2304	encoding is None .
 2305	define the method __init__ with 10 arguments : self , subject set to an empty string , body set to an empty string ,
 2306	if to is true ,
 2307	if to is not an six.string_types instance raise an error with message string STR1 .
 2308	put to into a list , assign it to self.to .
 2309	if not ,
 2310	self.to is an empty list .
 2311	if cc is true ,
 2312	if cc is not an six.string_types instance raise an error with message string STR1 .
 2313	put cc into a list , assign it to self.cc .
 2314	if not ,
 2315	self.cc is an empty list .
 2316	if bcc is true ,
 2317	if bcc is not an six.string_types instance raise an error with message string STR1 .
 2318	put bcc into a list , assign it to self.bcc .
 2319	if not ,
 2320	self.bcc is an empty list .
 2321	if from_email exists substitute from_email for self.from_email , if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email .
 2322	substitute subject for self.subject .
 2323	substitute body for self.body .
 2324	if attachments exists substitute it for self.attachments , if not attachments is an empty list .
 2325	if headers exists substitute it for self.extra_headers , if not extra_headers is an empty dictionary .
 2326	substitute connection for self.connection .
 2327	define the method get_connection with arguments self and fail_silently set to boolean False .
 2328	from django.core.mail import get_connection into default name space .
 2329	if self.connection is false ,
 2330	call the function get_connection with argument fail_silently set to fail_silently , substitute it for self.connection .
 2331	return self.connection .
 2332	define the method message with argument self .
 2333	if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding .
 2334	msg is a instance of a SafeMIMEText class created with arguments : self.body , self.content_subtype and encoding .
 2335	call the self._create_message method with argument msg , substitute it for msg .
 2336	substitute self.subject for value under the STR0 key of msg dictionary .
 2337	call the method self.extra_headers.get with string STR0 and self.from_email as arguments , substitute the result for value under the STR1 key of msg dictionary .
 2338	call the method self.extra_headers.get with arguments : string STR0 and joined string from self.to elements separated by STR1 , substitute the result for value under the STR2 key of msg dictionary .
 2339	if self.cc is true ,
 2340	join elements of self.cc into a string separated by STR0 , substitute the result for value under the STR1 key of msg dictionary .
 2341	call the key.lower method for every key in self.extra_headers , join the results into a header_names .
 2342	if STR0 is not in header_names ,
 2343	call the formatdate function , substitute it for value under the STR0 key of msg dictionary .
 2344	if message-id ' is not in header_names ,
 2345	call the make_msgid function , substitute it for value under the STR0 key of msg dictionary .
 2346	for every name and value in return value of the method self.extra_headers.items ,
 2347	convert name to lower case if it equals to string STR0 or 'to ,
 2348	skip this loop execution ,
 2349	substitute value for value under name key of msg dictionary .
 2350	return msg .
 2351	define the method recipients with argument self .
 2352	add together self.to , self.cc and self.bcc , return the result .
 2353	define the method send with arguments self and fail_silently set to boolean False .
 2354	call the method self.recipients , if it evaluates to false ,
 2355	return an integer 0 .
 2356	call the method self.get_connection with argument fail_silently , on the result call the method send_messages with one argument : list containing self , return the result .
 2357	define the method attach with 4 arguments : self , filename set to None , content set to None and mimetype set to None .
 2358	if filename is an instance of MIMEBase ,
 2359	if content is not None raise an error .
 2360	if mimetype is not None raise an error .
 2361	append filename to the self.attachments list .
 2362	if not ,
 2363	if content is not None raise an error .
 2364	append a tuple containing 3 elements : filename , content , mimetype to self.attachments list .
 2365	define the method attach_file with arguments self , path and mimetype set to None .
 2366	call the os.path.basename with path as argument , substitute the result for filename .
 2367	open file named path in STR0 mode , with file descriptor as f ,
 2368	read the whole file f , substitute the result for content .
 2369	call the method self.attach with arguments filename , content and mimetype .
 2370	define the method _create_message with arguments self and msg .
 2371	call the method self._create_attachments with argument msg , return the result .
 2372	define the method _create_attachments with arguments self and msg .
 2373	if self.attachments is true ,
 2374	if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding .
 2375	substitute msg for body_msg .
 2376	msg is an instance of a class SafeMIMEMultipart , created with arguments : _subtype set to self.mixed_subtype and encoding set to encoding .
 2377	if self.body is true ,
 2378	call the method msg.attach with an argument body_msg .
 2379	for every attachment in self.attachments ,
 2380	if attachment is an instance of MIMEBase ,
 2381	call the method msg.attach with an argument attachment .
 2382	if not ,
 2383	call the method self._create_attachment with an unpacked list attachment as an argument , use the result as an argument for the call to the msg.attach method .
 2384	return msg .
 2385	define the method _create_mime_attachment with arguments self , content and mimetype .
 2386	call the method mimetype.split with arguments : character STR0 and integer 1 , substitute the result for basetype and subtype , respectively .
 2387	if basetype equals a string STR0 ,
 2388	if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding .
 2389	attachment is an instance of a class SafeMIMEText , created with arguments : content , subtype and encoding .
 2390	otherwise if basetype equals a string STR0 and subtype equals a string STR1 ,
 2391	if content is an instance of a EmailMessage class ,
 2392	call the method content.message , substitute the result for content .
 2393	otherwise if content is not an instance of Message class ,
 2394	call the message_from_string function with an argument content , substitute the result for content .
 2395	attachment is an instance of a class SafeMIMEMessage , created with the arguments content and subtype .
 2396	if not ,
 2397	attachment is an instance of a class MIMEBase , created with the arguments basetype and subtype .
 2398	call the method attachment.set_payload with an argument content .
 2399	call the method Encoders.encode_base64 with an argument attachment .
 2400	return attachment .
 2401	define the method _create_attachment with 4 arguments : self , filename , content and mimetype set to None .
 2402	if mimetype is None ,
 2403	call the mimetypes.guess_type with an argument filename , assign the result to the mimetype and _ , respectively .
 2404	if mimetype is None ,
 2405	substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype .
 2406	call the method self._create_mime_attachment with the arguments content and mimetype , substitute the result for attachment .
 2407	if filename is true ,
 2408	try ,
 2409	call the method filename.encode with an argument string STR0
 2410	if UnicodeEncodeError exception is caught ,
 2411	if six.PY2 is true ,
 2412	call the method filename.encode with an argument string STR0 , substitute the result for filename .
 2413	filename is a tuple containing 3 initial elements : string STR0 , and empty string and filename .
 2414	call the method attachment.add_header with 3 arguments : string STR0 , string STR1 and filename set to filename .
 2415	return attachment .
 2416	derive the class EmailMultiAlternatives from the EmailMessage base class .
 2417	alternative_subtype is a string STR0 .
 2418	define the method __init__ with 11 arguments : self , subject set to an empty string , body set to an empty string ,
 2419	call the method __init__ from the base class of the EmailMultiAlternatives class , with 9 arguments : subject , body , from_email , to , bcc , connection , attachments , headers and cc .
 2420	if alternatives exists substitute it for self.alternatives , if not self.alternatives is an empty list .
 2421	define the method attach_alternative with arguments self , content and mimetype .
 2422	if content is None , raise an error .
 2423	if mimetype is None , raise an error .
 2424	append a tuple containing 2 elements : content and mimetype , to the self.alternatives list .
 2425	define the method _create_message with arguments self and msg .
 2426	call the method self._create_alternatives with an argument msg , use it as an argument for the call to the self._create_attachments method , return the result .
 2427	define the method _create_alternatives with arguments self and msg .
 2428	if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding .
 2429	if self.alternatives is true ,
 2430	substitute msg for body_msg .
 2431	msg is an instance of a class SafeMIMEMultipart , created with the arguments : _subtype set to self.alternative_subtype and encoding set to encoding .
 2432	if self.body is true ,
 2433	call the msg.attach with an argument body_msg .
 2434	for every alternative in self.alternatives ,
 2435	call the method self._create_mime_attachment with unpacked list alternative as an argument , use the result as an argument for the call to the msg.attach method .
 2436	return msg .
 2437	import module socket .
 2438	derive class CachedDnsName from the object base class .
 2439	define the method __str__ with argument self .
 2440	evaluate the self.get_fqdn method , return the result .
 2441	define the method get_fqdn with argument self .
 2442	if self doesnt have an attribute STR0 ,
 2443	call the function socket.getfqdn , substitute the result for self._fqdn .
 2444	return self._fqdn .
 2445	DNS_NAME is a instance of CachedDnsName class .
 2446	from __future__ import unicode_literals into default name space .
 2447	import module collections .
 2448	from importlib import import_module into default name space .
 2449	import module os .
 2450	import module sys .
 2451	import module django .
 2452	from django.apps import apps into default name space .
 2453	from django.conf import settings into default name space .
 2454	from django.core.exceptions import ImproperlyConfigured into default name space .
 2455	from django.core.management.base import BaseCommand , CommandError , CommandParser and handle_default_options into default name space .
 2456	from django.core.management.color import color_style into default name space .
 2457	from django.utils import lru_cache into default name space .
 2458	from django.utils import six into default name space .
 2459	define the function find_commands with an argument management_dir .
 2460	join management_dir and string STR0 into a file path name , substitute it for command_dir .
 2461	try ,
 2462	for every f in return value of the os.listdir function called with an argument command_dir , append f without 3 last elements to a list , only if f doesnt start with character STR0 and doesnt ends with string STR1 , return the resulting list .
 2463	if OSError exception is caught ,
 2464	return an empty list .
 2465	define the function load_command_class with arguments : app_name and name .
 2466	replace STR0 in string STR1 with app_name and name , respectively , use it as an result for the call to the import_module function , substitute the result for module .
 2467	return an instance of the module.Command class .
 2468	decorator lru_cache.lru_cache with an argument maxsize set to None .
 2469	define the function get_commands .
 2470	commands is an dictionary containing elements : string STR0 for every name in the function find_commands return value , called with first element of __path__ as an argument .
 2471	if settings.configured is false ,
 2472	return commands .
 2473	for every app_config in reversed list created out of the return value of the function apps.get_app_configs ,
 2474	join app_config.path and string STR0 into a file path , substitute it for path .
 2475	call the method commands.update , with an argument dictionary containing entries : app_config_name for name , for every name in return value of the function find_commands , called with an argument path .
 2476	return commands .
 2477	define the function call_command with 3 arguments : name , unpacked list args and unpacked dictionary options .
 2478	try ,
 2479	call the function get_commands , substitute the value under the name key of the return value , for app_name .
 2480	if KeyError exception is caught ,
 2481	raise an CommandError exception with an argument string STR0 , with STR1 replaced by name .
 2482	if app_name is an instance of BaseCommand ,
 2483	substitute app_namefor command .
 2484	if not ,
 2485	call the function load_command_class with arguments : app_name and name , substitute the result for command .
 2486	all the method command.create_parser with arguments : empty and name , substitute the result for parser .
 2487	if command.use_argparse is true ,
 2488	call the method parser.parse_args with an argument args set to args , substitute the result for defaults .
 2489	create dictionary out of the unpacked dictionary options , using defaults._get_kwargs as a mapping function , substitute the result for defaults .
 2490	if not ,
 2491	call the method parser.parse_args with an arguments args set to an empty list , assign the result for defaults and _ , respectively .
 2492	create dictionary out of the unpacked dictionary options , using defaults.__dict__ as a mapping function , substitute the result for defaults .
 2493	call the command.execute method with arguments : unpacked list args and unpacked dictionary defaults , return the result .
 2494	derive the class ManagementUtility from object base class .
 2495	define the method __init__ with arguments : self class instance and argv set to None .
 2496	if argv is true , substitue it for self.argv , if not substitute sys.argv for self.argv .
 2497	call the function os.path.basename with first element of self.argv as an argument , substitute the result for self.prog_name .
 2498	self.settings_exception is None .
 2499	define the method main_help_text with arguments : self class instance and commands_only set to boolean False .
 2500	if commands_only is true ,
 2501	call the function get_commands , call the method keys on the result , substitute sorted result for usage .
 2502	if not ,
 2503	usage is a list containing 4 entries : an empty string , string STR0 , where STR2 is replaced with self.prog_name , an empty string and string STR1 .
 2504	call the method collections.defaultdict with a argument : lambda function without arguments that returns an empty list , substitute the result for commands_dict .
 2505	for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment ,
 2506	if app equals a string STR0 ,
 2507	app is a string STR0
 2508	if not ,
 2509	call the method app.rpartition with an argument STR0 , substitute last element of the result for app .
 2510	append name to the value of under the app key of the commands_dict .
 2511	call the color_style function , substitute the result for style .
 2512	for every app in sorted return value of the commands_dict.keys function ,
 2513	append an empty string to usage .
 2514	call the style.NOTICE method with an argument string STR0 , where STR1 is replaced with app , append the result to usage .
 2515	for every name in sorted value under the app key of the commands_dict dictionary ,
 2516	append string STR0 , where STR1 is replaced by name to the usage .
 2517	if self.settings_exception is not None ,
 2518	call the method style.NOTICE with an argument string STR0 , where STR1 is replaced by self.settings_exception , append the result to usage .
 2519	join usage elements in a string separated by newline characters , return it .
 2520	define the method fetch_command , with arguments self and subcommand .
 2521	call the function get_commands , substitute it for commands .
 2522	try ,
 2523	substitute value under the subcommand key of the commands dictionary for app_name .
 2524	if KeyError exception is caught ,
 2525	call settings.INSTALLED_APPS .
 2526	call the method sys.stderr.write with an argument string STR0 , where STR1 is replaced with subcommand and STR2 is replaced with self.prog_name .
 2527	call the function sys.exit with an argument integer 1 .
 2528	if app_name is an instance of BaseCommands .
 2529	substitute app_name for klass .
 2530	if not ,
 2531	call the function load_command_class with arguments app_name and subcommand , substitute the result for klass .
 2532	return klass .
 2533	define the method autocomplete with an argument self .
 2534	if string STR0 is not contained in os.environ ,
 2535	return nothing .
 2536	slit by whitespace the value under the STR0 key of the os.environ dictionary , substitute the result without the first element for cwords .
 2537	convert to an integer value under the STR0 key of the os.environ dictionary , substitute it for cword .
 2538	try ,
 2539	substitute cwords element at the cword decremented by 1 index for curr .
 2540	if IndexError exception is caugh ,
 2541	curr is an empty string .
 2542	call the function get_commands , convert the result to a list , append string STR0 to it , substitute it for subcommands .
 2543	options is a list containing a tuple with 2 entries : string STR0 and None .
 2544	if cword equlals a integer 1 ,
 2545	filter all the subcommands element through the lambda function with an argument x , that evaluates the method x.startswith , with an argument curr , sort the result and join it in a list separated with blank spaces , print it to the standard output .
 2546	otherwise if first element of cwords is contanied in subcommands and is not equal to string STR0 ,
 2547	call the method self.fetch_command with first element of cwords as an argument , substitute it for subcommand_cls .
 2548	if first element of cwords equals a string STR0 ,
 2549	from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace ,
 2550	append tuple containing two entries : k and integer 1 to options , for every k in FASTCGI_OPTIONS .
 2551	otherwise if first element of cwords is contanied in tuple with 8 entries : STR0 , STR1 , STR2 , STR3 , STR4 ,
 2552	try ,
 2553	call the method apps.get_app_configs , substitute the result for app_configs .
 2554	append tuple containing two entries : app_config.label and integer 0 to options , for every app_config in app_configs .
 2555	if ImportError exception is caught ,
 2556	do nothing .
 2557	call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords , substitute it for parser .
 2558	if subcommand_cls.use_argparse is true ,
 2559	append to options a tuple containing 2 entries : firs element of sorted list of the s_opt.option_strings ,
 2560	and evaluated boolean expression s_opt.nargs doesnt equal to integer 0 , for every s_opt in parser._actions , only if s_opt.option_strings is true , if not ,
 2561	append to options a tuple containing 2 entries : result of the method s_opt.get_opt_string and s_opt.nargs , for every s_opt in parser.option_list .
 2562	for every x in slice of cwords from the second element to the element at the cword decremented by 1 index ,
 2563	split x by character STR0 and append first element of the result to the prev_opts list . for every opt in options , if first element of opt is not contained in prev_opts , append opt to the list , substitute it for options .
 2564	append tuple containing 2 elements : k and v to a list , for every k and v in options , only if k starts with curr , sort the result and substitute it for options .
 2565	for every option in options ,
 2566	substitute first element of options for opt_label .
 2567	if second element of options is true ,
 2568	append STR0 to opt_label .
 2569	print opt_label to the standard output .
 2570	call the function sys.exit with an integer 1 as an argument .
 2571	define the method execute with an argument self ,
 2572	try ,
 2573	substitute first element of self.argv for subcommand .
 2574	if IndexError exception is caught ,
 2575	subcommand is a string STR0 .
 2576	parser is an instance of CommandParser class , created with 3 arguments , None , usage as a string STR0 and add_help set to boolean False .
 2577	call the method parser.add_argument with an argument string STR0 .
 2578	call the method parser.add_argument with an argument string STR0 .
 2579	call the method parser.add_argument with arguments : string STR0 and nargs set to STR1 .
 2580	try ,
 2581	call the method parser.parse_known_args wiht an argument self.argv , without the first two elements , assign the result for options , and args , respectively .
 2582	call the method handle_default_options with an argument options .
 2583	if CommandError exception is caught ,
 2584	do nothing .
 2585	no_settings_commands is a list containing entries : STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 and STR8 .
 2586	try ,
 2587	call the settings.INSTALLED_APPS .
 2588	if ImproperlyConfigured renamed to exc , exception is caught ,
 2589	substitute exc for self.settings_exception ,
 2590	if subcommand is contained in no_settings_commands ,
 2591	call the method settings.configure .
 2592	if settings.configured is true ,
 2593	call the method django.setup .
 2594	call the method self.autocomplete .
 2595	if subcommand equals to a string STR0 .
 2596	if string STR0 is contained in args ,
 2597	call the method self.main_help_text with an argument commands_only set to boolean True , append new line to it , write it to sys.stdout .
 2598	otherwise , length of options.args is lesser than integer 1 ,
 2599	call the method self.main_help_text append new line to it , write it to sys.stdout .
 2600	if not ,
 2601	call the method self.fetch_command with first element of options.args as argument , on the result call the method print_help , with 2 arguments : self.prog_name and first element of options.args .
 2602	otherwise if subcommand equals a string STR0 or self.argv , without the first element equals a list containing a string STR1
 2603	call the method django.get_version append new line to it , write it to sys.stdout .
 2604	if self.argv , without the first element is contained in a tuple with 2 entries : a list containing a string STR0 ,
 2605	and a list containing a string STR0 , call the method self.main_help_text , append new line to it , write it to sys.stdout .
 2606	if not ,
 2607	call the method self.fetch_command with an argument command , call the method run_from_argv on the result with an argument self.argv .
 2608	define the function execute_from_command_line with an argument argv set to None .
 2609	utility is a instance of ManagementUtility class , created with an argument argv .
 2610	call the method utility.execute .
 2611	from __future__ import unicode_literals into default name space .
 2612	import module os .
 2613	import module sys .
 2614	import module warnings .
 2615	from argparse import ArgumentParser into default name space .
 2616	from optparse import OptionParser into default name space .
 2617	import module django .
 2618	from django.core import checks into default name space .
 2619	from django.core.exceptions import ImproperlyConfigured into default name space .
 2620	from django.core.management.color import color_style and no_style into default name space .
 2621	from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space .
 2622	from django.utils.encoding import force_st into default name space .
 2623	derive the class CommandError from the base class Exception .
 2624	do nothing .
 2625	derive the CommandParser class from the ArgumentParser base class .
 2626	define the method __init__ with arguments : self , cmd and unpacked dictionary kwargs .
 2627	substitute cmd for self.cmd .
 2628	call the method __init__ from the base class of the CommandParser class , with unpacked dictionary kwargs as argument .
 2629	define the method parse_args with 3 arguments : self , args set to None and namespace set to None .
 2630	if self.cmd has an attribute STR0 and next statement is not true : args is true or any arg doesnt start with STR1 for arg in args ,
 2631	call the method self.error with an argument self.cmd.missing_args_message .
 2632	call the parse_args method with arguments args and namespace , from the base class of the CommandParser class .
 2633	define the method error with arguments self and message .
 2634	if self.cmd._called_from_command_line is true ,
 2635	call the method error with an argument message , from the base class of the class CommandParser .
 2636	if not ,
 2637	raise an CommandError exception with an argument string STR0 , with STR1 replaced by message .
 2638	define the function handle_default_options with an argument options .
 2639	if options.settings is true ,
 2640	substitute options.settings for value under the STR0 key of the os.environ dictionary .
 2641	if options.pythonpath is true ,
 2642	insert options.pythonpath at the beginning of sys.path .
 2643	derive the OutputWrapper class from the object base class .
 2644	define the method __init__ with 4 arguments : self , out , style , func set to None and endings set to newline character .
 2645	substitute out for self._out .
 2646	substitute None for self.style_func .
 2647	if out has an STR0 argument and return value of the function out.isatty is true ,
 2648	substitute style_func for self.style_func .
 2649	substitute ending for self.ending .
 2650	define the method __getattr__ with arguments self and name .
 2651	get name attribute of the self._out object , return it .
 2652	define the method write with 4 arguments : self , msg , style_func with None and ending set None .
 2653	if ending is None substitute self.ending for ending .
 2654	if ending is true and msg doesnt end with ending ,
 2655	append ending to msg .
 2656	if f is not None append it to a list for every f in tuple containing 3 elements : style_func , self.style_func , and lambda function returning x for x , substitute the firs element of resulting list for style_func .
 2657	call the function style_func with an argument msg , use the result as an argument for the call to the function force_str , use the result as an argument for the call to the function self._out.write .
 2658	derive the BaseCommand class from the object base class .
 2659	options_list is an empty tuple .
 2660	help is an empty string .
 2661	args is an empty string .
 2662	_called_from_command_line is boolean False .
 2663	can_import_settings is boolean True .
 2664	output_transaction is boolean False .
 2665	leave_locale_alone is boolean False .
 2666	define the method __init__ with an argument self .
 2667	call the function color_style , substitute the result for self.style .
 2668	if self has an STR0 attribute , has_old_option is boolean True , otherwise it is boolean False .
 2669	if self has an STR0 attribute , has_new_option is boolean True , otherwise it is boolean False .
 2670	if has_old_option is true ,
 2671	call the function warnings.warn with 2 arguments : string STR2 and RemovedInDjango19Warning .
 2672	if has_old_option and has_new_option are both true ,
 2673	raise an ImproperlyConfigured exception wiht an argument string STR1
 2674	STR2 , replace STR3 for self.__class__.__name__ . call the method self.requires_system_checks with an argument : self.requires_system_checks if has_new_option is true , or if it is false , but has_old_option is true use self.requires_model_validation , if they are both false use boolean True as an argument .
 2675	property decorator ,
 2676	define the method use_argparse with an argument self ,
 2677	convert self.option_list into a boolean , return the inverted value .
 2678	define the method get_version with an arguments self .
 2679	call the function django.get_version , return the result .
 2680	define the method usage with arguments self and subcommand .
 2681	substitute STR0 in the string STR1 with subcommand and self.args , respectively , substitute it for usage .
 2682	if self.help is true ,
 2683	join usage and self.help into a string , separated by 2 new line characters , return it .
 2684	if not ,
 2685	return usage .
 2686	define the method create_parser with 3 arguments : self , prog_name and subcommand .
 2687	if self.use_argparse is false ,
 2688	call the function warnings.warn with 2 arguments : string STR0 and RemovedInDjango20Warning .
 2689	parser is an instance of the object OptionParser , created with arguments : prog set to prog_name , usage set to return value of the method self.usage called with an argument subcommand , version set to return value of the method self.get_version .
 2690	call the method parser.add_option with 8 arguments : string STR0 , string STR1 , action set to string STR2 , dest set to string STR3 , default set to string STR4 , type set to string STR5 , choices is a list containing elements : STR6 , STR7 , STR8 , STR9 , and help as a string STR10 .
 2691	call the method parser.add_option with 2 arguments : string STR1 and help as a string 'The Python path to a settings module , e.g . STR0 . If this isnSTRt provided , the DJANGO_SETTINGS_MODULE environment variable will be used .
 2692	call the method parser.add_option with 2 arguments : string STR1 and help set to string STR2 .
 2693	call the method parser.add_option with 3 arguments : string STR0 , action set to a string STR1 , and help= STR2 .
 2694	call the method parser.add_option with 5 arguments : string STR1 , action set to a string STR2 , dest set to string STR3 default set to boolean False and help set to a string STR0 .
 2695	for every opt in self.option_list ,
 2696	call the method parser.add_option with an argument opt .
 2697	if not ,
 2698	parser is an instance of CommandParser class , created with 3 arguments : self , prog as a string created by joining : os.path.basename ( prog_name ) and subcommand , separated by whitespace and description set to self.help , if exists , or None , otherwise .
 2699	call the method parser.add_option with 3 arguments : string STR0 , action set to string STR1 , and version set to result of the method self.get_version .
 2700	call the method parser.add_option with 8 arguments : string STR0 , string STR1 , action set to string STR2 ,
 2701	dest set to string STR1 , default set to string STR2 , type set to int , choices is a list , containing integers : 0 , 1 , 2 and 3 , call the method parser.add_option with 2 arguments : string STR3 and help as a string STR4
 2702	call the method parser.add_option with 2 arguments : string STR1 and help set to a string STR2
 2703	call the method parser.add_option with 3 arguments : string STR0 , action set to a string STR1 , and help set to string STR2 .
 2704	call the method parser.add_option with 5 arguments : string STR1 , action is string STR2 , dest is string STR3 , default is boolean False , and help is a string STR0 .
 2705	if self.args is true ,
 2706	call the method parser.add_argument with 2 arguments : string STR0 and nargs set to STR1 .
 2707	call the method self.add_arguments with an argument parser .
 2708	return parser
 2709	define the method add_arguments with an argument self and parser .
 2710	do nothing
 2711	define the method print_help with 3 arguments : self , prog_name and subcommand .
 2712	call the method self.create_parser with arguments prog_name and subcommand .
 2713	call the method parser.print_help .
 2714	define the method run_from_argv with arguments self and argv .
 2715	self._called_from_command_line is boolean True .
 2716	call the method self.create_parser with first and second element of argv , substitute the result for parser .
 2717	if self.use_argparse is true ,
 2718	call the method parser.parse_args with argv , without the first 2 elements , substitute the result for options .
 2719	call the function vars with an argument options , substitute the result for cmd_options .
 2720	if STR0 is contained in options ,
 2721	substitute options.args for args .
 2722	delete value under the STR0 key of the cmd_options dictionary .
 2723	if not ,
 2724	args is an empty tuple .
 2725	if not ,
 2726	call the method parser.parse_args with argv , without the first 2 elements , substitute the result for options and args .
 2727	call the function vars with an argument options , substitute the result for cmd_options .
 2728	call the function handle_default_options with an argument options .
 2729	try ,
 2730	call the method self.execute , with 2 arguments : unpacked list args and unpacked dictionary cmd_options .
 2731	if Exception , renamed to e , exception is caught ,
 2732	if options.traceback is true or e is not CommandError instance ,
 2733	raise an exception .
 2734	if it exists , get STR0 attribute of self , substitute it for stderr , if not , stderr is an instance of OutputWrapper class , created with arguments sys.stderr and self.style.ERROR .
 2735	replace STR0 in string STR1 with e.__class__.__name__ and e , respectively , write it to the stderr stream .
 2736	call the function sys.exit with an argument integer 1 .
 2737	define the method execute with 3 arguments : self , unpacked list args and unpacked dictionary options .
 2738	self.stdout is an instance of OutputWrapper class created with an argument : value under the STR0 key of the options dictionary , if the key doesnt exists use sys.stdout as an argument .
 2739	if value under the STR0 key of the options dictionary .
 2740	call the function no_style , substitute the result for self.style .
 2741	self.stderr is an OutputWrapper object instance , created with value under the STR0 key of the options dictionary as an argument , if the key doesnt exists use sys.stderr as an argument .
 2742	if not ,
 2743	self.stderr is an instance of an OutputWrapper object , created with 2 arguments : value under the STR0 key of the options dictionary , if it doesnt exists use the sys.stderr instead , and self.style.ERROR .
 2744	if self.can_import_settings is true ,
 2745	from django.conf import settings into default namespace ,
 2746	saved_locale is None .
 2747	if self.leave_locale_alone is false ,
 2748	if self.can_import_settings is false ,
 2749	raise an CommandError exception with an argument string , STR0 , replace STR1 with self.leave_locale_alone and self.can_import_settings .
 2750	from django.utils import translation into default namespace .
 2751	call the method translation.get_language , substitute th result for saved_locale .
 2752	call the method translation.activate with an argument string STR0 .
 2753	try ,
 2754	if self.requires_system_checks is true and values under the STR0 and STR1 keys of the options dictionary are false ,
 2755	call the method self.check ,
 2756	call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for output .
 2757	if output is true ,
 2758	if self.output_transaction is true ,
 2759	from django.db import connections and DEFAULT_DB_ALIAS into default namespace .
 2760	get the value under the STR0 key of the options dictionary , if it doesnt exists use the DEFAULT_DB_ALIAS to address an element from the connections list , substitute it for connection .
 2761	call the method connection.ops.start_transaction_sql , if it evaluates to true ,
 2762	call the method connection.ops.start_transaction_sql , use the result as an argument for the call to the method self.style.SQL_KEYWORD , write the result to the self.stdout stream .
 2763	write output to self.stdout stream .
 2764	if self.output_transaction is true ,
 2765	call the method connection.ops.end_transaction_sql , use the result as the argument for the call to the method self.style.SQL_KEYWORD , append the result to the STR0 string , write it to self.stdout .
 2766	finally perform ,
 2767	if saved_locale is not None ,
 2768	call the method translation.activate with an argument saved_locale .
 2769	define the method with 3 arguments : self , app_config set to None and display_num_errors set to boolean False .
 2770	if app_config is None ,
 2771	app_configs is not None .
 2772	if not ,
 2773	app_configs is a list containing app_config .
 2774	call the method self.check with 2 arguments app_configs set to app_configs , display_num_errors set to display_num_errors , return the result .
 2775	define the method check with 4 arguments : self , app_configs set to None , tags set to None , display_num_errors set to boolean False .
 2776	call the method checks.run_checks with 2 arguments : app_configs set to app_configs , tags set t tags , substitute the result for all_issues .
 2777	msg is an empty string .
 2778	visible_issue_count is an integer 0 .
 2779	if all_issues is true ,
 2780	append e to debugs list for every e in all_issues , if e.level is lesser than checks.INFO and result of the method e.is_silenced in false .
 2781	append e to infos list for every e in all_issues , if checks.INFO is lesser or equal to e.level , and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false .
 2782	append e to warnings list for every e in all_issues , if checks.WARNING is lesser than or equal to e.level , and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false .
 2783	append e to errors list for every e in all_issues , if checks.ERROR is lesser than or equal to e.level , and e.level is lesser than checks.CRITICAL .
 2784	append e to criticals list for every e in all_issues , if checks.CRITICAL is lesser than or equal to e.level .
 2785	sorted_issues is a list of tuples with 5 entries : criticals and STR0 , errors and STR1 , warnings and STR2 ,
 2786	infos , STR0 for every issues and group_name in sorted_issues ,
 2787	if issues is true ,
 2788	increment visible_issue_count for length of issues .
 2789	if e.is_serious method evaluates to true , call the function color_style , on the result call the method ERROR with result of the force_str called with an argument e , if not call the function color_style on the result call the method ERROR with result of the force_str called with an argument e , for every e in issues , formatted is a tuple containing the previous result .
 2790	sort elements formatted , join them in the list separated with newline character , substitute the result for formatted .
 2791	substitute STR0 in the string STR1 , with group_name and formatted , substitute the result for msg .
 2792	if msg is true ,
 2793	replace STR1 in string STR0 with msg , substitute it for msg .
 2794	if display_num_errors is true ,
 2795	if msg is true ,
 2796	append newline character to msg .
 2797	append string STR0 to msg , replace first STR4 for : string STR1 , if visible_issue_count equals to integer 0 , or for string STR2 if visible_issue_count equals integer 1 , or for string STR3 , with STR5 replaced by visible_issue_count , subtract visible_issue_count from length of all_issues , and substitute it for second STR6 in the stirting string .
 2798	if any element in the return value of the e.is_serious method is true , and if return value of the method e.is_silenced is false , for every e in all_issues .
 2799	raise an CommandError with argument msg ,
 2800	otherwise if msg and visible_issue_count are true ,
 2801	write msg to self.stderr stream .
 2802	otherwise if msg is true ,
 2803	write msg to self.stderr stream .
 2804	define the method handle with 3 arguments : self , unpacked args and unpacked dictionary options .
 2805	raise an NotImplementedError exception with an argument string STR0 .
 2806	derive the AppCommand class from the BaseCommand base class .
 2807	missing_args_message is an string STR0 .
 2808	define the method add_arguments with self and parser as arguments .
 2809	call the method parser.add_argument with 4 arguments : string STR0 , metavar set to STR1 , nargs set to STR2 , and help set to string STR3 .
 2810	define the method handle with 3 arguments : self , unpacked list app_labels and unpacked dictionary options .
 2811	from django.apps import apps into default name space .
 2812	try ,
 2813	call the method apps.get_app_config with an argument app_lable , for every app_label in app_labels , append the results to app_configs list .
 2814	if LookupError or ImportError , renamed to e , exceptions are caught ,
 2815	raise an CommandError with an argument string STR0 , with STR1 replaced by e .
 2816	output is an empty list .
 2817	for eery app_config in app_configs ,
 2818	call the self.handle_app_config method with app_config and options as arguments , substitute the result for app_output .
 2819	if app_output is true ,
 2820	append app_output to output .
 2821	join elements of output into a string , separated by newline characters , return it .
 2822	define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
 2823	try ,
 2824	substitute self.handle_app for handle_app .
 2825	if AttributeError exception is caught ,
 2826	raise an NotImplementedError with an argument string STR0 .
 2827	if not ,
 2828	call the function warnings.warn with 3 argument : string STR0 , RemovedInDjango19Warning and stacklevel set to integer 2 .
 2829	if app_config.models_module is None ,
 2830	raise an CommandError with an argument string STR0 , where STR1 is replaced by app_config.label .
 2831	call the function handle_app with 2 arguments : app_config.models_module and unpacked dictionary options .
 2832	derive the LabelCommand class from the BaseCommand base class .
 2833	label is a string STR0
 2834	substitute string STR0 , with STR1 replaced by label , for missing_args_message .
 2835	define the method add_arguments with arguments self and parser .
 2836	call the method parser.add_argument with 3 arguments : string STR0 , metavar set to self.label and nargs set to STR1 .
 2837	define the method handle with 3 arguments : self , unpacked list labels and unpacked dictionary options .
 2838	output is an empty list .
 2839	for every label in labels ,
 2840	call the method self.handle_label with 2 arguments : label and unpacked dictionary options , substitute the result for label_output .
 2841	if label_output is true ,
 2842	append label_output to output .
 2843	join output into a string , separated by newline characters , return it .
 2844	define the method handle_label with 3 arguments : self , label and unpacked dictionary options .
 2845	raise an NotImplementedError exception with an argument string STR0 .
 2846	derive the NoArgsCommand class from the BaseCommand base class .
 2847	args is an empty string .
 2848	define the method __init__ with an argument self .
 2849	call the function warnings.warn with 2 arguments : string STR0 and RemovedInDjango20Warning .
 2850	call the __init__ method from the base class of the NoArgsCommand class .
 2851	define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
 2852	if args is true ,
 2853	raise an CommandError exception with an argument string STR0 .
 2854	call the self.handle_noargs method with with unpacked dictionary options as argument , return the result .
 2855	define the method handle_noargs with 2 arguments : self and unpacked dictionary options .
 2856	raise an NotImplementedError with an argument string STR0 .
 2857	import module os .
 2858	import module sys .
 2859	from django.utils import termcolors into default name space .
 2860	define the function supports_color , without arguments .
 2861	substitute sys.platform for plat .
 2862	evaluate the logic expression , plat does not equals to string STR0 , and plat does not equals to string STR1 or string STR2 is in os.environ , substitute the evaluated boolean for supported_platform .
 2863	if sys.stdout has an attribute named STR0 and call to the sys.stdout.isatty returns boolean True , substitute True for is_a_tty .
 2864	if supported_platform is False or is_a_tty is False ,
 2865	return boolean False .
 2866	return boolean True .
 2867	define function color_style , without input arguments .
 2868	call the function supports_color , if evaluates to False ,
 2869	substitute return value of function no_style for style .
 2870	if not ,
 2871	get the value under the key STR0 of os.environ dictionary , if key doesnt exists return empty string , assign the result to DJANGO_COLORS .
 2872	call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument , assign the result to color_settings .
 2873	if color_setting is True ,
 2874	define class dummy .
 2875	do nothing .
 2876	style is an instance of the dummy class .
 2877	for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE ,
 2878	assign the value of the dictionary color_settings under the key role to format , if key doesnt exist assign the empty dictionary .
 2879	sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument .
 2880	substitute style.ERROR for style.ERROR_OUTPUT .
 2881	if not ,
 2882	substitute return value of function no_style for style .
 2883	return style .
 2884	define function no_style , without input arguments .
 2885	define class dummy .
 2886	define private method __getattr__ with self class instance and attr as the arguments .
 2887	create lambda identity function which returns x for input parameter x , return the function .
 2888	return an instance of a dummy class .
 2889	from __future__ import unicode_literals into default name space .
 2890	from django.apps import apps into default name space .
 2891	from django.core import checks into default name space .
 2892	from django.core.checks.registry import registry into default name space .
 2893	from django.core.management.base import BaseCommand and CommandError into default name space .
 2894	derive the class Command from the BaseCommand base class .
 2895	help is a string STR0 .
 2896	requires_system_checks is boolean False .
 2897	define the method add_arguments with arguments self and parser .
 2898	call the method parser.add_argument with 3 arguments : string STR0 , metavar set to string STR1 and nargs set to STR2 .
 2899	call the method parser.add_argument with 5 arguments : string STR0 , string STR1 , action set to string STR2 , dest set to string STR3 and help set to string STR4 .
 2900	call the method parser.add_argument with 4 arguments : string STR0 , action set to string STR1 , dest set to string STR2 and help set to string STR3 .
 2901	define method handle with arguments self , unapcked list app_labels and unpacked dictionary options .
 2902	if value under the STR0 key of options dictionay is true ,
 2903	call the method registry.tags_available , sort the result and join it into a string , separate by newlines , write it to self.stdout .
 2904	return nothing .
 2905	if app_labels is true ,
 2906	call the method apps.get_app_config with an argument app_label , for every app_label in app_labels , append the results to a list , substitute the resulting list for app_config .
 2907	if not ,
 2908	app_configs is None .
 2909	get the value under the STR0 key of the options dictionary , if it exists substitute it for tags , if not , tags is None .
 2910	if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag ,
 2911	for every tag in tags , are false , for every tag in tags , if return value of the method checks.tag_exists called with an argument tag , evaluates to false , use tag as an argument to call the iterator method next , substitute the result for invalid_tag .
 2912	raise an CommandError exception with an argument string STR1 , where STR2 is replaced with invalid_tag .
 2913	call the method self.check with arguments : app_configs set to app_configs , tags set to tags , display_num_errors set to boolean True .
 2914	from __future__ import unicode_literals into default name space .
 2915	import module codecs .
 2916	import module glob .
 2917	import module os .
 2918	from django.core.management.base import BaseCommand and CommandError into default name space .
 2919	from django.core.management.utils import find_command and popen_wrapper into default name space .
 2920	from django.utils._os import npath and upath into default name space .
 2921	define the function has_bom with fn as argument .
 2922	open the file fn in read mode , with file descriptor as f ,
 2923	read 4 bytes from file f and store it in sample .
 2924	evaluate the boolean expression , if first three characters of sample equals to string of bytes '\xef\xbb\xbfSTR , of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE , return the evaluated boolean expression .
 2925	define the function is_writable with path as argument ,
 2926	try ,
 2927	with open file path in append mode ,
 2928	call the os.utime unction , with path and None as arguments .
 2929	if IOError or OSError exceptions occurred ,
 2930	return boolean False .
 2931	return boolean True .
 2932	derive class Command from base class BaseCommand .
 2933	help is string STR0 .
 2934	requires_system_checks is boolean False .
 2935	leave_locale_alone is boolean True .
 2936	program is string STR0
 2937	program_options is list containing string STR0 .
 2938	define method add_arguments with self class instance and parser as arguments .
 2939	call the method parser.add_argument with string STR0 , string STR1 , dest set to string STR2 , action set to string STR3 , default as an empty list and help as an string STR4 .
 2940	call the method parser.add_argument with string STR0 , string STR1 , dest set to string STR2 , action set to string STR3 , default as an empty list and help as an string STR4 .
 2941	define the handle method with self class instance and dictionary **options as arguments .
 2942	get the value under the key STR0 of the options dictionary , substitute it for locale .
 2943	get the value under the key STR0 of the options dictionary , substitute it for exclude .
 2944	get the value under the key STR0 of the options dictionary , convert it to an integer , substitute it for exclude .
 2945	if evaluation of the function find_command with self.program as argument equals to None ,
 2946	raise CommandError exception , with sring STR0 as argument , substitute STR1 with self.program .
 2947	basedirs is a list containing tuple with strings , STR0 and STR1 .
 2948	if value under the STR0 key of os.environ dictionary exists .
 2949	from django.conf import settings into default name space .
 2950	call function update with path as the argument , for every path in settings.LOCALE_PATHS , extend basedirs list with previous items .
 2951	create a list out of basedir elements for which function os.path.isdir returns true , apply the os.path.abspath function on every element , and put the results in a list , basedir is set of previous list elements .
 2952	if basedirs is empty ,
 2953	raise CommandError exception with string STR0 , as argument .
 2954	all_locales is an empty string .
 2955	for every basedir in basedirs ,
 2956	locale_dirs is a list of elements from the list of path names that maths the basedir path with STR0 wild card characters for which call to the os.path.isdir returned true , assign it to locale_dirs .
 2957	extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied .
 2958	take locale or all_locales , whichever is not empty , respectively , and substitute it for locales .
 2959	locales is relative complement of set exclude in set locales .
 2960	for every basedir in basedirs ,
 2961	if locales in not empty ,
 2962	join basedir , l and string STR0 into a path separated by STR1 for every l in locales , assign the list to dirs .
 2963	if not ,
 2964	dirs is a list containing basedir .
 2965	locations is an empty list .
 2966	for every ldir in dirs ,
 2967	for dirpath , dirnames and filenames , respectively , in directory tree tuple starting from the ldir ,
 2968	extend locations with tuple containing dirpath and f , for every f in filenames , only if it ends with string STR0 .
 2969	if locations is not empty ,
 2970	call the self.compile_messages with locations as argument ,
 2971	define compile_messages method with self class instance and locations as a arguments .
 2972	for every i and tuple containing dirpath and f , in enumerated list of locations ,
 2973	if self.verbosity is greater than integer 0 ,
 2974	call the self.stdout.write method with string STR0 as argument , replacing all the occurrences of STR1 with f and dirpath , respectively .
 2975	po_path is a string containing joined directory path from dirpath and f .
 2976	evaluate function has_bom with po_path as argument .
 2977	raise CommandError exception with string STR0 , with STR1 replaced with po_path , as argument .
 2978	call os.path.splitext function with po_path as argument , substitute the first element of the result for base_path .
 2979	if i equals to integer 0 and
 2980	call the self.stderr.write , with string STR0 as argument , with STR1 replaced by dirpath .
 2981	return nothing .
 2982	extend self.program list with self.program_options , string STR0 ,
 2983	return value of the npath function with string STR0 appended to the base_path as argument , and return value of the npath function with string STR1 appended to the base_path as argument , substitute it for args . call the popen_wrapper with args as the argument , assign the result to the output , errors and status , respectively .
 2984	if status is True ,
 2985	if errors is True ,
 2986	msg is a string STR0 , with STR1 replaced by self.program and errors .
 2987	if not ,
 2988	msg is a string STR0 , with STR1 replaced by self.program .
 2989	raise CommandError exception with msg as argument .
 2990	from django.conf import settings into default name space .
 2991	from django.core.cache import caches into default name space .
 2992	from django.core.cache.backends.db import BaseDatabaseCache into default name space .
 2993	from django.core.management.base import BaseCommand and CommandError into default name space .
 2994	from django.db import connections , router , transaction , models and DEFAULT_DB_ALIAS into default name space .
 2995	from django.db.utils import DatabaseError into default name space .
 2996	from django.utils.encoding import force_text into default name space .
 2997	derive the class Command from the BaseCommand base class .
 2998	help is an string STR0 .
 2999	requires_system_checks is boolean False .
 3000	define the method add_arguments with arguments self and parser .
 3001	call the method parser.add_argument with 4 arguments : string STR0 , metavar set to string STR1 , nargs set to STR2 character , and help set to a string 'Optional table names .
 3002	Otherwise , settings.CACHES is used to find cache tables . STR0 -- database STR1store STR2database STR3Nominates a database onto which the cache tables will be installed .
 3003	Defaults to the STR0 database . ' define the method handle with arguments self , unpacked list tablenames and unpacked dictionary options .
 3004	get value under the STR0 key of the options dictionary , substitute it for db .
 3005	get the value under the STR0 key of the options dictionary , convet it to an integer and substitute for self.verbosity .
 3006	if length of tablenames is greater than zero ,
 3007	for every tablename in tablenames ,
 3008	call the method self.create_table with arguments : db and tablename .
 3009	if not ,
 3010	for every cache_alias in settings.CACHES ,
 3011	substitute value under the cache_alias key of the caches dictionary for cache .
 3012	if cache is an instance of BaseDatabaseCache ,
 3013	all the method self.create_table with arguments : db and cache._table .
 3014	define the method create_table with arguments self , database and tablename .
 3015	cache is an instance of BaseDatabaseCache class , created with arguments : tablename and an empty dictionary .
 3016	call the method router.allow_migrate with 2 arguments : database and cache.cache_model_class , if it evaluates to false ,
 3017	return nothing .
 3018	substitute value under the database key of the connections dictionary for connection .
 3019	if tablename is contained in return value of the method connection.introspection.table_names ,
 3020	if self.verbosity is greater than integer 0 ,
 3021	replace STR1 in string STR0 with tablename , write it to the self.stdout stream .
 3022	return nothing .
 3023	fields is an tuple containing 3 entries : return value of the method models.CharField called with 4 arguments :
 3024	name set to a string STR0 , max_length set to integer 255 , unique set to boolean True and primary_key set to boolean True , return value of the method models.TextField called with argument name set to a string STR1 , and return value of the method models.DateTimeField called with 2 arguments : name set to string STR2 and db_index set to True . table_output is an empty list .
 3025	index_output is an empty list .
 3026	substitute connection.ops.quote_name for qn .
 3027	for every f in fields ,
 3028	field_output is an list containing 2 elements : return value of the function qn called with an argument f.name , and return value of the function f.db_type called with an argument connection set to connection .
 3029	if f.null is false , append string append STR0 to field_output , otherwise append STR1 to field_output .
 3030	if f.primary_key is true ,
 3031	append string STR0 to field_output .
 3032	otherwise if f.unique is true ,
 3033	append string STR0 to field_output .
 3034	if f.db_index is true ,
 3035	if f.unique is true , substitute STR0 for unique , otherwise unique is an empty string .
 3036	replace STR1 in string STR0 with : unique , return value of the function qn called with an argument :
 3037	a string STR0 , where STR1 is replaced with tablename and f.name , respectively , return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name . join field_output elements into a string , separated by whitespaces , append it to table_output .
 3038	full_statement is a list containing : string STR0 , where % s is replaced by result of the function qn called with an argument tablename .
 3039	for every i and line in enumerated iterable table_output ,
 3040	replace % s in string STR0 with : line and character STR1 if i is lesser than length of table_output decremented by one , or with an empty string if its not , append the resulting string to full_statement .
 3041	append string STR0 to full_statement .
 3042	evaluate method transaction.atomic with arguments : using set to database and savepoint set to connection.features.can_rollback_ddl ,
 3043	with the result , evaluate method connection.cursor , with return value as curs ,
 3044	try ,
 3045	join full_statement into a string , separated by newlines , use it as an argument for the call to the method curs.execute .
 3046	if DatabaseError , renamed to e , exception is caught ,
 3047	raise an CommandError with an argument string STR0 , replace STR1 with : tablename and return value of the function force_text called with an argument e , respectively .
 3048	for every statement in index_output ,
 3049	execute statement on the database that curs points to .
 3050	if self.verbosity is greater than integer 1 ,
 3051	replace STR1 in string STR0 with tablename , write it to self.stdout .
 3052	from django.core.management.base import BaseCommand and CommandError into default name space .
 3053	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 3054	derive the class Command from the BaseCommand base class .
 3055	help is a tuple containing a string STR0 .
 3056	requires_system_checks is boolean False .
 3057	define the method add_arguments with self and parser .
 3058	call the method parser.add_argument with arguments : string STR1 , action set to string STR2 , dest set to string STR3 , default set to DEFAULT_DB_ALIAS and help set to string STR4 .
 3059	define the method handle with arguments self and unpacked dictionary options .
 3060	get the value under the STR0 key of the options dictionary , use it as a key to access the element under the connections dictionary , substitute it for connection .
 3061	try ,
 3062	call the method connection.client.runshell .
 3063	if OSError exception is caught ,
 3064	raise an CommandError exception with an argument string STR0 ,
 3065	from django.core.management.base import BaseCommand into default name space .
 3066	define the function module_to_dict with 2 arguments : module and omittable as a lambda function with an argument k ,
 3067	return dictionary created out of tuple elements k and printable representation of v , for every k and v in return value of the method module.__dict__.items , only if result of the method omittable called with an argument k is false .
 3068	derive the class Command from the BaseCommand base class .
 3069	requires_system_checks is boolean False .
 3070	define the method add_arguments with 2 arguments self and parser .
 3071	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest set to string STR2 , default set to boolean False and help set to a string 'Display all settings , regardless of their value .
 3072	Default values are prefixed by STR0 . ' define the method handle with arguments self and unpacked dictionary options .
 3073	from django.conf import settings , global_settings into default name space .
 3074	call the method settings._setup .
 3075	call the function module_to_dict with an argument settings._wrapped , substitute it for user_settings .
 3076	call the function module_to_dict with an argument global_settings , substitute it for default_settings .
 3077	output is an empty string .
 3078	for every key in sorted list of user_settings ,
 3079	if key is not contained in default_settings ,
 3080	replace STR1 in string STR0 with key and value under the key key of the user_setting dictionary , append it to the output .
 3081	otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary ,
 3082	replace STR1 in string STR0 with key and value under the key key of the user_setting dictionary , append it to the output .
 3083	otherwise if value under the key STR0 of the options dictionary is true ,
 3084	replace STR1 in string STR0 with key and value under the key key of the user_setting dictionary , append it to the output .
 3085	join elements of the output into a string , separated by newlies , return the string .
 3086	import module warnings .
 3087	from collections import OrderedDict into default name space .
 3088	from django.apps import apps into default name space .
 3089	from django.core.management.base import BaseCommand and CommandError into default name space .
 3090	from django.core import serializers into default name space .
 3091	from django.db import router and DEFAULT_DB_ALIAS into default name space .
 3092	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 3093	derive the class Command from the BaseCommand base class .
 3094	help is a tuple containing a string STR0 .
 3095	define the method add_arguments with arguments self and parser .
 3096	call the method parser.add_argument with 4 arguments : string STR0 , metavar set to string STR1 , nargs set to STR2 and help is a string STR3 .
 3097	call the method parser.add_argument with 4 arguments : string STR0 , default set to string STR1 , dest set to STR2 and help is a string STR3 .
 3098	call the method parser.add_argument with 5 arguments : string STR0 , default set to None , dest set to STR1 , type set to int and help is a string STR2 .
 3099	call the method parser.add_argument with 5 arguments : string STR1 , default set to string STR2 , dest set to STR3 , add set to DEFAULT_DB_ALIAS and help is STR4 .
 3100	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , dest set to STR2 , action set to STR3 , default is a an empty list and help is a string STR4 .
 3101	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , action is string STR2 , dest is string STR3 , default is boolean False and help is a string STR4 .
 3102	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest is string STR2 , default is boolean False and help is a string STR3 .
 3103	call the method parser.add_argument with 5 arguments : string STR0 , action set to STR1 , dest is STR2 , default is boolean False and help is a string STR3 .
 3104	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , action set to STR2 , dest is STR3 , default is boolean False and help is a string STR4 .
 3105	call the method parser.add_argument with 3 arguments : string STR1 , dest set to string STR2 , and help is a string STR0 .
 3106	call the method parser.add_argument with 5 arguments : string STR0 , string STR1 , default is None , dest set to string STR2 , and help is a string STR3 .
 3107	define the method handle with arguments self , unpacked list app_labels and unpacked dictionary options .
 3108	get the value under the STR0 key of the options dictionary , substitute the result for format .
 3109	get the value under the STR0 key of the options dictionary , substitute the result for indent .
 3110	get the value under the STR0 key of the options dictionary , substitute the result for database .
 3111	get the value under the STR0 key of the options dictionary , substitute the result for exclude .
 3112	get the value under the STR0 key of the options dictionary , substitute the result for output .
 3113	get the value under the STR0 key of the options dictionary , substitute the result for traceback .
 3114	get the value under the STR0 key of the options dictionary , substitute the result for use_natural_keys .
 3115	if use_natural_keys is true ,
 3116	call the function warnings.warn with an argument string STR0 , and RemovedInDjango19Warning .
 3117	get the value under the STR0 key of the options dictionary , substitute the result for use_natural_foreign_keys .
 3118	get the value under the STR0 key of the options dictionary , substitute the result for use_natural_primary_keys .
 3119	get the value under the STR0 key of the options dictionary , substitute the result for use_base_manager .
 3120	get the value under the STR0 key of the options dictionary , substitute the result for pks .
 3121	if pks is true ,
 3122	split string pks by STR0 , substitute the result for primary_keys .
 3123	if not ,
 3124	primary_keys is an empty list .
 3125	excluded_apps is an empty set .
 3126	excluded_models is an empty set .
 3127	for every exclude in excludes ,
 3128	if STR0 is contained in exclude ,
 3129	try ,
 3130	call the method apps.get_model with exclude as an argument , substitute it for model .
 3131	if LookupError exception is caught ,
 3132	raise an CommandError exception with an argument string STR0 , where STR1 is replaced with exclude .
 3133	add model to excluded_models set .
 3134	if not ,
 3135	try ,
 3136	call the method apps.get_app_config with an argument exclude , substitute the result for app_config .
 3137	if LookupError exception is caught ,
 3138	raise CommandError with an argument string STR0 , where STR1 is replaced with exclude .
 3139	add app_config to excluded_apps set .
 3140	if length of app_labels equals integer 0 ,
 3141	if primary_keys is true ,
 3142	raise an CommandError exception with an argument string STR0 .
 3143	app_list is an instance of OrderedDict class , created with an argument a tuple containing elements : app_config and None , for every app_config in return value of the method apps.get_app_configs , only if app_config.models_module is not None , and app_config is not contained in excluded_apps .
 3144	if not ,
 3145	if length of app_labels is greater than integer 1 and primary_keys is true ,
 3146	raise an CommandError exception with an argument string STR0 .
 3147	app_list is an instance of a class OrderedDict .
 3148	for every label in app_labels ,
 3149	try ,
 3150	split label by STR0 , assign the result to app_label and model_label , respectively .
 3151	try ,
 3152	call the method apps.get_app_config with an argument app_label , substitute the result for app_config .
 3153	if LookupError exception is caught ,
 3154	raise CommandError with an argument string STR0 , where STR1 is replaced with exclude .
 3155	if app_config.models_module is None or app_config is contained in excluded_apps ,
 3156	skip this loop iteration .
 3157	try ,
 3158	call the method app_config.get_model with an argument model_label , substitute the result for model .
 3159	if LookupError exception is caught ,
 3160	raise CommandError with an argument string STR0 , where STR1 is replaced with app_label and model_label , respectively .
 3161	call the method app_list.setdefault with 2 arguments app_config and an empty list , substitute the result for app_list_value .
 3162	if app_list_value is not None ,
 3163	if mode is not contained in app_list_value ,
 3164	append model to app_list_value .
 3165	if ValueError exception is caught ,
 3166	if primary_keys is true ,
 3167	raise an CommandError exception with an argument string STR0 .
 3168	substitute label for app_label .
 3169	try ,
 3170	call the method apps.get_app_config with an argument app_label , substitute the result for app_config .
 3171	if LookupError exception is caught ,
 3172	raise CommandError with an argument string STR0 , where STR1 is replaced with app_label .
 3173	if app_config.models_module is None or app_config is contained in excluded_apps
 3174	skip this loop iteration .
 3175	value under the app_config key of the app_list is None .
 3176	if format is not contained in return value of the method serializers.get_public_serializer_formats ,
 3177	try ,
 3178	call the method serializers.get_serializer with an argument format .
 3179	if serializers.SerializerDoesNotExist exception is caught ,
 3180	do nothing .
 3181	raise CommandError with an argument string STR0 , where STR1 is replaced with format .
 3182	define the function get_objects .
 3183	call the method app_list.items , use the result as an argument for the call to the function sort_dependencies , for every model in result ,
 3184	if model is contained in excluded_models ,
 3185	skip this loop iteration .
 3186	if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true ,
 3187	if use_base_manager is true ,
 3188	substitute model._base_manager for objects .
 3189	if not ,
 3190	substitute model._default_manager for objects .
 3191	call the method objects.using with an argument using , call the method order_by on the result with an argument model._meta.pk.name , substitute the result for queryset .
 3192	if primary_keys is true ,
 3193	call the method queryset.filter with an argument pk__in set to primary_keys , substitute the result for queryset .
 3194	for every obj in result of the method queryset.iterator ,
 3195	yield obj , as an return value of the generator .
 3196	try ,
 3197	self.stdout.ending is None .
 3198	open the output file in writing mode if output is true , assign the file descriptor to stream , otherwise stream is None .
 3199	try ,
 3200	call the method serializers.serialize with 6 arguments : format , result of the function get_objects , indent set to indent , use_natural_foreign_keys set to use_natural_foreign_keys , use_natural_primary_keys set to use_natural_primary_keys , and stream set to stream , if the stream is true , otherwise stream set to self.stdout .
 3201	finally perform ,
 3202	if stream is true ,
 3203	close the file stream .
 3204	if Exception , renamed to e , exception is caught ,
 3205	if show_traceback is true ,
 3206	raise an exception .
 3207	raise CommandError with an argument string STR0 , where STR1 is replaced with e .
 3208	define the function sort_dependencies with an argument app_list .
 3209	model_dependencies is an empty list .
 3210	models is an empty set .
 3211	for every app_config and model_list in app_list ,
 3212	if model_list is None ,
 3213	call the method app_config.get_models , substitute the result fr model_list .
 3214	for every model in model_list ,
 3215	add model to models set .
 3216	if model has an STR0 attribute ,
 3217	get STR0 attribute of the model.natural_key , substitute it for deps , if the attribute doesnt exist , deps in an empty list .
 3218	if deps is true ,
 3219	for every dep in deps call the method apps.get_model with an argument dep , and append the result to the list , substitute it for deps .
 3220	if not ,
 3221	deps is an empty list .
 3222	for every field in model._meta.fields ,
 3223	if field.rel has an STR0 attribute ,
 3224	substitute field.rel.to with rel_model .
 3225	if rel_model has an attribute STR0 and rel_model is not equal to model ,
 3226	append rel_model to deps .
 3227	for every field in model._meta.many_to_many ,
 3228	if field.rel.through._meta.auto_created is true ,
 3229	substitute field.rel.to for rel_model .
 3230	if rel_model has an STR0 attribute and rel_model is not equal to model ,
 3231	append rel_model to deps .
 3232	append a tuple containing 2 elements : model and deps to model_dependencies .
 3233	call the methof model_dependencies.reverse .
 3234	model_list is an empty list .
 3235	while model_dependencies is true ,
 3236	skipped is an empty list .
 3237	changed is boolean False .
 3238	while model_dependencies is true ,
 3239	remove first element from model_dependencies , assign it to model and deps , respectively .
 3240	found is boolean True .
 3241	for every d in deps , if d is not contained in models and d is contained in model_list add boolean True to a tuple ,
 3242	otherwise add boolean False , for every candidate in the result perform following , if candidate is false ,
 3243	found is boolean False .
 3244	if found is true ,
 3245	append model to model_list .
 3246	changed is boolean True .
 3247	if not ,
 3248	append a tuple containing 2 elemetns : model and deps , to skipped .
 3249	if changed is false ,
 3250	raise an CommandError with argument : string STR0 , where STR1 is replaced with : model._meta.app_label and model._meta.object_name joined into a string , with separator STR2 , result joined into a string , separated by string STR3 for every model and deps in sorted list of elements skipped sorted by key : return value of the lambda function with an argument obj , and result the __name__ field of the first element of obj .
 3251	substitute skipped for model_dependencies .
 3252	return model_list .
 3253	import module sys .
 3254	from importlib import import_module into default name space .
 3255	from django.apps import apps into default name space .
 3256	from django.db import connections , router , transaction and DEFAULT_DB_ALIAS into default name space .
 3257	from django.core.management import call_command into default name space .
 3258	from django.core.management.base import BaseCommand and CommandError into default name space .
 3259	from django.core.management.color import no_style into default name space .
 3260	from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space .
 3261	from django.utils.six.moves import input into default name space .
 3262	from django.utils import six into default name space .
 3263	derive the class Command from the BaseCommand base class .
 3264	help is a tuple containing a string : STR1
 3265	define the add_arguments with arguments self and parser .
 3266	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest set to string STR2 , default set to boolean True , help as a string STR3 .
 3267	call the method parser.add_argument with 5 arguments : string STR1 , action set to string STR2 , dest as a string STR3 , default set to DEFAULT_DB_ALIAS and help as a string STR4 .
 3268	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest set to string STR2 , default=True and help as a string STR3 .
 3269	define the method handle with arguments self and unpacked dictionary options .
 3270	substitute value under the STR0 key of the options dictionary for database .
 3271	substitute value under the database key of the connections dictionary for connection .
 3272	substitute value under the STR0 key of the options dictionary for verbosity .
 3273	substitute value under the STR0 key of the options dictionary for interactive .
 3274	get the value STR0 key of the options dictionary , if it exists substitute it for reset_sequences , otherwise reset_sequences is boolean True .
 3275	get the value STR0 key of the options dictionary , if it exists substitute it for allow_cascade , otherwise allow_cascade is boolean False .
 3276	get the value STR0 key of the options dictionary , if it exists substitute it for inhibit_post_migrate , otherwise inhibit_post_migrate is boolean False .
 3277	call the function no_style , substitute it for self.style .
 3278	for every app_config in return value of the method apps.get_app_configs ,
 3279	try ,
 3280	call the function import_module with 2 arguments : string .management and app_config.name .
 3281	if ImportError exception is caught ,
 3282	do nothing .
 3283	call the method sql_flush with 5 arguments : self.style , connection , only_django set to boolean True , reset_sequences set to reset_sequences , allow_cascade set to allow_cascade , substitute the result for sql_list .
 3284	if interactive is true ,
 3285	request user input from the standard input , assign it o confirm , with the query string : STR0Type STR1 to continue , or STR2 to cancel : `` , where STR3 is replaced with value under the STR4 key of the connection.settings_dict dictionary .
 3286	if not ,
 3287	confirm is a string STR0 .
 3288	if confirm equals a string STR0 ,
 3289	try ,
 3290	call the method transaction.atomic with 2 arguments : using set to database , savepoint set to connection.features.can_rollback_ddl ,
 3291	with the result , call the method connection.cursor , with the result as cursor ,
 3292	for every sql in sql_list ,
 3293	call the method cursor.execute with an argument sql .
 3294	if Exception , renamed to e , exception is caught , new_msg is a tuple containing a string : `` Database % s couldnot be flushed .
 3295	Possible reasons : \n ''
 3296	STR0 , where STR1 is replaced by value under the STR2 key of the connection.settings_dict dictionary and e. call the function six.reraise with 3 arguments : CommandError , CommandError created with argument new_msg , and third element of the return value of the function sys.exc_info .
 3297	if inhibit_post_migrate is false ,
 3298	call the method self.emit_post_migrate with arguments verbosity , interactive and database .
 3299	if value under the STR0 key of the options dictionary is true ,
 3300	call the function call_command with 3 arguments : string STR0 , string STR1 and unpacked dictionary options .
 3301	if not ,
 3302	write string STR0 to self.stdout stream .
 3303	class static method ,
 3304	define the method emit_post_migrate with arguments verbosity , interactive and database .
 3305	all_models is an empty list .
 3306	for every app_config in return value of the method apps.get_app_configs ,
 3307	call the method router.get_migratable_models with arguments app_config , database and include_auto_created set to boolean True , extend all_models list with the result .
 3308	call the function emit_post_migrate_signal with 4 arguments : all_models converted into a set , verbosity , interactive and database .
 3309	from __future__ import unicode_literals into default name space .
 3310	from collections import OrderedDict into default name space .
 3311	import module keyword .
 3312	import module re .
 3313	from django.core.management.base import BaseCommand and CommandError into default name space .
 3314	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 3315	derive the class Command from the BaseCommand base class .
 3316	help is an string STR0 .
 3317	requires_system_checks is boolean False .
 3318	db_module is a string STR0 .
 3319	define the method add_arguments with arguments self and parser .
 3320	call the method parser.add_argument with 5 arguments : string STR1 , action set to string STR2 , dest as a string STR3 , default set to DEFAULT_DB_ALIAS and help as a string STR4 .
 3321	define the method handle with 2 arguments : self and unpacked dictionary options .
 3322	try ,
 3323	for every line in return value of the method self.handle_inspection called with an argument options ,
 3324	append new line to line , write it to self.stdout stream .
 3325	if NotImplementedError exception is caught ,
 3326	raise an CommandError exception with an argument STR0 .
 3327	define the method handle_inspection with 2 argument : self and options .
 3328	get value under the STR0 key of the options dictionary , use it as a key to get the value from the connections dictionary , substitute the result for connection .
 3329	get the value under the STR0 key of the options dictionary , substitute it for table_name_filter .
 3330	table2model is a lambda function with an argument table_name , return value is the return value of the re.sub method , called with 3 arguments : raw string STR0 , empty string and result of the method table_name.title .
 3331	strip_prefix is a lambda function with an argument s , return value is s without the first element if s starts with string 'u STR , otherwise returns s .
 3332	call the method connection.cursor , with the result as cursor ,
 3333	yield string STR0 as the result .
 3334	yield string STR0 as the result .
 3335	yield string STR0 as the result .
 3336	yield string STR0 as the result .
 3337	yield string STR0 as the result .
 3338	yield string STR0 as the result .
 3339	yield string STR0 as the result .
 3340	yield string STR0 as the result .
 3341	yield string STR0 as the result .
 3342	yield string STR0 as the result .
 3343	yield and empty string as the result .
 3344	yield string STR1 % self.db_module as the result , where STR0 is replaced with self.db_module .
 3345	known_models is an empty list .
 3346	for every table_name in return value of the method connection.introspection.table_names called with an argument cursor ,
 3347	if table_name_filter is not None and table_name_filter is callable object ,
 3348	call the function table_name_filter with an argument table_name , if it evaluates to true ,
 3349	skip this loop iteration ,
 3350	yield and empty string as the result .
 3351	yield and empty string as the result .
 3352	yield string STR1 % self.db_module as the result , where STR0 is replaced with result of the call to the function , table2model with an argument table_name .
 3353	call the function table2model with an argument table_name , append the result to known_models .
 3354	try ,
 3355	call the method connection.introspection.get_relations with 2 arguments cursor , table_name and substitute the result for relations .
 3356	if NotImplementedError exception is caught ,
 3357	relations is an empty dictionary .
 3358	try ,
 3359	call the method connection.introspection.get_relations with 2 arguments cursor , table_name and substitute the result for indexes .
 3360	if NotImplementedError exception is caught ,
 3361	indexes is an empty dictionary .
 3362	used_column_names is an empty list .
 3363	for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments : cursor and table_name ,
 3364	comment_notes is an empty list .
 3365	extra_params is an instance of the class OrderedDict .
 3366	substitute first element of row for column_name .
 3367	if i is contained in relations , is_relation is boolean True , otherwise is_relation is boolean False .
 3368	call the method self.normalize_col_name with 3 arguments column_name , used_column_names , is_relation , assign the result to att_name , params and notes , respectively .
 3369	add params to extra_params dictionary .
 3370	extend comment_notes list with notes .
 3371	append att_name to used_column_names list .
 3372	if column_name is contained in indexes ,
 3373	if value under the STR0 key of the dictionary contained under the column_name key of the dictionary indexes is true ,
 3374	value under the STR0 key of the extra_params dictionary is boolean True ,
 3375	otherwise if , if value under the STR0 key of the dictionary contained under the column_name key of the dictionary indexes is true ,
 3376	value under the STR0 key of the extra_params dictionary is boolean True ,
 3377	if is_relation is true ,
 3378	if second element of the i-th row of relations equals table_name , rel_to is string STR0 , otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to .
 3379	if rel_to is contained in known_models ,
 3380	append rel_to to string 'ForeignKey ( , substitute the result for field_type .
 3381	if not ,
 3382	append rel_to to string 'ForeignKey ( , append character STR to it , substitute the result for field_type .
 3383	if not ,
 3384	call the method self.get_field_type with 3 arguments connection , table_name and row , assign the result to field_type , field_params , field_notes , respectively .
 3385	add field_params to extra_params dictionary .
 3386	extend comment_notes list with field_notes .
 3387	append STR0 to field_type .
 3388	if att_name equals string STR0 and extra_params equals a dictionary with 1 entry : boolean True for STR1 ,
 3389	if field_type equals a string STR0 ,
 3390	skip this loop iteration .
 3391	otherwise if field_type equals a string STR0 and connection.features.can_introspect_autofield is false ,
 3392	append string STR0 to comment_notes .
 3393	if seventh element of row is true ,
 3394	if field_type equals a string STR0 ,
 3395	field_type is a string STR0
 3396	if not ,
 3397	value under the STR0 key of the extra_params dictionary is boolean True .
 3398	if field_type is not equal to string STR0 or string STR1 ,
 3399	value under the STR0 key of the extra_params dictionary is boolean True .
 3400	field_desc is a string STR0 , where STR1 is replaced with : att_name , an empty string if STR2 is contained in field_type , or with string STR3 if it is not and field_type .
 3401	if extra_params is true ,
 3402	if field_desc doesnt end with STR0 ,
 3403	append string STR0 to field_desc .
 3404	in string STR0 replace STR1 with k and return value of the function strip_prefix with an argument printable representation of v , for every k and v in return value of the extra_params.items method , join all results into a string separated by a string STR2 , substitute it for field_desc .
 3405	append string STR0 to field_desc .
 3406	if comment_notes is true ,
 3407	join elements of comment_notes into a string , separated by whitespaces , append it to the string STR0 , append the result to field_desc .
 3408	yield string STR0 , where STR1 is replaced with field_desc .
 3409	for meta_line in return value of the method self.get_meta called with an argument table_name .
 3410	yield meta_line as the result .
 3411	define the method normalize_col_name with 4 arguments : self , col_name , used_column_names and is_relation .
 3412	field_params is an empty dictionary .
 3413	field_notes is an empty list .
 3414	convert col_name to lowercase , substitute the result for new_name .
 3415	if new_name is not equal to col_name ,
 3416	append string STR0 to field_notes .
 3417	if is_relation ,
 3418	if new_name ends with string STR0 ,
 3419	substitute new_name , without the last 3 elements for new_name .
 3420	if not ,
 3421	substitute col_name for value under the STR0 key of the field_params dictionary .
 3422	cal the method re.subn with 3 arguments : raw string STR0 , string STR1 and new_name .
 3423	if num_repl is greater than integer 0 ,
 3424	append string STR0 to field_notes .
 3425	call the method new_name.find , with an argument string STR0 , if it evaluates to greater or equal than integer 0 ,
 3426	while the result of the method new_name.find , called with an argument string STR0 is greater or equals integer 0 ,
 3427	replace all the occurrences of STR0 with STR1 in new_name .
 3428	convert col_name to lowercase , on the result call the method find with an argument string STR0 , if the result is greater of equal to integer 0 ,
 3429	append string STR0 to field_notes .
 3430	if new_name starts with a string STR0 ,
 3431	convert new_name to a string and append it to string STR0 , substitute the result for new_name .
 3432	append string STR0 to field_notes .
 3433	if new_name ends with a string STR0 ,
 3434	convert new_name to a string and append string STR0 to it , substitute the result for new_name .
 3435	append string STR0 to field_notes .
 3436	call the method keyword.iskeyword with an argument new_name , if it evaluates to true ,
 3437	append string STR0 to new_name .
 3438	append string STR0 to field_notes .
 3439	if first element of new_name is digit ,
 3440	convert new_name to a string and append it to string STR0 , substitute the result for new_name .
 3441	append string STR0 to field_notes .
 3442	if new_name is contained in used_column_names ,
 3443	num is an integer 0 .
 3444	in string STR0 , replace STR1 with new_name and STR2 with num , while the result is contained in used_column_names ,
 3445	increment num by one .
 3446	in string STR0 , replace STR1 with new_name and STR2 with num , substitute the result for new_name .
 3447	append string STR0 to field_notes .
 3448	if col_name is not equal to new_name and field_notes is true ,
 3449	substitute col_name for value under the STR0 key of the field_params dictionary .
 3450	return new_name , field_params and field_notes .
 3451	define the method get_field_type with 4 arguments : self , connection , table_name and row .
 3452	field_params is an instance of a class OrderedDict .
 3453	field_notes is an empty list .
 3454	try ,
 3455	call the method connection.introspection.get_field_type with 2 arguments : second element of row and row , substitute the result for field_type .
 3456	if KeyError exception is caught ,
 3457	field_type is a string STR0 .
 3458	append a string STR0 to field_notes .
 3459	if field_type is a tuple ,
 3460	substitute field_type for field_type and new_params , respectively .
 3461	call the method field_params.update with an argument new_params.1
 3462	if field_type equals a string CharField ' and fourth element of row is true ,
 3463	convert fourth element of row to an integer , substitute it for value under the STR0 key of the field_params .
 3464	if field_type equals a string STR0 ,
 3465	if fifth and sixth elements of row are None ,
 3466	append string STR0 to field_notes .
 3467	if fifth element of row is not None , substitute it for value under the STR0 key of the field_params , otherwise , value under the STR1 key of the field_params is integer 10 .
 3468	if sixth element of row is not None , substitute it for value under the STR0 key of the field_params , otherwise , value under the STR1 key of the field_params is integer 5 .
 3469	if not
 3470	substitute fifth element of row for value under the STR0 key of the field_params .
 3471	substitute sixth element of row for value under the STR0 key of the field_params .
 3472	return field_type , field_params and field_notes .
 3473	define the method get_meta with arguments self and table_name .
 3474	return the list , containing 4 elements : an empty string , string STR0 , string STR1 ,
 3475	from __future__ import unicode_literals into default name space .
 3476	import module glob .
 3477	import module gzip .
 3478	import module os .
 3479	import module warnings .
 3480	import module zipfile .
 3481	from django.apps import apps into default name space .
 3482	from django.conf import settings into default name space .
 3483	from django.core import serializers into default name space .
 3484	from django.core.management.base import BaseCommand and CommandError into default name space .
 3485	from django.core.management.color import no_style into default name space .
 3486	from django.db import connections , router , transaction , DEFAULT_DB_ALIAS , IntegrityError and DatabaseError into default name space .
 3487	from django.utils import lru_cache into default name space .
 3488	from django.utils.encoding import force_text into default name space .
 3489	from django.utils.functional import cached_property into default name space .
 3490	from django.utils._os import upath into default name space .
 3491	from itertools import product into default name space .
 3492	try ,
 3493	import bz2 .
 3494	has_bz2 is boolean True .
 3495	if ImportError exception is caught ,
 3496	has_bz2 is boolean False .
 3497	derive the class Command from the BaseCommand base class .
 3498	help is an string STR0 .
 3499	missing_args_message is a tuple containing a string STR0
 3500	STR0 define the method add_arguments with 2 arguments : self and parser .
 3501	call the method parser.add_argument with 4 arguments : string STR0 , metavar set to string STR1 , nargs set to STR2 , and help set to STR3 .
 3502	call the method parser.add_argument with 5 arguments : string STR1 , action set to string STR2 , dest as a string STR3 , default set to DEFAULT_DB_ALIAS and help as a string STR4
 3503	call the method parser.add_argument with 5 arguments : string STR0 , action as a string STR1 , dest as a string STR2 , default set to None , help is a string STR3 .
 3504	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , action as a string STR2 , dest as a string STR3 , default set to boolean False and help set to string STR4 .
 3505	define the method handle with 3 arguments : self , unpacked list fixture_labels and unpacked dictionary options .
 3506	get the value under the STR0 key of the options dictionary , substitute it for self.ignore .
 3507	get the value under the STR0 key of the options dictionary , substitute it for self.database .
 3508	get the value under the STR0 key of the options dictionary , substitute it for self.app_label .
 3509	get the value under the STR0 key of the options dictionary , if the key exists substitute it for self.hide_empty , if not , self.hide_empty is boolean False .
 3510	get the value under the STR0 key of the options dictionary , substitute it for self.verbosity .
 3511	call the method transaction.atomic with an argument using set to self.using , with the result ,
 3512	call the method self.loaddata with an argument fixture_labels .
 3513	call the method transaction.get_autocommit with an argument self.using , if it evaluates to true ,
 3514	get the value under the self.using key of the connections dictionary , call the method close on it .
 3515	define the method loaddata with 2 arguments self and fixture_labels .
 3516	get the value under the self.using key of the connections dictionary , substitute it for connection .
 3517	self.fixture_count is integer 0 .
 3518	self.loaded_object_count is integer 0 .
 3519	self.fixture_object_count is integer 0 .
 3520	self.models is an empty set .
 3521	call the method serializers.get_public_serializer_formats , substitute the result for self.serialization_formats .
 3522	self.compression_formats is an dictionary with 3 initial entries : tuple containing 2 elements : open and string STR0 for None , tuple with 2 arguments : gzip.GzipFile and string STR1 for STR2 , tuple with 2 arguments : SingleZipReader and string STR for STR3 .
 3523	if has_bz2 is true ,
 3524	substitute tuple with 2 elements : bz2.BZ2File and string STR for value under the STR0 key of the self.compression_formats dictionary .
 3525	call the method connection.constraint_checks_disabled , with the result perform ,
 3526	for every fixture_label in fixture_labels ,
 3527	call the method self.load_label with an argument fixture_label .
 3528	for model in self.models append model._meta.db_table to a list , substitute the resulting list for table_names .
 3529	try ,
 3530	call the method connection.check_constraints with an arguments table_names set to table_names .
 3531	if Exception , renamed to e , exception is caught ,
 3532	e.args is a tuple , containing 1 element : string STR0 , where STR1 is replaced with e .
 3533	raise an exception .
 3534	if self.loaded_object_count is greater than zero ,
 3535	call the method connection.ops.sequence_reset_sql with 2 arguments : return value of the no_style and self.models , substitute the result for sequence_sql .
 3536	if sequence_sql is true ,
 3537	if self.verbosity is grater than , or equal to integer 2 ,
 3538	write a string STR0 to self.stdout stream .
 3539	call the method connection.cursor , with the result renamed to cursor , perform the following ,
 3540	for every line in sequence_sql ,
 3541	call the method cursor.execute with an argument line .
 3542	if self.verbosity is greater of equal to integer 1 ,
 3543	if self.fixture_count equals integer 0 and self.hide_empty is true ,
 3544	do nothing .
 3545	otherwise if self.fixture_object_count equals self.loaded_object_count ,
 3546	call the method self.stdout.write with an argument string STR0 , where STR1 is replaced with self.loaded_object_count and self.fixture_count , respectively .
 3547	if not ,
 3548	call the method self.stdout.write with an argument string STR0 , substitute STR1 with self.loaded_object_count , self.fixture_object_count and self.fixture_count .
 3549	define the method load_label with self and fixture_label as arguments .
 3550	for every fixture_file , fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label ,
 3551	call the function os.path.basename with an argument fixture_file , use the result as an argument for the call to the method , self.parse_name , assign the result to _ , ser_fmt and cmp_fmt , respectively .
 3552	get the value under the cmp_fmt key of the self.compression_formats dictionary , assign it to open_method and mode .
 3553	call the function open_method with arguments : fixture_file and mode , substitute the result for fixture .
 3554	try ,
 3555	increment self.fixture_count by one .
 3556	objects_in_fixture is integer 0 .
 3557	loaded_objects_in_fixture is integer 0 .
 3558	if self.verbosity is greater or equal to integer 2 ,
 3559	call the method self.stdout.write with an argument string STR0 , substitute STR1 with ser_fmt , fixture_name and return value of the function humanize called with an argument fixture_dir .
 3560	call the method serializers.deserialize with 4 arguments : ser_fmt , fixture , using set to self.using , and ignorenonexistent set to self.ignore , substitute the result for objects .
 3561	for every obj in objects ,
 3562	increment objects_in_fixture by one .
 3563	call the method router.allow_migrate with 2 arguments : self.using and obj.object.__class__ , if it evaluates to true ,
 3564	increment loaded_objects_in_fixture by one .
 3565	add obj.object.__class__ to self.models set .
 3566	try ,
 3567	call the method obj.save with an argument using set to self.using .
 3568	if DatabaseError or IntegrityError , renamed to e , exceptions are caught ,
 3569	e.args is a tuple containing string `` Could not load % ( app_label ) s. % ( object_name ) s ( pk= % ( pk ) s ) : % ( error_msg ) s , where STR0 is replaced for obj.object._meta.app_label , STR1 is replaced with obj.object._meta.object_name , STR2 is replaced with obj.object.pk and STR3 is replaced with result of the function force_text with an argument e .
 3570	raise an exceptions
 3571	increment self.loaded_object_count by loaded_objects_in_fixture .
 3572	increment self.fixture_object_count by objects_in_fixture .
 3573	if Exception , renamed to e , exception is caught ,
 3574	if e is not an instance of CommandError class ,
 3575	e.args is a tuple containing string STR0 , where STR1 is replaced with fixture_file , e .
 3576	raise an exception .
 3577	finally perform ,
 3578	call the method fixture.close .
 3579	if objects_in_fixture equals integer 0 ,
 3580	call the method warnings.warn with 2 arguments : string STR0 , where STR1 is replaced with fixture_name , and RuntimeWarning .
 3581	decorator method lru_cache.lru_cache with an argument maxsize set to None .
 3582	define the method find_fixtures with arguments : self and fixture_label .
 3583	call the method self.parse_name with an argument fixture_label , substitute the result for fixture_name , ser_fmt , cmp_fmt , respective .
 3584	databases is a list containing 2 elements : self.using and None .
 3585	call the method self.compression_formats.keys , convert it to list , substitute it for cmp_fmts if cmp_fmt is None , otherwise cmp_fmts is a list containing cmp_fmt .
 3586	call the method serializers.get_public_serializer_formats , substitute the result for ser_fmts if ser_fmt is None , otherwise ser_fmts is a list containing ser_fmt .
 3587	if self.verbosity is greater or equal to integer 2 ,
 3588	call the method self.stdout.write with an argument string STR0 , where STR1 is replaced with fixture_name .
 3589	if fixture_name is an absolute file path ,
 3590	call the method os.path.dirname with an argument fixture_name , append it to a list , substitute resulting list for fixture_dirs .
 3591	call the method os.path.basename with an argument fixture_name , substitute the result for fixture_name .
 3592	if not ,
 3593	substitute self.fixture_dirs for fixture_dirs .
 3594	if os.path.sep is contained in fixture_name ,
 3595	join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path , append it to a list , perform the previous for every dir_ in fixture_dirs , substitute the resulting list for fixture_dirs .
 3596	call the method os.path.basename with an argument fixture_name , substitute the result for fixture_name .
 3597	for every ext in combo , if ext is true , join it to a string , separated by STR0 , put the result in a tuple , perform the previous for every combo in result of the function product called with 3 arguments : databases , ser_fmts and cmp_fmts , substitute the result for suffixes .
 3598	join fixture_name and suffix into a string , separated by STR0 for every suffix in suffixes , put the results in set , substitute it for targets .
 3599	fixture_files is an empty list .
 3600	for every fixture_dir in fixture_dirs ,
 3601	if self.verbosity is greater or equals to integer 2 .
 3602	call the method self.stdout.write with an argument string STR0 , where STR1 is replaced with result of the function humanize , called with an argument fixture_dir .
 3603	fixture_files_in_dir is an empty list .
 3604	join fixture_dir , fixture_name with appended character STR0 into a valid file path , use it as an argument for the call to the glob.iglob , for every candidate in result .
 3605	call the method os.path.basename with an argument candidate , is result is contained in targets ,
 3606	append tuple containing 3 elements : candidate , fixture_dir and fixture_name to list fixture_files_in_dir .
 3607	if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false ,
 3608	call the method self.stdout.write with an argument string STR0 , where STR1 is replaced with fixture_name , and result of the function humanize called with an argument fixture_dir .
 3609	if length of fixture_files_in_dir is greater than 1 ,
 3610	raise an CommandError exception with an argument string STR0 , where STR1 is replaced with : fixture_name and result of the function humanize called with an argument fixture_dir .
 3611	extend fixture_files list with fixture_files_in_dir .
 3612	if fixture_name is not equal to string STR0 and fixture_files is false ,
 3613	call the method warnings.warn with an argument string STR0 where STR1 is replaced with fixture_name .
 3614	return fixture_files .
 3615	decorator cached_property ,
 3616	define the method fixture_dirs with an argument self .
 3617	dirs is an empty dictionary .
 3618	for ever app_config in return value of the method apps.get_app_configs ,
 3619	if self.app_label is true and app_config.label is not equal to self.app_label ,
 3620	skip this loop iteration .
 3621	join app_config.path and string STR0 into a valid file path , substitute it for app_dir .
 3622	if app_dir is a directory ,
 3623	append app_dir to dirs list .
 3624	convert settings.FIXTURE_DIRS to a list , extend dirs by it .
 3625	append an empty string to dirs list .
 3626	call the function os.path.realpath with an argument d , use the result as an argument for the call to the function os.path.abspath ,
 3627	use the result as an argument for the call to the upath function , for every d in dirs , append the results into a list , substitute the resulting list for dirs . return dirs .
 3628	define the method parse_name with arguments self and fixture_name .
 3629	call the method fixture_name.rsplit with 2 arguments : character STR0 and integer 2 , substitute the result for parts .
 3630	if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats ,
 3631	substitute the last element of parts for cmp_fmt .
 3632	substitute the last element of parts for parts .
 3633	if not ,
 3634	cmp_fmt is None .
 3635	if length of parts is greater than integer 1 .
 3636	if last element of parts is contained in self.serialization_formats ,
 3637	substitute the last element of parts for ser_fmt .
 3638	substitute the last element of parts for parts .
 3639	if not ,
 3640	raise an CommandError with an argument string STR0 , replace STR1 with : elements of last element of parts joined into a string and last element of parts .
 3641	if not ,
 3642	ser_fmt is None .
 3643	join elements of parts into a string , separated with STR0 , substitute it for name .
 3644	return name , ser_fmt and cmp_fmt .
 3645	derive class SingleZipReader for zipfile.ZipFile base class .
 3646	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 3647	call the method zipfile.ZipFile.__init___ with the arguments self , unpacked list args and unpacked dictionary kwargs .
 3648	call the method self.namelist , if the length of the result is not integer 1 ,
 3649	raise an ValueError with an string STR0 .
 3650	define the method read with an argument self .
 3651	call the method zipfile.ZipFile.read with 2 arguments : self and first element of the result of the self.namelist method .
 3652	define the function humanize with an argument dirname .
 3653	if dirname is true , return dirname converted to a string and surounded by single quotes , if not return string STR0 .
 3654	from __future__ import unicode_literals into default name space .
 3655	import module fnmatch .
 3656	import module glob .
 3657	import module io .
 3658	import module os .
 3659	import module re .
 3660	import module sys .
 3661	from itertools import dropwhile into default name space .
 3662	import module django .
 3663	from django.core.management.base import CommandError and BaseCommand into default name space .
 3664	from django.core.management.utils import handle_extensions , find_command and popen_wrapper into default name space .
 3665	from django.utils.encoding import force_st into default name space .
 3666	from django.utils.functional import total_ordering into default name space .
 3667	from django.utils import six into default name space .
 3668	from django.utils.text import get_text_list into default name space .
 3669	from django.utils.jslex import prepare_js_for_gettext into default name space .
 3670	call the method re.compile with 2 arguments : raw string STR1 ,
 3671	and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands , substitute the result for plural_forms_re/ STATUS_OK is integer 0 .
 3672	define the method check_programs with an argument unpacked list programs .
 3673	for every program in programs ,
 3674	call the function find_command with an argument program , if it evaluates to None ,
 3675	raise an CommandError exception with an argument STR0 , where STR1 is replaced with program .
 3676	total_ordering decorator ,
 3677	derive the class TranslatableFile from the object class .
 3678	define the method __init__ with 4 arguments : self , dirpath , file_name and locale_dir .
 3679	substitute file_name for self.file_name .
 3680	substitute dirpath for self.dirpath .
 3681	substitute locale_dir for self.locale_dir .
 3682	define the method __repr__with an argument self .
 3683	join self.dirpath and self.file in a string , substitute with it STR1 in string STR0 , return the result .
 3684	define the method __eq__ with self and other arguments :
 3685	if self.path equals other.path , return boolean True , if not return boolean False .
 3686	define the mehod __lt__ with self and other .
 3687	if self.path is lesser than other.path , return boolean True , otherwise return boolean False .
 3688	property decorator .
 3689	define the method path with an argument self .
 3690	join self.dirpath and self.file into a file path , return it .
 3691	define the method process with 3 arguments : self , command and domain .
 3692	from django.conf import settings into default namespace .
 3693	from django.utils.translation import templatize into default namespace .
 3694	if command.verbosity is greater than integer 1 ,
 3695	substitute STR0 is string STR1 with self.file and self.dirpath , write it to command.stdout .
 3696	call the method os.path.splitext with an argument self.file , assign the result to _ and file_ext .
 3697	if domain equals a string STR0 and file_ext is contained in command.extensions ,
 3698	is_templatized is boolean True .
 3699	join self.dirpath and self.file into a file path , substitute it for orig_file .
 3700	call the function io.open with orig_file and encoding set to settings.FILE_CHARSET , with the result renamed to fp ,
 3701	perform the following : call the method fp.read , substitute the result for src_data .
 3702	call the function prepare_js_for_gettext with an argument src_data , substitute it for src_data .
 3703	convert self.file to a string and append STR0 string to it , substitute the result for thefile .
 3704	join self.dirpath and thefile in a string , substitute the result for work_file .
 3705	call the function io.open with 3 arguments : work_file , string STR0 and encoding set to string STR1 as arguments ,
 3706	with the result renamed to fp , perform the following : call the method fp.write with an arguments src_data .
 3707	append command.xgettext_options to the list containing 10 elements : string STR0 , string STR1 , domain , string STR2 , string STR3 , string STR4 , string STR5 , string STR6 , string STR7 and string STR8 , substitute it for args .
 3708	append work_file to args .
 3709	otherwise if domains equals a string django STR0.py ' or file_ext is contained in command.extensions ,
 3710	substitute self.file for thefile .
 3711	join self.dirpath and self.file into a file path , substitute it for orig_file .
 3712	if file_ext is contained in command.extensions , is_templatized is boolean True , otherwise it is boolean False .
 3713	if is_templatized is true ,
 3714	call the function io.open with 3 arguments : work_file , string STR0 and encoding set to settings.FILE_CHARSET as arguments ,
 3715	with the result renamed to fp , perform the following : call the method fp.read , substitute the result for src_data .
 3716	convert self.file to string and append string STR0 to it , substitute the result for thefile .
 3717	call the function templatize with 2 arguments : src_data and sliced orig_file , without first 2 elements , substitute the result for content .
 3718	call the function io.open with 3 arguments : self.dirpath and thefile joined into a file path , string STR0 ,
 3719	and encoding set to string STR0 as arguments , with the result renamed to fp , perform the following : call the method fp.write with an argument content .
 3720	join self.dirpath , thefile into a file path , substitute it for work_file .
 3721	append command.xgettext_options to list containing 15 elements : string STR0 , string STR1 , domain , string STR2 , string STR3 , string STR4 , string STR5 , string STR6 , string STR7 , string STR8 , string STR9 , string STR10 , string STR11 , string STR12 and string STR13 , substitute the result for args .
 3722	append work_file to args .
 3723	if not ,
 3724	return nothing .
 3725	call the function popen_wrapper with argument args , assign the result to msgs , errors and status .
 3726	if errors is true ,
 3727	if status is not equal to STATUS_OK ,
 3728	if is_templatized is true ,
 3729	call the function os.unlink with an argument work_file .
 3730	raise an CommandError exception with an argument string STR0 , where STR1 are replaced by sel.file and errors , respectively .
 3731	if command.verbosity is greater than integer 0 ,
 3732	call the method command.stdout.write with an argument errors .
 3733	if msgs is true ,
 3734	if six.PY2 is true ,
 3735	call the method msgs.decode with an argument string STR0 , substitute the result for msgs .
 3736	join into a file path : self.locale_dir and string STR0 appended to domain converted to string , substitute it for potfile .
 3737	if is_templatized is true ,
 3738	if os.name equals string STR0 ,
 3739	append work_file to string STR0 , substitute it for old .
 3740	append orig_file to string STR0 , substitute it for new .
 3741	if not ,
 3742	append work_file to string STR0 , substitute it for old .
 3743	append orig_file to string STR0 , substitute it for new .
 3744	replace every occurrence of old for new in msgs , substitute the result for msgs .
 3745	call the function write_pot_file with 2 arguments : potfile and msgs .
 3746	if is_templatized is true ,
 3747	call the function os.unlink with an argument work_file .
 3748	define the function write_pot_file with 2 arguments potfile and msgs .
 3749	if potfile fie exists ,
 3750	call the function dropwhile with 2 arguments : function len and msgs spit into parts at newlines , join the result into a string , separated by newline , substitute it for msgs .
 3751	if not ,
 3752	replace every occurrence of string STR0 for string STR1 in msgs , substitute the result for msgs .
 3753	call the function io.open with 3 arguments : potfile , string STR0 and encoding set to string STR1 as arguments , with the result renamed to fp , perform the following :
 3754	call the method fp.write with an argument msgs .
 3755	derive the class Command from the BaseCommands base class .
 3756	help is a string STR0 .
 3757	requires_system_checks is boolean False .
 3758	leave_locale_alone is boolean True
 3759	msgmerge_options is an list with elements : strings STR0 and STR1 .
 3760	msguniq_options is an list with elements : string STR0 .
 3761	msgattrib_options is an list with elements : string STR0 .
 3762	xgettext_options is an list with elements : strings STR0 and STR1 .
 3763	define the method add_arguments with 2 arguments : self and parser .
 3764	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , default as an empty list , dest as a string STR2 , action as a string STR3 and help as a string , STR4 .
 3765	call the method parser.add_argument with 5 arguments : string STR0 , string STR1 , default as a empty list , dest as a string STR2 , action as a string STR3 and help as a string STR4 .
 3766	call the method parser.add_argument with 5 arguments : string STR1 , string STR2 , default as a string STR3 , dest set to string STR4 and help as a string STR5 .
 3767	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , action as a string STR2 , dest as a string STR3 default as boolean False and help as a string STR4 .
 3768	call the method parser.add_argument with 5 arguments : string STR3 , string STR4 , dest set to string STR5 , help set to a string STR6 and action as a string STR7 .
 3769	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , action as a string STR2 , dest as a string STR3 , default as boolean False and help as a string STR4 .
 3770	call the method parser.add_argument with 7 arguments : string STR0 , string STR1 , action as a string STR2 , dest as a string STR3 , default as an empty list , metavar as a string STR4 , and help as a string STR5 .
 3771	call the method parser.add_argument with 5 arguments : string STR1 , action as a string STR2 , dest as a string STR3 , default set to boolean True , and help as a string STR0 .
 3772	call the method parser.add_argument with 5 arguments : string STR1 , action as a string STR2 , dest as a string STR3 , default as boolean False and help as a string STR0 .
 3773	call the method parser.add_argument with 5 arguments : string STR1 , action set to string STR2 , dest set to string STR3 , default as boolean False and help as a string STR0 .
 3774	call the method parser.add_argument with 5 arguments : string STR1 , action as a string STR2 , dest as a string STR3 , default as boolean False and help as a string STR0 .
 3775	call the method parser.add_argument with 5 arguments : string STR1 , action as a string STR2 , dest as a string STR3 , default as boolean False and help as a string STR0
 3776	define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
 3777	get the value under the STR0 key of the options dictionary , substitute it for locale .
 3778	get the value under the STR0 key of the options dictionary , substitute it for exclude .
 3779	get the value under the STR0 key of the options dictionary , substitute it for self.domain .
 3780	get the value under the STR0 key of the options dictionary , substitute it for self.verbosity .
 3781	get the value under the STR0 key of the options dictionary , substitute it for process_all .
 3782	get the value under the STR0 key of the options dictionary , substitute it for extensions .
 3783	get the value under the STR0 key of the options dictionary , substitute it for self.symlinks .
 3784	get the value under the STR0 key of the options dictionary , substitute it for ignore_patterns .
 3785	get the value under the STR0 key of the options dictionary , if it is true ,
 3786	append list containing 4 elements : STR0 , STR1 , STR2 and STR3 , to ignore_patterns .
 3787	put elements of ignore_patterns into a set , substitute the length of it for self.ignore_patterns .
 3788	get the value under the STR0 key of the options dictionary , if it is true ,
 3789	append list containing string STR0 to self.msgmerge_options
 3790	append list containing string STR0 to self.msguniq_options .
 3791	append list containing string STR0 to self.msgattrib_options .
 3792	append list containing string STR0 to self.xgettext_options .
 3793	get the value under the STR0 key of the options dictionary , if it is true ,
 3794	append list containing string STR0 to self.msgmerge_options .
 3795	append list containing string STR0 to self.msguniq_options .
 3796	append list containing string STR0 to self.msgattrib_options .
 3797	append list containing string STR0 to self.xgettext_options .
 3798	get the value under the STR0 key of the options dictionary , substitute it for self.no_obsolete .
 3799	get the value under the STR0 key of the options dictionary , substitute it for self.keep_pot .
 3800	if self.domain is not equal to string STR0 or string STR1 ,
 3801	raise an CommandError exception with an argument string STR0 .
 3802	if self.domain equals to string STR0 ,
 3803	if extensions is false , substitute it for exts , otherwise exts is a list containing string STR0 .
 3804	if not ,
 3805	if extensions is false , substitute it for exts , otherwise exts is a list containing 2 elements : string STR0 and string STR1 .
 3806	call the function handle_extensions exts , substitute self.extensions .
 3807	evaluate the boolean expression : locale is None and exclude is false and process_all is false ,
 3808	if the result is true or self.domain is not None , raise an CommandError exception with an argument string STR0 , where STR1 are replaced by : return value of the function os.path.basename called with first element of sys.argv as an argument , and second element of sys.argv .
 3809	from django.conf import settings into default namespace .
 3810	if settings.configured ,
 3811	settings.USE_I18N is boolean True .
 3812	if not ,
 3813	call the method settings.configure with an argument USE_I18N set to boolean True .
 3814	if self.verbosity is integer 1 ,
 3815	call the method self.stdout.write with an argument string STR0 ,
 3816	substitute STR0 with return value of the function get_text_list called with 2 arguments : self.extensions converted into a list and string STR1 . self.invoked_for_django is boolean False .
 3817	self.locale_paths is an empty list .
 3818	self.default_locale_path is None .
 3819	join STR0 and STR1 into a file path , if it is a directory ,
 3820	join STR0 and STR1 into a file path , use it as an argument for the call the method os.path.abspath , put the results into a list , substitute self.locale_paths for it .
 3821	substitute first element of self.locale_paths for self.default_locale_path .
 3822	self.invoked_for_django is boolean True .
 3823	if not ,
 3824	convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it .
 3825	if STR0 is a directory ,
 3826	call the function os.path.abspath with an argument STR0 , append the result to self.locale_paths .
 3827	if self.locale_paths is true ,
 3828	substitute first element of self.locale_paths for self.default_locale_path .
 3829	if self.default_locale_path directory doesnt exists ,
 3830	create a directory self.default_locale_path .
 3831	call the function glob.glob with an argument : string STR0 appended to self.default_locale_path converted into a string , filter out the results for which function os.path.isdir returns false , substitute the result for locale_dirs .
 3832	map the locale_dirs elements with mapping function os.path.basename , substitute the result for all_locales .
 3833	if process_all is true ,
 3834	substitute all_locales for locales .
 3835	if not ,
 3836	if locale is not false or None , substitute it for locales , otherwise substitute all_locales for locales .
 3837	locales is a difference between the locales and exclude sets .
 3838	if locales is true ,
 3839	call the function check_programs with 3 arguments : strings STR0 , STR1 and STR2 .
 3840	call the function check_programs with an argument string STR0 .
 3841	try ,
 3842	call the method self.build_potfiles , substitute the result for potfiles .
 3843	for every locale in locales ,
 3844	if self.verbosity is greater than integer 0 ,
 3845	replace STR1 in string STR0 with locale , write it to self.stdout .
 3846	for every potfile in potfiles ,
 3847	call the method self.write_po_file with 2 arguments : potfile and locale .
 3848	finally perform ,
 3849	if self.keep_pot is false ,
 3850	call the method self.remove_potfiles .
 3851	define the method build_potfiles with an argument self .
 3852	call the method self.find_files with an argument string STR0 , substitute the result for file_list .
 3853	call the method self.remove_potfiles .
 3854	for f in file_list ,
 3855	try ,
 3856	call the function f.process with 2 arguments : self and self.domain .
 3857	if except UnicodeDecodeError exception is caught ,
 3858	substitute STR1 in string STR0 with f.file and f.dirpath , write it to self.stdout .
 3859	potfiles is an empty list .
 3860	for every path in self.locale_paths ,
 3861	join into a path : path and string STR0 , where STR1 is replaced with self.domain converted into a string .
 3862	if potfile file path doesnt exist ,
 3863	skip this loop iteration .
 3864	append self.msguniq_options to a list containing a string STR0 , append list containing potfile to the result , substitute it for args .
 3865	call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively .
 3866	if six.PY2 is true ,
 3867	call the method msgs.decode with an argument string STR0 , substitute it for msgs .
 3868	if errors is true ,
 3869	if status is not equal to STATUS_OK ,
 3870	raise an CommandError exception with an argument string STR0 , where STR1 is replaced with errors .
 3871	otherwise if self.verbosity is greater than integer 0 ,
 3872	write errors to self.stdout .
 3873	call the function io.open with 3 arguments : potfile , string STR0 and encoding set to string STR1 as arguments ,
 3874	with the result renamed to fp , perform the following : write msgs to fp .
 3875	append potfile to potfiles .
 3876	return potfiles .
 3877	define the method remove_potfiles with an argument self .
 3878	for every path in self.locale_paths ,
 3879	join into a file path : path and string STR0 , where STR1 is replaced with self.domain converted into a string , substitute the result for pot_path .
 3880	if pot_path file path exists ,
 3881	call the method os.unlink with an argument pot_path .
 3882	define the method find_potfiles with an arguments self and root .
 3883	define the function is_ignored with arguments path and ignore_patterns .
 3884	call the function os.path.basename with an arguments path , substitute the result for filename .
 3885	ignore is a lambda function with pattern as an argument , return value is the return value of the function fnmatch.fnmatchcase , called with arguments : filename and pattern .
 3886	call the function ignore with an argument pattern , for every pattern in ignore_patterns , if any resulting element is true , return boolean True , otherwise return boolean False .
 3887	convert os.sep into a string and append STR0 to it , substitute the result for dir_suffix .
 3888	for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start , to the negative length of the dir_suffix as the end index and append it to a list , if p doesnt end with dir_suffix , append p to a list , substitute resulting list for norm_patterns .
 3889	all_files is an empty list .
 3890	call the function os.walk with 3 arguments : root , topdown set to boolean True , followlinks set to self.symlinks ,
 3891	for every dirpath , dirnames and filenames in the result , for every dirname in list dirnames ,
 3892	join dirpath and dirname into a file path , use is as an argument for the call to the function os.path.join ,
 3893	use the result as an argument for the call to the os.path.join function , use the result and the norm_patterns as arguments for the call to the is_ignored function , if it evaluates to true , remove dirname from the dirnames .
 3894	if self.verbosity is greater than integer 1 ,
 3895	replace STR0 in string STR1 with dirname , write it to self.stdout stream .
 3896	otherwise if dirname equals string STR0 ,
 3897	remove dirname from the dirnames .
 3898	call the method os.path.abspath with an argument dirpath , join the result and dirname into a file path , inset it at the beggining of self.locale_paths .
 3899	for every filename in filenames ,
 3900	join dirpath and filename into path , use it as an argument for the call to the function os.path.normpath , substitute it for file_path .
 3901	call the function is_ignored , with arguments : file_path and self.ignore_patterns , if it evaluates to true ,
 3902	if self.verbosity is greater than integer 1 ,
 3903	replace STR0 in string STR1 with filename and dirpath , write it to self.stdout .
 3904	if not ,
 3905	locale_dir is None .
 3906	for every path in self.locale_paths ,
 3907	call the function os.path.abspath with an argument dirpath , if it starts with return value of the method os.path.dirname ,
 3908	called with an argument path , substitute path for locale_dir .
 3909	break the loop execution .
 3910	if locale_dir is false ,
 3911	substitute self.default_locale_path for locale_dir .
 3912	if locale_dir is false ,
 3913	raise an CommandError with an argument string STR0 ,
 3914	where STR0 is replaced with file_path . create an object TranslatableFile with arguments : dirpath , filename and locale_dir , append it to all_files .
 3915	sort all_files and return it .
 3916	define the method write_po_file with arguments self , potfile and locale .
 3917	call the method os.path.dirname with an argument potfile , join the result , locale and string STR0 into a file path , substitute it for basedir .
 3918	if basedir is not a directory ,
 3919	make basedir directory ,
 3920	convert self.domain into a string and append string STR0 to it , join basedir and result in file path , substitute it for pofile .
 3921	if pofile path exists ,
 3922	append self.msgmerge_options to a list containing string STR0 , append to it a list containing pofile and potfile , substitute the result for args .
 3923	call the function popen_wrapper with an argument args , assign the result to msgs , errors and status .
 3924	if six.PY2 is true ,
 3925	call the method msgs.decode with an argument string STR0 , substitute the result for msgs .
 3926	if errors is true ,
 3927	if statue is not equal to STATUS_OK .
 3928	raise an CommandError with an argument string STR0 , where STR1 is replaced with errors .
 3929	otherwise if self.verbosity is greater than integer 0 ,
 3930	write errors to self.stdout .
 3931	if not ,
 3932	call the function io.open with 3 arguments : potfile , string STR and encoding set to string STR0 as arguments ,
 3933	with the result renamed to fp , perform the following : read file fp and substitute the result for msgs .
 3934	if self.invoked_for_django is false ,
 3935	call the method self.copy_plural_forms with arguments : msgs and locale , substitute it for msgs .
 3936	substitute STR1 in string STR0 with self.domain , replace all the occurrences of previous string in msgs for an empty string , substitute the result for msgs .
 3937	call the function io.open with 3 arguments : pofile , string STR0 and encoding set to string STR1 as arguments ,
 3938	with the result renamed to fp , perform the following : write msgs to fp .
 3939	if self.no_obsolete is true ,
 3940	append self.msgattrib_options to a list containing string STR0 , append to it a list containing string STR1 , pofile and pofile , substitute the result for args .
 3941	call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively .
 3942	if errors is true ,
 3943	if status is not equal to STATUS_OK ,
 3944	raise an CommandError with an argument string STR0 , where STR1 is replaced with errors .
 3945	otherwise if self.verbosity is greater than integer 0 ,
 3946	write errors to self.stdout .
 3947	define the method copy_plural_forms with arguments self , msgs and locale .
 3948	call the function os.path.dirname with an argument django.__file__ , join the result into a path , use it as an argument for the call to the function os.path.normpath , substitute the result for django_dir .
 3949	if self.domain equals a string STR0 ,
 3950	domains is a tuple with 2 elements : strings STR0 and STR1 .
 3951	if not ,
 3952	domains is a tuple with element string STR0 .
 3953	for every domain in domains ,
 3954	join into a file path : django_dir , STR0 , STR1 , locale , STR2 and string STR3 appended to domain , substitute the result for django_po .
 3955	if django_po file path exists ,
 3956	call the function io.open with 3 arguments : django_po , string STR and encoding set to string STR0 as arguments ,
 3957	with the result renamed to fp , perform the following : read data from file fp , use the result as an argument for the call to the function plural_forms_re.search , substitute it for m .
 3958	if m is true ,
 3959	call the method m.group with an argument string STR0 , use the result as an argument for the call to the force_str , substitute the result for plural_form_line .
 3960	if self.verbosity is greater than integer 1 ,
 3961	replace STR1 in string STR0 with plural_form_line , write it to self.stdout .
 3962	lines is an empty list .
 3963	found is boolean False .
 3964	split msgs by newline characters , for every line in result ,
 3965	if found is false and , line is false or return value of the function plural_forms_re.search called with an argument line is false ,
 3966	append newline to plural_form_line , substitute the result for line .
 3967	found is boolean True .
 3968	append line to lines .
 3969	join elements of lines into a string , separated by newline characters , substitute it for msgs .
 3970	break the loop execution .
 3971	return msgs .
 3972	import module sys .
 3973	import module os .
 3974	import module operator .
 3975	from django.apps import apps into default name space .
 3976	from django.core.management.base import BaseCommand and CommandError into default name space .
 3977	from django.db.migrations import Migration into default name space .
 3978	from django.db.migrations.loader import MigrationLoader into default name space .
 3979	from django.db.migrations.autodetector import MigrationAutodetector into default name space .
 3980	from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space .
 3981	from django.db.migrations.state import ProjectState into default name space .
 3982	from django.db.migrations.writer import MigrationWriter into default name space .
 3983	from django.utils.six.moves import reduce into default name space .
 3984	derive the class Command from the BaseCommand class .
 3985	help is a string STR0 .
 3986	define the method add_arguments with 2 arguments self and parser .
 3987	call the method parser.add_argument with 4 arguments : string STR0 , metavar set to string STR1 , nargs set to characte STR2 , and help as a string STR3 .
 3988	call the method parser.add_argument with 5 arguments : string STR1 , action as a string STR2 , dest as string STR3 , default set to boolean False , help as a string STR0 .
 3989	call the method parser.add_argument with 5 arguments : string STR1 , action as a string STR2 , dest as a string STR3 , default set to boolean False and help set to a string STR0 .
 3990	call the method parser.add_argument with 5 arguments : string STR1 , action as a string STR2 , dest as a string STR3 , default set to boolean False and help as a string STR0 .
 3991	call the method parser.add_argument with 5 arguments : string STR0 , action as a string STR1 , dest as a string STR2 , default set to boolean True , and help as a string STR3 .
 3992	define the method handle with 3 arguments : self , unpacked list app_labels and unpacked dictionary options .
 3993	get the value under the STR0 key of the options dictionary , substitute it for self.verbosity .
 3994	get the value under the STR0 key of the options dictionary , substitute it for self.interactive .
 3995	get the value under the STR0 key of the options dictionary , if the key exists substitute it for self.dry_run , if not , self.dry_run is boolean False .
 3996	get the value under the STR0 key of the options dictionary , if the key exists substitute it for self.merge , if not , self.merge is boolean False .
 3997	get the value under the STR0 key of the options dictionary , if the key exists substitute it for self.empty , if not , self.empty is boolean False .
 3998	crate a set containing of app_labels elements , substitute it for app_labels .
 3999	bad_app_labels is an empty set .
 4000	for every app_label in app_labels ,
 4001	try ,
 4002	call the method apps.get_app_config with an argument app_label .
 4003	if LookupError exception is caught ,
 4004	call the method bad_app_labels with an argument app_label ,
 4005	if bad_app_labels is true ,
 4006	for every app_label in bad_app_labels ,
 4007	write string STR0 with STR1 where STR2 is replaced with app_label , write it for self.stderr .
 4008	exit the program with the integer 2 as exit code .
 4009	loader is an instance of MigrationLoader class , created with 2 arguments : None and ignore_no_migrations set to boolean True .
 4010	call the method loader.detect_conflicts , substitute the result for conflicts .
 4011	if conflicts is true and self.merge is false ,
 4012	for every app and names in result of the method conflicts.items , join names into a string , separated by STR0 , join it with app into a string , separated with string STR1 , substitute it for name_str .
 4013	substitute ' % s\ in string STR0 , with name_str , use it as an argument to throw an CommandError exception .
 4014	if self.merge is true and conflicts is false ,
 4015	write string STR0 to self.stdout stream .
 4016	return nothing .
 4017	if self.merge and conflicts are both true ,
 4018	call the method self.handle_merge with 2 arguments : loader and conflicts , return the result .
 4019	autodetector is an instance of the MigrationAutodetector class , created with 3 arguments : result of the method loader.project_state , result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner , called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run .
 4020	if self.empty is true ,
 4021	if app_labels is false ,
 4022	raise an CommandError with an argument string STR0 .
 4023	crate a dictionary with app mapping and from the class Migration , created with arguments : string STR0 and app , for every app in app_labels .
 4024	call the method autodetector.arrange_for_graph with 2 arguments : changes , loader.graph , substitute the result for changes .
 4025	call the method self.write_migration_files with an argument changes .
 4026	return nothing .
 4027	call the method autodetector.changes with 3 arguments : graph set to loader.graph , trim_to_apps set to app_labels , if it exists or None if not and convert_apps set to app_labels , if it exists or None if not , substitute the result for changes .
 4028	if changes is false and self.verbosity is greater than , or equal to iteger 1 ,
 4029	if length of app_labels is equal to integer 1 ,
 4030	substitute STR1 in string STR0 with the result of the method app_labels.pop , write it to self.stdout .
 4031	otherwise if length of app_labels is greater than integer 1 ,
 4032	substitute STR2 in string STR0 with the app_labels joined into a string , separated by string STR1 , write it to self.stdout .
 4033	if not ,
 4034	write string STR0 to self.stdout stream .
 4035	return nothing .
 4036	call the method self.write_migration_files with an argument changes .
 4037	define the method write_migration_files with arguments self and changes .
 4038	directory_created is an empty dictionary .
 4039	for every app_label and app_migrations in result of the method changes.items ,
 4040	if self.verbosity is greater or equal to integer 1 ,
 4041	substitute STR1 in a string STR0 with app_label , append newline to it , use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout .
 4042	for every migration in app_migrations ,
 4043	writer is an instance of MigrationWriter class , created with an argument migration .
 4044	if self.verbosity is greater or equal to integer 1 ,
 4045	substitute STR1 in a string STR0 with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename , write the result to self.stdout .
 4046	for every operation in migration.operations ,
 4047	substitute STR1 in a string STR0 with return value of the operation.describe method , write the result to self.stdout .
 4048	if self.dry_run is false ,
 4049	call the function os.path.dirname with an argument writer.path , substitute the result for migrations_directory .
 4050	get the value under the app_label key of the directory_created dictionary , if exists and it is false ,
 4051	if migrations_directory is not a directory ,
 4052	make a directory migrations_directory .
 4053	join migrations_directory and string STR0 into a file path , substitute it for init_path .
 4054	if init_path is not a file ,
 4055	crate a file named init_path .
 4056	value under the all_label key of the directory_created dictionary is boolean True .
 4057	call the method writer.as_string , substitute the result for migration_string .
 4058	open writer.path file in write mode , with the file descriptor as fh , perform ,
 4059	write migration_string to file fh .
 4060	otherwise if self.verbosity equals integer 3 ,
 4061	substitute STR1 in a string STR0 with writer.filename , append newline to it , use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout .
 4062	call the method writer.as_string , append newline to the result , write it to self.stdout .
 4063	define the method handle_merge with arguments self , loader and conflicts .
 4064	if self.interactive is true ,
 4065	questioner is an instance of a InteractiveMigrationQuestioner class .
 4066	if not ,
 4067	questioner is an instance of a InteractiveMigrationQuestioner class , created with an argument : defaults set to dictionary with entry : boolean True for STR0 .
 4068	for every app_label and migration_names in result of the method conflicts.items ,
 4069	merge_migrations is an empty list .
 4070	for every migration_name in migration_names ,
 4071	call the method loader.get_migration with arguments app_label and migration_name , substitute the result for migration .
 4072	call the method loader.graph.forwards_plan with argument a tuple , with 2 elements : app_label and migration_name , substitute the result for migration.ancestry .
 4073	append migration to merge_migrations .
 4074	common_ancestor is None .
 4075	for m in merge_migrations append m.ancestry to a list , zip the resulting list into tuples of pairs , for every level in result ,
 4076	apply operator.eq function to elements of level iterable , until level is reduced to a single value , if the result is true ,
 4077	substitute first element of level for common_ancestor .
 4078	if not ,
 4079	break the loop execution ,
 4080	if common_ancestor is None ,
 4081	raise an ValueError with an argument string STR0 , where STR1 is replaced with migration_names .
 4082	for every migration in merge_migrations ,
 4083	call the method migration.ancestry.index with an argument common_ancestor , increment the result by one , slice migration.ancestry list from the last result as an starting index to the end , substitute the slice for migration.branch .
 4084	migration.merged_operations is an empty list .
 4085	for every node_app and node_name in migration.branch ,
 4086	call the method loader.get_migration with arguments node_app and node_name , extend the migration.merged_operations with the operations field of the result .
 4087	if self.verbosity is greater than integer 1 ,
 4088	substitute STR1 in a string STR0 with app_label , use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout .
 4089	for every migration in merge_migrations ,
 4090	substitute STR1 in a string STR0 with migration.name , use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout .
 4091	for every operation in migration.merged_operations ,
 4092	substitute STR1 in a string STR0 with return value of the operation.describe method , write the result to self.stdout .
 4093	call the method questioner.ask_merge with an argument app_label , if it evaluates to true ,
 4094	numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name , for every migration in merge_migrations .
 4095	try ,
 4096	biggest_number is maximum numbers element .
 4097	if ValueError exception is caught ,
 4098	biggest_number is integer 1 .
 4099	subclass is a instance of a class named Migration , derived from the base class Migration , with 1 field : dependencies set to a list of tuples with 2 elements : app_label and migration.name for every migration in merge_migrations .
 4100	call the method subsclass with 2 arguments : string STR0 , replace STR1 with biggest_number incremented by one , that occupies minimum 4 places within a string , and app_label , substitute the result for new_migration .
 4101	writer is instance of MigrationWriter class , created with new_migration argument .
 4102	open writer.path file in write mode , with the file descriptor as fh , perform the following ,
 4103	call the method writer.as_string , write the result to fh file .
 4104	if self.verbosity is greater than integer 0 ,
 4105	substitute STR1 in a string STR0 with writer path , write it to self.stdout .
 4106	from __future__ import unicode_literals into default name space .
 4107	from collections import OrderedDict into default name space .
 4108	from importlib import import_module into default name space .
 4109	import module itertools .
 4110	import module traceback .
 4111	from django.apps import apps into default name space .
 4112	from django.core.management import call_command into default name space .
 4113	from django.core.management.base import BaseCommand and CommandError into default name space .
 4114	from django.core.management.color import no_style into default name space .
 4115	from django.core.management.sql import custom_sql_for_model , emit_post_migrate_signal and emit_pre_migrate_signal into default name space .
 4116	from django.db import connections , router , transaction and DEFAULT_DB_ALIAS into default name space .
 4117	from django.db.migrations.executor import MigrationExecutor into default name space .
 4118	from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space .
 4119	from django.db.migrations.state import ProjectState into default name space .
 4120	from django.db.migrations.autodetector import MigrationAutodetector into default name space .
 4121	from django.utils.module_loading import module_has_submodule into default name space .
 4122	derive the class Command from the base class BaseCommand .
 4123	help is a string STR0 .
 4124	define the method add_arguments with self class instance and parse as the arguments .
 4125	call the method parser.add_argument with string STR0 , nargs set to charcter STR1 , help containing string , STR2 as arguments .
 4126	call the method parser.add_argument with string STR0 , nargs set to charcter STR1 , help containing string , STR2 as arguments .
 4127	call the method parser.add_argument with string STR0 , action containing string STR1 , dest set to string STR2 , default set to True , help containing string STR3 as arguments .
 4128	call the method parser.add_argument with string STR0 , action containing string STR1 , dest set to string STR2 , default set to True , help containing string STR3 as arguments .
 4129	call the method parser.add_argument with string STR1 , action containing string STR2 , dest set to string STR3 , default set to DEFAULT_DB_ALIAS , help containing string STR4 as arguments .
 4130	call the method parser.add_argument with string STR0 , action containing string STR1 , dest set to string STR2 , default set to False , help containing string STR3 as arguments .
 4131	call the method parser.add_argument with string STR0 , string STR1 , action contains string STR2 , dest set to string STR3 , default set to False , help containing string STR4 as arguments .
 4132	define the method handle with self instance of a class , list args , dictionary options as arguments .
 4133	get the value from the options dictionary under the key STR0 , substitute it for self.verbosity .
 4134	get the value from the options dictionary under the key STR0 , substitute it for self.interactive .
 4135	get the value from the options dictionary under the key STR0 , substitute it for self.show_traceback .
 4136	get the value from the options dictionary under the key STR0 , substitute it for self.load_initial_data .
 4137	get the value from the options dictionary under the key STR0 , or False if the key dont exists , substitute it for self.test_database .
 4138	for every app_config in return value of the call to the function apps.get_app_configs ,
 4139	if call to the function module_has_submodule with app_config.module and STR0 evaluates to True .
 4140	import module STR0 from the package app_config.name .
 4141	get the value under the key STR0 of the options dictionary , substitute it for db .
 4142	substitute connections element at the index of the value db for connections .
 4143	get the value under the STR0 key of options dictionary , if key doesnt exist return False , if the return value is True ,
 4144	call the method self.show_migration_list with connection as first argument , as second argument use value under the STR0 key of options dictionary , if exists , if not use None as the second argument , return the result .
 4145	call the function MigrationExecutor with connection and self.migration_progress_callback as arguments , substitute the result fro executor .
 4146	call the executor.loader.detect_conflicts , substitute the result fr conflicts .
 4147	if conflicts is true ,
 4148	for every app and names in key , value tuple pairs of conflicts dictionary join names into a string separated by commas , in STR0 substitute STR1 with names string and app , respective , join all the previous pairs into a string separated by STR2 , substitute it for name_str .
 4149	raise CommandError exception , with STR0 , with STR1 substituted for name_str , as argument .
 4150	run_syncdb is boolean False .
 4151	target_app_labels_only is boolean True .
 4152	if values under the STR0 and STR1 keys of the options dictionary are True ,
 4153	assign values under the STR0 and STR1 keys of the options dictionary to the app_label and migration_name , respectively .
 4154	if app_label is not contained in executor.loader.migrated_apps ,
 4155	raise CommandError exception with STR0 , with STR1 substituted for app_label , as arguments .
 4156	if migration_name equals to string STR0 ,
 4157	targets is a list containing tuple with two elements , app_label and None .
 4158	if not ,
 4159	try ,
 4160	call the executor.loader.get_migration_by_prefix with app_label and migration_name , substitute the result for migration .
 4161	if AmbiguityError exception is caught ,
 4162	raise CommandError exception with STR0 , with STR1 substituted for migration_name and app_label , respectively , as arguments .
 4163	if KeyError exception is caught ,
 4164	raise CommandError exception with STR0 , with STR1 substituted for migration_name and app_label , respectively , as arguments .
 4165	targets is a list containing tuple with two elements , app_label and migration.name .
 4166	target_app_labels_only is boolean False .
 4167	otherwise if value under the STR0 key of options dictionary is true ,
 4168	substitute the value under the STR0 key of options dictionary for app_label .
 4169	if app_label is not contained in executor.loader.migrated_apps ,
 4170	raise CommandError exception with STR0 , with STR1 substituted for app_label , as arguments .
 4171	for every key in return vale of the method executor.loader.graph.leaf_nodes , check if the first element of key equals to app_label , if it does append it to targets list .
 4172	if not ,
 4173	call the method executor.loader.graph.leaf_nodes and substitute its result for targets .
 4174	run_syncdb is boolean True .
 4175	call the executor.migration_plan method with targets as the argument , substitute the result for plan .
 4176	if self.verbosity is greater or equal to integer 1 .
 4177	call the self.style.MIGRATE_HEADING method , with string STR0 as an argument , use the result as an argument for the call to the self.stdout.write method .
 4178	if run_syncdb and executor.loader.unmigrated_apps exist ,
 4179	join the executor.loader.unmigrated_apps into a string separated by string STR1 append it to the end of a string STR0 , use it as an argument for the call to the self.style.MIGRATE_LABEL method , use the result of the previous method as an argument for the call to the self.stdout.write method .
 4180	if target_app_labels_only is true ,
 4181	for every a and n in targets , put a into a set , join all the set elements into a string separated by string STR1 , if set is empty return string STR2 instead , append the previous to the string STR0 , use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL , use the result as an argument for the call to the method self.stdout.write .
 4182	if not ,
 4183	if element of targets in first row and second column is None ,
 4184	convert the first element of the first row of targets to string , append it to the string STR0 , use the it as an argument for the call to the self.style.MIGRATE_LABEL method , use the result to cal the self.stdout.write method .
 4185	if not ,
 4186	replace STR1 in string STR0 with second and first element of the first targets row , respectively ,
 4187	append it to the string STR0 , use it as the argument for the call to the self.style.MIGRATE_LABEL method , call the self.stdout.write method with previous return value as an argument . if run_syncdb and executor.loader.unmigrated_apps is true ,
 4188	if self.verbosity is greater or equal to integer 1 .
 4189	call the self.style.MIGRATE_HEADING with string STR0 as an argument , use the result as an argument for the call to the self.stdout.write .
 4190	call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments , substitute it for created_models .
 4191	if not ,
 4192	create_models is an empty list .
 4193	if the value under the STR0 key of the options dictionary exists ,
 4194	call the function call_command with string STR0 , verbosity set to greater element , self.verbosity decremented by 1 or integer 0 , interactive set to boolean False , database set to db , reset_sequences set to boolean False , inhibit_post_migrate set to boolean True .
 4195	if self.verbosity is greater or equal to integer 1 ,
 4196	call the self.style.MIGRATE_HEADING method with string STR0 as an argument , use the result as an argument for the call to the self.stdout.write method .
 4197	if plan is not true ,
 4198	if self.verbosity is greater or equal to integer 1 ,
 4199	call the method self.stdout.write with string STR0 as an argument .
 4200	call the MigrationAutodetector function with arguments , return value of the call to the method executor.loader.project_state , and return value of the call to the method ProjectState.from_apps with apps as an argument , assign it to the autodetector .
 4201	call the method autodetector.changes with the graph set to executor.loader.graph as an argument , substitute it for the changes .
 4202	if changes is true ,
 4203	call the method self.style.NOTICE with string STR0 as an argument , use the result as an argument for the call to the self.stdout.write method .
 4204	call the method self.style.NOTICE with string STR0 as an argument , use the result as an argument for the call to the self.stdout.write method .
 4205	if not ,
 4206	call the executor.migrate method with , targets , plan and fake set to the value under the STR0 key of options dictionary , if the STR1 key doesnt exists set fake to boolean False , as arguments .
 4207	call the method emit_post_migrate_signal with created_models , self.verbosity , self.interactive and connection.alias as arguments .
 4208	define the method migration_progress_callback with self class instance , action , migration and fake set to boolean False as arguments .
 4209	if self.verbosity is greater or equal to integer 1 ,
 4210	if action equals to string STR0 ,
 4211	call the self.stdout.write method , with string STR0 with STR1 replaced with migration and ending set to STR , as arguments .
 4212	flush the output buffer of the self.stdout object .
 4213	otherwise if action equals to string STR0 ,
 4214	if fake is true ,
 4215	wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string STR0 as a argument .
 4216	if not ,
 4217	wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string STR0 as a argument .
 4218	otherwise if action equals to string STR0 .
 4219	call the self.stdout.write method , with string STR0 with STR1 replaced with migration and ending set to STR , as arguments .
 4220	flush the output buffer of the self.stdout object .
 4221	otherwise if action equals to string STR0 .
 4222	if fake is true ,
 4223	write to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string STR0 as a argument .
 4224	if not ,
 4225	write to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string STR0 as a argument .
 4226	define the method sync_apps with self class instance , connection and app_labels as arguments .
 4227	call the connection.cursor method , substitute the result for cursor .
 4228	try ,
 4229	call the connection.introspection.table_names with cursor as argument , store the result in tables .
 4230	call the connection.introspection.table_names with tables as argument , store the result in seen_models .
 4231	created_models is a set .
 4232	pending_references is a empty dictionary .
 4233	for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None , and app_config.label is contained in app_labels , create a tuple containing app_config.label and return value of the method router.get_migratable_models called with app_config , connection.alias and include_auto_created set to True , append the tuple to the list all_models .
 4234	define the method model_installed with model as an argument .
 4235	substitute model._meta for opts .
 4236	substitute connection.introspection.table_name_converter for converter .
 4237	evaluate next boolean expression , value of converter function with opts.db_table as argument is contained in tables , or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables , invert the evaluated expression and return it .
 4238	manifest is OrderDict class instance , created with tuple of two elements , app_name and list of elements of model_list for which model_installed function returned true , for every app_name and model_list in all_modules .
 4239	unpack the manifest.values function return value and feed it to the itertools.chain function , create_models is a set containing chanied list .
 4240	call the emit_pre_migrate_signal with create_models , self.verbosity , self.interactive . connection.alias as arguments .
 4241	if self.verbosity is greater or equal than integer 1 ,
 4242	write the string STR0 to the standard output .
 4243	with the call to the transaction.atomic method with using set to connection.alias , savepoint set to connection.features.can_rollback_ddl as arguments ,
 4244	for every app_name and model_list in return value of manifest.items function ,
 4245	for every model in model_list ,
 4246	if self.verbosity is greater or equal to 3 ,
 4247	call the self.stdout.write method with string STR0 as argument , with all occurrences of STR1 replaced with , app_name and model._meta.object_name , respectively .
 4248	evaluate connection.creation.sql_create_model method with model , no_style ( ) and seen_models as arguments , assign the result to the sql and references , respectively .
 4249	add model to seen_models set .
 4250	add model to created_models set .
 4251	for every refto and refs in return value of references.items method .
 4252	call the method extend with refs as argument , on the result call the pending_references.setdefault method with refto and empty list as arguments .
 4253	if refto is contained in seen_models ,
 4254	call the connection.creation.sql_for_pending_references method with refto , no_style ( ) and pending_references as arguments , use the result as the argument for the call to the sql.extend method .
 4255	call the connection.creation.sql_for_pending_references method with refto , no_style ( ) and pending_references as arguments , use the result as the argument for the call to the sql.extend method .
 4256	if self.verbosity is greater or equal than integer 1 and sql is true ,
 4257	call the self.stdout.write method with string STR0 as argument , with all occurrences of STR1 replaced with model._meta.db_table .
 4258	for statements is sql ,
 4259	call the cursor.execute method with statement as argument .
 4260	evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument , append it to tables .
 4261	finally , perform ,
 4262	call the cursor.close method .
 4263	call the connection.cursor method , substitute it for cursor .
 4264	try ,
 4265	if self.verbosity is greater or equal than integer 1 ,
 4266	write the string STR0 to the standard output .
 4267	for every app_name and mode_list in return value of manifest.items method ,
 4268	for model in model_list ,
 4269	if model is contained in created_models ,
 4270	call the method custom_sql_for_model with model , no_style ( ) and connection as arguments , substitute the result for custom_sql .
 4271	if custom_sql is empty ,
 4272	if self.verbosity is greater or equal to integer 2 ,
 4273	call the self.stdout.write method with string STR0 as argument , with all occurrences of STR1 replaced with app_name and model._meta.object_name , respectively .
 4274	try ,
 4275	with call to the function transaction.atomic with using set to connection.alias as argument ,
 4276	for every sql in custom_sql ,
 4277	call the cursor.execute method with sql as argument .
 4278	if exception of class Exception , as e , is caught ,
 4279	call the self.stderr.write method with string STR0 as argument , with all occurrences of STR1 replaced with app_name and model._meta.object_name and e , respectively .
 4280	if self.show_traceback is true ,
 4281	call the traceback.print_exc method .
 4282	if not ,
 4283	if self.verbosity is greater or equal to integer 3 ,
 4284	call the self.stderr.write method with string STR0 as argument , with all occurrences of STR1 replaced with app_name and model._meta.object_name , respectively .
 4285	if self.verbosity is greater or equal to integer 1 ,
 4286	write string STR0 to the standard output .
 4287	for every app_name and model_list in return value of manifest.items method ,
 4288	for every model in model_list ,
 4289	if model is contained in created_models ,
 4290	call the connection.creation.sql_indexes_for_model with model and no_style ( ) as arguments , substitute the result for index_squl .
 4291	if index_sql is not empty ,
 4292	if self.verbosity is greater or equal to integer 2 ,
 4293	call the self.stderr.write method with string STR0 as argument , with all occurrences of STR1 replaced with app_name and model._meta.object_name , respectively .
 4294	try ,
 4295	with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl , as arguments .
 4296	for every sql in index_sql ,
 4297	call the method cursor.execute with sql as argument .
 4298	if exception of the class Exception , as e , is caught ,
 4299	call the self.stderr.write method with string STR0 as argument , with all occurrences of STR1 replaced with app_name and model._meta.object_name and e , respectively .
 4300	finally perform ,
 4301	call the cursor.close method .
 4302	if self.load_initial_data is not empty ,
 4303	for every app_label in app_labels ,
 4304	call the method call_command with string STR0 , string STR1 , verbosity set to self.verbosity , database set to connection.alias , skip_validation set to boolean True , app_label set to app_label and hide_empty set to boolean True .
 4305	return created_models
 4306	define show_migration_list with self class instance , connection and app_names set to None , as arguments .
 4307	loader is instance of MigrationLoader initialized with connection as an argument .
 4308	substitute loader.graph for graph .
 4309	if app_names is not empty ,
 4310	invalid_apps is an empty list .
 4311	for every app_name is app_names ,
 4312	if app_name is not contained in loader.migrated_apps ,
 4313	append app_name to the invalid_apps .
 4314	if invalid_apps in not empty ,
 4315	raise a CommandError exception , with string STR0 as argument , substitute STR1 in previous string with , string joined from invalided_apps list and separated with string STR2 .
 4316	if not ,
 4317	sort loader.migrated_apps , substitute it for app_names .
 4318	for every app_name in app_names .
 4319	call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments .
 4320	shown is an empty set .
 4321	for every node in return value of the graph.leaf_nodes method called with the app_name argument ,
 4322	for every plan_node in return value of the graph.forwards_plan method called with node as argument .
 4323	if plan_node is not contained in shown and first element of plan_node equals to app_name ,
 4324	substitute second element of plan_node for title .
 4325	if replaces filed of graph.nodes element at the plan_node index is true ,
 4326	substitute STR1 in the string STR0 with length of replaces filed of graph.nodes element at the plan_node index , append the string to the title .
 4327	if plan_node is contained in loader.applied_migrations ,
 4328	substitute STR1 with title in the string STR0 , write it to the standard output .
 4329	if not ,
 4330	substitute STR1 with title in the string STR0 , write it to the standard output .
 4331	add plan_node to the shown set .
 4332	if shown is an empty set ,
 4333	call the self.stdout.write method with string STR0 and self.style.MIGRATE_FAILURE as arguments .
 4334	import module argparse .
 4335	import module warnings .
 4336	from django.core.management.base import BaseCommand into default name space .
 4337	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 4338	derive the class Command from the BaseCommand class .
 4339	help is a string STR0 .
 4340	define the method add_arguments with 2 arguments self and parser .
 4341	call the method parser.add_argument with 3 arguments : string STR0 , nargs set to argparse.REMAINDER and help as a string STR1
 4342	define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
 4343	call the method warnings.warn with 2 arguments : string STR0 , and RemovedInDjango19Warning .
 4344	from django.conf import settings into default namespace .
 4345	from django.utils import translation into default namespace .
 4346	try ,
 4347	call the method translation.activate with an argument settings.LANGUAGE_CODE .
 4348	if AttributeError exception is caught ,
 4349	do nothing .
 4350	from django.core.servers.fastcgi import runfastcgi into default namespace .
 4351	call the function runfastcgi with an argument args .
 4352	define the method usage with 2 argument : self and subcommand .
 4353	from django.core.servers.fastcgi import FASTCGI_HELP into default namespace .
 4354	return FASTCGI_HELP .
 4355	from __future__ import unicode_literals into default name space .
 4356	from datetime import datetime into default name space .
 4357	import module errno .
 4358	import module os .
 4359	import module re .
 4360	import module sys .
 4361	import module socket .
 4362	from django.core.management.base import BaseCommand and CommandError into default name space .
 4363	from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space .
 4364	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4365	from django.db.migrations.executor import MigrationExecutor into default name space .
 4366	from django.utils import autoreload into default name space .
 4367	from django.utils import six into default name space .
 4368	from django.core.exceptions import ImproperlyConfigured into default name space .
 4369	call the method re.compile with 2 arguments : raw string STR0
 4370	STR0 , re.X DEFAULT_PORT is a string STR1 .
 4371	derive the class Command from the BaseCommand class .
 4372	help is a string STR0 .
 4373	requires_system_checks is boolean False .
 4374	define the method add_arguments with 2 arguments self and parser .
 4375	call the method parser.add_argument with 3 arguments : string STR0 , nargs= STR1 and help as a string STR2 .
 4376	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , action set to string STR2 , dest set to string STR3 , default set to boolean False and help set to string STR4 .
 4377	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest set to string STR2 , default set to boolean True and help set to STR3 .
 4378	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest set to string STR2 , default set to boolean True and help is a string STR3 .
 4379	def get_handler with 3 arguments : self , unpacked list args and unpacked dictionary options .
 4380	call the function get_internal_wsgi_application , return the result .
 4381	define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
 4382	from django.conf import settings into default namespace .
 4383	if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false ,
 4384	raise an CommandError exception with an argument string STR0 .
 4385	substitute value under the STR0 key of the options dictionary for self.use_ipv6 .
 4386	if self.use_ipv6 is true and socket.has_ipv6 is false ,
 4387	raise an CommandError exception with an argument string STR0 .
 4388	self._raw_ipv6 is boolean False .
 4389	get the value under the STR0 key of the options dictionary , if it is false ,
 4390	self.addr is an empty string .
 4391	substitute DEFAULT_PORT for self.port .
 4392	if not ,
 4393	call the method re.match with 2 arguments : naiveip_re and value under the STR0 key of the options dictionary , substitute the result for m .
 4394	if m is None ,
 4395	raise an CommandError exception with an argument string STR1 , where STR2 is replaced with value under the STR3 key of the options dictionary .
 4396	call the method m.groups , assign the result to self.addr , _ipv4 , _ipv6 , _fqdn and self.port , respectively .
 4397	call the method self.port.isdigit , if it evaluates to false ,
 4398	raise an CommandError exception with an argument string STR0 , where STR1 is repaced with self.port .
 4399	if self.addr is true ,
 4400	if _ipv6 is true ,
 4401	substitute self.addr without the first and last element for self.addr .
 4402	self.use_ipv6 is boolean True .
 4403	self._raw_ipv6 is boolean True .
 4404	otherwise if self.use_ipv6 is true and _fqdn is false ,
 4405	raise an CommandError exception with an argument string STR1 where STR2 is replaced with self.addr .
 4406	if self.addr is false ,
 4407	if self.use_ipv6 substitute string STR0 for self.addr , if not substitute STR1 for self.addr .
 4408	convert self.use_ipv6 to boolean , substitute it for self._raw_ipv6 .
 4409	call the self.run method with unpacked dictionary options as an argument .
 4410	define the method run with 3 arguments : self and unpacked dictionary options .
 4411	substitute value under the STR0 key of the options dictionary for use_reloader .
 4412	if use_reloader is true ,
 4413	call the method autoreload.main with 3 arguments : self.inner_run , None and options .
 4414	if not ,
 4415	call the method self.inner_run with 2 arguments : None and unpacked dictionary options .
 4416	define the method inner_run with 3 arguments : self , unpacked list args and unpacked dictionary options .
 4417	from django.conf import settings into default namespace .
 4418	django.utils import translation into default namespace .
 4419	substitute value under the STR0 key of the options dictionary for threading .
 4420	get the value under the STR0 key of the options dictionary , if it exists substitute it for shutdown_message , if not , shutdown_message is an empty string .
 4421	if sys.platform equals string win32 STR0CTRL-BREAK STR1CONTROL-C ' for quit_command .
 4422	write string STR0 to self.stdout stream .
 4423	call the method self.validate with an argument display_num_errors set to boolean True .
 4424	try ,
 4425	call the method self.check_migrations .
 4426	if ImproperlyConfigured exception is caught ,
 4427	do nothing .
 4428	call the function datetime.now , on the result call the method strftime with an argument string STR0 , substitute the result for now .
 4429	if six.PY2 is true ,
 4430	call the method now.decode with an argument string STR0 , substitute the result for now .
 4431	call the method self.stdout.write with an argument : string STR0 , where STR1 is replaced with now , STR2 is replaced with return value of the method self.get_version , STR3 is replaced with settings.SETTINGS_MODULE , STR4 is replaced with self.addr if self._raw_ipv6 is true , or with self.addr if it is false , STR5 is replaced with self.port and STR6 is replaced with quit_command .
 4432	call the method translation.activate with an argument settings.LANGUAGE_CODE .
 4433	try ,
 4434	call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for handler .
 4435	call the function run with 5 arguments : self.addr , self.port converted to an integer , handler , ipv6 set to self.use_ipv6 , and threading set to threading .
 4436	if socket.error , renamed to e , exception is caught ,
 4437	ERRORS is a dictionary with 3 initial entries : string STR0 for errno.EACCES , STR1 for errno.EADDRINUSE and STR2 for errno.EADDRNOTAVAIL .
 4438	try ,
 4439	get the value under the e.errno key of the ERRORS dictionary , substitute it for error_text .
 4440	if KeyError exception is caught .
 4441	convert e to a string , substitute it for error_text .
 4442	replace STR1 in a string STR0 with error_text , write it to self.stderr .
 4443	exit the program with the code integer 1 .
 4444	if KeyboardInterrupt exception is caught ,
 4445	if shutdown_message is true ,
 4446	write shutdown_message to self.stdout file stream .
 4447	exit program with code integer 0 .
 4448	define the method check_migrations with an argument self .
 4449	executor is an instance of the class MigrationExecutor created with an argument : value under the DEFAULT_DB_ALIAS key of the connections dictionary .
 4450	call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument , substitute it for plan .
 4451	if plan is true ,
 4452	call the method self.style.NOTICE with an argument : string : STR0 , write it to self.stdout .
 4453	call the method self.style.NOTICE with an argument string STR0 , write it to self.stdout .
 4454	substitute Command for BaseRunserverCommand .
 4455	import module os .
 4456	from django.core.management.base import BaseCommand into default name space .
 4457	derive the class Command from the BaseCommand class .
 4458	help is a string STR0 .
 4459	requires_system_checks is boolean False .
 4460	shells is a list containing 2 elements : string STR0 and string STR1 .
 4461	define the method add_arguments with 2 arguments self and parser .
 4462	call the method parser.add_argument with 4 arguments : string STR0 , action set to string STR1 , dest as a string STR2 , and help is a string STR3 .
 4463	call the method parser.add_argument with 4 arguments : string STR0 , action as a string STR1 , dest as a string STR2 and help as a string STR3 .
 4464	call the method parser.add_argument with 5 arguments : string STR2 , string STR3 , choices set to string self.shells , dest as a string STR4 and help as a string STR5 .
 4465	define the method _ipython_pre_011 with an argument self .
 4466	from IPython.Shell import IPShell into default namespace .
 4467	shell is an instance of IPShell class , created with an argument argv as an empty list .
 4468	call the method shell.mainloop .
 4469	define the method _ipython_pre_100 with an argument self .
 4470	from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace .
 4471	call the method instance of TerminalIPythonApp class , substitute the result for app .
 4472	call the method app.initialize with an argument argv as an empty list .
 4473	call the method app.start .
 4474	define the method _ipython with an argument self .
 4475	from IPython import start_ipython into default namespace .
 4476	call the method start_ipython with an argument argv as an empty list .
 4477	define the method ipython with an argument self .
 4478	for every ip in tuple containing 3 elements : self._ipython , self._ipython_pre_100 and self._ipython_pre_011 ,
 4479	try ,
 4480	call the function ip .
 4481	if ImportError exception is caught ,
 4482	do nothing .
 4483	if not ,
 4484	return nothing .
 4485	raise an ImportError exception with an argument string STR0 .
 4486	define the method bpython with an argument self .
 4487	import bpython .
 4488	call the method bpython.embed .
 4489	define the method run_shell with an arguments self and shell set to None .
 4490	if shell is true substitute list with element shell for available_shells , if not substitute self.shells for available_shells .
 4491	for every shell in available_shells ,
 4492	try ,
 4493	get shell attribute of the self object , call it and return the result .
 4494	if ImportError exception is caught ,
 4495	do nothing .
 4496	raise an ImportError exception .
 4497	define the method handle with 3 arguments : self and unpacked dictionary options .
 4498	try ,
 4499	if value under STR0 key of the options dictionary is true ,
 4500	raise an ImportError exception .
 4501	call the method self.run_shell with an argument shell set to value under the STR0 key of the options dictionary .
 4502	if ImportError exception is caught ,
 4503	import code .
 4504	imported_objects is an empty dictionary .
 4505	try ,
 4506	import readline .
 4507	if ImportError exception is caught ,
 4508	do nothing .
 4509	if not ,
 4510	import rlcompleter .
 4511	call the method rlcompleter.Completer with an argument imported_objects , use the complete field of the result as an argument for the call to the method readline.set_completer .
 4512	call the method readline.parse_and_bind with an argument string STR0 .
 4513	get the value under the STR0 key of the options dictionary , if it evaluates to false ,
 4514	for every pythonrc in tuple containing 2 elements : return value of the function os.environ.get called with a string STR0 , and string STR1 as tuples second element .
 4515	if pythonrc is true ,
 4516	skip this loop iteration .
 4517	call the function os.path.expanduser with an argument pythonrc , substitute the result for pythonrc .
 4518	if pythonrc is not a file ,
 4519	skip this loop iteration .
 4520	try ,
 4521	open pythonrc , with the file handle renamed to handle perform the following ,
 4522	compile the handle.read in mode STR0 source is read from file pythonrc , execute the compiled script with imported_objects variables .
 4523	if NameError exception is caught ,
 4524	do nothing .
 4525	call the method code.interact with an argument local set to imported_objects .
 4526	from __future__ import unicode_literals into default name space .
 4527	from django.core.management.base import AppCommand into default name space .
 4528	from django.core.management.sql import sql_create into default name space .
 4529	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4530	derive the class Command from the AppCommand base class .
 4531	help is a string STR0 .
 4532	output_transaction is boolean True .
 4533	define the method add_arguments with 2 arguments self and parser .
 4534	call the method add_arguments from the base class of the class Command , with an argument parser .
 4535	call the method parser.add_argument with 3 arguments : string STR1 , default set to DEFAULT_DB_ALIAS , and help set to a string STR2 .
 4536	define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
 4537	if app_config.models_module is None ,
 4538	return nothing .
 4539	get the value under the STR0 key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
 4540	call the function sql_create with 3 arguments : app_config , self.style and connection , substitute the result for statements .
 4541	join statements into a string , separated by newlines , return it .
 4542	from __future__ import unicode_literals into default name space .
 4543	from django.core.management.base import AppCommand into default name space .
 4544	from django.core.management.sql import sql_all into default name space .
 4545	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4546	derive the class Command from the AppCommand base class .
 4547	help is a string STR0 .
 4548	output_transaction is boolean True .
 4549	define the method add_arguments with 2 arguments self and parser .
 4550	call the method add_arguments from the base class of the class Command , with an argument parser .
 4551	call the method parser.add_argument with 3 arguments : string STR1 , default set to DEFAULT_DB_ALIAS , and help set to a string STR2 .
 4552	define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
 4553	if app_config.models_module is None ,
 4554	return nothing .
 4555	get the value under the STR0 key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
 4556	call the function sql_all with 3 arguments : app_config , self.style and connection , substitute the result for statements .
 4557	join statements into a string , separated by newlines , return it .
 4558	from __future__ import unicode_literals into default name space .
 4559	from django.core.management.base import AppCommand into default name space .
 4560	from django.core.management.sql import sql_delete into default name space .
 4561	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4562	derive the class Command from the AppCommand base class .
 4563	help is a string STR0 .
 4564	output_transaction is boolean True .
 4565	define the method add_arguments with 2 arguments self and parser .
 4566	call the method add_arguments from the base class of the class Command , with an argument parser .
 4567	call the method parser.add_argument with 3 arguments : string STR1 , default set to DEFAULT_DB_ALIAS , and help set to a string STR2 .
 4568	define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
 4569	if app_config.models_module is None ,
 4570	return nothing .
 4571	get the value under the STR0 key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
 4572	call the function sql_destroy_indexes with 3 arguments : app_config , self.style and connection , substitute the result for statements .
 4573	join statements into a string , separated by newlines , return it .
 4574	from __future__ import unicode_literals into default name space .
 4575	from django.core.management.base import AppCommand into default name space .
 4576	from django.core.management.sql import sql_custom into default name space .
 4577	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4578	derive class Command from the base class AppCommand .
 4579	help is a string , STR0 .
 4580	substitute True for output_transaction .
 4581	define method add_arguments with class instance self and parser as the input arguments .
 4582	call the function add_arguments with parser as an argument , from the base class of the Command class .
 4583	call the parser.add_argument method with the string STR1 , default set to DEFAULT_DB_ALIAS and help containig string , STR2 as the arguments .
 4584	define method handle_app_config with self class instance , app_config and dictionary options as arguments .
 4585	if app_config.models_module is None ,
 4586	return nothing .
 4587	extract the value under the key STR0 from the options dictionary , use the value for indexing connections list , substitute the result for connection .
 4588	call the function sql_custom with app_config , self.style and connection as the arguments , substitute the result for statements .
 4589	join the list of statements into a string separated by new lines , return it .
 4590	from __future__ import unicode_literals into default name space .
 4591	from django.core.management.base import AppCommand into default name space .
 4592	from django.core.management.sql import sql_destroy_indexes into default name space .
 4593	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4594	derive the class Command from the AppCommand base class .
 4595	help is an string STR0 .
 4596	output_transaction is boolean True .
 4597	define the method add_arguments with 2 arguments : self and parser .
 4598	call the add_arguments method from the base class of the class Command with parser as an argument .
 4599	call the method parser.add_argument with 3 arguments : string STR1 , default set to DEFAULT_DB_ALIAS , and help set to string STR2 .
 4600	define the handle_app_config with 3 arguments self , app_config and unpacked dictionary options .
 4601	if app_config.models_module is None .
 4602	return nothing .
 4603	get the value under the STR0 key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
 4604	call the function sql_destroy_indexes with 3 arguments : app_config , self.style and connection , substitute the result for statements .
 4605	join statements into a string , separated by newlines , return it .
 4606	from __future__ import unicode_literals into default name space .
 4607	from django.core.management.base import BaseCommand into default name space .
 4608	from django.core.management.sql import sql_flush into default name space .
 4609	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4610	derive the class Command from the base class BaseCommand .
 4611	help is a string , containing STR0 .
 4612	output_transaction is boolean True .
 4613	define method add_arguments with self class instance and parser as the arguments .
 4614	call the parent class of Command class add_arguments method and parser as the arguments .
 4615	call the add_argument method on parser object , use string STR1 , default set to DEFAULT_DB_ALIAS and help set to string , STR2 as the arguments .
 4616	define the method handle with self class instance and dictionary options as the arguments .
 4617	call the sql_flush function with self.style , connections under the key with the value of options dictionary under the STR0 key ,
 4618	from __future__ import unicode_literals into default name space .
 4619	from django.core.management.base import AppCommand into default name space .
 4620	from django.core.management.sql import sql_indexes into default name space .
 4621	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4622	derive the class Command from the base class AppCommand .
 4623	help is a string STR0 .
 4624	output_transaction is boolean True .
 4625	define the method add_arguments with self class instance and parser as the arguments .
 4626	call the add_arguments method with parser as argument form the base class of the class Command .
 4627	call parse.add_argument method , with string STR1 , default set to DEFAULT_DB_ALIAS , and help as a string STR2 , as arguments .
 4628	define the method handle_app_config with self class instance , app_config and dictionary options as arguments .
 4629	if app_config.models_module is None ,
 4630	return nothing .
 4631	get the value under the STR0 key of options dictionary , use it as a index to get connections list element , store it in connection .
 4632	call the function sql_indexes with app_config , self.style and connection as arguments , store the result in statements .
 4633	join statements in a string separated by newline , return the result .
 4634	from __future__ import unicode_literals into default name space .
 4635	from django.core.management.base import BaseCommand and CommandError into default name space .
 4636	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4637	from django.db.migrations.executor import MigrationExecutor into default name space .
 4638	from django.db.migrations.loader import AmbiguityError into default name space .
 4639	derive class Command from the base class BaseCommand .
 4640	help is a string STR0
 4641	def method add_arguments with self class instance and parser as the arguments .
 4642	call the add_argument method on the parser object , with string STR0 , and help set to string STR1 as arguments .
 4643	call the add_argument method on the parser object , with string STR0 , and help set to string STR1 as arguments .
 4644	call the add_argument method on the parser object , with string STR0 , default set to DEFAULT_DB_ALIAS and help set to string STR1 as arguments .
 4645	call the add_argument method on the parser object with string STR0 , asction set to STR1 , dest set to STR2 , default set to False and help set to string STR3 as arguments .
 4646	define the method handle with self class instance , list of arguments args and options dictionary as the arguments .
 4647	get the value under the key STR0 of the options dictionary , use it as a index to get an element from connections , substitute it for connection .
 4648	call the MigrationExecutor with the connection as the argument , substitute it for executor .
 4649	get the values under the keys STR0 and STR1 of the options dictionary , substitute the results for app_label and migration_name , respectively .
 4650	if app_label is not contained in executor.loader.migrated_apps ,
 4651	raise a exception of CommandError class , with string STR0 with STR1 replaced with app_label as the argument .
 4652	try ,
 4653	call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments , substitute the result fr migration .
 4654	if AmbiguityError exception is raised ,
 4655	raise a exception of ComandError class with string STR0 , with all STR1 strings replaced with migration_name and app_label , respectively , as an argument .
 4656	if KeyError exception is raised ,
 4657	raise a exception of CommandError class , with string STR0 , replace all the STR1 occurrences with migration_name and app_label , respectively .
 4658	target is a list containing tuple with two elements app_label and migration.name .
 4659	get executor.loader.graph.nodes list item at the index of the first element of targets list , get the value under the STR0 key of options dictionary , put previous two elements is a tuple , tuple is contained in a plan list .
 4660	call method executor.collect_sql with plan as the argument , substitute the result for sql_statements .
 4661	for every statements in sql_statements :
 4662	call method self.stdout.write with statement as an argument .
 4663	from __future__ import unicode_literals into default name space .
 4664	from django.core.management.base import AppCommand into default name space .
 4665	from django.core.management.sql import check_for_migrations into default name space .
 4666	from django.db import connections and DEFAULT_DB_ALIAS into default name space .
 4667	derive the class Command from the AppCommand base class .
 4668	help is a string STR0 .
 4669	output_transaction is boolean True .
 4670	define the method add_arguments , with 2 arguments self and parser .
 4671	call the method add_arguments from the base class of the Command class , with an argument parser .
 4672	call the method parser.add_argument with 3 arguments : string STR1 , default set to DEFAULT_DB_ALIAS , and help set to string STR2 .
 4673	define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
 4674	if app_config.models_module is None ,
 4675	return nothing .
 4676	get the value under the STR0 key of the options dictionary , use the result as a key to get the value from the connections dictionary , substitute the result for connection .
 4677	call the function check_for_migrations with 2 arguments : app_config and connection .
 4678	call the method app_config.get_models with include_auto_created set to boolean True , substitute the result for models .
 4679	call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models , substitute the result for statements .
 4680	join statements into a string , separated by newline characters , return it .
 4681	from django.core.management.base import BaseCommand and CommandError into default name space .
 4682	from django.utils import six into default name space .
 4683	from django.db import connections , DEFAULT_DB_ALIAS and migrations into default name space .
 4684	from django.db.migrations.loader import AmbiguityError into default name space .
 4685	from django.db.migrations.executor import MigrationExecutor into default name space .
 4686	from django.db.migrations.writer import MigrationWriter into default name space .
 4687	from django.db.migrations.optimizer import MigrationOptimizer into default name space .
 4688	derive the class Command from the BaseCommand class .
 4689	help is a string STR0 .
 4690	define the method add_arguments with 2 arguments self and parser .
 4691	call the method parser.add_argument with 2 arguments : string STR0 , and help is a string STR1 .
 4692	call the method parser.add_argument with 2 arguments : string STR0 , and help is a string STR1 .
 4693	call the method parser.add_argument with 5 arguments : string STR0 , action as a string STR1 , dest as a string STR2 , default set to boolean False and help as a string STR3 .
 4694	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest as a string STR2 , default as boolean True help as a string STR3 .
 4695	define the method handle with 3 arguments : self and unpacked dictionary options .
 4696	get the value under the STR0 key of the options dictionary , substitute it for self.verbosity .
 4697	get the value under the STR0 key of the options dictionary , substitute it for self.interactive .
 4698	get the values under the STR0 and STR1 keys of the options dictionary , substitute them for app_label and migration_name , respectively .
 4699	executor is an instance of MigrationExecutor , created with value under the DEFAULT_DB_ALIAS key of the connections dictionary .
 4700	if app_label is not contained in executor.loader.migrated_apps ,
 4701	raise an CommandError with an argument string STR0 , where STR1 is replaced with app_label .
 4702	try ,
 4703	call the method executor.loader.get_migration_by_prefix with arguments app_label , migration_name , substitute the result for migration .
 4704	if AmbiguityError exception is caught ,
 4705	raise an CommandError with an argument string STR0 , where STR1 is replaced with migration_name and app_label .
 4706	if KeyError exception is caught ,
 4707	raise an CommandError with an argument string STR0 , where STR1 is replaced with migration_name and app_label .
 4708	migrations_to_squash is a list created dynamically with elements : return value of the method executor.loader.get_migration called , with arguments al and mn , for every al , mn in executor.loader.graph.forwards_plan method return value called with 2 arguments : migration.app_label , migration.name , only if al equals migration.app_label .
 4709	if self.verbosity is greater than integer 0 or self.interactive is true ,
 4710	call the method self.style.MIGRATE_HEADING with an argument string STR0 , write it to self.stdout .
 4711	for every migration in migrations_to_squash ,
 4712	append migration.name to string STR0 , write it to self.stdout stream .
 4713	if self.interactive is true ,
 4714	answer is None .
 4715	while answer is false or answer is not contained in string STR0 , perform the following ,
 4716	call the method six.moves.input with an argument string STR0 , substitute the result for answer .
 4717	if answer is false ,
 4718	substitute STR0 for answer .
 4719	break from the loop execution ,
 4720	if not ,
 4721	convert first element of answer to lowercase and substitute it for answer .
 4722	if answer equals a string STR0 ,
 4723	return nothing .
 4724	operations is an empty list .
 4725	for every smigration in migrations_to_squash ,
 4726	call the method operations.extend with an argument smigration.operations .
 4727	if self.verbosity is greater than integer 0 ,
 4728	call the method self.style.MIGRATE_HEADING with an argument string STR0 , write it to self.stdout .
 4729	optimizer is an instance of MigrationOptimizer class .
 4730	call the method optimizer.optimize with 2 arguments operations and migration.app_label , substitute the result for new_operations .
 4731	if self.verbosity is greater than integer 0 ,
 4732	if lengths of new_operations and operations are the same ,
 4733	write string STR0 to self.stdout stream .
 4734	if not ,
 4735	replace STR1 in string STR0 with lengths of operations and ew_operations , respectively , write it to self.stdout stream .
 4736	replaces is an empty list .
 4737	for every migration in migrations_to_squash ,
 4738	if migration.replaces is true ,
 4739	extend replaces list with migration.replaces ,
 4740	if not ,
 4741	append tuple with 2 elements : migration.app_label and migration.name to replaces .
 4742	subclass is a class named Migration , sub classed from migrations.Migration base class , with fields dependencies set to an empty list , dependencies set to new_operations and replaces set to replaces .
 4743	call the function subclass with 2 arguments string STR0 , where STR1 is replaced with migration.name and app_label , substitute the result for new_migration .
 4744	writer is an instance of a class MigrationWriter , created with an argument new_migration .
 4745	open writer.path file in write mode , with file descriptor as fh , perform the following ,
 4746	call the method writer.as_string , write the result to file fh .
 4747	if self.verbosity is greater than integer 0 ,
 4748	replace STR1 in a string STR0 with writer.path , use it as an argument for the call to the method , self.style.MIGRATE_HEADING , write the result to self.stdout .
 4749	write string STR0 to self.stdout .
 4750	write string STR0 to self.stdout .
 4751	write string STR0 to self.stdout .
 4752	write string STR0 to self.stdout .
 4753	from importlib import import_module into default name space .
 4754	from django.core.management.base import CommandError into default name space .
 4755	from django.core.management.templates import TemplateCommand into default name space .
 4756	derive the class Command from the TemplateCommand base class .
 4757	help is a tuple containing a string STR0 .
 4758	missing_args_message is a string STR0 .
 4759	define the method handle with 2 arguments : self and unpacked dictionary options .
 4760	remove values under the keys STR0 and STR1 of the options dictionary and substitute it for app_name and target , respectively .
 4761	call the method self.validate_name with 2 arguments : app_name and string STR0 .
 4762	try ,
 4763	call the function import_module with an argument app_name .
 4764	if ImportError exception is caught ,
 4765	do nothing .
 4766	in not ,
 4767	raise an CommandError exception with an argument string STR0 , where STR1 is replaced with app_name .
 4768	call the method handle from the base class of Command class , with 4 arguments : string STR0 , app_name , target and unpacked dictionary options .
 4769	from importlib import import_module into default name space .
 4770	from django.core.management.base import CommandError into default name space .
 4771	from django.core.management.templates import TemplateCommand into default name space .
 4772	from django.utils.crypto import get_random_string into default name space .
 4773	derive class Command from the TemplateCommand base class .
 4774	help is a tuple containing string STR0 .
 4775	missing_args_message is a string STR0 .
 4776	define the method handle with arguments self and unpacked dictionary options .
 4777	remove the elements from the STR0 and STR1 keys of the options dictionary , substitute them for project_name and target , respectively .
 4778	call the method self.validate_name with arguments project_name and string STR0 .
 4779	try ,
 4780	call the function import_module with an argument project_name .
 4781	if ImportError exception is caught ,
 4782	do nothing .
 4783	if not ,
 4784	raise an exception CommandError , with argument string STR0 , where STR1 is replaced with project_name .
 4785	chars is a string STR0 .
 4786	call the function get_random_string with 2 arguments : integer 50 and chars , substitute it for value under the STR0 of the options dictionary .
 4787	call the handle method of the base class of the Command class , with 4 arguments : string STR0 , project_name , target ,
 4788	import module warnings .
 4789	from django.apps import apps into default name space .
 4790	from django.contrib.auth import get_user_model into default name space .
 4791	from django.db import DEFAULT_DB_ALIAS into default name space .
 4792	from django.core.management import call_command into default name space .
 4793	from django.core.management.base import BaseCommand into default name space .
 4794	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 4795	from django.utils.six.moves import input into default name space .
 4796	derive class Command from the BaseCommand base class .
 4797	help is a string STR0 .
 4798	define the method add_arguments with self and parser as arguments .
 4799	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 ,
 4800	dest set to string STR0 , default set to boolean True and help as STR1 call the method parser.add_argument with 5 arguments : string STR2 , action set to string STR3 ,
 4801	dest set to string STR1 , default set to boolean True , and help as a string STR2 call the method parser.add_argument with 3 arguments : string STR3 , default set to DEFAULT_DB_ALIAS , and help set to string STR4 .
 4802	define the method handle with 2 arguments : self and unpacked dictionary options .
 4803	call the method warnings.warn with 2 arguments : string STR0 and RemovedInDjango19Warning .
 4804	call the function call_command with 2 arguments : string migrate and unpacked dictionary options .
 4805	try ,
 4806	call the method apps.get_model with 2 arguments : string STR0 and string STR1 .
 4807	if LookupError exception is caught .
 4808	return nothing .
 4809	call the function get_user_model , substitute the result for UserModel .
 4810	if return value of the method UserModel._default_manager.exists is false and value under the STR0 key of the options dictionary is true ,
 4811	msg is a tuple containing string STR0 .
 4812	call the method input with an argument msg and store the result in confirm .
 4813	endless loop ,
 4814	if confirm is not equal to string STR0 or string STR1 ,
 4815	query a string STR2 and store the result in confirm .
 4816	skip this loop iteration .
 4817	if confirm equals string STR0 ,
 4818	call the function call_command with 3 arguments : string STR0 , interactive is boolean True , and database set to value under the STR1 key of the options dictionary .
 4819	break the loop execution .
 4820	import module logging .
 4821	import module sys .
 4822	import module os .
 4823	from django.conf import settings into default name space .
 4824	from django.core.management.base import BaseCommand into default name space .
 4825	from django.test.utils import get_runner into default name space .
 4826	derive class Command from the BaseCommand base class .
 4827	help is a string STR0 .
 4828	requires_system_checks is boolean False .
 4829	define the method __init__ with an argument self .
 4830	self.test_runner is None .
 4831	call the method __init__ form the base class of the Command class .
 4832	define the method run_from_argv with arguments self and argv .
 4833	option is a string STR0 .
 4834	for arg in argv list without the first two elements ,
 4835	if arg starts with options ,
 4836	get the length of the options , use it as a starting index for the slicing arg list , substitute it for self.test_runner .
 4837	break the loop execution .
 4838	call the run_from_argv function from the base class of the Command class with argv as a argument , .
 4839	define the method add_arguments with arguments self and parser .
 4840	call the method parser.add_argument with 4 arguments : string STR0 , metavar set to string STR1 , nargs set to string STR2 , and help is a string STR3 .
 4841	call the method parser.add_argument with 5 arguments : string STR0 , action set to STR1 , dest set to STR2 , default set to boolean True , help set to string STR3 .
 4842	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest set to STR2 , default set to boolean False and help set to string STR3 .
 4843	call the method parser.add_argument with 4 arguments : string STR0 , action set to string STR1 , dest set to STR2 , and help set to a string STR3 .
 4844	call the method parser.add_argument with 5 arguments : string STR0 , action set to string STR1 , dest set to STR2 , default set to None and help set to string STR3
 4845	call the function get_runner with arguments settings and self.test_runner , substitute the result for test_runner_class .
 4846	if test_runner_class has an STR0 attribute ,
 4847	raise an RuntimeError exception with an argument string STR0
 4848	STR0 if test_runner_class has an attribute STR1 ,
 4849	call the method test_runner_class.add_arguments with an argument parser .
 4850	define the method execute with 3 arguments self , unpacked list args and unpacked dictionary options .
 4851	if value under the STR0 key of the options dictionary is greater than zero ,
 4852	call the method logging.getLogger with an argument string STR0 , substitute the result for logger .
 4853	call the method logging.StreamHandler , substitute the result for handler .
 4854	call the method logger.addHandler with an argument handler .
 4855	call the method execute form the base class of the class Command , with 2 arguments : unpacked list args and unpacked dictionary options .
 4856	if value under the STR0 key of the options dictionary is greater than zero ,
 4857	call the method logger.removeHandler with an argument handler .
 4858	define the method handle with 3 arguments : self , unpacked list test_labels and unpacked dictionary options .
 4859	from django.conf import settings into default namespace .
 4860	from django.test.utils import get_runner into default namespace .
 4861	call the method get_runner with 2 arguments : settings and value under the STR0 key of the options dictionary , substitute it for the TestRunner .
 4862	if value under the STR0 key of the options dictionary is not None ,
 4863	substitute value under the STR0 key of the options dictionary for value under the STR1 key of the os.environ dictionary .
 4864	delete the value under the STR0 key of the options dictionary .
 4865	test_runner is an instance of TestRunner class , called with an argument unpacked dictionary options .
 4866	call the method test_runner.run_tests with an argument test_labels , substitute it for failures .
 4867	if failures is true ,
 4868	exit the program with failures converted to boolean as a message .
 4869	from django.core.management import call_command into default name space .
 4870	from django.core.management.base import BaseCommand into default name space .
 4871	from django.db import connection into default name space .
 4872	derive class Command from the BaseCommand base class .
 4873	help is a string STR0 .
 4874	args is a string STR0 .
 4875	requires_system_checks is boolean False .
 4876	define the method with self class instance and parser as arguments .
 4877	call parser.add_argument method with STR0 , metavar set to string STR1 , nargs set to string STR2 and help set to string STR3 .
 4878	call parser.add_argument method with STR0 , action set to string STR1 , dest set to string STR2 , default set to boolean True and help set to string STR3 .
 4879	call the parser.add_argument with string STR0 , default set to an empty string and help as string STR1 .
 4880	call parser.add_argument method with STR0 , string STR1 , action set to string STR2 , dest set to string STR3 , default set to boolean False and help set to string STR4 .
 4881	define the method handle with self class instance , list of arguments fixture_labels and dictionary options as arguments .
 4882	get the value under the key STR0 of options dictionary , substitute it for verbosity .
 4883	get the value under the key STR0 of options dictionary , substitute it for interactive .
 4884	call the method connection.creation.create_test_db with verbosity set to verbosity , autoclobber set to inverse value of interactive , serialize set to boolean False , substitute the return value for db_name .
 4885	call the method call_command with 3 arguments , string STR0 , unpacked list fixture_labels and unpacked dictionary containing 1 element : verbosity for STR1 .
 4886	replace STR0 from string STR1 , with db_name , substitute it for shutdown_message .
 4887	substitute connection.features.test_db_allows_multiple_connections for use_threading .
 4888	call the function call_command with 6 arguments , string STR0 , addrport as the value under the STR1 key of options dictionary ,
 4889	from __future__ import unicode_literals into default name space .
 4890	import module warnings .
 4891	from django.core.management.commands.check import Command as CheckCommand into default name space .
 4892	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 4893	derive class Command from CheckCommand base class .
 4894	concatenate CheckCommand.help to string STR1 , substitute it for help .
 4895	define the method handle with self class instance and dictionary pair of elements options as arguments .
 4896	call the method warnings.warn with string STR2 and RemovedInDjango19Warning as arguments .
 4897	call the handle function with dictionary pair of elements options from the base class of the class Command .
 4898	from __future__ import unicode_literals into default name space .
 4899	import module codecs .
 4900	import module os .
 4901	import module re .
 4902	import module warnings .
 4903	from django.apps import apps into default name space .
 4904	from django.conf import settings into default name space .
 4905	from django.core.management.base import CommandError into default name space .
 4906	from django.db import models and router into default name space .
 4907	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 4908	define the function check_for_migrations with 2 arguments : app_config and connection .
 4909	from django.db.migrations.loader import MigrationLoader into default name space .
 4910	loader is an instance of MigrationLoader class , created with an argument connection .
 4911	if app_config.label is contained in loader.migrated_apps ,
 4912	raise an CommandError exception , with an arguent : string STR0 , where STR1 is replaced for app_config.label .
 4913	define the function sql_create with 3 arguments : app_config , style and connection .
 4914	call the function check_for_migrations with an arguments app_config , connection .
 4915	if value under the STR0 key of the connection.settings_dict dictionary equals a string STR1 ,
 4916	raise an CommandError exception with an argument string STR0
 4917	STR0 . call the method app_config.get_models with an argument include_auto_created set to boolean True , substitute it for app_models .
 4918	final_output is an empty list .
 4919	call the method connection.introspection.table_names , substitute the result for tables .
 4920	if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value , add model to a set , substitute the result for known_models .
 4921	pending_references is an empty dictionary .
 4922	for every model in return value of the function router.get_migratable_models , called with arguments : app_config , connection.alias and include_auto_created set to boolean True .
 4923	call the method connection.creation.sql_create_model with arguments model , style and known_models , substitute the result for output and references .
 4924	call the method final_output.extend with an argument output .
 4925	for every refto and refs in return value of the method references.items ,
 4926	call the method pending_references.setdefault with 2 arguments : refto and an empty list , extend the result with refs .
 4927	if refto is contained in known_models ,
 4928	call the method connection.creation.sql_for_pending_references with 3 arguments : refo , style and pending_references , use the result as an argument for the call to the method final_output.extend .
 4929	call the method connection.creation.sql_for_pending_references with 3 arguments : refo , style and pending_references , use the result as an argument for the call to the method final_output.extend .
 4930	add model to known_models set .
 4931	call the method pending_references.keys , put the result into a set and substitute it for not_installed_models .
 4932	if not_installed_models is true ,
 4933	alter_sql is an empty list .
 4934	for every model in not_installed_models ,
 4935	for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments : model , style , and pending_references append sql to the string STR0 , put the results in a list , extend alter_sql with the result .
 4936	if alter_sql ,
 4937	append string STR0 to the final_output .
 4938	extend final_output with alter_sql .
 4939	return final_output .
 4940	define the function sql_delete with 4 arguments : app_config , style , connection and close_connection set to boolean True .
 4941	call the function check_for_migrations with arguments app_config and connection .
 4942	try ,
 4943	call the method connection.cursor , substitute the result for cursor .
 4944	if Exception exception is caught ,
 4945	cursor is None .
 4946	try ,
 4947	if cursor is true ,
 4948	call the method connection.introspection.table_names with an argument cursor , substitute the result for table_names .
 4949	if not ,
 4950	table_names is an empty list .
 4951	output is an empty list .
 4952	to_delete is an empty set .
 4953	references_to_delete is an empty dictionary .
 4954	call the method router.get_migratable_models with argument : app_config , connection.alias and include_auto_created set to True , substitute the result for app_models .
 4955	for every model in app_models ,
 4956	if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment : model._meta.db_table is contained in table_names ,
 4957	substitute model._meta for opts .
 4958	for every f in opts.local_fields ,
 4959	if f.rel and f.rel.to are not contained in to_delete ,
 4960	call the method references_to_delete.setdefault with arguments : r.rel.to and an empty list , append to the result tuple with 2 entries : model and f .
 4961	call the method to_delete.add with an argument model .
 4962	for every model in app_models ,
 4963	if return value of the function connection.introspection.table_name_converter called with an arugment : model._meta.db_table is contained in table_names
 4964	call the method connection.creation.sql_destroy_model with arguments : model , references_to_delete and style , extend with the result the list output .
 4965	finally perform ,
 4966	if both cursor and close_connection are true ,
 4967	call the method cursor.close ,
 4968	call the method connection.close ,
 4969	return reversed list output .
 4970	define the function sql_flush with 4 arguments : style , connection , only_django set to boolean False ,
 4971	if only_django ,
 4972	call the method connection.introspection.django_table_names with an argument boolean true , substitute the result for tables .
 4973	if not ,
 4974	call the method connection.introspection.table_names , substitute the result for tables .
 4975	call the method connection.introspection.sequence_list if reset_sequences is true , substitute the result for seqs , if not , seqs is an empty tuple .
 4976	call the method connection.ops.sql_flush with arguments : style , tables , seqs and allow_cascade , substitute the result for statements .
 4977	return statements .
 4978	define the function sql_custom with 3 arguments : app_config , style and connection .
 4979	call the method check_for_migrations with arguments : app_config and connection .
 4980	output is an empty list .
 4981	call the method router.get_migratable_models with arguments app_config and connection.alias .
 4982	for every model in app_models ,
 4983	call the function custom_sql_for_model with 3 arguments : model , style and connection , extend the output with the result .
 4984	return output .
 4985	define the function sql_indexes with 3 arguments : app_config , style and connection .
 4986	call the function check_for_migrations with an arguments app_config and connection .
 4987	outut is an empty list .
 4988	for model in router.get_migratable_models method return value , called with 3 arguments : app_config , connection.alias ,
 4989	and include_auto_created set to boolean True , call the method connection.creation.sql_indexes_for_model with arguments model and style , extend output with the result .
 4990	return output .
 4991	define the function sql_destroy_indexes with 3 arguments : app_config , style and connection .
 4992	call the function check_for_migrations with arguments app_config and connection .
 4993	output is an empty list .
 4994	for model in return value of the method router.get_migratable_models with arguments app_config , connection.alias ,
 4995	and include_auto_created set to boolean True , call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style , extend the output with the result .
 4996	return output .
 4997	define the function sql_all with 3 arguments : app_config , style and connection .
 4998	call the function check_for_migrations with arguments app_config and connection .
 4999	use the app_config , style and connection as arguments for the call to the sql_create , sql_custom and sql_indexes functions , append the results respectively , return the result .
 5000	define the function _split_statements with an argument content .
 5001	call the function re.compile with an argument raw string STR0 , substitute the result for comment_re .
 5002	statements is an empty list .
 5003	statement is an empty list .
 5004	split content by newline character , for every line in result ,
 5005	call the method comment_re.sub with an arguments : raw string STR0 and line , strip the whitespaces surrounding the result , return it .
 5006	if cleaned_line is false ,
 5007	skip this loop iteration ,
 5008	append cleaned_lien to statement .
 5009	if cleaned_line ends with STR0 character ,
 5010	join statements into a string , separated by white spaces , append it to statements .
 5011	statement is an empty list .
 5012	return statements .
 5013	define the function custom_sql_for_model with 3 arguments : app_config , style and connection .
 5014	substitute model._meta for opts .
 5015	app_dirs is an empty list .
 5016	call the method apps.get_app_config with an argument model._met.app_label , substitute path field of the result for app_dir .
 5017	join app_dir and string STR0 into a file path , use the result as an argument for the call to the function os.path.normpath ,
 5018	append the result to app_dirs . join app_dir and string STR0 into a file path , use the result as an argument for the call to the function os.path.normpath ,
 5019	append the result to old_app_dirs . if file path old_app_dir exists ,
 5020	call the function warnings.warn with 2 arguments : string STR0 and RemovedInDjango19Warning .
 5021	append old_app_dir to app_dirs .
 5022	output is an empty list .
 5023	if opts.managed is true ,
 5024	for every f in opts.local_fields that has an STR0 attribute , append f to a list , substitute the resulting list for post_sql_fields .
 5025	for every f in post_sql_fields ,
 5026	call the method f.post_create_sql with arguments : style and model._meta.db_table , extend the output with the result .
 5027	once split at the STR0 value under the STR1 key of the connection.settings_dict dictionary , substitute last element of the result for backend_name .
 5028	sql_files is an empty list .
 5029	for every app_dir in app_dirs ,
 5030	join into a file path : app_dir and string % s. % s.sql , where STR0 is replaced by opts.model_name and backend_name , respectively ,
 5031	append the result to sql_files . join into a file path : app_dir and string % s. % s.sql , where STR0 is replaced by opts.model_name , append the result to sql_files .
 5032	for every sql_file in sql_files ,
 5033	if file path sql_file exists ,
 5034	call the function codecs.open with 3 arguments : sql_file , string STR0 and encoding set to settings.FILE_CHARSET , with the result renamed to fp ,
 5035	call the method connection.ops.prepare_sql_script with 2 arguments : return value of the function fp.read , and _allow_fallback set to boolean True , extend the output with the result .
 5036	return output .
 5037	define the function emit_pre_migrate_signal with 4 arguments : create_models , verbosity , interactive and db .
 5038	for app_config in return value of the method apps.get_app_configs ,
 5039	if app_config.models_module is None ,
 5040	skip this loop iteration ,
 5041	if verbosity is greater or equal to integer 2 ,
 5042	replace STR1 in string STR0 with app_config.label , print it to the standard output .
 5043	call the method models.signals.pre_migrate.send with 5 arguments : sender set to app_config , app_config set to app_config , verbosity set to verbosity , interactive set to interactive and using set to db .
 5044	call the method models.signals.pre_syncdb.send with 6 arguments : sender set to app_config.models_module , app set to app_config.models_module , create_models set to create_models , verbosity set to verbosity , interactive set to interactive , and db set to db .
 5045	define the function emit_post_migrate_signal with 4 arguments : created_models , verbosity , interactive and db .
 5046	for app_config in return value of the method apps.get_app_configs ,
 5047	if app_config.models_module is None ,
 5048	skip this loop iteration ,
 5049	if verbosity is greater or equal to integer 2 ,
 5050	replace STR1 in string STR0 with app_config.label , print it to the standard output .
 5051	call the method models.signals.post_migrate.send with 5 arguments : sender set to app_config , app_config set to app_config , verbosity set to verbosity , interactive set to interactive and using set to db .
 5052	call the method models.signals.post_syncdb.send with 6 arguments : sender set to app_config.models_module ,
 5053	import module cgi .
 5054	import module errno .
 5055	import module mimetypes .
 5056	import module os .
 5057	import module posixpath .
 5058	import module re .
 5059	import module shutil .
 5060	import module stat .
 5061	import module sys .
 5062	import module tempfile .
 5063	from os import path into default name space .
 5064	import module django .
 5065	from django.template import Template and Context into default name space .
 5066	from django.utils import archive into default name space .
 5067	from django.utils.six.moves.urllib.request import urlretrieve into default name space .
 5068	from django.utils._os import rmtree_errorhandle into default name space .
 5069	from django.core.management.base import BaseCommand and CommandError into default name space .
 5070	from django.core.management.utils import handle_extensions into default name space .
 5071	call the function re.compile with 2 arguments : string STR0 and re.I , substitute the result for _drive_re .
 5072	call the function re.compile with 2 arguments : string STR0 and re.I , substitute the result for _url_drive_re .
 5073	derive the class TemplateCommand from the BaseCommand base class .
 5074	requires_system_checks is boolean False .
 5075	can_import_settings is boolean False .
 5076	url_schemes is list of strings STR0 , STR1 and STR2 .
 5077	leave_locale_alone is boolean True .
 5078	define the method add_aguments with arguments self and parser .
 5079	call the method parser.add_argument with 2 arguments : string STR0 and help set to string STR1 .
 5080	call the method parser.add_argument with 3 arguments : string STR0 , nargs set to STR1 and help set to string STR2 .
 5081	call the method parser.add_argument with 2 arguments : string STR0 and help set to string STR1 .
 5082	call the method parser.add_argument with 6 arguments : string STR1 , string STR2 , dest set to string STR3 , action set to STR4 , default is a list containing string STR5 and help set to string : STR6 .
 5083	call the method parser.add_argument with 6 arguments : string STR0 , string STR1 , dest set to string STR2 , action set to string STR3 , default as an empty list and help set to a string : STR4 .
 5084	define the method handle with 5 arguments : self , app_or_project , name , target set to None and unpacked dictionary options .
 5085	substitute app_or_project for self.app_or_project .
 5086	self.paths_to_remove is an empty list .
 5087	substitute value under the STR0 key of the options dictionary for self.verbosity .
 5088	call the method self.validate_name with 2 arguments name and app_or_project .
 5089	if target is None ,
 5090	join the current working directory and name into a file path , substitute it for top_dir .
 5091	try ,
 5092	make a directory top_dir .
 5093	if OSError renamed to e , exception is caught ,
 5094	if e.errno equals errno.EEXIST ,
 5095	replace STR1 in string STR0 with top_dir , substitute it for message .
 5096	if not ,
 5097	substitute e for message .
 5098	raise an CommandError exception with an argument message .
 5099	if not ,
 5100	ge the absolute path of the return value of the function path.expanduser with the argument target , substitute it for top_dir .
 5101	if file path top_dir doesnt exists ,
 5102	raise an CommandError exception with an argument string STR0 ,
 5103	where STR0 is replaced with top_dir . call the function handle_extensions with 2 arguments : value under the STR1 key of the options dictionary ,
 5104	and ignored as an empty tuple , convert the result into a tuple and substitute it for extensions . extra_files is an empty list .
 5105	for every file in value under the STR0 key of the options dictionary .
 5106	split file by STR0 character , apply on its every element a lambda function which takes an argument x , and returns x striped of the surrounding whitespaces , extend the extra_files with the mapped list .
 5107	if self.verbosity is greater or equal to integer 2 ,
 5108	call the method self.stdout.write , with an argument string STR0 , where STR1 is replaced with app_or_project and extensions joined into a string , separated by a string STR2 .
 5109	call the method self.stdout.write , with an argument string STR0 , where STR1 is replaced with app_or_project and extra_files joined into a string , separated by a string STR2 .
 5110	append string STR0 to app_or_project , substitute it for base_name .
 5111	append string STR0 to app_or_project , substitute it for base_subdir .
 5112	append string STR0 to app_or_project , substitute it for base_directory .
 5113	if second last element of django.VERSION is not equal to a string STR0 ,
 5114	docs_version is a string STR0 .
 5115	if not ,
 5116	convert first 2 elements of django.VERSION into a strings , join them together , separated by a STR0 , substitute the result for docs_version .
 5117	context is an instance of a class Context , created with 2 arguments : dictionary created by apllying options to unpacked dictionary containing 3 entries : name for base_name , top_dir for base_directory and docs_version for STR0 and autoescape set to boolean False .
 5118	from django.conf import settings into a default name space ,
 5119	if settings.configured is false ,
 5120	call the method settings.configure .
 5121	call the method self.handle_template with 2 arguments : value under the STR0 key of the options dictionary and base_subdir .
 5122	increment length of template_dir by one and substitute it for prefix_length .
 5123	for every root , dirs and files in subdirectory tree starting from the base dir template_dir ,
 5124	slice root starting from the prefix_length index to the end , substitute it for path_rest .
 5125	call the method path_rest.replace with arguments base_name and name , substitute the result for relative_dir .
 5126	if relative_dir is true ,
 5127	join top_dir and relative_dir into a file path , substitute it for target_dir .
 5128	if target_dir path doesnt exists ,
 5129	make target_dir directory ,
 5130	for dirname in dirs ,
 5131	if dirname starts with character STR0 or dirname equals a string STR1 ,
 5132	remove dirname key from dirs .
 5133	for every filename in files ,
 5134	if filename ends with STR0 , STR1 or STR2 ,
 5135	skip this loop iteration ,
 5136	join root and filename into a file path , substitute it for old_path .
 5137	join top_dir , relative_dir and return value of the function filename.replace called with 2 arguments : base_name and name , into a file path , substitute it for new_path .
 5138	if new_path file path exists ,
 5139	raise a CommandError exception with an argument : string STR0 , where ' % s '' is replaced with new_path .
 5140	open old_path file in STR0 mode , with file descriptor renamed to template_file ,
 5141	call the method template_file.read , substitute it for content .
 5142	if filename ends with extensions or filename is contained in extra_files ,
 5143	call the method content.decode with an argument string STR0 , substitute it for content .
 5144	template is an instance of Template class , created with an argument content .
 5145	call the method template.render with an argument context , substitute it for content .
 5146	call the method content.encode with an argument string STR0 , substitute it for content .
 5147	open new_path file in STR0 mode , with file descriptor renamed to new_file ,
 5148	write content to new_file file .
 5149	if self.verbosity is greater or equal to integer 2 ,
 5150	replace STR1 in string STR0 with new_path , write it to the self.stdout stream .
 5151	try ,
 5152	call the function shutil.copymode with arguments old_path and new_path .
 5153	call the method self.make_writeable with an argument new_path .
 5154	if OSError exception is caught ,
 5155	replace STR1 in string STR0 , with new_path and self.style.NOTICE , respectively , write it to self.stderr stream .
 5156	if self.paths_to_remove is true ,
 5157	if self.verbosity is greater or equal to integer 2 ,
 5158	write string STR0 to self.stdout stream .
 5159	for every path_to_remove in self.paths_to_remove ,
 5160	if path_to_remove is file ,
 5161	remove file path_to_remove ,
 5162	if not ,
 5163	call the function shutil.rmtree with 2 arguments : path_to_remove and onerror set to rmtree_errorhandler .
 5164	define the method handle_template with 3 arguments : self , template and subdir .
 5165	if template is None ,
 5166	join first element of django.__path__ , string STR0 and subdir into a valid file path , return it .
 5167	if not ,
 5168	if template starts with a string STR0 ,
 5169	remove first 7 elements form template .
 5170	call the method path.expanduser with an argument template , substitute it for expanded_template .
 5171	call the method path.normpath with an argument expanded_template , substitute it for expanded_template .
 5172	if expanded_template is a directory ,
 5173	return expanded_template .
 5174	call the method self.is_url with an argument template , if it evaluates to true ,
 5175	call the method self.download with an argument template , substitute the result for absolute_path .
 5176	if not ,
 5177	get the absolute file path of the expanded_template , substitute it for absolute_path .
 5178	if file path absolute_path exists ,
 5179	call the method self.extract with an argument absolute_path , return the result .
 5180	raise an CommandError exception with an argument string STR0 , replace STR1 with self.app_or_project and template .
 5181	define validate_name with 3 arguments : self , name and app_or_project .
 5182	if name is None ,
 5183	raise an CommandError exception with an argument string STR0 , where STR1 is replaced with string STR2 , and app_or_project if app_or_project equals to string STR3 , if not , it is replaced with STR4 and app_or_project .
 5184	call the method re.search with 2 arguments : raw string STR0 and name , if it evaluates to false ,
 5185	call the method re.search with 2 arguments : raw string STR0 and name , if it evaluates to false ,
 5186	message is a string STR0 .
 5187	if not ,
 5188	message is a string STR0 .
 5189	raise an CommandError with an argument string STR0 , were STR1 is replaced with name , and STR2 is replaced with app_or_project and message , respectively .
 5190	define the method download with arguments self and url .
 5191	define the function cleanup_url with an argument url .
 5192	strip url of surrounding STR0 characters , substitute it for tmp .
 5193	split tmp at STR0 character , substitute the last element of the result for filename .
 5194	if url ends with STR0 character ,
 5195	append STR0 to tmp , substitute it for display_url .
 5196	if not ,
 5197	substitute url for display_url .
 5198	return filename and display_url .
 5199	replace STR0 in string STR1 with self.app_or_project .
 5200	call the function tempfile.mkdtemp with arguments : prefix set to prefix and suffix set to string STR0 .
 5201	append the tempdir to self.paths_to_remove .
 5202	call the function cleanup_url with an argument url , assign the result to filename and display_url , respectively .
 5203	if self.verbosity is greater or equal to integer 2 ,
 5204	replace STR1 in string STR0 , with display_url , write it to self.stdout stream .
 5205	try ,
 5206	call the function urlretrieve with arguments url and tempdir and filename joined into a file path , assign the result to the_path , and info , respectively .
 5207	if IOErro , renamed to e , exception is caught ,
 5208	raise an CommandError exception with an argument string STR0 , where STR1 is replaced with url , filename and e .
 5209	split the_path at the STR0 character , substitute last element of the result for used_name .
 5210	get the value under the STR0 key of the info dictionary , substitute it for content_disposition .
 5211	if content_disposition is true ,
 5212	call the method cgi.parse_header with an argument content_disposition , assign the result to _ and params , respectively .
 5213	get the value under the STR0 key of the params dictionary , if the key exists substitute it for guessed_filename , if not , substitute used_name for guessed_filename .
 5214	if not ,
 5215	substitute used_name for guessed_filename .
 5216	call the method self.splitext with an argument guessed_filename , substitute the second element of the result for ext .
 5217	get the value under the STR0 key of the info dictionary , substitute it for content_type .
 5218	if ext is false and content_type is true ,
 5219	call the method mimetypes.guess_extension with an argument content_type , substitute result for ext .
 5220	if ext is true ,
 5221	append ext to guessed_filename .
 5222	if used_name is not equal to guessed_filename ,
 5223	join tempdir and guessed_filename into a file path , substitute it for guessed_path .
 5224	call the function shutil.move with arguments the_path and guessed_path .
 5225	return guessed_path .
 5226	return the_path .
 5227	define the method splitext with arguments self and the_path .
 5228	call the method posixpath.splitext with an argument the_path .
 5229	convert base to lowercase , if it ends with string STR0 ,
 5230	take last four elements of base and append ext to it , substitute result for ext .
 5231	substitute last four elements of base for base .
 5232	return base and ext .
 5233	define the function with arguments self and filename .
 5234	replace STR0 in string STR1 with self.app_or_project , substitute it for prefix .
 5235	call the method tempfile.mkdtemp with 2 arguments : prefix set to prefix , suffix set to string STR0 , substitute the result for tempdir .
 5236	append tempdir to self.self.paths_to_remove .
 5237	if self.verbosity is greater or equal to integer 2 .
 5238	substitute STR1 in string STR0 with filename , write it to self.stdout stream .
 5239	try ,
 5240	call the method archive.extract with arguments : filename and tempdir .
 5241	return tempdir .
 5242	if archive.ArchiveException or IOError , renamed to e , exception are caught ,
 5243	raise an CommandError with an argument string STR0 , where STR1 is replaced with filename , tempdir and e .
 5244	define the method is_url with arguments self and template .
 5245	if character STR0 is not contained in template ,
 5246	return boolean False .
 5247	split template once at the first character STR0 , convert the first element to lowercase and substitute it for scheme .
 5248	if scheme is countaine in self.url_schemes return boolean True , otherwise return False .
 5249	define the method make_writeable with arguments self and filename .
 5250	if sys.platform starts with string STR0 ,
 5251	return nothing .
 5252	if call to the method os.access with arguments : filename and os.W_OK , evaluates to false ,
 5253	call the function os.stat with an argument filename , substitute the result for st .
 5254	call the method stat.S_IMODE with an argument st.st_mode , calculate binary OR with the result and stat.S_IWUSR , as operands , substitute the result for new_permission .
 5255	call the function os.chmod wiht arguments filename and new_permissions .
 5256	from __future__ import unicode_literals into default name space .
 5257	import module os .
 5258	from subprocess import PIPE and Popen into default name space .
 5259	import module sys .
 5260	from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space .
 5261	from django.utils import six into default name space .
 5262	from .base import CommandError into default name space .
 5263	define the function popen_wrapper with 2 arguments : args and os_err_exc_type set to CommandError .
 5264	try ,
 5265	p is a instance of Popen class , created with 6 arguments : args , shell set to boolean False , stdout set to PIPE ,
 5266	stderr set to PIPE , close_fds set to boolean True is os.name is not equal to STR0 , universal_newlines set to boolean True . if OSError , renamed to e , exception is caught ,
 5267	call the force_text function with 3 arguments : e.strerror , DEFAULT_LOCALE_ENCODING and strings_only set to boolean True .
 5268	call the method six.reraise 3 with arguments : os_err_exc_type , return value of the function os_err_exc_type , called with string as an argument STR0 , where STR1 is replaced by : first element of args and strerror , respective , and third element of the result of the function sys.exc_info .
 5269	call the method p.communicate , assign the result to output and errors , respectively .
 5270	return a tuple containing 3 entries : output , result of the function force_text , called with 3 arguments : errors , DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode .
 5271	define the function handle_extensions with 2 arguments : extensions set to tuple containing string STR0 and ignored set to tuple containing string STR1 .
 5272	ext_list is an empty list ,
 5273	for every ext in extensions ,
 5274	delete all the whitespaces from ext , split it by STR0 character , extend ext_list with the result .
 5275	for every i and ext in enumerated iterable ext_list ,
 5276	if ext doesnt start with STR0 character ,
 5277	prepend STR0 to the i-th element of the ext_list .
 5278	if striped x by STR0 character is not contained in ignored , for every x in ext_list put x into a set , return the resulting set .
 5279	define the function find_command with 3 arguments : cmd , path set to None and pathext set to None .
 5280	if path is None ,
 5281	call the function os.environ.get with 2 arguments : string STR0 and an empty string , split the result at the os.pathsep , substitute the result for path .
 5282	if path is an instance of six.string_types ,
 5283	path is an list containing path .
 5284	if pathext is None ,
 5285	call the method os.environ.get with 2 arguments : strings STR0 and STR1 , split the result at os.pathsep , substitute it for pathext .
 5286	for ext in pathext ,
 5287	if cmd ends with ext ,
 5288	pathext is an list containing an empty string .
 5289	break the loop execution .
 5290	for every p in path ,
 5291	join p and cmd into a file path , substitute it for f .
 5292	if f is a file ,
 5293	return f .
 5294	for every ext in pathext ,
 5295	add ext to f , substitute the result for fext .
 5296	if fext is a file ,
 5297	return fext .
 5298	return None .
 5299	import module collections .
 5300	from math import ceil into default name space .
 5301	from django.utils import six into default name space .
 5302	derive the class InvalidPage from the Exception base class .
 5303	do nothing .
 5304	derive the class PageNotAnInteger from the InvalidPage base class .
 5305	do nothing .
 5306	derive the class EmptyPage from the InvalidPage base class .
 5307	do nothing .
 5308	derive the class Paginator from the object base class .
 5309	def the method __init__ with 5 arguments : self , object_list , per_page , orphans set to integer 0 and allow_empty_first_page set to boolean True .
 5310	substitute object_list for self.object_list .
 5311	convert per_page into an integer and substitute it for self.per_page .
 5312	convert orphans into an integer and substitute it for self.orphans .
 5313	substitute allow_empty_first_page for self.allow_empty_first_page .
 5314	self._num_pages and self._count are None .
 5315	define the method validate_number with self class instance and number as arguments .
 5316	try ,
 5317	convert number into an integer and substitute it for number
 5318	if TypeError or ValueError exceptions are caught ,
 5319	raise an exception PageNotAnInteger with string STR0 as an argument .
 5320	if number is lesser than integer 1 ,
 5321	raise an EmptyPage exception with string STR0 as an argument .
 5322	if number is greater than self.num_pages ,
 5323	if number equals a integer 1 and self.allow_empty_first_page is true ,
 5324	do nothing .
 5325	if not ,
 5326	raise an EmptyPage exception with string STR0 as an argument .
 5327	return number .
 5328	define the method page with self class instance and number as arguments .
 5329	call the method self.validate_number with an argument number , substitute it for number .
 5330	decrement number by one , multiply it with self.per_page , substitute the result for bottom .
 5331	sum bottom and self.per_page , substitute the result for top .
 5332	if sum of the top and self.orphans is greater or equal to self.count ,
 5333	substitute self.count for top .
 5334	call the self._get_pages method with 3 arguments : self.object_list from the bottom to the top index , number and self , return the result .
 5335	define the method _get_page with self class instance , unpacked list args and unpacked dictionary kwargs as arguments .
 5336	return a instance of the class Page , created with 2 arguments : unpacked list args and unpacked dictionary kwargs .
 5337	define the method _get_count with an argument self .
 5338	if self._count is None ,
 5339	try ,
 5340	substitute the return value of the method self.object_list.count for self._count .
 5341	if TypeError or AttributeError exceptions are caught ,
 5342	substitute length of self.object_list for self._count .
 5343	return self._count .
 5344	count is a property object with _get_count as a getter method .
 5345	define the method _get_num_pages with an argument self .
 5346	if self._num_pages is None ,
 5347	if self.count equals a integer 0 and self.allow_empty_first_page is false ,
 5348	self._num_pages is a integer 0 .
 5349	if not ,
 5350	get greater value between integer 1 and result of subtraction of self.orphans from self.count , substitute it for hits .
 5351	divide hits by a floating point number self.per_page , convert its ceiling value to an integer and substitute it for self._num_pages .
 5352	return self._num_pages .
 5353	num_pages is a property object with _get_num_pages as a getter method .
 5354	define the method _get_page_range with an argument self .
 5355	return all the integers from the integer 1 to the self.num_pages .
 5356	page_range is a property object with _get_page_range as a getter method .
 5357	substitute Paginator for QuerySetPaginator .
 5358	derive the class Page from the collections.Sequence base class .
 5359	define the method __init__ with 4 arguments : self , object_list , number , and paginator .
 5360	substitute object_list for self.object_list .
 5361	substitute number for self.number .
 5362	substitute paginator for self.paginator .
 5363	define the method __repr__ with an argument self .
 5364	return the string STR0 , with occurrences of STR1 replaced by self.number and self.paginator.num_pages , respectively .
 5365	define the method __len__ with an argument self .
 5366	return the length of self.object_list .
 5367	define the method __getitem__ with arguments self and index .
 5368	if index is not an instance of six.integer_types or tuple type ,
 5369	raise a TypeError exception ,
 5370	if self.object is not an instance of list type ,
 5371	convert self.object_list to a list .
 5372	return self.object_list element at index .
 5373	define the method has_next with an argument self .
 5374	if self.number is lesser than self.paginator.num_pages , return boolean True , otherwise return boolean False .
 5375	define the method has_previous with an argument self .
 5376	if self.number is greater than integer 1 , return boolean True , otherwise return boolean False .
 5377	define the method has_other_pages with an argument self .
 5378	call the method self.has_previous , if it evaluate to false , call the self.has_next method , return the result .
 5379	define the method next_page_number with an argument self .
 5380	call the method self.paginator.validate_number with self.number incremented by 1 as argument , return the result .
 5381	define the method previous_page_number with an argument self .
 5382	call the method self.paginator.validate_number with self.number decremented by 1 as argument , return the result .
 5383	define the method start_index with an argument self .
 5384	if self.paginator.count equals a integer 0 ,
 5385	return integer 0 .
 5386	decrement self.number by one , multiply it by self.paginator.per_page , increment the result by one , return it .
 5387	define the method end_index with an argument self .
 5388	if self.number equals to self.paginator.num_pages ,
 5389	return self.paginator.count .
 5390	multiply self.number and self.paginator.per_page , return the result .
 5391	import module importlib .
 5392	from django.conf import settings into default name space .
 5393	from django.utils import six into default name space .
 5394	from django.core.serializers.base import SerializerDoesNotExist into default name space .
 5395	BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries : STR0 for STR1 , STR2 for STR3 , STR4 for STR5 , and STR6 for STR7 .
 5396	_serializers is an empty dictionary .
 5397	derive the class BadSerializer from the object base class .
 5398	internal_use_only is boolean False .
 5399	define the __init__method with arguments self and exception .
 5400	substitute exception for self.exception .
 5401	define the __call__method with arguments self , unpacked list args and unpacked dictionary kwargs .
 5402	raise an self.exception exception .
 5403	define the function register_serializer with 3 arguments : format , serializer_module and serializers set to None .
 5404	if serializers is None and _serializers is false ,
 5405	call the function _load_serializers .
 5406	try ,
 5407	call the function importlib.import_module with an argument serializer_module , substitute it for module .
 5408	if ImportError , renamed to exc , exception is caught ,
 5409	ba_serializer is a instance of BadSerializer class , created with an argument exc .
 5410	create a instance of a class BadSerializerModule from the object base class , with elements Deserializer set to bad_serializer and Serializer set to bad_serializer .
 5411	if serializers is None ,
 5412	substitute module for the value under the format key of the _serializers dictionary .
 5413	if not ,
 5414	substitute module for the value under the format key of the serializers dictionary .
 5415	define the function unregister_serializer with an argument format .
 5416	if _serializers is false ,
 5417	call the function _load_serializers .
 5418	if format is not contained in _serializers ,
 5419	raise a SerializerDoesNotExist exception with an argument format .
 5420	delete the _serializers dictionary entry at the format key .
 5421	define the function get_serializer with an argument format .
 5422	if _serializers is false ,
 5423	call the function _load_serializers .
 5424	if format is not contained in _serializers ,
 5425	raise a SerializerDoesNotExist exception with an argument format .
 5426	get the value under the format key of the _serializers dictionary , return the Serializer filed of the result .
 5427	define the function get_serializer_formats .
 5428	if _serializers is false ,
 5429	call the function _load_serializers .
 5430	convert _serializers into a list , return it .
 5431	define the function get_public_serializer_formats .
 5432	f _serializers is false ,
 5433	call the function _load_serializers .
 5434	append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers , only if v.Serializer.internal_use_only is false , return the resulting list .
 5435	define the function get_deserializer with an argument format .
 5436	f _serializers is false ,
 5437	call the function _load_serializers .
 5438	if format is not contained in _serializers ,
 5439	raise a SerializerDoesNotExist exception with an argument format .
 5440	get the value under the format key of the _serializers dictionary , return the Deserializer filed of the result .
 5441	define the function serializer with 3 arguments : format , queryset and unpacked dictionary options .
 5442	call the get_serializer function with an argument format , call the return value object and substitute it for s .
 5443	call the s.serialize method with arguments queryset and unpacked dictionary options .
 5444	evaluate the method s.getvalue , return the result .
 5445	define the function deserialize with 3 arguments : format , stream_or_string and unpacked dictionary options .
 5446	call the get_deserializer function with an argument format , substitute the result for d .
 5447	call the object d with arguments stream_or_string and unpacked dictionary options , return the result .
 5448	define the function _load_serializers .
 5449	use the global variable _serializers .
 5450	serializers is an empty dictionary .
 5451	for every format in BUILTIN_SERIALIZERS ,
 5452	call the function register_serializer with 3 arguments : format , value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers .
 5453	if setting has an STR0 attribute ,
 5454	for every format in settings.SERIALIZATION_MODULES ,
 5455	call the function register_serializer with 3 arguments : format , value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers .
 5456	substitute serializers for _serializers .
 5457	import module warnings .
 5458	from django.db import models into default name space .
 5459	from django.utils import six into default name space .
 5460	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 5461	derive the class SerializerDoesNotExist from the KeyError base class .
 5462	do nothing .
 5463	derive the class SerializationError from the Exception base class .
 5464	do nothing .
 5465	derive the class DeserializationError from the Exception base class .
 5466	do nothing .
 5467	derive the class Serializer from the object base class .
 5468	internal_use_only is a boolean False .
 5469	define the method serialize with 3 arguments : self , queryset and unpacked dictionary options .
 5470	substitute options for self.options .
 5471	remove the STR0 key from the options dictionary and substitute it for self.stream , if the key doesnt exists call the six.String function and substitute the result for self.stream .
 5472	remove the STR0 key from the options dictionary and substitute it for self.selected_fields , if the key doesnt exists substitute None for self.selected_fields .
 5473	remove the STR0 key from the options dictionary and substitute it for self.use_natural_keys , if the key doesnt exists substitute boolean False for self.use_natural_keys .
 5474	if self.use_natural_keys is true ,
 5475	call the function warnings.warn with 2 arguments : string STR0 and RemovedInDjango19Warning .
 5476	remove the STR0 key from the options dictionary and substitute it for self.use_natural_foreign_keys ,
 5477	if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys . remove the STR0 key from the options dictionary and substitute it for self.use_natural_primary_keys ,
 5478	if the key doesnt exists substitute boolean False for self.use_natural_primary_keys . call the method self.start_serialization
 5479	self.first is boolean True .
 5480	for every obj in queryset ,
 5481	call the self.start_object with an argument obj .
 5482	substitute obj._meta.concrete_model for concrete_model .
 5483	for every field in concrete_model._meta.local_fields ,
 5484	if field.serialize is true ,
 5485	if field.rel is None ,
 5486	if self.selected_fields is None or field.attname is contained in self.selected_fields
 5487	call the method self.handle_field with arguments obj and filed .
 5488	if not ,
 5489	if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields :
 5490	call the method self.handle_fk_field with arguments obj and field .
 5491	for every field in concrete_model._meta.many_to_many ,
 5492	if field.serialize is true ,
 5493	if self.selected_fields is None or field.attname is contained in self.selected_fields ,
 5494	call the method self.handle_m2m_field with arguments obj and filed .
 5495	call the method self.end_object with an argument obj .
 5496	if self.first is true ,
 5497	self.first is boolean False .
 5498	call the method self.end_serialization .
 5499	call the method self.getvalue , return the result .
 5500	define the method start_serialization with an argument self .
 5501	raise a NotImplementedError with an argument string STR0 .
 5502	define the method end_serialization with an argument self .
 5503	do nothing .
 5504	define the method start_object with argument self and obj .
 5505	raise a NotImplementedError with an argument string STR0 .
 5506	define the method end_object with argument self and obj .
 5507	do nothing .
 5508	define the method handle_field with argument self , obj and field .
 5509	raise a NotImplementedError with an argument string
 5510	define the method handle_fk_field with argument self , obj and field .
 5511	raise a NotImplementedError with an argument string
 5512	define the method handle_m2m_field with argument self , obj and field .
 5513	raise a NotImplementedError with an argument string STR0 .
 5514	define the method getvalue with an argument self .
 5515	get STR0 attribute of the self.stream object , if it exists and is callable ,
 5516	evaluate self.stream.getvalue method , return the result .
 5517	derive the class Deserializer from the six.Iterator base class .
 5518	define the method __init__ , with 3 arguments : self , stream_or_string and unpacked dictionary options .
 5519	substitute options for self.options .
 5520	if stream_or_string is an instance of six.string_types type .
 5521	call the function six.StringIO with an argument stream_or_string , substitute the result for self.stream .
 5522	if not ,
 5523	substitute stream_or_string for self.stream .
 5524	define the method __iter__ with an argument self .
 5525	return self .
 5526	define the method __next__ with an argument self .
 5527	raise a NotImplementedError with an argument string STR0 .
 5528	derive the class DeserializedObject from the object base class .
 5529	define the method __init__ , with 3 arguments : self , m2m and data set None .
 5530	substitute obj for self.object .
 5531	substitute m2m_data for self.m2m_data .
 5532	define the method __repr__ with an argument self .
 5533	return a string STR0 , where STR1 are replaced with self.object._meta.app_label , self.object._meta.object_name and self.object.pk , respectively .
 5534	define the method save , with 3 arguments : self , save_m2m set to boolean True and using set to boolean True .
 5535	call the models.Model.save_base method with arguments self.object , using as using and raw set to boolean True .
 5536	if self.m2m.data and save_m2m are true ,
 5537	for every accessor_name and object_list is return value of the method self.m2m_data.items .
 5538	set accessor_name of the self.object to object_list .
 5539	self.m2m_data is None .
 5540	define the function build_instance with 3 arguments : Model , data and db .
 5541	obj is an instance of Model class , created with an unpacked dictionary data as argument .
 5542	if obj.pk is None , and Model has an STR0 attribute , and Model._default_manager has and STR1 ,
 5543	call the method obj.natural_key , substitute the result for natural_key .
 5544	try ,
 5545	call the method Model._default_manager.db_manager with an argument db , on the result call the get_by_natural_key with , an unpacked list natural_key as argument , substitute the pk filed of the resulting object for obj.pk .
 5546	if Model.DoesNotExist exception is caught ,
 5547	do nothing .
 5548	return obj .
 5549	from __future__ import absolute_import into default name space .
 5550	from __future__ import unicode_literals into default name space .
 5551	import module datetime .
 5552	import module decimal .
 5553	import module json .
 5554	import module sys .
 5555	from django.core.serializers.base import DeserializationError into default name space .
 5556	from django.core.serializers.python import Serializer as PythonSerializer into default name space .
 5557	from django.core.serializers.python import Deserializer as PythonDeserializer into default name space .
 5558	from django.utils import six into default name space .
 5559	from django.utils.timezone import is_aware into default name space .
 5560	define the class Serializer from the PythonSerializer base class .
 5561	internal_use_only is boolean False .
 5562	define the method start_serialization with an argument self .
 5563	call the method json.__version__.split with an argument STR0 , if the result is respectively greater than list containing strings STR1 , STR2 and STR3 ,
 5564	call the method self.options.update with dictionary as an argument , containing 1 element : boolean False for STR0 .
 5565	self._current is None .
 5566	call the method self.options.copy , substitute the result for self.json_kwargs .
 5567	remove the entry under the STR0 key of the self.json_kwargs dictionary .
 5568	remove the entry under the STR0 key of the self.json_kwargs dictionary .
 5569	get the value under the STR0 key of self.options dictionary , if it is true ,
 5570	substitute a tuple with 2 elements : characters STR0 and STR1 for value under the STR2 key of the self.json_kwargs dictionary .
 5571	write a STR0 to the self.stream file stream .
 5572	define the method end_serialization with an argument self .
 5573	if value under the STR0 key of the self.options dictionary is true ,
 5574	write a new line to the self.stream file stream .
 5575	write STR0 to the self.stream file stream .
 5576	if value under the STR0 key of the self.options dictionary is true ,
 5577	write a new line to the self.stream file stream .
 5578	define the method end_object with arguments self and obj .
 5579	get the value under the STR0 key of the self.options dictionary , substitute it for indent .
 5580	if self.first is false ,
 5581	write STR0 to the self.stream file stream .
 5582	if indent is false ,
 5583	write a white space to the self.stream file stream .
 5584	if indent is true ,
 5585	write new line to the self.stream file stream .
 5586	call the json.dump function with 4 arguments : return value of the method self.get_dump_object called with an argument obj , self.stream , cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs .
 5587	self._current is None .
 5588	define the method getvalue with an argument self .
 5589	call the getvalue method from the base class of the class PythonSerializer , return the result .
 5590	define the function Deserializer with arguments stream_or_string and unpacked dictionary options .
 5591	if stream_or_string is not an instance of bytes or six.string_types ,
 5592	call the stream_or_string.read function , substitute the result for stream_or_string .
 5593	if stream_or_string is instance of bytes type ,
 5594	call the method stream_or_string.decode with an argument string STR0 , substitute the result for stream_or_string .
 5595	try ,
 5596	call the function json.loads with an argument stream_or_string , substitute the result for objects .
 5597	for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options ,
 5598	yield obj as generator return value ,
 5599	if GeneratorExit exception is caught ,
 5600	raise an exception ,
 5601	if Exception , renamed to e , exception is caught ,
 5602	call the six.reraise function with 3 arguments : DeserializationError , DeserializationError called with an argument e , third element of the return value of the function sys.exc_info .
 5603	define the class DjangoJSONEncoder from the json.JSONEncoder base class .
 5604	define the method defalt with arguments self and o .
 5605	if o is an instance of datetime.datetime object .
 5606	call the method o.isoformat substitute the result for r .
 5607	if o.microsecond is true ,
 5608	remove 3 elements from r starting at the index 23 .
 5609	if r ends with string STR0 ,
 5610	cut the last 6 elemetns from r , append character STR0 to it , substitute the result for r .
 5611	return r .
 5612	otherwise if o is an instance of datetime.date object ,
 5613	call the method o.isoformat , return the result .
 5614	otherwise if o is an instance of datetime.time object ,
 5615	call the function is_aware with an argument o , if it evaluates to true ,
 5616	raise a ValueError exception with an argument string STR0 .
 5617	call the method o.isoformat substitute the result for r .
 5618	if o.microsecond is true ,
 5619	substitute first 12 elements of r for r .
 5620	return r .
 5621	otherwise if o is an instance of decimal.Decimal object ,
 5622	convert o to an string , return it .
 5623	if not ,
 5624	call the method default with an argument o from the base class of the class DjangoJSONEncoder , return the result .
 5625	substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder .
 5626	from __future__ import unicode_literals into default name space .
 5627	from django.apps import apps into default name space .
 5628	from django.conf import settings into default name space .
 5629	from django.core.serializers import base into default name space .
 5630	from django.db import models and DEFAULT_DB_ALIAS into default name space .
 5631	from django.utils.encoding import smart_text and is_protected_type into default name space .
 5632	from django.utils import six into default name space .
 5633	derive Serializer from the base.Serializer base class .
 5634	internal_use_only is boolean True .
 5635	define the method start_serialization with an argument self .
 5636	self._current is None .
 5637	self.objects is an empty list .
 5638	define the method end_serialization with an argument self .
 5639	do nothing .
 5640	define the method start_object with arguments self and obj .
 5641	self.current is an empty dictionary .
 5642	define the method end_object with arguments self and obj .
 5643	call the self.get_dum_object method with an argument obj , use the result as an argument for the self.objects.append method .
 5644	self._current is None .
 5645	define the method get_dump_object with arguments self and obj .
 5646	data is an dictionary with 2 initial entries : return value of the smart_text function with the argument obj._meta for STR0 , and self._current for STR1 .
 5647	if self.use_natural_primary_keys is false or obj doesnt have a STR0 attribute .
 5648	call the smart_text function with 2 arguments : return value of the obj._get_pk_val function and string_only set to boolean True , substitute it for value under the STR0 key of data dictionary .
 5649	return data .
 5650	define handle_field method with self , obj and field arguments .
 5651	call the method field._get_val_from_obj with obj argument , substitute the result for value .
 5652	call the function is_protected_type with an argument value , if it evaluates to true ,
 5653	substitute value for field.name key of self._current dictionary .
 5654	if not ,
 5655	call the function field.value_to_string with an argument obj , substitute the result for value under the field.name key of self._current dictionary .
 5656	define the method handle_fk_field with self , obj and field arguments .
 5657	if self.use_natural_foreign_keys is true and field.rel.to has an STR0 attribute .
 5658	get field.name from the obj , substitute it for related .
 5659	if related is true ,
 5660	call the method related.natural_key , substitute the result for value .
 5661	if not ,
 5662	value is None .
 5663	if not ,
 5664	get return value of the field.get_attname function attribute of the obj object , substitute it for value .
 5665	substitute value for value under the field.name key of the self._current dictionary .
 5666	define the method handle_m2m_field with self , obj and field arguments .
 5667	if field.rel.through._meta.auto_created is true ,
 5668	if self.use_natural_foreign_keys is true and field.rel.to has an STR0 attribute ,
 5669	m2m_value is an lambda function with value as an argument , return value is the result of the method value.natural_key .
 5670	if not ,
 5671	m2m_value is a lambda function with an argument value , return value is the result of the function smart_text called with arguments :
 5672	return value of the value._get_pk_val method and strings_only set to boolean True . call the function m2m_value with the argument related , for every related in itterator object generated from the attribute field.name , of the obj object , append the results in a list , substitute it for value under the field.name key of the self._current dictionary .
 5673	define the method getvalue with an argument self .
 5674	return self.objects .
 5675	define the function Deserializer with arguments object_list and unpacked dictionary options .
 5676	remove the value under the STR0 key from the options dictionary , assign it to the db , if the entry doesnt exists , substitute DEFAULT_DB_ALIAS for db .
 5677	remove the value under the STR0 key from the options dictionary , assign it to the ignore , if the entry doesnt exists , substitute boolean False for ignore .
 5678	for every d in object_list ,
 5679	try ,
 5680	call the function _get_model with an argument value under the STR0 key of the d dictionary , substitute the result for Model .
 5681	if base.DeserializationError exception is caught ,
 5682	if ignore is true ,
 5683	skip this loop iteration ,
 5684	if not ,
 5685	raise an exception .
 5686	data is an empty dictionary ,
 5687	if STR0 is contained in d ,
 5688	call the method Model._meta.pk.to_python with one argument : value under the STR0 key of dictionary d , or None if previous doesnt exists , substitute the result for the value under the Model._meta.pk.attname key of data dictionary .
 5689	m2m_data is an empty dictionary .
 5690	call the method Model._meta.get_all_field_names , substitute the result for model_fields .
 5691	for every field_name and field_value in return value of the function six.iteritems called with value under the STR0 key of dictionary d ,
 5692	if ignore is true and field_name is not contained in model_fields ,
 5693	skip this loop iteration ,
 5694	if field_value is an instance of the str type ,
 5695	call the smart_text function with 3 arguments : field_value , value under the STR0 key of the options dictionary or , settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True .
 5696	call the Model._meta.get_field method with an argument field_name , substitute the result for field .
 5697	if field.rel is true , and field.rel is an instance of models.ManyToManyRel ,
 5698	if field.rel.to._default_manager has an attribute STR0 ,
 5699	define the function m2m_convert with an argument value .
 5700	if value has an attribute STR0 and value is not an instance of six.text_type ,
 5701	call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method get_by_natural_key , with unpacked list value as an argument , return the pk field of the result .
 5702	if not ,
 5703	call the method field.rel.to._meta.pk.to_python with an argument value , use the result as an argument for the call to the , smart_text function , return the result .
 5704	if not ,
 5705	m2m_convert is a lambda function with an argument v , return value is the result of the function smart_text called with an argument : return value of the method field.rel.to._meta.pk.to_python called with an argument v .
 5706	call the m2m_convert function with pk as argument , for every pk in field_value , substitute the value under the field.name key of the m2m_data dictionary .
 5707	otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object ,
 5708	if field_value is not None ,
 5709	if field.rel.to._default_manager has an STR0 attribute ,
 5710	if field_value has an attribute STR0 and is not an instance of six.text_type object ,
 5711	call the method field.rel.to._default_manager.db_manager with db as argument , call the get_by_natural_key method on the result with , unpacked list field_value as an argument , substitute the result for obj .
 5712	get field.rel.field_name attribute of the object obj , substitute it for value .
 5713	if field.rel.to._meta.pk.rel is true ,
 5714	substitute value.pk for value .
 5715	if not ,
 5716	all the method field.rel.to._meta.get_field with field.rel.field_name as argument , call the to_python method on the result with , unpacked list field_value as an argument , substitute the result for value .
 5717	substitute value for value under the field.attname key of the data dictionary .
 5718	if not ,
 5719	all the method field.rel.to._meta.get_field with field.rel.field_name as argument , call the to_python method on the result with , unpacked list field_value as an argument , substitute the result for value of under the field.attname key of the data dictionary .
 5720	if not ,
 5721	value under the field.attname key of the data dictionary is None .
 5722	if not ,
 5723	call the field.to_python method with field_value , substitute the result for field.name key of the data dictionary .
 5724	call the method base.build_instance with arguments Model , data and db , substitute the result for obj .
 5725	call the function base.DeserializedObject with obj and m2m_data as arguments , yield the result as the generator return value .
 5726	define the function _get_model with an argument model_identifier .
 5727	try ,
 5728	call the method apps.get_model with an argument model_identifier .
 5729	if LookupError or TypeError exceptions are caught ,
 5730	raise an base.DeserializationError exception with an argument string STR0 , where STR1 is replaced with model_identifier .
 5731	import module decimal .
 5732	import module yaml .
 5733	import module sys .
 5734	from io import StringIO into default name space .
 5735	from django.db import models into default name space .
 5736	from django.core.serializers.base import DeserializationError into default name space .
 5737	from django.core.serializers.python import Serializer as PythonSerializer into default name space .
 5738	from django.core.serializers.python import Deserializer as PythonDeserializer into default name space .
 5739	from django.utils import six into default name space .
 5740	try ,
 5741	from yaml import CSafeLoader as SafeLoader into default name space .
 5742	yaml import CSafeDumper as SafeDumper into default name space .
 5743	if ImportError exception is caught ,
 5744	from yaml import SafeLoader , SafeDumper into default name space .
 5745	derive the class DjangoSafeDumper from the SafeDumper base class .
 5746	define the method represent_decimal with arguments self and data .
 5747	call the method self.represent_scalar with 2 arguments : string STR0 and data converted into a string , return the result .
 5748	call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal .
 5749	derive the class Serializer from the PythonSerializer base class .
 5750	internal_use_only is a boolean False .
 5751	define the method handle_field with arguments self , obj and field .
 5752	if field is an instance of models.TimeField and filed.name attribute of obj is not None ,
 5753	get field.name attribute of obj , convert it to a string , substitute it for the value under the filed.name key of self._current dictionary .
 5754	if not ,
 5755	call the handle_filed method of the base class of the Serializer class , with arguments obj and field .
 5756	define the method end_serialization with an argument self .
 5757	call the function yaml.dump with 4 arguments : self.objects , self.stream , Dumper=DjangoSafeDumper and unpacked dictionary self.options .
 5758	define the method getvalue with an argument self .
 5759	call the getvalue method of the base class of the PythonSerializer class , return the result .
 5760	define the function Deserializer with 2 arguments : stream_or_string and unpacked dictionary options .
 5761	if stream_or_string is an instance of bytes ,
 5762	call the method stream_or_string.decode with string STR0 as argument , substitute the result for stream_or_string .
 5763	if stream_or_string is an instance of the six.string_types ,
 5764	call the function StringIO with an argument stream_or_string , substitute the result for stream .
 5765	if not ,
 5766	substitute stream_or_string for stream .
 5767	try ,
 5768	for every obj in return value of the PythonDeserializer created with 2 arguments : return value of the function yaml.load ,
 5769	with 2 arguments : stream and Loader set to SafeLoader , and unpacked dictionary options , yield one element of the itterable obj .
 5770	if exception GeneratorExit is caught ,
 5771	raise an exception .
 5772	if Exception , renamed to e , exception is caught ,
 5773	call the function six.reraise with 3 arguments : DeserializationError , return value of the DeserializationError called with an argument e ,
 5774	from __future__ import unicode_literals into default name space .
 5775	from django.apps import apps into default name space .
 5776	from django.conf import settings into default name space .
 5777	from django.core.serializers import base into default name space .
 5778	from django.db import models and DEFAULT_DB_ALIAS into default name space .
 5779	from django.utils.xmlutils import SimplerXMLGenerator into default name space .
 5780	from django.utils.encoding import smart_text into default name space .
 5781	from xml.dom import pulldom into default name space .
 5782	from xml.sax import handler into default name space .
 5783	from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space .
 5784	derive the class Serializer from the base.Serializer base class .
 5785	define the method indent with argument self and level .
 5786	if value under the STR0 key of the options dictionary exists and is not None ,
 5787	get the value under the STR0 key of the options dictionary , multiply it with level , create a string containing number of whitespaces equal to the previous result , append it to the string containing newline character , use the result as the argument for the call to the self.xml.ignorableWhitespace method .
 5788	define the method start_serialization with an argument self .
 5789	self.xml is a instance of SimplerXMLGenerator class created with 2 arguments : self.stream and value under the STR0 key of the options dictionary , if the key doesnt exists use settings.DEFAULT_CHARSET instead .
 5790	call the self.xml.startDocument method .
 5791	call the method self.xml.startElement with 2 arguments , string STR0 and a dictionary containing 1 element : STR1 for STR2 .
 5792	define the method end_serialization with an argument self .
 5793	call the self.indent method with integer 0 as an argument .
 5794	call the method self.xml.endElement with an argument string STR0 .
 5795	call the self.xml.endDocument method .
 5796	define the method start_object with arguments self and obj .
 5797	if STR0 is not an attribute of obj ,
 5798	raise an base.SerializationError exception with argument string STR0 , replace STR1 with type of the obj object .
 5799	call the method self.indent with argument integer 1 .
 5800	attrs is a dictionary containing 1 entry : return value of the smart_text function with argument obj._meta for STR0 .
 5801	if self.use_natural_primary_keys is false and obj doesnt have STR0 argument .
 5802	substitute return value of the method obj._get_pk_val for obj_pk .
 5803	if obj_pk is not None ,
 5804	substitute the return value of the smart_text function with an argument obj_pk for the value under the STR0 key of the attrs dictionary .
 5805	call the method self.xml.startElement with arguments string STR0 and attrs .
 5806	define the method end_object with arguments self and obj .
 5807	call the method self.indent with argument integer 1 .
 5808	call the method self.xml.endElement with an argument string STR0 .
 5809	define the method handle_field with arguments self , obj and field .
 5810	call the method self.indent with argument integer 2 .
 5811	call the method self.xml.startElement with 2 arguments : string STR0 and a dictionary containing 2 entries : field.name for STR1 , and return value of the field.get_internal_type method for STR2 .
 5812	if field.name attribute of obj is not None ,
 5813	call the method field.value_to_string with an argument obj , use the result as an argument for the call the method self.xml.characters .
 5814	if not ,
 5815	call the method self.xml.addQuickElement with an argument string STR0 .
 5816	call the method self.xml.endElement with an argument string STR0
 5817	define the method handle_fk_field with arguments self , obj and field .
 5818	call the method self._start_relational_field with an argument field .
 5819	evaluate the field.get_attname , use the result as the name of the obj attribute to get , substitute it for related_att .
 5820	if related_att is not None ,
 5821	if self.use_natural_foreign_keys is true and field.rel.to has an attribute STR0 ,
 5822	get field.name attribute of the obj , substitute it for related .
 5823	call the method related.natural_key , substitute the result for related .
 5824	for every key_value in related ,
 5825	call the method self.xml.startElement with arguments string STR0 and an empty dictionary .
 5826	call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters method .
 5827	call the method self.xml.endElement with an argument string STR0
 5828	if not ,
 5829	call the function smart_text with argument related_att , use the result as an argument for the call to the self.xml.characters method .
 5830	if not ,
 5831	call the method self.xml.addQuickElement with an argument string STR0 .
 5832	call the method self.xml.endElement with an argument string STR0 .
 5833	define the method handle_m2m_field with arguments self , obj and field .
 5834	if field.rel.through._meta.auto_created is true ,
 5835	call the method self._start_relational_field with the argument field .
 5836	if self.use_natural_foreign_keys is true and field.rel.to has an attribute STR0 ,
 5837	define the function handle_m2m with an argument value ,
 5838	call the value.natural_key method , substitute the result for natural .
 5839	call the method self.xml.startElement with argument string STR0 and an empty dictionary .
 5840	for every key_value in natural ,
 5841	call the method self.xml.startElement with argument string STR0 and an empty dictionary .
 5842	call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters method .
 5843	call the method self.xml.startElement with an argument string STR0 .
 5844	call the method self.xml.startElement with an argument string STR0 .
 5845	if not ,
 5846	define the function handle_m2m with an argument value ,
 5847	call the self.xml.addQuickElement method with 2 arguments : string STR0 and attr dictionary containing 1 entry : return value of the function smart_text with return value of the method value._get_pk_val as an argument for STR1 .
 5848	for every relobj in iterator generated from the field.name attribute of the obj object .
 5849	call the function handle_m2m with an argument relobj .
 5850	call the method self.xml.endElement with an argument string STR0 .
 5851	define the method _start_relational_field with arguments self and field .
 5852	call the method self.indent with argument integer 2 .
 5853	call the method self.xml.startElement with 2 arguments : string STR0 and dictionary containing 3 entries : field.name for STR1 ,
 5854	field.rel.__class__.__name__ for STR0 and return value of the function smart_text with an argument field.rel.to._meta for STR1 . derive the class Deserializer from the base.Deserializer base class .
 5855	define the method __init__ with 3 arguments : self , stream_or_string and unpacked dictionary options .
 5856	call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options .
 5857	call the method pulldom.parse with arguments : self.stream and return value of the method self._make_parser ,
 5858	substitute the result for self.event_stream . remove the STR0 key from the options dictionary , substitute the return value for self.db , if the key doesnt exists substitute
 5859	DEFAULT_DB_ALIAS for self.db . remove the STR0 key from the options dictionary , substitute the return value for self.db , if the key doesnt exists substitute boolean False for self.ignore .
 5860	define the method _make_parser with an argument self .
 5861	return the instance of DefusedExpatParser class .
 5862	define the method __next__ with an argument self .
 5863	for every event and node in self.event_stream ,
 5864	if event equals a string STR0 and node.nodeName equals a string STR1 ,
 5865	call the method self.event_stream.expandNode with an argument node .
 5866	call the method self._handle_object with an argument node , return the result .
 5867	raise an StopIteration exception .
 5868	define the method _handle_object with arguments self and node .
 5869	call the method self._get_model_from_node with arguments node and string STR0 .
 5870	data is an empty dictionary .
 5871	call the method node.hasAttribute with string STR0 as an argument , if it evaluates to true ,
 5872	call the method node.getAttribute with an argument string STR0 , use the result as the argument for the call to the method , Model._meta.pk.to_python with , substitute the result for value under the Model._meta.pk.attname key of the data dictionary .
 5873	m2m_data is an empty dictionary .
 5874	call the method Model._meta.get_all_field_names , substitute the result for model_fields .
 5875	for every field_node in return value of the method node.getElementsByTagName with an argument string STR0 .
 5876	call the method field_node.getAttribute with an argument string STR0 , substitute the result for field_name .
 5877	if field_name is false ,
 5878	raise an base.DeserializationError exception with string STR0 as argument .
 5879	if self.ignore is true and field_name is not contained in model_fields ,
 5880	skip this loop iteration .
 5881	call the method Model._meta.get_field with an argument field_name , substitute it for field .
 5882	if field.rel is true and field.rel is an instance of models.ManyToManyRel ,
 5883	call the method self._handle_m2m_field_node with an argument field_node and field , substitute the result for value under the field.name key of m2m_data dictionary .
 5884	otherwise , if field.rel is true and field.rel is an instance of models.ManyToOneRel ,
 5885	call the method self._handle_fk_field_node with field_node and field as arguments , substitute the result for the value under the field.attname of the data dictionary .
 5886	if not ,
 5887	call the method field_node.getElementsByTagName with an argument string STR0 , if it evaluates to true ,
 5888	value is None .
 5889	if not ,
 5890	call the function getInnerText with argument field_node , on the result call the method strip , use the result as an argument for the call to the field.to_python method , substitute the result for value .
 5891	substitute value for value under the field.name key of the data dictionary .
 5892	call the method base.build_instance with arguments Model , data and self.db , substitute the result for obj .
 5893	call the method base.DeserializedObject with arguments obj and m2m_data , return the result .
 5894	define the method _handle_fk_field_node with arguments self , node and field .
 5895	call the method node.getElementsByTagName with an argument string STR0 , if it evaluates to true ,
 5896	return None .
 5897	if not ,
 5898	if field.rel.to._default_manager has an atttribute STR0 ,
 5899	call the method node.getElementsByTagName with the argument string STR0 , substitute the result for keys .
 5900	if keys is true ,
 5901	call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list .
 5902	call the method field.rel.to._default_manager.db_manager with an argument self.db , on the result call the method get_by_natural_key , with unpacked list field_value as an argument , substitute the result for obj .
 5903	get the field.rel.field_name from the obj , substitute it for obj_pk .
 5904	if field.rel.to._meta.pk.rel is true ,
 5905	substitute obj_pk.pk for obj_pk .
 5906	if not ,
 5907	call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value .
 5908	call the field.rel.to._meta.get_field method with an field.rel.field_name argument , on the result call the method to_python , with field_value as an argument , substitute the result for obj_pk .
 5909	return obj_pk .
 5910	if not ,
 5911	call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value .
 5912	call the field.rel.to._meta.get_field method with an field.rel.field_name argument , on the result call the method to_python , with field_value as an argument , return the result .
 5913	define the method _handle_m2m_field_node with arguments self , node and field .
 5914	if field.rel.to._default_manager has an attribute STR0 ,
 5915	define the function m2m_convert with an argument n ,
 5916	call the method n.getElementsByTagName with string STR0 as argument , substitute result for keys .
 5917	if keys is true ,
 5918	call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list .
 5919	call the method field.rel.to._default_manager.db_manager with an argument self.db , on the result call the method get_by_natural_key , with unpacked list field_value as an argument , substitute the field pk of the result for obj_pk .
 5920	if not ,
 5921	call the method n.getAttribute with string STR0 as argument , use the result as an argument for the call to the field.rel.to._meta.pk.to_python method , substitute the result for obj_pk .
 5922	return obj_pk .
 5923	if not ,
 5924	m2m_convert is an lambda function with an argument n , return value is the return value of the method field.rel.to._meta.pk.to_python , called with n.getAttribute ( STR0 ) method .
 5925	call the m2m_convert function with an argument c , for every c in return value of the method node.getElementsByTagName , with an argument string STR0 , return the result .
 5926	define the method _get_model_from_node with arguments self , node and attr .
 5927	call the method node.getAttribute with an argument attr , substitute the result for model_identifier .
 5928	if model_identifier is false ,
 5929	raise an base.DeserializationError exception with an argument string STR0 , where STR1 is replaced with node.nodeName and attr .
 5930	try ,
 5931	call the method apps.get_model with an argument model_identifier , return the result .
 5932	if LookupError or TypeError exceptions are caught ,
 5933	raise an base.DeserializationError exception with an argument string STR0 , where STR1 is replaced with node.nodeName and attr .
 5934	define the function getInnerText with an argument node .
 5935	inner_text is an empty list .
 5936	for every child in node.childNodes ,
 5937	if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE ,
 5938	append child.data to the inner_text list .
 5939	otherwise if child.nodeType equals to child.ELEMENT_NODE ,
 5940	call the function getInnerText with an argument child , use the result as an argument for the call to the method inner_text.extend .
 5941	if not ,
 5942	do nothing .
 5943	join inner_text elements into a string .
 5944	derive the class DefusedExpatParser from the _ExpatParser base class .
 5945	define the method __init__ with arguments self , unpacked list args and unpacked dictionary kwargs .
 5946	call the method _ExpatParser.__init__ with arguments self , unpacked list args and unpacked dictionary kwargs .
 5947	call the method self.setFeature with 2 arguments : handler.feature_external_ges and boolean False .
 5948	call the method self.setFeature with 2 arguments : handler.feature_external_pes and boolean False .
 5949	define the method start_doctype_decl with an arguments self , name , sysid , pubid and has_internal_subset .
 5950	raise an DTDForbidden exception with arguments name , sysid and pubid .
 5951	define the method entity_decl with arguments self , name , is_parameter_entity , value , base , sysid , pubid and notation_name .
 5952	raise an EntitiesForbidden exception with arguments name , value , base , sysid , pubid and notation_name .
 5953	define the method unparsed_entity_decl with arguments self , name , base , sysid , pubid and notation_name .
 5954	raise an EntitiesForbidden exception with arguments name , None , base , sysid , pubid and notation_name .
 5955	define the method external_entity_ref_handler with arguments self , context , base , sysid and pubid .
 5956	raise an ExternalReferenceForbidden exception with arguments context , base , sysid and pubid .
 5957	define the method reset with an argument self .
 5958	call the method _ExpatParser.reset with an argumen sefl .
 5959	substitute self._parser for parser .
 5960	substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler .
 5961	substitute self.entity_decl for parser.EntityDeclHandler .
 5962	substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler .
 5963	substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler .
 5964	derive the class DefusedXmlException from the ValueError base class .
 5965	define the method __repr__ with an argument self .
 5966	convert self into a string and return it .
 5967	derive the class DTDForbidden from the DefusedXmlException base class .
 5968	define the method __init__ with arguments self , name , sysid and pubid .
 5969	call the method __init__ from the base class of the DTDForbidden class .
 5970	substitute name for self.name .
 5971	substitute sysid for self.sysid .
 5972	substitute pubid for self.pubid .
 5973	define the method __str__ with an argument self .
 5974	tpl is an string STR0 .
 5975	call the method tpl.format with an arguments self.name , self.sysid and self.pubid .
 5976	derive the class EntitiesForbidden from the DefusedXmlException base class .
 5977	define the method __init__ with arguments self , name , value , base , sysid , pubid and notation_name .
 5978	call the method __init__ from the base class of the EntitiesForbidden class .
 5979	substitute name for self.name .
 5980	substitute value for self.value .
 5981	substitute base for self.base .
 5982	substitute sysid for self.sysid .
 5983	substitute pubid for self.pubid .
 5984	substitute notation_name for self.notation_name .
 5985	define the method __str__ with an argument self .
 5986	tpl is an string STR0 .
 5987	call the method tpl.format with an arguments self.name , self.sysid and self.pubid .
 5988	derive the class ExternalReferenceForbidden from the DefusedXmlException base class .
 5989	define the method __init__ with arguments self , context , base , sysid and pubid .
 5990	call the method __init__ from the base class of the ExternalReferenceForbidden class .
 5991	substitute context for self.context .
 5992	substitute base for self.base .
 5993	substitute sysid for self.sysid .
 5994	substitute pubid for self.pubid .
 5995	define the method __str__ with an argument self .
 5996	tpl is an string STR0 .
 5997	call the method tpl.format with an arguments self.sysid and self.pubid .
 5998	from __future__ import unicode_literals into default name space .
 5999	import module socket .
 6000	import module sys .
 6001	from wsgiref import simple_server into default name space .
 6002	from wsgiref.util import FileWrapper
 6003	from django.core.exceptions import ImproperlyConfigured into default name space .
 6004	from django.core.management.color import color_style into default name space .
 6005	from django.core.wsgi import get_wsgi_application into default name space .
 6006	from django.utils import six into default name space .
 6007	from django.utils.module_loading import import_string into default name space .
 6008	from django.utils.six.moves import socketserver into default name space .
 6009	__all__ is a tuple containing 2 initial elements : strigs STR0 and STR1 .
 6010	define the funtion get_internal_wsgi_application .
 6011	from django.conf import settings into default name space .
 6012	get STR0 attribute from the settings , substitute it for app_path .
 6013	if app_path is None ,
 6014	call the function get_wsgi_application , return the result .
 6015	try ,
 6016	call the import_string with app_path as an argument , return the result .
 6017	if ImportError , rename it to e , exception is caught ,
 6018	msg is a tuple containing one initial entry : a string STR0 , where STR1 is replaced by app_path and STR2 is replaced by e .
 6019	call the function six.reraise with 3 arguments : ImproperlyConfigured , ImproperlyConfigured ( msg ) and third element of return value of the function sys.exc_info .
 6020	derive the class WSGIServer from simple_server.WSGIServer and object base classes .
 6021	request_queue_size is integer 10 .
 6022	define the __init__ method with 3 arguments : self , unpacked list args and unpacked dictionary **kwargs .
 6023	pop value under the STR0 key of the kwargs dictionary , if it is true ,
 6024	substitute socket.AF_INET6 for self.address_family .
 6025	call the __init__ method from the base class of the WSGIServer class , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
 6026	define the function server_bind with an argument self .
 6027	call the server_bind method from the base class of the WSGIServer class .
 6028	call the self.setup_environ method .
 6029	derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes .
 6030	define the __init__ method with 3 arguments : self , unpacked list args and unpacked dictionary **kwargs .
 6031	call the color_style method , substitute the result for self.style .
 6032	call the __init__ method from the base class of the WSGIRequestHandler class , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
 6033	define the function address_string with an argument self .
 6034	return the first element of self.client_address .
 6035	define the function server_bind with an argument self .
 6036	msg is a string STR0 , where STR1 are replaced with return value of the method self.log_date_time_string and formated args .
 6037	if first element of the second row of args equals a string STR0 ,
 6038	call the self.style.HTTP_SUCCESS with an argument msg , substitute it for msg .
 6039	otherwise if first element of second row of args equals a string STR0 ,
 6040	call the self.style.HTTP_INFO with an argument msg , substitute it for msg .
 6041	otherwise if second element of args equals a string STR0 ,
 6042	call the self.style.HTTP_NOT_MODIFIED with an argument msg , substitute it for msg .
 6043	otherwise if first element of second row of args equals a string STR0 ,
 6044	call the self.style.HTTP_REDIRECT with an argument msg , substitute it for msg .
 6045	otherwise if second element of args equals a string STR0 ,
 6046	call the self.style.HTTP_NOT_FOUND with an argument msg , substitute it for msg .
 6047	otherwise if first element of second row of args equals a string STR0 ,
 6048	call the self.style.HTTP_BAD_REQUEST with an argument msg , substitute it for msg .
 6049	if not ,
 6050	call the self.style.HTTP_SERVER_ERROR with an argument msg , substitute it for msg .
 6051	call the sys.stderr.write function with an argument msg .
 6052	define the function run with 5 arguments : addr , port , wsgi_handler , ipv6 set to boolean False and threading set to boolean False .
 6053	server_address is a tuple containing 2 initial elements : addr and port .
 6054	if threading is true ,
 6055	call the function type with 3 arguments : string STR0 , tuple containing 2 elements : socketserver.ThreadingMixIn and WSGIServer , and an empty dictionary , substitute the result for httpd_cls .
 6056	if not ,
 6057	substitute WSGIServer for httpd_cls .
 6058	call the httpd_cls function with 4 arguments : server_address , WSGIRequestHandler and ipv6 set to ipv6 , substitute the result for httpd .
 6059	if threading is true ,
 6060	httpd.daemon_threads is boolean True .
 6061	call the method httpd.set_app with an argument wsgi_handler .
 6062	call the method httpd.serve_forever .
 6063	import module importlib .
 6064	import module os .
 6065	import module sys .
 6066	__version__ is a string STR0 .
 6067	__all__ is a list containing a string STR0 .
 6068	FASTCGI_OPTIONS is a dictionary containing 16 initial entries : STR0 for STR1 , None for STR2 , None for STR3 ,
 6069	define the method fastcgi_help with an argument message set to None .
 6070	print FASTCGI_HELP to the standard output .
 6071	if message is true ,
 6072	print message to the standard output .
 6073	return boolean False .
 6074	define the function runfastcgi with 2 arguments : argset set to an empty list and unpacked dictionary kwargs .
 6075	call the method FASTCGI_OPTIONS.copy , substitute the result for options .
 6076	call the options.update method with an argument kwargs .
 6077	for every x in argset ,
 6078	if character STR0 is contained in x ,
 6079	call the x.split method with arguments : character STR0 and integer 1 , store the result in k and v , respectively .
 6080	if not ,
 6081	substitute x for k and boolean True for v .
 6082	substitute v for value under the k converted to lower case key of options dictionary .
 6083	if string STR0 is contained in options ,
 6084	call the fastcgi_help function , return the result .
 6085	try ,
 6086	import flup
 6087	if ImportError , renamed to e , exception is caught ,
 6088	call the method sys.stderr.write with an argument string STR0 , where STR1 is replaced by e .
 6089	call the method sys.stderr.write with an argument string STR0 .
 6090	call the method sys.stderr.write with an argument string STR0 .
 6091	call the method sys.stderr.write with an argument string STR0 .
 6092	call the method sys.stderr.write with an argument string STR0 .
 6093	return boolean False .
 6094	append value under the STR0 key of the options dictionary to the string STR1 , substitute it for flup_module .
 6095	if value under the STR0 key of the options dictionary equals to string STR1 or STR2 ,
 6096	wsgi_opts is a dictionary with 4 initial entries : value under the key STR0 of options dictionary converted to an integer , for STR1 , value under the key STR2 of options dictionary converted to an integer for STR3 , value under the key STR4 of options dictionary converted to an integer , for STR5 , and value under the key STR6 of options dictionary converted to an integer , for STR7 .
 6097	append string STR0 to flup_module .
 6098	otherwise if value under the STR0 key of optins dictionary equals to string STR1 or STR2 ,
 6099	wsgi_opts is a dictionary with 4 initial entries : value under the key STR0 of options dictionary converted to an integer , for STR1 , value under the key STR2 of options dictionary converted to an integer for STR3 , and value under the key STR4 of options dictionary converted to an integer , for STR5 .
 6100	if not ,
 6101	call the function fastcgi_help with an argument string STR0 , return the result .
 6102	if value under the STR0 key of options dictionary is not None , substitute it for value under the STR1 key of wsgi_opts dictionary .
 6103	try ,
 6104	call the function importlib.import_module with 2 arguments : flup_module converted to string and appended to STR0 character , and string STR1 , substitute the result for module .
 6105	substitute module.WSGIServer for WSGIServer .
 6106	if Exception exception is caught ,
 6107	append flup_module to string STR0 , print it to the standard output .
 6108	return boolean False .
 6109	from django.core.servers.basehttp import get_internal_wsgi_application into default name space .
 6110	if value under the STR0 key of the options dictionary is false and values under the STR1 and STR2 keys of the options dictionary are true ,
 6111	set the value under the STR0 key of the wsgi_opts dictionary to a tuple containing 2 elements : value under the STR1 key , of the options dictionary and value under the STR2 key of the options dictionary converted into an integer .
 6112	if value under the STR0 key of the options dictionary is true and values under the STR1 and STR2 keys of the options dictionary are false ,
 6113	substitute the value under the STR0 key of options dictionary for value under the STR1 key of wsgi_opts dictionary .
 6114	if values under the STR0 , STR1 and STR2 keys of the options dictionary are false ,
 6115	set value under the STR0 key of wsgi_opts to None .
 6116	if not ,
 6117	call the fastcgi_help function with an argument string STR0 , return it .
 6118	if value under the STR0 of options dictionary is None ,
 6119	if the value under the STR0 key of the wsgi_opts dictionary is not None , set daemonize to boolean True , if not , set it to boolean False .
 6120	if not ,
 6121	convert the value under the STR0 key of options dictionary to lowercase , if it equals to string STR1 , STR2 or STR3 ,
 6122	daemonize is boolean True .
 6123	convert the value under the STR0 key of options dictionary to lowercase , if it equals to string STR1 , STR2 or STR3 ,
 6124	daemonize is boolean False .
 6125	if not ,
 6126	call the fastcgi_help function with an argument string STR0 , return it .
 6127	daemon_kwargs is an empty dictionary .
 6128	if value under the STR0 key of options dictionary is true ,
 6129	substitute the value under the STR0 key of options dictionary for value under the STR1 key of daemon_kwargs dictionary .
 6130	if value under the STR0 key of options dictionary is true ,
 6131	substitute the value under the STR0 key of options dictionary for value under the STR1 key of daemon_kwargs dictionary .
 6132	if value under the STR0 key of options dictionary is true ,
 6133	convert the value under the STR0 key of options dictionary into an integer of base 8 , substitute it for value under the STR1 key of daemon_kwargs dictionary .
 6134	if daemonize is true ,
 6135	from django.utils.daemonize import become_daemon into default name space .
 6136	call the function become_daemon with 2 arguments : our_home_dir set to the value under the STR0 key of options dictionary and , unpacked dictionary daemon_kwargs .
 6137	if value under the STR0 of options dictionary exists ,
 6138	open the file whose name is stored in the value under the STR0 key of options dictionary and mode STR1 , with the file descriptor as fp ,
 6139	call the method fp.write with an argument string STR0 % d ' replaced by os.getpid function return value .
 6140	create the object WSGIServer with 2 arguments : get_internal_wsgi_application return value and unpacked dictionary wsgi_opts , call the method run on it .
 6141	if __name__ equals a string STR0 .
 6142	call the function runfastcgi with an argument all the elements , except the first from the sys.argv list .
 6143	from django.dispatch import Signal into default name space .
 6144	request_started is a instance of a Signal class .
 6145	request_finished is a instance of a Signal class .
 6146	got_request_exception is a instance of a Signal class , created with an argument providing_args as the list containing string STR0 .
 6147	from __future__ import unicode_literals into default name space .
 6148	import module base64 .
 6149	import module json .
 6150	import module time .
 6151	import module zlib .
 6152	from django.conf import settings into default name space .
 6153	from django.utils import baseconv into default name space .
 6154	from django.utils.crypto import constant_time_compare and salted_hmac into default name space .
 6155	from django.utils.encoding import force_bytes , force_str and force_text into default name space .
 6156	from django.utils.module_loading import import_string into default name space .
 6157	derive the class BadSignature from the Exception base class .
 6158	do nothing .
 6159	derive the class SignatureExpired from the BadSignature base class .
 6160	do nothing .
 6161	define the function b64_encode with an argument s .
 6162	call the method base64.urlsafe_b64encode with an argument s , on the result call the strip function with STR0 as the argument , return the result .
 6163	define the function b64_decode with an argument s .
 6164	calculate negative length of s , by modulus integer 4 , use the result as the number of STR0 characters to be stored in pad .
 6165	call the method base64.urlsafe_b64decode with sum of s and pad as argument .
 6166	define the function b64_hmac with arguments salt , value and key .
 6167	call the salted_hmac with 3 arguments : salt , value and key , call the digest method on the result , use the result as an argument for the call to the b64_encode function , return the result .
 6168	define the function get_cookie_signer with an argument salt set to string STR0 .
 6169	call the import_string function with an argument settings.SIGNING_BACKEND , substitute the result for Signer .
 6170	call the force_bytes function with an argument settings.SECRET_KEY , substitute the result for key .
 6171	create the Singer class with 2 arguments : key appended to string STR0 and salt set to salt , return it .
 6172	derive the class JSONSerializer from the object base class .
 6173	define the method dumps with arguments self and obj .
 6174	call the json.dumps function with 2 arguments : obj and separators set to tuple containing STR0 and STR1 characters , call the encode method on the result with string STR2 as an argument , return the result .
 6175	define the method loads with arguments self and data .
 6176	call the data.decode method with a string STR0 as an argument , use the result as an argument for the call to the json.load function , return the result .
 6177	define the function dumps with 5 arguments : obj , key set to None , salt set to string STR0 ,
 6178	call the serializer function , call the dumps method on the result with an argument obj , substitute result for data .
 6179	is_compressed is boolean False .
 6180	if compress is true ,
 6181	call the function zlib.compress with an argument data , substitute the result for compressed .
 6182	if length of compressed is lesser than length of data decremented by 1 ,
 6183	substitute compressed for data .
 6184	is_compressed is boolean True .
 6185	call the b64_encode function with an argument data , substitute the result for base64d .
 6186	if is_compressed is true ,
 6187	prefix the base64d with a STR0 character .
 6188	instantiate the TimestampSigner object with arguments key and salt set to salt , call its method sign with an argument base64 , return it .
 6189	define the function loads with 5 arguments : s , key set to None , salt set to string STR0 ,
 6190	instantiate TimestampSigner object with arguments key and salt set to salt , call its method unsign with arguments : s and max_age set to max_age , use it as an argument for the force_bytes function , substitute the result for base64d .
 6191	decompress is boolean False .
 6192	if first element of base64d equals to a STR0 character ,
 6193	substitute first element of base64d for base64d .
 6194	decompress is boolean True .
 6195	call the method b64_decode with an argument base64 , substitute the result for data .
 6196	if decompress is true ,
 6197	call the function zlib.decompress with an argument data , substitute the result for data .
 6198	call the serializer function , call the loads method on the return value with an argument data , return the result .
 6199	derive the class Signer from the object base class .
 6200	define the method __init__ with 4 arguments : self , key set to None , sep set to STR0 and salt set to None .
 6201	call the function force_str with an argument sep , substitute the result for self.sep .
 6202	if key exists , substitute it for self.key , if not substitute settings.SECRET_KEY for key .
 6203	call the force_str function with an argument : salt , if it exists , if not with a string STR0 , with STR1 replaced by , self.__class__.__module__ and self.__class__.__name__ , respectively , substitute the result for self.salt .
 6204	define the method signature with arguments self and value .
 6205	call the function base64_hmac with 3 arguments : string STR0 appended to self.salt , value and self.key , substitute the result for signature .
 6206	call the function force_str with an argument signature , return the result .
 6207	define the method sign with arguments self and value .
 6208	call the function force_str with an argument value , substitute the result for value .
 6209	convert value , self.sep and return value of a method self.signature called with an argument value , concatenate them together , return the result .
 6210	define the method unsign with arguments self and signed_value .
 6211	call the function signed_value with an argument value , substitute the result for signed_value .
 6212	if self.sep is not contained in signed_value ,
 6213	raise an BadSignature exception with an argument string STR1 , where STR2 is replaced by self.sep .
 6214	call the signed_value.rsplit method with arguments self.sep and integer 1 , substitute the result for value and sig , respectively .
 6215	call the function constant_time_compare with 2 arguments : sig and return value of the self.signature method with an argument value , if it evaluates to true ,
 6216	call the force_text function with an argument value , return the result .
 6217	raise an BadSignature exception with an argument string STR1 , where STR2 is replaced by sig .
 6218	derive the class TimestampSigner from the Signer base class .
 6219	define the method timestamp with an argument self .
 6220	call the method baseconv.base62.encode with result of the time.time function converted to an integer , as an argument , return the result .
 6221	define the method sign with arguments self and value .
 6222	call the force_str function with an argument value , substitute the result for value .
 6223	convert value , self.sep and return value of the function timestamp , concatenate them , substitute the result for value .
 6224	call the sign method from the base class of the TimestampSigner class with an argument value , return the result
 6225	define the method unsign with arguments self , value and max_age set to None .
 6226	call the unsign method from the base class of the TimestampSigner class with an argument value , substitute the result for result .
 6227	call the result.rsplit method with arguments self.sep and integer 1 , substitute the result for value and timestamp , respectively .
 6228	call the baseconv.base62.decode method with an argument timestamp , substitute the result for timestamp .
 6229	if max_age is not None ,
 6230	subtract timestamp from the return value of the function time.time , substitute the result for age .
 6231	if age is greater than max_age ,
 6232	raise an SignatureExpired exception with an argument string STR0 , where STR1 is replaced by age and max_age , respectively .
 6233	return value .
 6234	from __future__ import unicode_literals into default name space .
 6235	import module functools .
 6236	from importlib import import_module into default name space .
 6237	import module re .
 6238	from threading import local into default name space .
 6239	import module warnings .
 6240	from django.http import Http404 into default name space .
 6241	from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space .
 6242	from django.utils.datastructures import MultiValueDict into default name space .
 6243	from django.utils.deprecation import RemovedInDjango20Warning into default name space .
 6244	from django.utils.encoding import force_str , force_text and iri_to_uri into default name space .
 6245	from django.utils.functional import lazy into default name space .
 6246	from django.utils.http import urlquote into default name space .
 6247	from django.utils.module_loading import module_has_submodule into default name space .
 6248	from django.utils.regex_helper import normalize into default name space .
 6249	from django.utils import six and lru_cache into default name space .
 6250	from django.utils.translation import get_language into default name space .
 6251	call the function local , substitute the result for _prefixes .
 6252	call the function local , substitute the result _urlconf .
 6253	derive the class ResolverMatch with object as base class .
 6254	define the __init__ method with 7 arguments : self , func , args , kwargs , url_name set to None , app_name set to None and namespaces set to None .
 6255	substitute func for self.func .
 6256	substitute args for self.args .
 6257	substitute kwargs for self.kwargs .
 6258	substitute url_name for self.url_name .
 6259	substitute app_name for self.app_name .
 6260	if namespaces is true ,
 6261	append x to self.namespaces list for every x in namespaces , only if x is true .
 6262	if not ,
 6263	self.namespaces is an empty list .
 6264	join self.namespaces into a string separated with character STR0 , substitute it for self.namespace .
 6265	if func doesnt have a attribute STR0 ,
 6266	join func.__class__.__module__ and func.__class__.__name__ into a string , separated by character STR0 , substitute it for self._func_path .
 6267	if not ,
 6268	join func.__module__ and func.__name__ into a string , separated by character STR0 , substitute it for self._func_path .
 6269	if url_name exists substitute it for view_path , if not substitute .self._func_path for view_path .
 6270	append list containing view_path to self.namespaces list , join all the elements into a string separated by character STR0 , substitute it for self.view_name .
 6271	define the method __getitem__ with arguments self and index .
 6272	return the element at the index index of the tuple containing 3 elements : self.func , self.args and self.kwargs .
 6273	define the method __repr__ with an argument self .
 6274	in the string STR0 , replace all the occurrences of : string STR1 with self._func_path , self.args , self.kwargs , self.url_name , self.app_name and self.namespaces , respectively .
 6275	derive the class Resolver404 with Http404 as base class .
 6276	do nothing .
 6277	derive the class NoReverseMatch with Exception as base class .
 6278	do nothing .
 6279	method lru_cache.lru_cache with an argument maxsize set to None , as a decorator ,
 6280	define the function get_callable with arguments lookup_view and can_fail set to boolean False .
 6281	if lookup_view is a callable object ,
 6282	return lookup_view .
 6283	call the function get_mod_func with an argument lookup_view , store the result in mod_name and func_name , respectively .
 6284	if func_name is false ,
 6285	if can_fail is true ,
 6286	return lookup_view .
 6287	if not ,
 6288	raise an ImportError exception with an argument string STR0 , where STR1 is replaced by lookup_view .
 6289	try ,
 6290	call the function import_module with an argument mod_name .
 6291	if ImportError exception is caught .
 6292	if can_fail is true ,
 6293	return lookup_view
 6294	if not ,
 6295	call the function get_mod_func with an argument mod_name , store the result in parentmod and submod , respectively .
 6296	if submod is true and return value of the function module_has_submodule called with 2 arguments : result of the function : import_module called with an argument parentmod and submod , evaluates to false .
 6297	raise an ViewDoesNotExist exception with an argument string STR0 , where string STR1 is replaced by lookup_view and mod_name , respectively .
 6298	if not ,
 6299	raise an exception .
 6300	if not ,
 6301	try ,
 6302	get func_name attribute from the mod object , substitute it for view_func .
 6303	if AttributeError exception is caught .
 6304	if can fail is true ,
 6305	return lookup_view
 6306	if not ,
 6307	raise an ViewDoesNotExist exception with an argument string STR0 , where string STR1 is replaced by lookup_view and mod_name , respectively .
 6308	if not ,
 6309	if view_function is not a callable function ,
 6310	raise an ViewDoesNotExist exception with an argument string STR0 , where string STR1 is replaced by mod_name and func_name , respectively .
 6311	return view_func .
 6312	method lru_cache.lru_cache with an argument maxsize set to None , as a decorator ,
 6313	define the function get_resolver with an argument urlconf .
 6314	if urlconf is None ,
 6315	from django.conf import settings into default name space .
 6316	substitute settings.ROOT_URLCONF for urlconf .
 6317	return an instance of a class RegexURLResolver created with arguments : raw string STR0 and urlconf .
 6318	method lru_cache.lru_cache with an argument maxsize set to None , as a decorator ,
 6319	define the function get_ns_resolver with arguments ns_pattern and resolver .
 6320	ns_resolver is class instance of a class RegexURLResolver , created with 2 arguments : ns_pattern and resolver.url_patterns .
 6321	return an instance of a class RegexURLResolver created with arguments : raw string STR0 and a list containing an element ns_resolver .
 6322	define the function get_mod_func with an argument callback .
 6323	try ,
 6324	call the method callback.rindex with an argument character STR0 , substitute the result for dot .
 6325	if ValueError exception is caught ,
 6326	return callback and a empty string .
 6327	return callback split into two lists at the dot index , without the element at the dot index .
 6328	derive the class LocaleRegexProvider with object as base class .
 6329	define the method __init__ with arguments self and regex .
 6330	substitute regex for self._regex .
 6331	self._regex_dict is an empty dictionary .
 6332	property decorator ,
 6333	define the method regex with an argument self .
 6334	call the function get_language , substitute the result for language_code .
 6335	if language_code is not contained in self._regex_dict ,
 6336	if self.regex is not an instance of six.string_types ,
 6337	substitute self._regex for regex .
 6338	if not ,
 6339	call the function force_text with arguments self and _regex , substitute the result for regex .
 6340	try ,
 6341	call the function re.compile with arguments regex and re.UNICODE , substitute the result for compiled_regex .
 6342	if re.error , renamed to e , is caught ,
 6343	raise an ImproperlyConfigured exception with argument string STR1 , where STR2 is replace by regex and return value of the function six.text_type with an argument e .
 6344	substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary .
 6345	return the value under the language_code key of the self._regex_dict dictionary .
 6346	derive the class RegexURLPattern with LocaleRegexProvider as base class .
 6347	define the method __init__ with 5 arguments : self , regex , callback , default_args set to None and name set to None .
 6348	call the method LocaleRegexProvider.__init__ with arguments self and regex .
 6349	if callback is an callable object ,
 6350	substitute callback for self._callback .
 6351	if not ,
 6352	self._callback is None .
 6353	substitute callback for self._callback_str .
 6354	if default_args exists substitute it for self.default_args , if not , self.default_args is an empty dictionary .
 6355	substitute name for self.name .
 6356	define the method __repr__ with an argument self .
 6357	substitute STR0 in string STR1 with self.__class__.__name__ , self.name and self.regex.pattern , respectively , use it as an argument for the call to the force_str function , return the result .
 6358	define the method add_prefix with arguments self and prefix .
 6359	if prefix is false , and self doesnt have STR0 attribute ,
 6360	return nothing .
 6361	joint prefix , character STR0 and self._callback_str together , substitute the result for self._callback_str .
 6362	define the method resolve with arguments self and path .
 6363	call the method self.regex.search with an argument path , substitute the result for match .
 6364	if match is true ,
 6365	call the method match.groupdict , substitute the result for kwargs .
 6366	if kwargs is true ,
 6367	args is an empty tuple .
 6368	if not ,
 6369	call the method match.groups , substitute the result for args .
 6370	call the method kwargs.update with an argument self.default_args .
 6371	return an instance of a ResolverMatch class , crated with arguments self.callback , args , kwargs and self.name .
 6372	property decorator ,
 6373	define the method callback with an argument self .
 6374	if self._callback is not None ,
 6375	return self._callback .
 6376	call the function get_callable with an argument self._callback_str , substitute the result for self._callback .
 6377	return self._callback .
 6378	derive the class RegexURLResolver with LocaleRegexProvider as base class .
 6379	define the method __init__ with 6 arguments : self , regex , urlconf_name , default_kwargs set to None , app_name set to None and namespace set to None .
 6380	call the method LocaleRegexProvider.__init__ with arguments self and regex .
 6381	substitute urlconf_name for self.urlconf_name .
 6382	if urlconf_name is not an instance of six.string_types class ,
 6383	substitute self.urlconf_name for self.urlconf_module .
 6384	self.callback is None .
 6385	if default_kwargs exists , substitute it for self.default_kwargs , otherwise self.default_kwargs is an empty dictionary .
 6386	substitute namespace for self.namespace .
 6387	substitute app_name for self.app_name .
 6388	self._reverse_dict is an empty dictionary .
 6389	self._namespace_dict is an empty dictionary .
 6390	self._app_dict is an empty dictionary .
 6391	self._callback_strs is an empty set .
 6392	self._populated is boolean False .
 6393	define the method __repr__ with an argument self .
 6394	if self.urlconf_name is an instance of a list type and its length is not zero .
 6395	replace STR0 in string STR1 with __class__.__name__ field of first element of self.urlconf_name , substitute it for urlconf_repr .
 6396	if not ,
 6397	create a printable representation of self.urlconf_name object , substitute it for urlconf_repr .
 6398	replace all STR0 in string STR1 with self.__class__.__name__ , urlconf_repr , self.app_name , self.namespace and self.regex.pattern , respectively . return it .
 6399	define the method _populate with an argument self .
 6400	lookups is an instance of the MultiValueDict class .
 6401	namespaces is an empty dictionary .
 6402	apps is an empty dictionary .
 6403	call the function get_language , substitute the result for language_code .
 6404	for every pattern in reversed list self.url_patterns ,
 6405	if pattern has an attribute STR0 ,
 6406	call the method self._callback_strs.add with an argument pattern._callback_str .
 6407	otherwise , if pattern has an STR0 attribute .
 6408	substitute pattern._callback for callback .
 6409	if callback is an instance of functools.partial object ,
 6410	substitute callback.func for callback .
 6411	if callback doesnt have STR0 attribute ,
 6412	join callback.__module__ , character STR0 and callback.__class__.__name__ together , substitute the result for lookup_str .
 6413	if not ,
 6414	join together callback.__module__ , character STR0 and callback.__name__ , substitute the result for lookup_str .
 6415	call the method self._callback_strs.add with an argument lookup_str .
 6416	substitute pattern.regex.pattern for p_pattern .
 6417	if p_pattern starts with a string STR0 ,
 6418	remove the first element from p_pattern .
 6419	if pattern is an instance of RegexURLResolver class ,
 6420	if pattern.namespace is true ,
 6421	substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary .
 6422	if pattern.app_name is true ,
 6423	call the method apps.setdefault with 2 arguments : pattern and an empty list , append to the resulting object pattern.namespace .
 6424	if not ,
 6425	substitute pattern.regex.pattern for parent_pat .
 6426	for every name in pattern.reverse_dict ,
 6427	for every matches , pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name ,
 6428	call the method normalize with sum of parent_pat and pat as an argument , substitute the result for new_matches .
 6429	call the method lookups.appendlist with 2 arguments : name and a tuple containing 3 elements : new_matches , sum of p_pattern and pat , and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary .
 6430	for every namespace and tuple containing : prefix and sub_pattern , in return value of the method pattern.namespace_dict.items ,
 6431	substitute tuple containing 2 elements : sum of p_pattern and prefix , and sub_pattern for value under the namespace key of the namespace dictionary .
 6432	for every app_name and namespace_list in pattern.app_dict.items method return value ,
 6433	call the method apps.setdefault with 2 arguments : app_name and an empty list , extend the resulting list with namespaces_list .
 6434	call the method self._callback_strs.update with an argument pattern._callback_strs .
 6435	if not ,
 6436	call the function normalize with an argument p_pattern , substitute the result for bits .
 6437	call the method lookups.appendlist with 2 arguments : pattern.callback and a tuple containing 3 elements : bits , p_pattern , and pattern.default_args .
 6438	if pattern.name is not None ,
 6439	call the method lookups.appendlist with 2 arguments : pattern.name and a tuple containing 3 elements : bits , p_pattern , and pattern.default_args .
 6440	substitute lookups for the value under language_code key of the self._reverse_dict dictionary .
 6441	substitute namespaces for the value under language_code key of the self._namespace_dict dictionary .
 6442	substitute apps for the value under language_code key of the self._app_dict dictionary .
 6443	self._populated is boolean True .
 6444	property decorator ,
 6445	define the method reverse_dict with an argument self .
 6446	call the function get_language , substitute the result for language_code .
 6447	if language_code is not contained in self._reverse_dict
 6448	call the method self._populate .
 6449	return the value under the language_code key of the self._reverse_dict dictionary .
 6450	property decorator ,
 6451	define the method namespace_dict with an argument self .
 6452	call the method get_language , substitute the result for language_code .
 6453	if language_code is not contained in self._namespace_dict ,
 6454	call the method self._populate .
 6455	return the value under the language_code key of the self._namespace_dict dictionary .
 6456	property decorator ,
 6457	define the method app_dict with an argument self .
 6458	call the method get_language , substitute the result for language_code .
 6459	if language_code is not containsed in self._app_dict
 6460	call the method self._populate .
 6461	return the value under the language_code key of the self._app_dict dictionary .
 6462	define the method resolve with an argument self .
 6463	call the function force_text with an argument path , substitute the result for path .
 6464	tried is an empty list .
 6465	call the function self.regex.search with an argument path , substitute the result for match .
 6466	if match is true ,
 6467	slice the path list from the result of the match.end method as the start index to the end , substitute it for new_path .
 6468	for every pattern in self.url_patterns ,
 6469	try ,
 6470	call the method pattern.resolve with an argument new_path , substitute the result for sub_match .
 6471	if Resolver404 , renamed to e , exception is caught ,
 6472	call the get method with an argument string STR0 on the first element of the e.args , substitute the result for sub_tried .
 6473	if sub_tried is not None ,
 6474	call the method tried.extend with an argument : t added to a list containing element pattern , for every t in sub_tried .
 6475	if not ,
 6476	append list containing pattern to tried .
 6477	if not ,
 6478	if sub_match is true ,
 6479	sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict .
 6480	call the method sub_match_dict.update with an argument sub_match.kwargs .
 6481	return an instance of a class ResolverMatch created with 6 arguments : sub_match.func , sub_match.args , sub_match_dict , sub_match.url_name , self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name .
 6482	append pattern to tried list .
 6483	raise an Resolver404 exception with an argument dictionary containing 2 entries : new_path for STR0 and tried for STR1 .
 6484	raise an Resolver404 exception with an argument dictionary containing 1 entry : path for STR0 .
 6485	property decorator ,
 6486	define the method urlconf_module with an argument self .
 6487	try ,
 6488	return self._urlconf_module .
 6489	if AttributeError exception is caught .
 6490	call the function import_module with argument self.urlconf_name , substitute the result for self._urlconf_module .
 6491	return self._urlconf_module .
 6492	property decorator ,
 6493	define the method url_patterns with an argument self .
 6494	get attribute STR0 form the self.urlconf_module , substitute it for patterns , if the attribute doesnt exist , substitute self.urlconf_module for self.urlconf_module .
 6495	try ,
 6496	call the function iter with an argument patterns .
 6497	if TypeError exception is caught ,
 6498	msg is a string STR The included urlconf STR0 does not appear to have any patterns in it .
 6499	If you see valid patterns in the file then the issue is probably caused by a circular import . '' raise an ImproperlyConfigured exception with an argument : return value of the method msg.format , called with an argument name set to self.urlconf_name .
 6500	return patterns .
 6501	define the method resolve_error_handler with arguments self and view_type .
 6502	replace STR0 in the string STR1 with view_type , use it as an name of the attribute to get from the self.urlconf_module , substitute it for callback , if the attribute doesnt exists , callback is None .
 6503	if not callback ,
 6504	from django.conf import urls into default name space ,
 6505	replace STR0 in the string STR1 with view_type , use it as an name of the attribute to get from the urls , substitute it for callback .
 6506	call the function get_callable with an argument callback , return the result and an empty dictionary .
 6507	define the method reverse with arguments self , lookup_view , unpacked list args and unpacked dictionary kwargs .
 6508	call the method self._reverse_with_prefix with 4 arguments : lookup_view , an empty string , unpacked list args and unpacked dictionary kwargs .
 6509	define the method _reverse_with_prefix with arguments self , lookup_view , _prefix , unpacked list args and unpacked dictionary kwargs .
 6510	if args and kwargs are both true ,
 6511	raise an ValueError exception with an argument string STR0 .
 6512	call the function force_text with an argument v , for every v in args , put the results in a text_args list .
 6513	text_kwargs is a dictionary created from the result of the function force_text with an argument v , mapped through function k , for every k and v in return value of the kwargs.items .
 6514	if self._populated is false ,
 6515	call the method self._populate ,
 6516	substitute lookup_view for original_lookup ,
 6517	try ,
 6518	if lookup_view is contained in self._callback_strs ,
 6519	call the function get_callable with arguments lookup_view and boolean True , substitute the result for lookup_view .
 6520	if ImportError , AttributeError , renamed to e , exceptions are caught ,
 6521	raise an NoReverseMatch exception with an argument string STR0 , where STR1 is replaced with lookup_view and e , respectively .
 6522	if not ,
 6523	if original_lookup and lookup_view are not callable objects ,
 6524	call the function warnings.warn with 3 arguments : string STR0 , with STR1 replaced with original_lookup , RemovedInDjango20Warning and stacklevel set to integer 3 .
 6525	call the method self.reverse_dict.getlist with an argument lookup_view , substitute the result for possibilities .
 6526	call the function urlquote with an argument _prefix , use the result as an argument for the call to the normalize function , substitute the fitst element of the result for prefix_norm and prefix_args , respectively .
 6527	for every possibility , pattern and defaults in possibilities ,
 6528	for every result and params in possibility ,
 6529	if args is true ,
 6530	if length of args is not equal to the sum of the lengths of params and prefix_args ,
 6531	skip this loop iteration .
 6532	create a list of tuples out of 2 lists : appended params list to prefix_args and text_args , covert the result into a dictionary , substitute it for candidate_subs .
 6533	if not ,
 6534	if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
 6535	dictionary keys converted into sets , skip this loop iteration ,
 6536	matches is boolean True ,
 6537	for every k and v in return value of the function defaults.items ,
 6538	if the value of the kwargs dictionary under the key k is not equal to v ,
 6539	matches is boolean False .
 6540	break from this loop execution .
 6541	if matches is false ,
 6542	skip this loop iteration ,
 6543	substitute text_kwargs for candidate_subs .
 6544	replace all the occurrences of the STR0 string for STR1 , append result to the previous result , substitute it for candidate_pat .
 6545	call the function re.search with 3 arguments : string STR0 , with STR1 replaced for prefix_norm and pattern , respectively , candidate_pat formated with candidate_subs and re.UNICODE .
 6546	candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v , mapped with a function k , for every k and v in return value of the method candidate_subs.items .
 6547	format candidate_pat with candidate_subs , return the result .
 6548	get the attribute STR0 from the getattr , if it exists substitute it for m , if not , m is None .
 6549	get the attribute STR0 from the getattr , if it exists substitute it for m , if not , m is None .
 6550	if m and n are not None ,
 6551	join m and n into a string , separated by STR0 , substitute the result for lookup_view_s .
 6552	if not ,
 6553	substitute lookup_view for lookup_view_s .
 6554	append pattern into a list patterns , for every possibility , pattern and defaults in possibilities .
 6555	raise an NoReverseMatch exception with an argument string STR0 , STR1 , replace STR2 with lookup_view_s , args , kwargs , length of patterns , patterns , and respectively .
 6556	derive the class LocaleRegexURLResolver with RegexURLResolver as base class .
 6557	define the __init__ method with 5 arguments : self , urlconf_name , default_kwargs set to None , app_name set to None and namespace set to None .
 6558	call the __init__ method of the base class of the class LocaleRegexURLResolver , with arguments : None , urlconf_name , default_kwargs , app_name and namespace .
 6559	property decorator ,
 6560	define the method regex with an argument self .
 6561	call the function get_language , substitute the result for language_code .
 6562	if language_code is not contained in self._regex_dict ,
 6563	call the function re.compile with 2 arguments , string STR0 , where STR1 is replaced with language_code and re.UNICODE , substitute the result for regex_compiled .
 6564	substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary .
 6565	return the value under the language_code of the self._regex_dict dictionary .
 6566	define the function resolve with arguments path and urlconf set to None .
 6567	if urlconf is None ,
 6568	call the function get_urlconf with an argument urlconf .
 6569	call the function get_resolver with an argument urlconf , on the result call the method resolve with an argument path , return it .
 6570	define the function reverse with 6 arguments : viewname , urlconf set to None , args set to None , kwargs set to None , prefix set to None , current_app set to None .
 6571	if urlconf is None ,
 6572	call the function get_urlconf with an argument urlconf .
 6573	call the function get_resolver with an argument urlconf , substitute the result for resolver .
 6574	if args in None of boolean False , substitute it for an empty list .
 6575	if args in None of boolean False , substitute it for an empty dictionary .
 6576	if prefix is None ,
 6577	call the function get_script_prefix , substitute the result for prefix .
 6578	if viewname is not an instance of the six.string_types object ,
 6579	substitute viewname for view .
 6580	if not ,
 6581	call the method viewname.split , with an argument STR0 , substitute the result for parts .
 6582	call the method parts.reverse .
 6583	substitute first element of parts for view .
 6584	substitute parts , without the first element , for path .
 6585	resolved_path is an empty list .
 6586	ns_pattern is an empty string .
 6587	while path is true ,
 6588	pop the element form the path as substitute the result for ns .
 6589	try ,
 6590	get the value under the ns key of the resolver.app_dict dictionary , substitute it for app_list .
 6591	if current_app and is true and current_app is contained in app_list ,
 6592	substitute current_app for ns .
 6593	otherwise if ns is not contained in app_list ,
 6594	substitute first element of app_list for ns .
 6595	if KeyError exception is caught ,
 6596	do nothing .
 6597	try ,
 6598	substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver , respectively .
 6599	call the method resolved_path.append with an argument ns .
 6600	add ns_pattern and extra , substitute the result for ns_pattern .
 6601	if KeyError , renamed to key , exception is caught ,
 6602	if resolved_path is true ,
 6603	raise an NoReverseMatch exception with an argument string STR0 , respectively replace STR1 with key and elements of the resolved_path joined into a string , separated by STR2 .
 6604	if not ,
 6605	raise an NoReverseMatch exception with an argument string STR0 , with STR1 replaced with key .
 6606	if ns_pattern is true ,
 6607	call the function get_ns_resolver with arguments ns_pattern and resolver , substitute the result for resolver .
 6608	call the method resolver._reverse_with_prefix with 4 arguments : view , prefix , unpacked list args , unpacked dictionary kwargs , use the result as an argument for the call to the function iri_to_uri , return the result .
 6609	call the function lazy with arguments reverse and str , substitute the results for reverse_lazy .
 6610	define the function clear_url_caches .
 6611	call the function get_callable.cache_clear .
 6612	call the function get_resolver.cache_clear .
 6613	call the function get_ns_resolver.cache_clear .
 6614	define the function set_script_prefix with an argument prefix .
 6615	if prefix doesnt end with character STR0 ,
 6616	append STR0 to prefix .
 6617	substitute prefix for _prefixes.values .
 6618	define the function get_script_prefix .
 6619	get STR0 attribute of the _prefixes , if it exists , return it , otherwise return STR1 .
 6620	define the function clear_script_prefix .
 6621	try ,
 6622	delete _prefixes.values .
 6623	if AttributeError exception is caught ,
 6624	do nothing .
 6625	define the function set_urlconf with an argument urlconf_name .
 6626	if urlconf_name is true ,
 6627	substitute urlconf_name for _urlconfs.value .
 6628	if not ,
 6629	if _urlconfs has an attribute STR0 ,
 6630	delete _urlconfs.value .
 6631	define the function get_urlconf with an argument default set to None .
 6632	get the STR0 attribute of the _urlconfs , if it exists return it , otherwise return defaults .
 6633	define the function is_valid_path with arguments path and urlconf set to None .
 6634	try ,
 6635	call the function resolve with arguments path and urlconf .
 6636	return boolean True .
 6637	if Resolver404 exception is caught ,
 6638	return boolean False .
 6639	from __future__ import unicode_literals into default name space .
 6640	import module re .
 6641	from django.core.exceptions import ValidationError into default name space .
 6642	from django.utils.deconstruct import deconstructible into default name space .
 6643	from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space .
 6644	from django.utils.encoding import force_text into default name space .
 6645	from django.utils.ipv6 import is_valid_ipv6_address into default name space .
 6646	from django.utils import six into default name space .
 6647	from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space .
 6648	EMPTY_VALUES is a tuple containing 5 initial elements : None , empty string , empty list , empty tuple and an empty dictionary .
 6649	decorator deconstructible ,
 6650	derive the class RegexValidator form the object base class .
 6651	regex is an empty string .
 6652	call a function _ with a string STR0 as an argument , substitute the result for message .
 6653	code is a string STR0
 6654	inverse_match is boolean False .
 6655	flags is a integer 0 .
 6656	define the method __init__ with 6 arguments : self , regex set to None , message set to None , code set to None , inverse_match set to None and flags set to None .
 6657	if regex is not None ,
 6658	substitute regex for self.regex .
 6659	if message is not None ,
 6660	substitute message for self.message .
 6661	if code is not None ,
 6662	substitute code for self.code .
 6663	if inverse_match is not None ,
 6664	substitute inverse_match for self.inverse_match .
 6665	if flags is not None ,
 6666	substitute flags for self.flags .
 6667	if self.flags is true and self.regex is not an instance of a six.string_types type ,
 6668	raise an TypeError exception with an argument string STR0 .
 6669	if self.regex is not an instance of a six.string_types type ,
 6670	call the re.compile function with self.regex and self.flags as arguments , substitute the result for self.regex .
 6671	define the method __call__ with arguments self and value .
 6672	if self.inverse_match equals to return value of the self.regex.search method converted to boolean , called with argument force_text ( value ) ,
 6673	raise a ValidationError exception with arguments self.message and code set to self.code .
 6674	define the method __eq__ with arguments self and other .
 6675	evaluate the logical expression , if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern , and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code , and self.inverse_match equals to other.inverse_match , return the result .
 6676	define the method __ne__ with arguments self and other .
 6677	if self equals to other return boolean False , otherwise return boolean True .
 6678	decorator deconstructible ,
 6679	derive the class URLValidator form the RegexValidator base class .
 6680	call the re.compile function with 2 arguments : raw string STR0 , STR1 , STR2 and re.IGNORECASE , substitute the result for regex .
 6681	call a function _ with a string STR0 as an argument , substitute the result for message .
 6682	schemes is a list containing 4 initial elements : STR0 , STR1 , STR2 and STR3 .
 6683	define the method __init__ with 3 arguments : self , schemes set to None and unpacked dictionary kwargs .
 6684	call the __init__ method of the base class of the class URLValidator , with unpacked dictionary kwargs as argument .
 6685	if schemes is not None ,
 6686	substitute schemes for self.schemes .
 6687	define the method __call__ with arguments self and value .
 6688	call the function force_text with an argument value , substitute the result for value .
 6689	call the value.split method with STR0 as argument , convert first element of the result to lower case , substitute the result for scheme .
 6690	if scheme is not contained in self.schemes ,
 6691	raise a ValidationError exception with arguments self.message and code set to self.code .
 6692	try ,
 6693	call the __call__ method from the base class of the class URLValidator , with an argument value .
 6694	if ValidationError , renamed to e , is caught ,
 6695	if value is true ,
 6696	call the function urlsplit with an argument value , assign the result to scheme , netloc , path , query and fragment , respectively .
 6697	try ,
 6698	call the method netloc.encode with an argument string STR0 , on the return value call the decode method with string STR1 as argument , substitute the result for netloc .
 6699	if UnicodeError exception is caught ,
 6700	raise an exception e .
 6701	call the function urlunsplit with a tuple containing 5 elements : scheme , netloc , path , query and fragment , as an argument , substitute the result for url .
 6702	call the __call__ method from the base class of the URLValidator class , with an argument url .
 6703	if not ,
 6704	raise an exception .
 6705	if not ,
 6706	substitute value for url .
 6707	define the function validate_integer with an argument value .
 6708	try ,
 6709	convert value into an integer .
 6710	if ValueError or TypeError exceptions are caught ,
 6711	raise a ValidationError exception with 2 arguments : return value of the function _ with an string argument STR0 , and code set to string STR1 .
 6712	decorator deconstructible ,
 6713	derive the class EmailValidator form the object base class .
 6714	call a function _ with a string STR0 as an argument , substitute the result for message .
 6715	code is a string STR0 .
 6716	call the re.compile function with 2 arguments : raw string STR0 , STR1 ( [ \001-\010\013\014\016-\037 ! # -\ [ \ ] -\177 ] |\\ [ \001-\011\013\014\016-\177 ] ) * STR2 and re.IGNORECASE , substitute the result for user_regex .
 6717	call the re.compile function with 2 arguments : raw string STR0 , and re.IGNORECASE , substitute the result for domain_regex .
 6718	call the re.compile function with 2 arguments : raw string STR0 and re.IGNORECASE , substitute the result for literal_regex .
 6719	domain_whitelist is a list containing string STR0 .
 6720	define the __init__ method with 4 arguments : self , message set to None , code set to None and whitelist set to None .
 6721	if message is not None
 6722	substitute message for self.message .
 6723	if code is not None
 6724	substitute code for self.code .
 6725	if whitelist is not None
 6726	substitute whitelist for self.domain_whitelist .
 6727	define the method __call__ with arguments self and value .
 6728	call the function force_text with an argument value , substitute the result for value .
 6729	if value is false or character STR0 is not contained in value ,
 6730	raise a ValidationError exception with arguments self.message and code set to self.code .
 6731	call the method value.rsplit with arguments character STR0 and integer 1 , assign the result to user_part and domain_part , respectively .
 6732	call the self.user_regex.match method with an argument user_part , if it evaluates to false ,
 6733	raise a ValidationError exception with arguments self.message and code set to self.code .
 6734	if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false ,
 6735	try ,
 6736	call the method domain_part.encode with an argument string STR0 , on the return value call the decode method with string STR1 as argument , substitute the result for domain_part .
 6737	if method self.validate_domain_part with an argument domain_part evaluates to true ,
 6738	return nothing .
 6739	if UnicodeError exception is caught ,
 6740	do nothing .
 6741	raise a ValidationError exception with arguments self.message and code set to self.code .
 6742	define the method validate_domain_part with arguments self and domain_part .
 6743	call the self.domain_regex.match method with an argument domain_part , if it evaluates to true ,
 6744	return boolean True .
 6745	evaluate method self.literal_regex.match with an argument domain_part , substitute the result for literal_match .
 6746	if literal_match is true ,
 6747	call the method literal_match.group with an integer 1 , substitute the result for ip_address .
 6748	try ,
 6749	call the function validate_ipv46_address with an argument ip_address .
 6750	return boolean True .
 6751	if ValidationError exception is caught ,
 6752	do nothing .
 6753	return boolean False .
 6754	define the method __eq__ with arguments self and other .
 6755	if other is instance of EmailValidator and , self.domain_whitelist equals to other.domain_whitelist , and self.message equals to other.message , and self.code equals to other.code , return boolean True , otherwise return boolean False .
 6756	validate_email is an instance of EmailValidator class .
 6757	call the re.compile function with an argument raw string STR0 , substitute the result for slug_re .
 6758	validate_slug is a instance of a RegexValidator class , created with 3 arguments : slug_re , return value of the call to the function , _ with an argument string STR0 , and string STR1 .
 6759	call the re.compile function with an argument raw string STR0 , substitute the result for ipv4_re .
 6760	validate_ipv4_address is a instance of a RegexValidator class , created with 3 arguments : ipv4_re , return value of the call to the function _ with an argument string STR0 and string STR1 .
 6761	define the function validate_ipv6_address with an argument value .
 6762	call the function is_valid_ipv6_address with an argument value , if it evaluates to false ,
 6763	raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string STR0 , and code set to string STR1 .
 6764	define the function validate_ipv46_address with an argument value .
 6765	try ,
 6766	call the function validate_ipv4_address with an argument value .
 6767	if ValidationError exception is caught ,
 6768	try ,
 6769	call the function validate_ipv6_address with an argument value .
 6770	if ValidationError exception is caught ,
 6771	raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string STR0 , and code set to string STR1 .
 6772	ip_address_validator_map is a dictionary containing 3 initial entries : tuple containing 2 elements : list with an element , validate_ipv46_address and return value of the function _ with an argument string STR0 for STR1 , tuple containing 2 elements : list with an element validate_ipv4_address and return value of the function _ with an argument string , STR2 for STR3 and tuple containing 2 elements : list with an element validate_ipv6_address , and return value of the function _ with an argument string STR4 for STR5 .
 6773	define the function ip_address_validators with arguments protocol and unpack_ipv4 .
 6774	if protocol is not equal to string STR0 and unpack_ipv4 is true ,
 6775	raise a ValueError exception with an argument STR0 .
 6776	try ,
 6777	convert protocol to lowercase , use it as a key to get a value from the ip_address_validator_map dictionary , return it .
 6778	if KeyError exception is caught ,
 6779	raise a ValueError exception with an argument STR0 , replace STR1 with protocol , and ip_address_validator_map converted to a list , respectively .
 6780	call the re.compile function with an argument raw string STR0 , substitute the result for comma_separated_int_list_re .
 6781	validate_comma_separated_integer_list is a instance of a RegexValidator class , created with 3 arguments : comma_separated_int_list_re , return value of the call to the function _ with an argument string STR0 and string STR1 .
 6782	decorator deconstructible ,
 6783	derive the class BaseValidator form the object base class .
 6784	compare is a lambda function with arguments self , a and b , return value is boolean True if a is not b , otherwise it is False .
 6785	clean is a lambda function with arguments self and x , return value is x .
 6786	call the function _ with the argument string STR0 , substitute the result for message .
 6787	code is a string STR0
 6788	define the method __init__ with self and limit_value as arguments .
 6789	substitute the limit_value for self.limit_value .
 6790	define the method __call__ with arguments self and value .
 6791	call the method self.clean with value as argument , substitute the result for cleaned .
 6792	params is a dictionary with 2 initial entries : self.limit_value for STR0 and cleaned for STR1 .
 6793	call the self.compare method with arguments cleaned and self.limit_value , if it evaluates to true ,
 6794	raise a ValidationError exception with arguments self.message , code set to self.code and params set to params .
 6795	define the method __eq__ with arguments self and other .
 6796	if other is an instance of self.__class__ and , self.limit_value equals to other.limit_value , and self.message equals to other.message , and self.code equals to other.code , return boolean True , otherwise return boolean False .
 6797	decorator deconstructible ,
 6798	derive the class MaxValueValidator form the BaseValidator base class .
 6799	compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
 6800	call the function _ with an argument string STR0 , substitute the result for message .
 6801	code is a string STR0
 6802	decorator deconstructible ,
 6803	derive the class MinValueValidator form the BaseValidator base class .
 6804	compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
 6805	call the function _ with an argument string STR0 , substitute the result for message .
 6806	code is a string STR0
 6807	decorator deconstructible ,
 6808	derive the class MinLengthValidator form the BaseValidator base class .
 6809	compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
 6810	clean is a lambda function with self and x as arguments , return value is length of x .
 6811	call the function ungettext_lazy with 3 arguments : string STR0Ensure this value has at least % ( limit_value ) d characters ( it has % ( show_value ) d ) . STR1limit_value ' , substitute the result for message .
 6812	code is a string STR0
 6813	decorator deconstructible ,
 6814	derive the class MaxLengthValidator form the BaseValidator base class .
 6815	compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
 6816	clean is a lambda function with self and x as arguments , return value is length of x .
 6817	call the function ungettext_lazy with 3 arguments : string STR0Ensure this value has at most % ( limit_value ) d characters ( it has % ( show_value ) d ) . STR1limit_value ' , substitute the result for message .
 6818	code is a string STR0
 6819	import module django .
 6820	from django.core.handlers.wsgi import WSGIHandler into default name space .
 6821	define the function get_wsgi_application .
 6822	call the django.setup method .
 6823	return WSGIHandler object .
 6824	from django.core.exceptions import ValidationError into default name space .
 6825	from django.forms.fields import everything into default name space .
 6826	from django.forms.forms import everything into default name space .
 6827	from django.forms.formsets import everything into default name space .
 6828	from django.forms.models import everything into default name space .
 6829	from django.forms.widgets import everything into default name space .
 6830	from django.forms.extras.widgets import SelectDateWidget into default name space .
 6831	__all__ is an list containing string STR0 .
 6832	from __future__ import unicode_literals into default name space .
 6833	import module datetime .
 6834	import module re .
 6835	from django.forms.widgets import Widget and Select into default name space .
 6836	from django.utils import datetime_safe into default name space .
 6837	from django.utils.dates import MONTHS into default name space .
 6838	from django.utils.encoding import force_str into default name space .
 6839	from django.utils.safestring import mark_safe into default name space .
 6840	from django.utils.formats import get_format into default name space .
 6841	from django.utils import six into default name space .
 6842	from django.conf import settings into default name space .
 6843	__all__ is an tuple containing string STR0 .
 6844	compile regex from the raw string STR0 , substitute it for RE_DATE .
 6845	define the function _parse_date_fmt .
 6846	call the function get_format with an argument string STR0 , substitute it for fmt .
 6847	escaped is boolean False .
 6848	for every char in fmt ,
 6849	if escaped is true ,
 6850	escaped is boolean False .
 6851	otherwise if cahr equals a string '\STR ,
 6852	escaped is boolean True .
 6853	otherwis if char is contained in string STR0 ,
 6854	yield string STR0 as an return value of the generator .
 6855	otherwise if char is contained in string STR0 ,
 6856	yield string STR0 as an return value of the generator .
 6857	otherwise if char is contained in string STR0 ,
 6858	yield string STR0 as an return value of the generator .
 6859	derive the class SelectDateWidget for the Widget base class .
 6860	none_value is a tuple containing 2 elements : integer 0 and string STR0 .
 6861	month_field is a string STR0 .
 6862	day_field is a string STR0 .
 6863	year_field is a string STR0 .
 6864	define the method __init__ with 5 arguments : self , attrs set to None , years set to None , months set to None and empty_label set to None .
 6865	if attrs is not None substitute it for self.attrs , or if not self.attrs is an empty dictionary .
 6866	if years is true ,
 6867	substitute years for self.years .
 6868	if not ,
 6869	call the function datetime.date.today , substitute the year field of the result for this_year .
 6870	self.years is list containing 10 successive integers from this_year .
 6871	if months is true ,
 6872	substitute months for self.months .
 6873	if not ,
 6874	substitute MONTHS for self.months .
 6875	if empty_label is an instance of list or tuple type ,
 6876	if length of empty_label is not equal to integer 3 .
 6877	raise an ValueError with an argument string STR0 .
 6878	self.year_none_value is a tuple containing 2 elements : integer 0 and first element of empty_label .
 6879	self.month_none_value is a tuple containing 2 elements : integer 0 and second element of empty_label .
 6880	self.day_none_value is a tuple containing 2 elements : integer 0 and third element of empty_label .
 6881	if not ,
 6882	if empty_label is not None ,
 6883	self.none_value is a tuple containing 2 elements : integer 0 and empty_label .
 6884	substitute self.none_value for self.year_none_value .
 6885	substitute self.none_value for self.month_none_value .
 6886	substitute self.none_value for self.day_none_value .
 6887	define the method render with 4 arguments : self , name , value and attrs set to None .
 6888	try ,
 6889	substitute value.year , value.month and value.day for year_val , month_val and day_val , respectively .
 6890	if AttributeError exception is caught ,
 6891	year_val and month_val and day_val are set to None .
 6892	if value is an instance of six.string_types ,
 6893	if settings.USE_L10N is true ,
 6894	try ,
 6895	call the function get_format with an argument string STR0 , substitute the first element of the result for input_format .
 6896	call the method datetime.datetime.strptime with 2 arguments : return value of the function force_str called with an argument value , and input_format , substitute the result for v .
 6897	substitute v.year , v.month and v.day for year_val , month_val and day_val , respectively .
 6898	if ValueError exception is caught ,
 6899	do nothing .
 6900	if not ,
 6901	call the method RE_DATE.match with an argument value , substitute the result for match .
 6902	if match is true ,
 6903	for v in return value of the function match.groups , convert v into an integer and append i to a list , assign the result for year_val , month_val and day_val , respectively .
 6904	html is an empty dictionary .
 6905	for every i in self.years append tuple containing i and i elements into a list , substitute the resulting string for choices .
 6906	call the method self.create_select with 6 arguments : name , self.year_field , value , year_val , choices and self.year_none_value , substitute the result for the value under the STR0 key of the html dictionary .
 6907	call the function six.iteritems with an argument self.months , convert the result to a list and substitute it for choices .
 6908	call the method self.create_select with 6 arguments : name , self.month_field , value , month_val , choices and self.month_none_value , substitute the result for the value under the STR0 key of the html dictionary .
 6909	for every i in successive list of integers from 1 to 30 , append tuple containing i and i elements into a list , substitute the resulting string for choices .
 6910	call the method self.create_select with 6 arguments : name , self.year_field , value , day_val , choices and self.day_none_value , substitute the result for the value under the STR0 key of the html dictionary .
 6911	output is an empty list .
 6912	for every field in return value of the function _parse_date_fmt ,
 6913	get the value under the field key of the html dictionary , append it to output .
 6914	join output into a string , separated by newline characters , use it as an argument for the call to the mark_safe , return the result .
 6915	define the method id_for_label with arguments self and id .
 6916	for every first_select in return value of the function _parse_date_fmt .
 6917	substitute STR0 in string STR1 with id_ and first_select , return it .
 6918	if not ,
 6919	convert if into a string append to it a string STR0 , return the result .
 6920	define the method id_for_label with arguments self , data , files and name .
 6921	format self.year_field string with name , use it as the key for the data dictionary , substitute the result for y .
 6922	format self.month_field string with name , use it as the key for the data dictionary , substitute the result for m .
 6923	format self.day_field string with name , use it as the key for the data dictionary , substitute the result for d .
 6924	if y , m and d are all equal to string STR0 ,
 6925	return None .
 6926	if y and m and d are all true ,
 6927	if settings.USE_L10N is true ,
 6928	call the function get_format with an argument string STR0 , substitute the first element of the result for input_format .
 6929	try ,
 6930	call the function datetime.date with 3 arguments : y , m and d all converted into a integers , substitute the result for date_value .
 6931	if ValueError exception is caught ,
 6932	substitute STR0 in string STR1 with y , m and d , return the result .
 6933	if not ,
 6934	call the method datetime_safe.new_date with an argument date_value , substitute the result for date_value .
 6935	call the method date_value.strftime with an argument input_format , return the result .
 6936	if not ,
 6937	substitute STR0 in string STR1 with y , m and d , return the result .
 6938	get the name key of the data dictionary , if the key exists return it , if not return None .
 6939	define the method id_for_label with arguments self , name , field , value , val , choices and none_value .
 6940	if STR0 is contained in self.attrs ,
 6941	get the value under the STR0 key of the attrs dictionary , substitute the return value field of the self object for id_ .
 6942	if not ,
 6943	substitute STR0 in string STR1 with name , return it .
 6944	if self.is_required is false ,
 6945	insert none_value at the beginning of the choices list .
 6946	call the method self.build_attrs with an argument id set to field modulus id_ , substitute the result for local_attrs .
 6947	s is an instance of the Select class , created with choices set to choices .
 6948	call the method s.render with 3 arguments : field string formated with name , val and local_attrs , substitute the result for select_html .
 6949	return select_html .
 6950	from __future__ import unicode_literals into default name space .
 6951	import module copy .
 6952	import module datetime .
 6953	import module os .
 6954	import module re .
 6955	import module sys .
 6956	import module warnings .
 6957	from decimal import Decimal and DecimalException into default name space .
 6958	from io import BytesIO into default name space .
 6959	from django.core import validators into default name space .
 6960	from django.core.exceptions import ValidationError into default name space .
 6961	from django.forms.utils import from_current_timezone and to_current_timezone into default name space .
 6962	from django.forms.widgets import TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput ,
 6963	CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION . from django.utils import formats into default name space .
 6964	from django.utils.encoding import smart_text , force_str and force_text into default name space .
 6965	from django.utils.ipv6 import clean_ipv6_address into default name space .
 6966	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 6967	from django.utils import six into default name space .
 6968	from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space .
 6969	from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space .
 6970	from django.core.validators import EMPTY_VALUES into default name space .
 6971	__all__ a tuple containing strings : STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 ,
 6972	STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , STR11 , STR12 , STR13 , STR14 , STR15 , STR16 , STR17 , STR18 . derive the class Field from the base class object .
 6973	substitute substitute TextInput for widget .
 6974	substitute HiddenInput for hidden_widget .
 6975	default_validators is an empty list .
 6976	default_error_messages is an dictionary containing entry : return value of the function _ called with an string STR0 for STR1 .
 6977	put elements of validators.EMPTY_VALUES to a list , substitute the result for empty_values .
 6978	creation_counter is an integer 0 .
 6979	define the function __init__ with 11 arguments : self , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , error_messages set to None , show_hidden_initial set to boolean False , validators is an empty , localize set to boolean False , label_suffix set to None .
 6980	substitute required , label and initial for self.required , self.label and self.initial .
 6981	substitute show_hidden_initial for self.show_hidden_initial .
 6982	substitute help_text for self.help_text .
 6983	substitute label_suffix for self.label_suffix .
 6984	substitute self.widget if the widget is false , otherwise substitute widget for widget .
 6985	if widget is an instance of type class ,
 6986	call the function widget , substitute the result for widget .
 6987	substitute localize for self.localize .
 6988	if self.localize is true ,
 6989	widget.is_localized is boolean True .
 6990	substitute self.required for widget.is_required .
 6991	call the method self.widget_attrs with an argument widget , substitute the result for extra_attrs .
 6992	if extra_attrs is true ,
 6993	update widget.attrs dictionary with extra_attrs .
 6994	substitute widget for self.widget .
 6995	substitute Field.creation_counter for self.creation_counter .
 6996	increment Field.creation_counter by one .
 6997	messages is an empty dictionary .
 6998	for every c in reversed order of self.__class__.__mro__ ,
 6999	get STR0 from the c object , if it doesnt exists return an empty dictionary , use the result as the argument for the call to the messages.update function .
 7000	update messages dictionary with error_messages , if it exists , if not donot update it .
 7001	substitute messages for self.error_messages .
 7002	add self.default_validators and validators , substitute the result for self.validators .
 7003	call the method __init__ from the base class of the Field class .
 7004	define the method prepare_value with arguments : self and value .
 7005	return value .
 7006	define the method to_python with arguments self and value .
 7007	return value .
 7008	define the method to_python with arguments self and value .
 7009	if value is contained in self.empty_values and self.required is true ,
 7010	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to string STR1 .
 7011	define the method run_validators with arguments self and value .
 7012	if value is contained in self.empty_values ,
 7013	return nothing ,
 7014	errors is an empty list .
 7015	for every v in self.validators ,
 7016	try
 7017	call the function v with an argument value .
 7018	if ValidationError , substituted for e , exception is caught ,
 7019	if e has an attribute STR0 and e.code is contained in self.error_messages ,
 7020	get the value under the e.code key of the self.error_messages dictionary , substitute the result for e.message .
 7021	extend errors list with e.error_list .
 7022	if errors is true ,
 7023	raise an ValidationError exception with an argument errors ,
 7024	define the method clean with arguments self and value .
 7025	call the method self.to_python with an argument value , substitute it for value .
 7026	call the method self.validate with an argument value .
 7027	call the method self.run_validators with an argument value .
 7028	return value .
 7029	define the method bound_data with arguments self , data and initial .
 7030	return data .
 7031	define the method widget_attrs with arguments self and widget .
 7032	return is empty dictionary .
 7033	define the method get_limit_choices_to with arguments self .
 7034	if self.limit_choices_to object is callable ,
 7035	call the method self.limit_choices_to , return the result ,
 7036	return self.limit_choices_to .
 7037	define the method _has_changed with arguments self , initial and data .
 7038	substitute initial for initial_value , if initial is not None , if not , initial_value is an empty string .
 7039	try ,
 7040	call the function self.to_python with an argument data , substitute the result for data .
 7041	if self has an attribute STR0 ,
 7042	call the method self._coerce with an argument data , substitute the result for data .
 7043	if ValidationError exception is caught ,
 7044	return boolean True .
 7045	substitute data for data_value if data is not None , otherwise data_value is an empty list .
 7046	if initial_value is not equal to data_value , return boolean True , otherwise return boolean False .
 7047	define the method __deepcopy__ with arguments self and memo .
 7048	call the method copy.copy with an argument self , substitute the result for result .
 7049	substitute result for the value of the memo dictionary , with identity of the self object as an key .
 7050	call the method copy.deepcopy with arguments self.widget and memo , substitute the result for result.widget .
 7051	substitute elements of self.validators list for result.validators .
 7052	return result .
 7053	derive the class CharField from the base class Field class .
 7054	define the method __init__ with 5 arguments : self , max_length set to None , min_length set to None , unpacked list args , and unpacked dictionary kwargs .
 7055	substitute max_length and min_length for self.max_length for self.min_length .
 7056	call the method __init__ from the base class of the class CharField , with arguments unpacked list args and unpacked dictionary kwargs .
 7057	if min_length is not None ,
 7058	call the method validators.MinLengthValidator with min_length converted into an integer , append the result to list self.validators .
 7059	if max_length is not None ,
 7060	call the method validators.MaxLengthValidator with max_length converted into an integer , append the result to list self.validators .
 7061	define the method to_python with arguments self and value .
 7062	if value in self.empty_values ,
 7063	return an empty string .
 7064	evaluate the function smart_text with an argument value , return the result .
 7065	define the method widget_attrs with arguments self and widget .
 7066	call the method widget_attrs from the base class of the class CharField , with an argument widget , substitute the result for attrs .
 7067	if self.max_length is not None ,
 7068	update attrs dictionary with entry : self.max_length converted into a string for STR0 .
 7069	return attrs .
 7070	derive the class IntegerField from the base class Field class .
 7071	substitute NumberInput for widget .
 7072	default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string , STR0 for STR1 .
 7073	define the method __init__ with 5 arguments : self , max_value set to None , min_value set to None , unpacked list args and unpacked dictionary kwargs .
 7074	substitute max_value and min_value for self.max_value and self.min_value .
 7075	get the value under the STR0 key of the kwargs dictionary , if it is true and self.widget equals to NumberInput ,
 7076	if STR0 key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value .
 7077	call the method __init__ from the base class of the class IntegerField , with arguments unpacked list args and unpacked dictionary kwargs .
 7078	if max_value is not None ,
 7079	call the method validators.MaxValueValidator with max_value converted into an integer , append the result to list self.validators .
 7080	if min_value is not None ,
 7081	call the method validators.MinValueValidator with min_value converted into an integer , append the result to list self.validators .
 7082	define the method to_python with arguments self and value .
 7083	call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value .
 7084	if value is contained in self.empty_values ,
 7085	return None .
 7086	if self.localize is true ,
 7087	call the method formats.sanitize_separators with an argument value , substitute the result for value .
 7088	try ,
 7089	convert value into an string , convert the result into an integer and substitute it for value .
 7090	if ValueError or TypeError exceptions are caught ,
 7091	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7092	return value
 7093	define the method widget_attrs with arguments self and widget .
 7094	call the method widget_attrs with an argument widget , from the base class of the class IntegerField , substitute it for attrs .
 7095	if widget is an instance of the NumberInput ,
 7096	if self.min_value is not None ,
 7097	substitute self.min_value for the value under the STR0 key of the attrs dictionary .
 7098	if self.max_value is not None ,
 7099	substitute self.max_value for the value under the STR0 key of the attrs dictionary .
 7100	return attrs .
 7101	derive the class FloatField from the base class IntegerField class .
 7102	default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string , STR0 for STR1 .
 7103	define the method to_python with arguments self and value .
 7104	call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value .
 7105	if value is contained in self.empty_values ,
 7106	return None .
 7107	if self.localize is true ,
 7108	call the method formats.sanitize_separators with an argument value , substitute the result for value .
 7109	try ,
 7110	convert value into an floating point number , substitute it for value .
 7111	if ValueError or TypeError exceptions are caught ,
 7112	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7113	return value .
 7114	define the method validate with arguments self and value .
 7115	call the method validate with an argument value , from the base class of the FloatField class .
 7116	if value is Nan , or value is contained in return value of the Decimal called twice with string STR0 and with string STR1 ,
 7117	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7118	return value .
 7119	define the method widget_attrs with arguments self and widget .
 7120	call the method widget_attrs with an argument widget , from the base class of the FloatField class , substitute the result for attrs .
 7121	if widget is an instance of the NumberInput class , and string STR0 is not contained in widget.attrs ,
 7122	if STR0 attribute of attrs dictionary does not exists , set it to to string STR1 .
 7123	return attrs .
 7124	derive the class DecimalField from the base class IntegerField class .
 7125	default_error_messages is a dictionary with 4 initial entries : return value of the function _ called with string as an argument , STR0 for STR1 , return value of the function ungettext_lazy called with 3 string arguments : STR2 , STR3 , and STR4 for STR5 , return value of the function ungettext_lazy called with 3 string arguments : STR6 , STR7 and STR8 , for STR9 and return value of the function ungettext_lazy called with 3 string arguments : STR10 , STR11 and STR12 for STR13 .
 7126	define the method __init__ with 7 arguments : self , max_value set to None , min_value set to None , max_digits set to None , decimal_places set to None , unpacked list args and unpacked dictionary kwargs .
 7127	substitute max_digits and decimal_places for self.max_digits and self.decimal_places .
 7128	call the method __init__ from the base class of the class DecimalField , with 4 arguments : max_value , min_value , unpacked list args and unpacked dictionary kwargs .
 7129	define the method to_python with arguments self and value .
 7130	if value is contained in self.empty_values ,
 7131	return None .
 7132	if self.localize is true ,
 7133	call the method formats.sanitize_separators with an argument value , substitute the result for value .
 7134	call the function smart_text with an argument value , strip the result of whitespaces from both ends and substitute it for value .
 7135	try ,
 7136	value is an instance of a class Decimal created with value as an argument .
 7137	if DecimalException exception is caught ,
 7138	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7139	return value .
 7140	define the method validate with arguments self and value .
 7141	call the method validate with an argument value from the base class of the DecimalField class .
 7142	if value is contained in self.empty_values ,
 7143	return nothing .
 7144	if value is not equal to value or value equals return value of the call to Decimal with argument STR0 ,
 7145	or value equals return value of the call to Decimal with argument STR0 raise an ValidationError with 2 arguments : value under the STR1 key of the self.error_messages dictionary and code set to STR2 .
 7146	call the method value.as_tuple , assign the result to sign , digittuple and exponent , respectively .
 7147	substitute absolute value of the exponent for decimals .
 7148	substitute length of digittuple for digits .
 7149	if decimals is greater than digits ,
 7150	substitute decimals for digits .
 7151	subtract decimals from digits , substitute the result for whole_digits .
 7152	if self.max_digits is not None and digits is grater than self.max_digits ,
 7153	raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , code set to string STR1 and params set to a dictionary with an entry : self.max_digits for STR2 .
 7154	if self.decimal_places is not None and decimals is grater than self.decimal_places :
 7155	raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , code set to string STR1 and params set to a dictionary with an entry : self.decimal_places for STR2 .
 7156	if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of ,
 7157	self.max_digits and self.decimal_places , raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , code set to string STR1 and params set to a dictionary with an entry : difference of the self.max_digits and self.decimal_places , for STR2 .
 7158	return value .
 7159	define the method widget_attrs with arguments self and widget .
 7160	call the method widget_attrs with an argument widget , from the base class of the DecimalField class , substitute the result for attrs .
 7161	if widget is an instance of NumberInput and string STR0 is not contained in widget.attrs .
 7162	if self.decimal_places is not None ,
 7163	call the object Decimal with string STR0 as an argument , divide it by 10 , bring the result to the power of self.decimal_places , convert the result to a lowercase string , substitute it for step .
 7164	if not ,
 7165	step is an string STR0 .
 7166	if STR0 key of the attrs dictionary doesnt exists assign it step as an value .
 7167	return attrs .
 7168	derive the class BaseTemporalField from the base class Field class .
 7169	define the method __init__ with arguments self , input_formats set to None , unpacked list args and unpacked dictionary kwargs .
 7170	call the method __init__ from the base class of the BaseTemporalField class , with arguments : unpacked list args and unpacked dictionary kwargs .
 7171	if input_formats is not None ,
 7172	substitute input_formats for self.input_formats .
 7173	define the method to_python with arguments self and value .
 7174	call the function force_text with arguments value and strings_only set to boolean True , substitute the result for unicode_value .
 7175	if unicode_value is an instance of six.text_type ,
 7176	strip whitespaces from both ends of unicode_value , substitute the result for value .
 7177	if value is an instance of six.text_type class ,
 7178	for every format in self.input_formats ,
 7179	try ,
 7180	call the method self.strptime with arguments value and format , return the result .
 7181	if ValueError or TypeError exceptions are caught ,
 7182	skip this loop iteration .
 7183	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7184	define the method strptime with arguments self , value and format .
 7185	raise an NotImplementedError with an argument string STR0 .
 7186	derive the class DateField from the base class BaseTemporalField class .
 7187	substitute DateInput for widget .
 7188	call the method formats.get_format_lazy with an argument string STR0 , substitute the result for input_formats .
 7189	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string STR0 for STR1 .
 7190	define the method to_python with arguments self and value .
 7191	if value is contained in self.empty_values ,
 7192	return None .
 7193	if value is an instance of datetime.datetime class ,
 7194	call the method value.date , return the result .
 7195	if value is an instance of datetime.date class ,
 7196	return value .
 7197	call the method to_python with an argument value from the base class of the DateField class , return the result .
 7198	define the method strptime with arguments self , value and format .
 7199	call the method datetime.datetime.strptime with 2 arguments : result of the function force_str called with an argument value , and format , call the method date on the result , return the result .
 7200	derive the class TimeField from the base class BaseTemporalField class .
 7201	substitute TimeInput for widget .
 7202	call the method formats.get_format_lazy with an argument string STR0 , substitute the result for input_formats .
 7203	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string STR0 for STR1 .
 7204	define the method to_python with arguments self and value .
 7205	if value is contained in self.empty_values ,
 7206	return None .
 7207	if value is an instance of datetime.time ,
 7208	return value ,
 7209	call the method to_python with an argument value from the base class of the TimeField class , return the result .
 7210	define the method strptime with arguments self , value and format .
 7211	call the method datetime.datetime.strptime with 2 arguments : result of the function force_str called with an argument value , and format , call the method time on the result , return the result .
 7212	derive the class DateTimeField from the base class BaseTemporalField class .
 7213	substitute DateTimeInput for widget .
 7214	call the method formats.get_format_lazy with an argument string STR0 , substitute the result for input_formats .
 7215	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string STR0 for STR1 .
 7216	define the method prepare_value with arguments self and value .
 7217	if value is an instance of datetime.datetime ,
 7218	call the function to_current_timezone with an argument value , substitute the result for value .
 7219	return value .
 7220	define the method to_python with arguments self and value .
 7221	if value is contained in self.empty_values ,
 7222	return None .
 7223	if value is an instance of datetime.datetime ,
 7224	call the function __current_timezone with an argument value , return the result .
 7225	if value is an instance of datetime.date ,
 7226	call the function datetime.datetime with 3 arguments : value.year , value.month and value.day , substitute the result for result .
 7227	call the function from_current_timezone with an argument result , return the result .
 7228	if value is an instance of list type ,
 7229	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to integer 2 .
 7230	if length of value is not equal to integer 2 ,
 7231	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7232	if first and second elements of value are contained in self.empty_values ,
 7233	return None .
 7234	substitute STR0 in string STR1 with the elements of value converted into a tuple , substitute the result for value .
 7235	call the method to_python with an argument value from the base class of the DateTimeField class , substitute the result for result .
 7236	call the function from_current_timezone with an argument , return the result .
 7237	define the method strptime with arguments self , value and format .
 7238	call the method datetime.datetime.strptime with 2 arguments : result of the function force_str called with an argument value , and format , return the result .
 7239	derive the class RegexField from the base class CharField class .
 7240	define the method __init__ with 7 arguments : self , regex , max_length set to None , min_length set to None , error_message set to None ,
 7241	if error_message is not None ,
 7242	get the value under the STR0 key of the kwargs dictionary , if it exists substitute it for error_messages , if not , error_messages is an empty dictionary .
 7243	substitute error_message for value under the STR0 key of the error_messages dictionary .
 7244	substitute error_messages for value under the STR error_messages ' key of the kwargs dictionary .
 7245	call the method __init__ from the base class of the class RegexField , with 4 arguments : max_length , min_length , unpacked list args , unpacked dictionary kwargs .
 7246	call the method self._set_regex with an argument regex .
 7247	define the method _get_regex an argument self .
 7248	return self._regex .
 7249	define the method _set_regex with arguments self and regex .
 7250	if regex is an instance of six.string_types class ,
 7251	call the function re.compile with 2 arguments regex , re.UNICODE and substitute the result for regex .
 7252	substitute regex for self._regex .
 7253	if self has an STR0 attribute and self._regex_validator is contained in self.validators ,
 7254	remove self._regex_validator from self.validators .
 7255	call the method validators.RegexValidator with an argument regex set to regex , substitute it for self._regex_validator .
 7256	append self._regex_validator to self.validators .
 7257	regex is an property object of this class , with _get_regex getter and _set_regex setter function .
 7258	derive the class EmailField from the base class CharField class .
 7259	substitute EmailInput for widget .
 7260	default_validators is a list with an element validators.validate_email .
 7261	define the method clean with 2 arguments self and value .
 7262	call the method self.to_python with an argument value , strip the whitespaces from the both ends of the result and substitute it for value .
 7263	call the method clean with an argument value from the base class of the EmailField class .
 7264	derive the class FileField from the base class Field class .
 7265	substitute ClearableFileInput for widget .
 7266	default_error_messages is an dictionary with 5 initial entries : return value of the function _ called with an argument string , STR0 for STR3 , return value of the function _ called with an argument , string STR1 for STR4 , return value of the function _ called with an argument STR2 , for STR5 , return value of the function ungettext_lazy called with 3 arguments : string STR6 , string STR7 and string STR8 for STR9 , and return value of the function _ called with an argument string , STR10 for STR11 .
 7267	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 7268	remove the value under STR0 key from the kwargs dictionary and if the key exists substitute it for self.max_length , if not self.max_length is None .
 7269	remove the value under STR0 key from the kwargs dictionary and if the key exists , substitute it for self.allow_empty_file , if not self.allow_empty_file is boolean False .
 7270	call the method __init__ from the base class of the FileField class , with 2 arguments : unpacked list args and unpacked dictionary .
 7271	define the method to_python with arguments self and data .
 7272	if data in self.empty_values is true ,
 7273	return None .
 7274	try ,
 7275	substitute data.name for file_name .
 7276	substitute data.size for file_name .
 7277	if AttributeError exception is caught ,
 7278	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7279	if self.max_length is not None and length of file_name is grater than self.max_length ,
 7280	params is a dictionary with 2 initial entries : self.max_length for STR0 and length of file_name for STR1 .
 7281	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7282	if file_name is false ,
 7283	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7284	if self.allow_empty_file and file_size are both false ,
 7285	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7286	return data .
 7287	define the method clean with arguments self , data and initial set to None .
 7288	if data is bound to the same object as FILE_INPUT_CONTRADICTION ,
 7289	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7290	if data is boolean False ,
 7291	if self.required is false ,
 7292	return boolean False .
 7293	data is None .
 7294	if data is false and initial is true ,
 7295	return initial .
 7296	call the method clean with an argument data from the base class of the class FileField , return the result .
 7297	define the method bound_data with arguments self , data and initial .
 7298	if data is not None or FILE_INPUT_CONTRADICTION ,
 7299	return initial .
 7300	return data .
 7301	define the method _has_changed with arguments self , data and initial .
 7302	if data is None ,
 7303	return is boolean False .
 7304	return is boolean True .
 7305	derive the class ImageField from the base class FileField class .
 7306	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string , STR1 for STR2 .
 7307	define the method to_python with arguments self and data .
 7308	call the method to_python with an argument data from the base class of the class ImageField , substitute the result for f .
 7309	if f is None ,
 7310	return None .
 7311	from PIL import Image into default namespace .
 7312	if data has an STR0 attribute ,
 7313	substitute the result of the function data.temporary_file_path for file .
 7314	if not ,
 7315	if data has an attribute STR0 ,
 7316	file is an instance of BytesIO class created with an argument : return value of the method data.read .
 7317	if not ,
 7318	file is an instance of BytesIO class created with an argument : value under the STR0 key of the data dictionary .
 7319	try ,
 7320	call the method Image.open with an argument file , on the result call the verify method
 7321	if Exception exception is caught ,
 7322	call the function six.reraise with 3 arguments : ValidationError , ValidationError created with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to a string STR1 , and third element of the return value of the function sys.exc_info .
 7323	if f has an attribute STR0 and if f.seek is an callable object ,
 7324	call the method f.seek with an argument integer 0 .
 7325	return f .
 7326	derive the class URLField from the base class CharField class .
 7327	substitute URLInput for widget .
 7328	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string STR0 for STR1 .
 7329	default_validators is a list with an element , return value of the validators.URLValidator method .
 7330	define the method to_python with arguments self and data .
 7331	define the function split_url with an argument url .
 7332	try ,
 7333	call the urlsplit with an argument url , convert the result into a list and return it .
 7334	if ValueError exception is caught ,
 7335	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7336	call the method to_python with an argument data from the base class of the class URLField , substitute the result for value .
 7337	if value is true ,
 7338	call the function split_url with an argument value , substitute the result for url_fields .
 7339	if first element of the url_fields is false ,
 7340	first element of url_fields is string STR0 .
 7341	if second element of url_fields is false ,
 7342	substitute third element of url_fields for second element of url_fields .
 7343	third element of url_fields is an empty string .
 7344	call the function urlunsplit with an argument url_fields , use the result as an argument for the call to the function split_url , substitute the result for url_fields .
 7345	call the function urlunsplit with an argument url_fields , substitute the result for value .
 7346	return value .
 7347	define the method clean with arguments self and value .
 7348	call the method self.to_python with an argument value , strip the whitespaces from the result , substitute it for value .
 7349	call the method clean with an argument data from the base class of the class URLField , return the result .
 7350	derive the class BooleanField from the base class Field class .
 7351	substitute CheckboxInput for widget .
 7352	define the method to_python with arguments self and value .
 7353	if value is an instance of six.string_types and value converted to lowercase is not equal to strings STR0 or STR1 ,
 7354	value is boolean False .
 7355	if not ,
 7356	convert value into boolean and substitute it for value .
 7357	call the method to_python with an argument data from the base class of the class BooleanField , return the result .
 7358	define the method validate with arguments self and value .
 7359	if value is false and self.required is true ,
 7360	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7361	define the method _has_changed with arguments self , initial and data .
 7362	if initial equals a string STR0 ,
 7363	initial is boolean False .
 7364	convert initial and data into boolean , if they are not equal return boolean True , if they are return boolean False .
 7365	derive the class NullBooleanField from the base class BooleanField class .
 7366	substitute NullBooleanSelect for widget .
 7367	define the method to_python with arguments self and value .
 7368	if value is boolean True , string STR0 or string STR1 ,
 7369	return boolean True .
 7370	otherwise if value is boolean False , string STR0 or string STR1
 7371	return boolean False ,
 7372	if not ,
 7373	return None .
 7374	define the method validate with arguments self and value .
 7375	do nothing .
 7376	define the method _has_changed with arguments self , initial and data .
 7377	if initial is not None ,
 7378	convert initial into boolean and substitute it for initial .
 7379	if data is not None ,
 7380	convert data into boolean and substitute it for data .
 7381	if initial is not equal to data , return boolean True , if it is return boolean False .
 7382	derive the class ChoiceField from the base class Field class .
 7383	substitute Select for widget .
 7384	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string , STR0 for STR1 .
 7385	define the method __init__ with 9 arguments : self , choices set to an empty tuple , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , unpacked list args and unpacked dictionary kwargs .
 7386	call the __init__ method of the base class of the class ChoiceField , called with 7 arguments : required set to required , widget set to widget , label set to label , initial set to initial , help_text set to help_text , unpacked list args , and unpacked dictionary kwargs .
 7387	substitute choices for self.choices .
 7388	define the method __deepcopy__ with arguments self and memo .
 7389	call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField , substitute the result for result .
 7390	call the method copy.deepcopy with arguments self._choices and memo , substitute the result for result._choices .
 7391	return result .
 7392	define the method _get_choices with an argument self .
 7393	return self._choices .
 7394	define the method _set_choices with arguments self and value .
 7395	self._choices and self.widget.choices are assigned value converted into a list .
 7396	choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function .
 7397	define the method to_python with arguments self and value .
 7398	if value is contained in self.empty_values ,
 7399	return an empty string .
 7400	call the function smart_text with an argument value , return the result .
 7401	define the method validate with arguments self and value .
 7402	call the method validate with an argument value from the base class of the class ChoiceField .
 7403	if value is true and method self.valid_value called with an argument value evaluates to false ,
 7404	raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , code set to an string STR1 and dictionary params with an entry : value for STR2 .
 7405	define the method valid_value with arguments self and value .
 7406	call the function force_text with an argument value , substitute the result for text_value .
 7407	for every k and v in self.choices ,
 7408	if v is an instance of list or tuple type ,
 7409	for every k2 and v2 in v ,
 7410	if value equals k2 or text_value equals return value of the function force_text called with argument k2 ,
 7411	return boolean True .
 7412	if not ,
 7413	if value equals k or text_value equals return value of the function force_text called with argument k ,
 7414	return boolean True .
 7415	return boolean False .
 7416	derive the class TypedChoiceField from the base class ChoiceField class .
 7417	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 7418	if STR0 key of the kwargs dictionary exists remove it and substitute its value for self.coerce ,
 7419	if not , self.coerce is an identity lambda function with an argument val . if STR0 key of the kwargs dictionary exists remove it and substitute its value for self.empty_value , if not , sself.empty_value is an empty string .
 7420	call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class TypedChoiceField .
 7421	define the method _coerce with arguments self and value .
 7422	if value equals self.empty_value or value is contained in self.empty_values ,
 7423	return self.empty_value .
 7424	try ,
 7425	call the function self.coerce with an argument value , substitute it for value .
 7426	if ValueError , TypeError or ValidationError exception is caught ,
 7427	raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , code set to an string STR1 and dictionary params with an entry : value for STR2 .
 7428	return value .
 7429	define the method clean with arguments self and value .
 7430	call the method clean with an argument value from the base class of the class TypedChoiceField , substitute the result for value .
 7431	call the method self._coerce with an argument value , return the result .
 7432	derive the class MultipleChoiceField from the base class ChoiceField class .
 7433	substitute MultipleHiddenInput for hidden_widget .
 7434	substitute SelectMultiple for widget .
 7435	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string , STR0 for STR1 , and return value of the function _ called with an argument string STR2 for STR3 .
 7436	define the method to_python with arguments self and value .
 7437	if value is false ,
 7438	return an empty list .
 7439	otherwise if value is not an instance of list ot tuple type ,
 7440	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7441	for every val in value call the function smart_text with an argument val , return the results in a lit .
 7442	define the method validate with arguments self and value .
 7443	if self.required is true and value is false ,
 7444	raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , and code set to an string STR1 .
 7445	for every val in value ,
 7446	call the method self.valid_value with an argument val , if it evaluates to false ,
 7447	raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , code set to an string STR1 and dictionary params with an entry : val for STR2 .
 7448	define the method _has_changed with arguments self , initial and data .
 7449	if initial is None ,
 7450	initial is an empty list .
 7451	if data is None ,
 7452	data is an empty list .
 7453	if lengths of initial and data are not the same ,
 7454	return boolean True .
 7455	for every value in initial call the function force_text with an argument value , add the results into a set , substitute the resulting set for initial_set .
 7456	for every value in data call the function force_text with an argument value , add the results into a set , substitute the resulting set for data_set .
 7457	if data_set is not equal to initial_set , return boolean True , otherwise return boolean False .
 7458	derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class .
 7459	define the method __init__ with 3 arguments : self unpacked list args and unpacked dictionary kwargs .
 7460	if STR0 key of the kwargs dictionary exists remove it and substitute its value for self.coerce , if not , self.coerce is an identity lambda function with an argument val .
 7461	if STR0 key of the kwargs dictionary exists remove it and substitute its value for self.empty_value , if not , self.empty_value is an empty list .
 7462	call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class TypedMultipleChoiceField .
 7463	define the method _coerce with arguments self and value .
 7464	if value equals self.empty_value or value is contained in self.empty_values ,
 7465	return self.empty_value .
 7466	new_value is an empty list .
 7467	for every choice in value ,
 7468	try ,
 7469	call the method self.coerce with an argument choice , append the result to new_value .
 7470	if ValueError , TypeError or ValidationError exception is caught ,
 7471	raise an ValidationError with 3 arguments : value under the STR0 key of the self.error_messages dictionary , code set to an string STR1 and dictionary params with an entry : choice for STR2 .
 7472	return new_value .
 7473	define the method clean with arguments self and value .
 7474	call the method clean with an argument value from the base class of the class TypedMultipleChoiceField , substitute the result for value .
 7475	call the method self._coerce with an argument value , return the result .
 7476	define the method validate with arguments self and value .
 7477	if value is not equal self.empty_value ,
 7478	call the method validate with an argument value from the base class of the class TypedMultipleChoiceField .
 7479	otherwise if self.required is true ,
 7480	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7481	derive the class ComboField from the base class Field class .
 7482	define the method __init__ with arguments : self , fields set to an empty tuple , unpacked list args and unpacked dictionary kwargs .
 7483	call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class ComboField .
 7484	for every f in fields ,
 7485	f.required is boolean False .
 7486	substitute fields for self.fields .
 7487	define the method clean with arguments self and value .
 7488	call the method clean with an argument value from the base class of the class ComboField .
 7489	for every field in self.fields ,
 7490	call the method field.clean with an argument value , substitute the result for value .
 7491	return value .
 7492	derive the class MultiValueField from the base class Field class .
 7493	default_error_messages is an dictionary with 2 entries : return value of the function _ called with an argument string , STR0 for STR1 and return value of the function _ called with an argument string , STR2 for STR3 .
 7494	define the method __init__ with arguments self , fields set to an empty ilst , unpacked list args and unpacked dictionary kwargs .
 7495	if STR0 key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields , if not , self.require_all_fields is boolean True .
 7496	call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class MultiValueField .
 7497	for every f in fields ,
 7498	if STR0 key of the f.error_messages doesnt exists , assign it the value under the STR1 key of the self.error_messages dictionary .
 7499	if self.require_all_fields is true ,
 7500	f.required is boolean False .
 7501	substitute fields for self.fields .
 7502	define the method __deepcopy__ with arguments self and memo .
 7503	call the method __deepcopy__ with an argument memo , from the base class of the class MultiValueField , substitute the result for result .
 7504	for every x in self.fields call the method x.__deepcopy__ with an argument memo , put the result into a tuple , substitute it for result.fields .
 7505	return result .
 7506	define the method validate with arguments self and value .
 7507	do nothing .
 7508	define the method clean with arguments self and value .
 7509	clean_data is an empty list .
 7510	errors is an empty list .
 7511	if value is false or value is not an instance of list or tuple types ,
 7512	if value is false or for every v in value every v is contained in self.empty_values ,
 7513	if self.required is true ,
 7514	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7515	if not ,
 7516	call the function self.compress with empty list as an argument , return the result .
 7517	if not ,
 7518	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7519	for every i and field in enumerated iterable self.fields ,
 7520	try ,
 7521	substitute i-th element of value for field_value .
 7522	if IndexError exception is caught ,
 7523	field_value is None .
 7524	if field_value is cotained in self.empty_values ,
 7525	if self.require_all_fields is boolean true ,
 7526	if self.required is boolean true ,
 7527	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to STR1 .
 7528	otherwise if field.required is true ,
 7529	get the value under the STR0 key of the field.error_messages dictionary , if it is not contained in errors ,
 7530	get the value under the STR0 key of the field.error_messages dictionary , append it to errors .
 7531	skip this loop iteration ,
 7532	try ,
 7533	call the method field.clean with an argument field_value , append the result to clean_data .
 7534	if ValidationError , renamed to e , is caught ,
 7535	extend errors list with m for every m in e.error_list , only if m is not in errors .
 7536	if errors is true ,
 7537	raise an ValidationError with an argument errors .
 7538	call the method self.compress with an argument clean_data , substitute the result for out .
 7539	call the method self.validate with an argument out .
 7540	call the method self.run_validators with an argument out .
 7541	return out .
 7542	define the method compress with arguments self and data_list .
 7543	raise an NotImplementedError with an argument string STR0 .
 7544	define the method has_changed with arguments self , initial and data .
 7545	if initial is None ,
 7546	for every x in sequence of integer from integer 0 to length of data , append an empty string to a list , substitute the resulting list for initial .
 7547	if not ,
 7548	if initial is not an instance of the list type ,
 7549	call the method self.widget.decompress with an argument initial , substitute the result for initial .
 7550	for every field , initial and data in list of tuples tuple containing elements of self.fields , initial and data , respectively ,
 7551	call the method field._has_changed with 2 arguments : return value of the function field.to_python called with an argument initial ,
 7552	and data , if it evaluates to true , return boolean True .
 7553	return boolean False .
 7554	derive the class FilePathField from the base class ChoiceField class .
 7555	define the method __init__ with 13 arguments : self , path , match set to None , recursive set to boolean False , allow_files set to boolean True , allow_folders set to boolean False , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , unpacked list args , unpacked dictionary kwargs .
 7556	substitute path , match and recursive for self.path , self.match and self.recursive .
 7557	substitute allow_files and allow_folders for self.allow_files and self.allow_folders .
 7558	call the __init__ method of the base class of the class FilePathField , with arguments : choices set to an empty tuple,4 required set to required , widget set to widget , label set to label , initial st to initial , help_text set to help_text , unpacked list args , unpacked dictionary kwargs .
 7559	if self.required is true ,
 7560	self.choices is an empty list .
 7561	if not ,
 7562	self.choices is an list containing an tuple with 2 elements : an empty string and string STR0 .
 7563	if self.match is not None ,
 7564	compile self.match regular expression , substitute it for self.match_re .
 7565	if recursive is true ,
 7566	for root , dirs and files in sorted list of the directory tree starting from the directory self.path ,
 7567	if self.allow_files is true ,
 7568	for every f in files ,
 7569	if self.match is None or call to the method self.match_re.search with an argument f , evaluated to true ,
 7570	join root and f into a file , substitute it for f .
 7571	append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices .
 7572	if self.allow_folders is true ,
 7573	for every f in files ,
 7574	if f equals to string STR0 ,
 7575	skip this loop execution .
 7576	if self.match is None or call to the method self.match_re.search with an argument f , evaluated to true ,
 7577	join root and f in path , substitute the result for f .
 7578	append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices .
 7579	if not ,
 7580	try ,
 7581	for f in sorted list of the files in the self.path directory ,
 7582	if f equals to string STR0 ,
 7583	skip this loop execution .
 7584	join self.path and f in path , substitute the result for full_file .
 7585	if self.allow_files is true and full_file is a file , or if self.allow_folders is true and full_file is an directory , and only if self.match is None or return value of the method self.match_re.search called with an argument f is true .
 7586	append a tuple containing 2 elements : full_file and f to self.choices list .
 7587	if OSError exception is caught ,
 7588	do nothing .
 7589	substitute self.choices for self.widgetchoices .
 7590	derive the class SplitDateTimeField from the base class MultiValueField class .
 7591	substitute SplitDateTimeWidget for widget .
 7592	substitute SplitHiddenDateTimeWidget for hidden_widget .
 7593	default_error_messages is an dictionary with 2 entries : return value of the function _ called with an string STR0 , for STR1 and return value of the function _ called with an string STR2 , for 'invalid_time .
 7594	define the method __init__ with 3 arguments : self , input_date_formats set to None , input_time_formats set to None ,
 7595	and errors set to the result of self.default_error_messages.copy .
 7596	if STR0 is contained in kwargs ,
 7597	get the value under the STR0 key of the kwargs dictionary , update errors dictionary with it .
 7598	get the value under the STR0 key of the kwargs dictionary , substitute it for localize , if the key doesnt exists , substitute the result for localize .
 7599	fields is an tuple containing instances of the class DateField , created with 3 arguments : input_formats set to input_date_formats ,
 7600	error_messages as an dictionary with an entry : value under the STR0 of errors dictionary for STR1 , localize set to localize , and an instance of the class TimeField created with 3 arguments : input_formats set to input_time_formats , error_messages as an dictionary with an entry : value under the STR2 of errors dictionary for STR3 , localize set to localize call the __init__ method with fields , unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class .
 7601	define the method compress with arguments self and data_list .
 7602	if data_list is true ,
 7603	if first element of data_list is contained in self.empty_values ,
 7604	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to string STR1 .
 7605	if second element of data_list is contained in self.empty_values ,
 7606	raise an ValidationError with 2 arguments : value under the STR0 key of the self.error_messages dictionary and code set to string STR1 .
 7607	call the method datetime.datetime.combine with unpacked list data_list , substitute the result for result .
 7608	call the method from_current_timezone with an argument result , return the result .
 7609	return None .
 7610	derive the class IPAddressField from the base class CharField class .
 7611	default_validators is an list containing validators.validate_ipv4_address .
 7612	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 7613	call the function warnings.warn with 2 arguments string STR0 , and RemovedInDjango19Warning .
 7614	call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class .
 7615	define the method to_python with arguments self and value .
 7616	if value is contained in self.empty_values ,
 7617	return an empty string .
 7618	strip whitespaces from both sides of the value , return the result .
 7619	derive the class GenericIPAddressField from the base class CharField class .
 7620	define the method __init__ with 5 arguments : self , protocol set to string STR0 , unpack_ipv4 set to boolean False , unpacked list args , unpacked dictionary kwargs .
 7621	substitute unpack_ipv4 for self.unpack_ipv4 .
 7622	call the method validators.ip_address_validators with arguments protocol , unpack_ipv4 , substitute first element of the result for self.default_validators .
 7623	call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class .
 7624	define the method to_python with arguments self and value .
 7625	if value is contained in self.empty_values ,
 7626	return an empty string .
 7627	strip whitespaces from both sides of the value , substitute it for value .
 7628	if value is true and character STR0 is contained in value ,
 7629	call the function clean_ipv6_address with arguments value and self.unpack_ipv4 , return the result .
 7630	return value .
 7631	derive the class SlugField from the base class CharField class .
 7632	default_validators is an list containing validators.validate_slug .
 7633	define the method clean with arguments self and value .
 7634	call the self.to_python method with an argument value , strip the result of the whitespaces from the sides , substitute the result for value .
 7635	call the clean method wiht value argument from the base class of the SlugField class , return the result .
 7636	from __future__ import unicode_literals into default name space .
 7637	from collections import OrderedDict into default name space .
 7638	import module copy .
 7639	import module datetime .
 7640	import module warnings .
 7641	from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space .
 7642	from django.forms.fields import Field and FileField into default name space .
 7643	from django.forms.utils import flatatt , ErrorDict and ErrorList into default name space .
 7644	from django.forms.widgets import Media , MediaDefiningClass , TextInput and Textarea into default name space .
 7645	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 7646	from django.utils.encoding import smart_text , force_text and python_2_unicode_compatible into default name space .
 7647	from django.utils.html import conditional_escape and format_html into default name space .
 7648	from django.utils.safestring import mark_safe into default name space .
 7649	from django.utils.translation import ugettext as _ into default name space .
 7650	from django.utils import six into default name space .
 7651	__all__is an tuple with 2 elements : strings STR0 and STR1 .
 7652	define the function pretty_name with an argument name .
 7653	if name is false ,
 7654	return an empty string .
 7655	replace all the occurrences of character STR0 in name with a whitespace , capitalize the first letter and return the result .
 7656	define the function get_declared_fields with 3 arguments : bases , attrs and with_base_fields set to boolean True .
 7657	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning , stacklevel set to integer 2 .
 7658	for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs . if obj is an instance of Field , append to a list a tuple with 2 elements : field_name , and poped value under the field_name key of the attrs dictionary , substitute the resulting list for fields .
 7659	sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x .
 7660	if with_base_fields is true ,
 7661	for every base in reversed order of bases ,
 7662	if base has an attribute STR0 .
 7663	call the method six.iteritems with an argument base.base_fields , convert it to a list and append fields to it , substitute the result for fields .
 7664	if not ,
 7665	for every base in reversed order of bases ,
 7666	if base has an STR0 attribute ,
 7667	call the method six.iteritems with an argument base.declared_fields , convert it to a list and append fields to it , substitute the result for fields .
 7668	return an instance of OrderedDict class , created with an argument fields .
 7669	derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass .
 7670	define the method __new__ with 4 arguments : mcs , name , bases and attrs .
 7671	current_fields is an empty list .
 7672	for every key and value in list created out of the elements of the result of the call to the method attrs.items ,
 7673	if value is an instance of Field class ,
 7674	append a tuple with elements key and value to current_fields .
 7675	remove entry at the key key of the attrs dictionary .
 7676	sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x .
 7677	value under the STR0 key of the attrs dictionary is an instance of OrderedDict class , created with an argument current_fields .
 7678	call the method __new__ from the base class of the class DeclarativeFieldsMetaclass , with 4 arguments : mcs , name , bases and attrs .
 7679	declared_fields is an instance of OrderedDict class .
 7680	for every base in new_class.__mro__ in reversed order ,
 7681	if base has an attribute STR0 ,
 7682	update declared_fields dictionary with entry base.declared_fields .
 7683	call the method base.__dict__.items , for every attr and value in the result ,
 7684	if value is None and attr is contained in declared_fields ,
 7685	remove entry at the attr key of the declared_fields dictionary .
 7686	substitute declared_fields for new_class.base_fields .
 7687	substitute declared_fields for new_class.declared_fields .
 7688	return new_class .
 7689	python_2_unicode_compatible decorator ,
 7690	derive the class BaseForm from the base class object .
 7691	define the method __init__ with 4 arguments : self , data set to None , files set to None , auto_id is an string STR0 , prefix is None , initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False .
 7692	if data is not None or files is not None , self.is_bound is boolean True , otherwise it is boolean False .
 7693	if data is true , substitute it for self.data , if not self.data is an empty dictionary .
 7694	if files is true , substitute it for self.files , if not self.files is an empty dictionary .
 7695	substitute auto_id for self.auto_id .
 7696	substitute prefix for self.prefix .
 7697	if initial is true , substitute it for self.initial , if not self.files is an empty dictionary .
 7698	substitute .error_class for self.error_class .
 7699	if label_suffix is not None substitute label_suffix for self.label_suffix , otherwise substitute return value of the function _ called with an argument STR0 for self.label_suffix .
 7700	substitute empty_permitted for self.empty_permitted .
 7701	self._errors is None .
 7702	self._changed_data is None .
 7703	call the function copy.deepcopy with an argument self.base_fields , substitute the result for self.fields .
 7704	define the method __str__ with an argument self .
 7705	call the method self.as_table , return the result .
 7706	define the method __iter__ with an argument self .
 7707	for every name in self.fields ,
 7708	get the value under the name key of the self dictionary , yield it as the return value of the generator .
 7709	define the method __getitem__ with 2 arguments : self and name .
 7710	try ,
 7711	get the value under the name key of the self.fields dictionary , substitute it for field .
 7712	if KeyError exception is caught ,
 7713	raise an KeyError with an argument string STR0 , substitute STR1 with name and self.__class__.__name__ .
 7714	return an instance of BoundField class , created with arguments self , field and name .
 7715	property decorator ,
 7716	define the method errors with an argument self .
 7717	if self._errors is None ,
 7718	call the method self.full_clean .
 7719	return self._errors .
 7720	define the method is_valid with an argument self .
 7721	if self.is_bound is true and self.errors is false , return boolean True , otherwise return boolean False .
 7722	define the method add_prefix with 2 arguments : self and field_name .
 7723	substitute STR0 in string STR1 with self.prefix and field_name and return it , if self.prefix is true , if not return field_name .
 7724	define the method add_initial_prefix with 2 arguments : self and field_name .
 7725	return string STR0 where STR1 is replaced with return value of the self.add_prefix method called with an argument field_name .
 7726	define the method _html_output with 6 arguments : self , normal_row , error_row , row_ender , help_text_html and errors_on_separate_row .
 7727	call the method self.non_field_errors , substitute the result for top_errors .
 7728	output and hidden_fields are both empty lists .
 7729	call the method self.fields.items , for every name and field in return value ,
 7730	html_class_attr is an empty string .
 7731	substitute value under the name key for bf .
 7732	call the method self.error_class with an argument list containing results of the function conditional_escape , called with an argument error , for every error in bf.errors , substitute the result for bf_errors .
 7733	if bf.is_hidden is true ,
 7734	if bf_errors is true ,
 7735	call the function _ with an argument string STR0 , where STR1 is replaced with name , and STR2 is replaced with return value of the force_text function called with an argument e , extend the top_errors with the result .
 7736	call the function six.text_type with an argument bf , append the result to hidden_fields .
 7737	if not ,
 7738	call the method bf.css_classes , substitute the result for css_classes .
 7739	if css_classes is true ,
 7740	replace STR0 from the string STR2 with css_classes , substitute it for html_class_attr .
 7741	if errors_on_separate_row and bf_errors are both true ,
 7742	call the function force_text with an argument bf_errors , format the error_row string with the result , append it to the output .
 7743	if bf.label is true ,
 7744	call the function force_text with an argument bf.label , use the result as an argument for the call to the function conditional_escape , substitute the result label .
 7745	call the function bf.label_tag with an argument label , if the result is true substitute it for label , otherwise label is an empty string .
 7746	if not ,
 7747	label is an empty string .
 7748	if field.help_text is true ,
 7749	call the function force_text with an argument field.help_text , format help_text_html with it , substitute the result for help_text .
 7750	if not ,
 7751	label is an empty string .
 7752	format string normal_row with an dictionary containing 6 entries : return value of the function force_text with an argument bf_errors , for STR0 , return value of the function force_text with an argument label for STR1 , return value of the function six.text_type , with an argument bf , for STR2 , help_text for help_text , html_class_attr for STR3 and bf.html_name for STR4 .
 7753	if top_errors is true ,
 7754	call the function force_text with an argument top_errors , format error_row with it , insert it at the beginning of output .
 7755	if hidden_fields is true ,
 7756	join hidden_fields elements into a string , without separation , substitute the result for str_hidden .
 7757	if output is true ,
 7758	substitute last element of output for last_row .
 7759	if last_row doesnt ends with row_ender ,
 7760	format string normal_row with an dictionary containing 5 entries : an empty string for STR0 , empty string for STR1 , empty string for STR2 , empty string for STR3 and html_class_attr for html_class_attr .
 7761	append last_row to output .
 7762	create list out of last_row elements from the start to the last length of row_ender element , append str_hidden and row_ender to it , substitute the result for last element of output .
 7763	if not ,
 7764	append str_hidden to output .
 7765	join elements of output into a string with newline as separator , use it as an argument for the call to the function mark_safe , return it .
 7766	define the method as_table with an argument self .
 7767	return the result of the method self._html_output , called with 5 arguments : normal_row to a string , STR2 , error_row set to a a string , STR3 , row_ender set to a string STR4 , help_text_html set to a string , STR5 and errors_on_separate_row set to boolean False .
 7768	define the method as_ul with an argument self .
 7769	return the result of the method self._html_output , called with 5 arguments : normal_row to a string , STR1 , error_row set to a a string STR2 , row_ender set to a string STR3 , help_text_html set to a string , STR4 , and errors_on_separate_row set to boolean False .
 7770	define the method as_p with an argument self .
 7771	return the result of the method self._html_output , called with 5 arguments : normal_row to a string , STR1 , error_row set to a a string STR2 , row_ender set to a string STR3 , help_text_html set to a string , < span class= STR0 > % s < /span > ' and errors_on_separate_row set to boolean True .
 7772	define the method non_field_errors with an argument self .
 7773	return the result of the method self.errors.get called with 2 arguments : NON_FIELD_ERRORS and return value of the method , self.error_class called with an argument error_class set to string STR0 .
 7774	define the method _raw_value with 2 arguments : self and fieldname .
 7775	substitute the value under the fieldname key of the self.fields dictionary for field .
 7776	call the method self.add_prefix with an argument fieldname , substitute it for prefix .
 7777	return the result of the method field.widget.value_from_datadict called with 3 arguments : self.data , self.files and prefix .
 7778	define the method add_error with 3 arguments : self , field and errors .
 7779	if error is not an instance of ValidationError ,
 7780	error is an instance of ValidationError created with an argument error .
 7781	if error has an attribute STR0 ,
 7782	if field is not None ,
 7783	raise an TypeError with an argument string STR0 .
 7784	if not ,
 7785	substitute error.error_dict for error .
 7786	if not ,
 7787	error is an dictionary with an initial entry error.error_list for filed if true , or NON_FIELD_ERRORS if not .
 7788	call the method error.items , for every field and error_list in the result ,
 7789	if field is not contained in self.errors ,
 7790	if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields ,
 7791	raise an ValueError with an argument string STR0 , with STR1 replaced with self.__class__.__name__ and field , respectively .
 7792	if field equals NON_FIELD_ERRORS ,
 7793	call the method self.error_class with an argument error_class as an string STR0 , substitute the result for value under the field key of the self._errors dictionary .
 7794	if not ,
 7795	call the method self.error_class , substitute the result for value under the field key of the self._errors dictionary .
 7796	extend the value under the field key of the self._errors dictionary with error_list .
 7797	if field is contained in self.cleaned_data ,
 7798	delete the entry of self.cleaned_data dictionary under the key field .
 7799	define the method has_error with 3 arguments : self , field and code set to None .
 7800	if code is None ,
 7801	if field is contained in self.errors return boolean True , if not , return boolean False .
 7802	if field is contained in self.errors ,
 7803	call the method self.errors.as_data , for every error for value under the filed key of the returned dictionary ,
 7804	if error.code equals code ,
 7805	return boolean True .
 7806	return boolean False .
 7807	define the method full_clean with an argument self .
 7808	self._errors is an instance of ErrorDict .
 7809	if self.is_bound is false ,
 7810	return nothing .
 7811	self.cleaned_data is an empty dictionary .
 7812	if self.empty_permitted is true and call to the method self.has_changed evaluates to false ,
 7813	return nothing .
 7814	call the method self._clean_fields .
 7815	call the method self._clean_form .
 7816	call the method self._post_clean .
 7817	define the method _clean_fields with an argument self .
 7818	call the method self.fields.items , for every name and field in result ,
 7819	call the method field.widget.value_from_datadict with 3 arguments : self.data , self.files and return value of the method , self.add_prefix called with an argument name , substitute the result for value .
 7820	try ,
 7821	if field is an instance of FileField ,
 7822	get the value under the name key of the self.initial dictionary , if it exists substitute it for initial , if not substitute field.initial for initial .
 7823	call the method filed.clean with arguments value and initial , substitute the result for value .
 7824	if not ,
 7825	call the method field.clean with an argument value , substitute the result for value .
 7826	substitute value for the value under the name key of the self.cleaned_data dictionary .
 7827	if self has an attribute STR0 , where STR1 is replaced with name ,
 7828	get STR0 , where STR1 is replaced with name ' attribute of the self object , call the result as an function , substitute the result for value .
 7829	substitute value for the value under the name key of the self.cleaned_data dictionary .
 7830	if ValidationError renamed to e , exception is caught ,
 7831	call the method self.add_error with 2 arguments name and e .
 7832	define the method _clean_form with an argument self .
 7833	try ,
 7834	call the method self.clean , substitute the result for cleaned_data .
 7835	if ValidationError renamed to e , exception is caught ,
 7836	call the method self.add_error with 2 arguments None and e .
 7837	if not ,
 7838	if cleaned_data is not None ,
 7839	substitute cleaned_data for self.cleaned_data .
 7840	define the method _post_clean with an argument self .
 7841	do nothing .
 7842	define the method clean with an argument self .
 7843	return self.cleaned_data .
 7844	define the method has_changed with an argument self .
 7845	convert self.changed_data into boolean , return it .
 7846	property decorator ,
 7847	define the method changed_data with an argument self .
 7848	if self._changed_data is None ,
 7849	self._changed_data is an empty list .
 7850	call the method self.fields.items , for every name and field in the result ,
 7851	call the method self.add_prefix with an argument name , substitute the result for prefixed_name .
 7852	call the method field.widget.value_from_datadict with 3 arguments : self.data , self.files , prefixed_name , substitute the result for data_value .
 7853	if field.show_hidden_initial is false ,
 7854	get the value under the name key of the self.initial dictionary , if it exists substitute it for initial_value , if not substitute field.initial for initial_value .
 7855	if initial_value is an callable object ,
 7856	call the function initial_value , substitute the result for initial_value .
 7857	if not ,
 7858	call the method self.add_initial_prefix with an argument name , substitute the result for initial_prefixed_name .
 7859	call the method field.hidden_widget , substitute the result for field.hidden_widget .
 7860	try ,
 7861	call the method ( hidden_widget.value_from_datadict with 3 arguments : self.data , self.files and initial_prefixed_name , use the result as an argument for the call to the field.to_python method , substitute the result for initial_value .
 7862	if ValidationError exception is caught ,
 7863	append name to self._changed_data .
 7864	skip this loop iteration .
 7865	call the method field._has_changed with 2 arguments : initial_value and data_value , if it evaluates to true ,
 7866	append name to self._changed_data list .
 7867	return self._changed_data .
 7868	property decorator ,
 7869	define the method media with an argument self .
 7870	media is an instance of Media class .
 7871	call the method self.fields.values , for every field in result ,
 7872	append field.widget.media to media , substitute the result for media .
 7873	return media .
 7874	define the method is_multipart with an argument self .
 7875	call the method self.fields.values , for every field in result ,
 7876	if field.widget.needs_multipart_form is true ,
 7877	return boolean True .
 7878	return boolean False .
 7879	define the method hidden_fields with an argument self .
 7880	for field in self if field.is_hidden is true , append field to a list , return the resulting list .
 7881	define the method visible_fields with an argument self .
 7882	for field in self if field.is_hidden is false , append field to a list , return the resulting list .
 7883	derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm .
 7884	decorator python_2_unicode_compatible ,
 7885	derive the class BoundField from the base class object .
 7886	define the method __init__ with 4 arguments : self , form , field and name .
 7887	substitute form for self.form .
 7888	substitute field for self.field .
 7889	substitute name for self.name .
 7890	call the method form.add_prefix with an argument self , substitute the result for self.html_name .
 7891	call the method form.add_initial_prefix with an argument name , substitute the result for self.html_initial_name .
 7892	call the method form.add_initial_prefix with an argument self.auto_id , substitute the result for self.html_initial_id .
 7893	if self.field.label is None ,
 7894	call the method pretty_name with an argument name , substitute the result for self.label .
 7895	if not ,
 7896	substitute self.field.label for self.label .
 7897	if field.help_text is true , substitute field.help_text for self.help_text , if not self.help_text is an empty string .
 7898	define the method __str__ with an argument self .
 7899	if self.field.show_hidden_initial is true ,
 7900	call the method self.as_hidden with an argument only_initial set to boolean True , append the result to the result of the method , self.as_widget , return the resulting string .
 7901	call the method self.as_widget , return the result .
 7902	define the method __iter__ with an argument self .
 7903	get the value under the STR0 key of the self.field.widget.attrs dictionary , if the key exists substitute it for id_ , if not , substitute self.auto_id for id_ .
 7904	if if_is true attrs is an dictionary with initial entry : id_ for STR0 , if not , attrs is an empty dictionary .
 7905	call the method self.field.widget.subwidgets with 3 arguments : self.html_name , return value of the method self.value and attrs , for every subwidget in the result ,
 7906	yield subwidget , as the result of the generator .
 7907	define the method __len__ with an argument self .
 7908	convert result of the method self.__iter__ into a list , return its length .
 7909	define the method __getitem__ with 2 arguments : self and idx .
 7910	convert result of the method self.__iter__ into a list , return element at the idx index .
 7911	property decorator ,
 7912	define the method errors with an argument self .
 7913	get the value under the self.name key of the self.form.errors dictionary , if the key exists , return it , if not evaluate the method self.form.error_class and return the result .
 7914	define the method as_widget with 4 arguments : self , widget set to None , attrs set to None , only_initial set to boolean False .
 7915	if widget is false ,
 7916	substitute self.field.widget for widget .
 7917	if self.field.localize is true ,
 7918	widget.is_localized is boolean True .
 7919	if attrs is false , make it an empty dictionary .
 7920	substitute self.auto_id for auto_id .
 7921	if auto_id is true and STR0 is not contained in attrs and STR1 is not contained in widget.attrs ,
 7922	if only_initial is false ,
 7923	substitute auto_id for value under the STR0 key of the attrs dictionary .
 7924	if not ,
 7925	substitute self.html_initial_id for value under the STR0 key of the attrs dictionary .
 7926	if only_initial is false ,
 7927	substitute self.html_name for name .
 7928	if not ,
 7929	substitute self.html_initial_name for name .
 7930	call the method widget.render with 3 arguments : name , return value of the method self.value , attrs set to attrs , use it as an argument for the call to the function force_text , return the result .
 7931	define the method as_text with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
 7932	call the method self.as_widget with 3 arguments : instance of a class TextInput , attrs and unpacked dictionary kwargs , return the result .
 7933	define the method as_textarea with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
 7934	call the method self.as_widget with 3 arguments : instance of a class Textarea , attrs and unpacked dictionary kwargs , return the result .
 7935	define the method as_hidden with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
 7936	call the method self.as_widget with 3 arguments : return value of the method self.field.hidden_widget , attrs , and unpacked dictionary kwargs , return the result .
 7937	property decorator ,
 7938	define the method data with an argument self .
 7939	call the method self.field.widget.value_from_datadict with 3 arguments : self.form.data , self.form.files , self.html_name , return the result .
 7940	define the method value with an argument self .
 7941	if self.form.is_bound is false ,
 7942	get the value under the self.name key of the self.form.initial dictionary , if it exists , substitute it for data , if not , substitute self.field.initial for data .
 7943	if data is an callable object ,
 7944	call the method data , substitute the result for data .
 7945	if data is an instance of datetime.datetime or datetime.time classes , and supports_microseconds field of self.field.widget is false ,
 7946	call the method data.replace with an argument microsecond set to integer 0 , substitute the result for data .
 7947	if not ,
 7948	call the method self.field.bound_data with 2 arguments : self.data and value under the self.name key of the dictionary , self.form.initial , if it exists , or self.field.initial if not , substitute the result for data .
 7949	call the method self.field.prepare_value with an argument data , return the result .
 7950	define the method label_tag with 4 arguments : self , contents set to None , attrs set to None and label_suffix set to None .
 7951	if contents is false , substitute self.label for contents .
 7952	if label_suffix is None ,
 7953	if self.field.label_suffix is not None , substitute self.field.label_suffix for label_suffix , otherwise substitute self.form.label_suffix for label_suffix .
 7954	if label_suffix and contents are both true and last element of contents is not contained in the result of the function _ , called with an argument string STR0 .
 7955	call the method format_html with 3 arguments : string STR0 , contents and label_suffix , substitute the result for contents .
 7956	substitute self.field.widget for widget .
 7957	get the value under the STR0 key of the widget.attrs dictionary , if the key exists substitute it for id_ , if not , substitute self.auto_id for id_ .
 7958	if id_ is true ,
 7959	call the method widget.id_for_label with an argument id_ , substitute the result for id_for_label .
 7960	if id_for_label is true ,
 7961	unpack a dictionary with an entry id_for_label for STR0 , map it through attrs mapping if attrs is true , and convert it again to the dictionary , if attrs is false , leave it alone , substitute the result for attrs .
 7962	if self.field.required is true and self.form has an attribute STR0 ,
 7963	if attrs is false , make attrs an empty dictionary .
 7964	if STR0 is contained in attrs ,
 7965	append self.form.required_css_class to a whitespace character , append it to the value under the STR0 key of the attrs dictionary .
 7966	if not ,
 7967	substitute self.form.required_css_class for the value under the STR0 key of the attrs dictionary .
 7968	if attrs is true , call the function flatatt with an argument attrs , substitute the result for attrs , if not attrs is an empty string .
 7969	call the function format_html with 3 arguments string STR0 , attrs and contents , substitute the result for contents .
 7970	if not ,
 7971	call the function conditional_escape with an argument contents , substitute the result for contents .
 7972	call the function mark_safe with an argument contents , return the result .
 7973	define the method css_classes with 2 arguments : self and extra_classes set to None .
 7974	if extra_classes has an attribute STR0 ,
 7975	split extra_classes into words , by whitespaces , substitute the result for extra_classes .
 7976	if extra_classes is not empty put its elements into a set , substitute it for extra_classes , if not extra_classes is an empty set .
 7977	if self.errors is true and self.form has an attribute STR0 ,
 7978	add self.form.error_css_class to extra_classes set .
 7979	if self.field.required is true and self.form has an attribute STR0 ,
 7980	add self.form.required_css_class to extra_classes set .
 7981	join elements of extra_classes into a string separated by whitespaces , return it .
 7982	property decorator ,
 7983	define the method is_hidden with an argument self .
 7984	return self.field.widget.is_hidden ,
 7985	property decorator ,
 7986	define the method auto_id with an argument self .
 7987	substitute self.form.auto_id for auto_id .
 7988	if auto_id is true and STR0 is contained in result of the call to the function smart_text with an argument auto_id ,
 7989	call the function smart_text with an argument auto_id , format the result with self.html_name , return it .
 7990	otherwise if auto_id is true ,
 7991	return self.html_name .
 7992	return an empty string .
 7993	property decorator ,
 7994	define the method id_for_label with an argument self .
 7995	substitute self.field.widget for widget .
 7996	get the value under the STR0 key of the widget.attrs dictionary , if the key exists substitute it for id_ , if not , substitute self.auto_id for id_ .
 7997	call the method widget.id_for_label with an argument id_ , return the result .
 7998	from __future__ import unicode_literals into default name space .
 7999	from django.core.exceptions import ValidationError into default name space .
 8000	from django.forms import Form into default name space .
 8001	from django.forms.fields import IntegerField and BooleanField into default name space .
 8002	from django.forms.utils import ErrorList into default name space .
 8003	from django.forms.widgets import HiddenInput into default name space .
 8004	from django.utils.encoding import python_2_unicode_compatible into default name space .
 8005	from django.utils.functional import cached_property into default name space .
 8006	from django.utils.safestring import mark_safe into default name space .
 8007	from django.utils import six into default name space .
 8008	from django.utils.six.moves import xrange into default name space .
 8009	from django.utils.translation import ungettext and ugettext as _ into default name space .
 8010	__all__ is a tuple containing strings STR0 , STR1 and STR2 .
 8011	TOTAL_FORM_COUNT is a string STR0 .
 8012	INITIAL_FORM_COUNT is a string STR0 .
 8013	MIN_NUM_FORM_COUNT is a string STR0 .
 8014	MAX_NUM_FORM_COUNT is a string STR0 .
 8015	ORDERING_FIELD_NAME is a string STR0 .
 8016	DELETION_FIELD_NAME is a string STR0 .
 8017	DEFAULT_MIN_NUM is an integer 0 .
 8018	DEFAULT_MAX_NUM is an integer 1000 .
 8019	derive the class ManagementForm from the Form base class .
 8020	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 8021	value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class , created with an argument widget set to HiddenInput .
 8022	value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class , created with an argument widget set to HiddenInput .
 8023	value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class , created with 2 arguments : required as boolean False and widget set to HiddenInput .
 8024	value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class , created with 2 arguments : required as boolean False and widget set to HiddenInput .
 8025	call the method __init__ from the base class of the class ManagementForm , called with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
 8026	python_2_unicode_compatible decorator ,
 8027	derive the class BaseFormSet from the object base class .
 8028	define the method __init__ with 7 arguments : self , data set to None , files set to None , auto_id set to an string STR0 ,
 8029	if data is not None or files is not None , self.is_bound is boolean True , otherwise it is boolean False .
 8030	if prefix is true , substitute it for self.prefix , otherwise call the method self.get_default_prefix , and substitute the result for self.prefix .
 8031	substitute auto_id for self.auto_id .
 8032	if data is true , substitute it for self.data , otherwise self.data is an empty dictionary .
 8033	if data is true , substitute it for self.files , otherwise self.files is an empty dictionary .
 8034	substitute initial_id for self.auto_id .
 8035	substitute error_class for self.error_class .
 8036	self._errors is None .
 8037	self._non_form_errors is None .
 8038	define the method __str__ with an argument self .
 8039	call the method self.as_table , return the result .
 8040	define the method __iter__ with an argument self .
 8041	convert self.forms into an iterable , return it .
 8042	define the method __getitem__ with an argument self .
 8043	return self.forms element at the index index .
 8044	define the method __len__ with an argument self .
 8045	return the length of self.forms .
 8046	define the method __bool__ with an argument self .
 8047	return boolean True .
 8048	define the method __nonzero__ with an argument self .
 8049	get the type of self object , call the __bool__ method on the result with an argument self , return the result .
 8050	property decorator ,
 8051	define the method management_form with an argument self .
 8052	if self.is_bound is true ,
 8053	form is an instance of ManagementForm class , created with 3 arguments : self.data , auto_id as self.auto_id and prefix as self.prefix .
 8054	call the form.is_valid method , if it evaluates to false ,
 8055	raise ValidationError with 2 arguments : return value of the function _ called with an argument string , STR0 and code as a string STR1 .
 8056	if not ,
 8057	form is an instance of ManagementForm class , created with 3 arguments : auto_id as self.auto_id , prefix as self.prefix , and initial as a dictionary with 4 entries : result of self.total_form_count method for TOTAL_FORM_COUNT , result of self.initial_form_count method for INITIAL_FORM_COUNT , self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT .
 8058	return form .
 8059	define the method total_form_count with an argument self .
 8060	if self.is_bound is true ,
 8061	get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary , and self.absolute_max , return the result .
 8062	if not ,
 8063	call the method self.initial_form_count , return the result initial_forms .
 8064	get the element with maximal value between initial_forms and self.min_num , add self.extra to it , substitute the result for total_forms .
 8065	if initial_forms is grater than self.max_num is grater or equal to integer 0 ,
 8066	substitute initial_forms for total_forms .
 8067	otherwise if total_forms is grater than self.max_num is grater or equal to integer 0 ,
 8068	substitute self.max_num for total_forms .
 8069	return total_forms .
 8070	define the method initial_form_count with an argument self .
 8071	if self.is_bound is true ,
 8072	return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary .
 8073	if not ,
 8074	if self.initial is true , substitute the length of self.initial for initial_forms , if not , initial_forms is integer 0 .
 8075	return initial_forms .
 8076	cached_property decorator ,
 8077	define the method forms with an argument self .
 8078	for every i in sequence of integers from 0 to result of the method self.total_form_count , call the method self._construct_form , with an argument i , append the result to a list , substitute the resulting list for forms .
 8079	return forms .
 8080	define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs .
 8081	defaults is an dictionary with 3 initial entries : self.auto_id for STR0 , result of the call to the method self.add_prefix , with an argument i , for STR1 and self.error_class for STR2 .
 8082	if self.is_bound is true ,
 8083	substitute self.data for value under the STR0 key of the defaults dictionary .
 8084	substitute self.files for value under the STR0 key of the defaults dictionary .
 8085	if self.initial is true and STR0 key is not contained in kwargs ,
 8086	try ,
 8087	substitute i-th element of self.initial for value under the STR0 key of the defaults dictionary .
 8088	if IndexError exception is caught ,
 8089	do nothing .
 8090	if i is greater than , or equal to the result of the call to the method self.initial_form_count ,
 8091	and i is greater than or equal to self.min_num , value under the STR0 key of the defaults dictionary is boolean True .
 8092	update defaults dictionary with kwargs .
 8093	call the method self.form with unpacked dictionary defaults as an argument , substitute it for form .
 8094	call the method self.add_fields with arguments form and i ) .
 8095	return form .
 8096	property decorator ,
 8097	define the method initial_forms with an argument self .
 8098	call the self.initial_form_count method , return the sublist of self.forms from the beginning to the previous result as the end index .
 8099	property decorator ,
 8100	define the method extra_forms with an argument self .
 8101	call the self.initial_form_count method , return the sublist of self.forms , using previous result as start index to the end .
 8102	property decorator ,
 8103	define the method empty_form with an argument self .
 8104	call the function empty_form with 3 arguments : auto_id as self.auto_id , prefix set to the return value of the self.add_prefix method , called with string STR0 as an argument and empty_permitted as boolean True , substitute the result for form .
 8105	call the method self.add_fields with arguments form and None .
 8106	return form .
 8107	property decorator ,
 8108	define the method cleaned_data with an argument self .
 8109	call the method self.is_valid , if it evaluates to false ,
 8110	raise an AttributeError exception with an argument string : STR0 , where STR1 is replaced with self.__class__.__name__ .
 8111	for form in self.forms append form.cleaned_data to a list , return the resulting list .
 8112	property decorator ,
 8113	define the method deleted_forms with an argument self .
 8114	if call to the method self.is_valid , evaluates to false or self.can_delete is boolean false ,
 8115	return an empty list .
 8116	if self doesnt have an STR0 attribute ,
 8117	self._deleted_form_indexes is an empty list .
 8118	call the method self.total_form_count , for every i in sequence of integers , from 0 to the previous result ,
 8119	substitute i-th element of self.forms for form .
 8120	if i is greater than or equal to the result of the method self.initial_form_count ,
 8121	and call to the method form.has_changed evaluates to false , skip this loop iteration ,
 8122	call the method self._should_delete_form with an argument form , if it evaluates to true ,
 8123	call the method self._deleted_form_indexes.append with an argument i .
 8124	for i in self._deleted_form_indexes append i-th element of self.forms into a list , return the resulting list .
 8125	property decorator ,
 8126	define the method ordered_forms with an argument self .
 8127	if call to the self.is_valid method evaluates to false or self.can_order is false ,
 8128	raise an AttributeError exception with an argument string : STR0 , where STR1 is replaced with self.__class__.__name__ .
 8129	if self doesnt have an STR0 attribute ,
 8130	self._ordering is an empty list .
 8131	for every i in sequence of integers , from 0 to the result of the method self.total_form_count ,
 8132	substitute i-th element of self.forms for form .
 8133	if i is greater than or equal to the result of the method self.initial_form_count ,
 8134	and call to the method form.has_changed evaluates to false , skip this loop iteration ,
 8135	if self.can_delete is true and call to the method self._should_delete_form with an argument form , evaluates to true ,
 8136	skip this loop iteration ,
 8137	append tuple with 2 elements : i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering .
 8138	define the function compare_ordering_key with an argument k .
 8139	if second element of k is None ,
 8140	return a tuple with 2 elements : integers 1 and 0 .
 8141	return a tuple with 2 elements : integer 0 and second element of k .
 8142	call the method self._ordering.sort with an argument key as compare_ordering_key .
 8143	for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary , return resulting list .
 8144	classmethod decorator ,
 8145	define the method get_default_prefix with an argument cls .
 8146	return string STR0 .
 8147	define the method non_form_errors with an argument self .
 8148	if self._non_form_errors is None ,
 8149	call the method self.full_clean .
 8150	return self._non_form_errors .
 8151	property decorator ,
 8152	define the method errors with an argument self .
 8153	if self._errors is None ,
 8154	call the method self.full_clean .
 8155	return self._errors .
 8156	define the method total_error_count with an argument self .
 8157	for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors , return the result .
 8158	define the method _should_delete_form with an argument self .
 8159	get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary , if it exists return it , if not , return boolean False .
 8160	define the method is_valid with an argument self .
 8161	if self.is_bound is false ,
 8162	return boolean False .
 8163	forms_valid is True .
 8164	call self.errors .
 8165	for every i in sequence of integers , from 0 to the result of the method self.total_form_count ,
 8166	substitute i-th element of self.forms for form .
 8167	if self.can_delete is true ,
 8168	call the method self._should_delete_form with an argument , if it evaluates to true ,
 8169	skip this loop iteration ,
 8170	call the method form.is_valid , perform bitwise and with the result and forms_valid as operands , substitute the result for forms_valid .
 8171	if forms_valid is true and call to the method self.non_form_errors , evaluates to false , return boolean True , otherwise return False .
 8172	define the method full_clean with an argument self .
 8173	self._errors is an empty list .
 8174	call the method self.error_class , substitute the result for self._non_form_errors .
 8175	if self.is_bound is false ,
 8176	return nothing .
 8177	for every i in sequence of integers , from 0 to the result of the method self.total_form_count ,
 8178	substitute i-th element of self.forms for form .
 8179	append form.errors to self._errors .
 8180	try ,
 8181	if self.validate_max is true , and length of self.deleted_forms subtracted from the return value of the method self.total_form_count , is greater than self.max_num , or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary , is grater than self.absolute_max ,
 8182	raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments : strings STR0 , STR1 and self.max_num , where STR2 is replaced with self.max_num , and code as a string STR3 .
 8183	if self.validate_min is true , and length of self.deleted_forms subtracted from the return value of the method self.total_form_count , is smaller than self.min_num ,
 8184	raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments : strings STR0 , STR1 and self.min_num , where STR2 is replaced with self.min_num , and code as a string STR3 .
 8185	call the method self.clean .
 8186	if ValidationError , renamed to e , exception is caught ,
 8187	call the method self.error_class with an argument e.error_list , substitute the result for self._non_form_errors .
 8188	define the method clean with an argument self .
 8189	do nothing .
 8190	define the method has_changed with an argument self .
 8191	for every form in self call the method form.has_changed if any of the results evaluates to true , return boolean True , if not return boolean False .
 8192	define the method add_fields with 3 arguments : self , form and index .
 8193	if self.can_order is true ,
 8194	if index is not None and index is smaller than return value of the method self.initial_form_count ,
 8195	value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class , created with 3 arguments : label set to return value of the function _ called with an string STR0 , initial set to index incremented by 1 , and required as boolean False .
 8196	if not ,
 8197	value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class , created with 2 arguments : label set to return value of the function _ called with an string STR0 and required as boolean False .
 8198	if self.can_delete is true ,
 8199	value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class , created with 2 arguments : label set to return value of the function _ called with an string STR0 and required as boolean False .
 8200	define the method add_prefix with an argument self .
 8201	replace STR0 in sting STR1 with self.prefix and index , return the result .
 8202	define the method is_multipart with an argument self .
 8203	if self.forms is true ,
 8204	call the method is_multipart on the first element of self.forms , return it .
 8205	if not ,
 8206	call the method self.empty_form.is_multipart , return the result
 8207	property decorator ,
 8208	define the method media with an argument self .
 8209	if self.forms is true ,
 8210	return the media field of the first element of self.forms .
 8211	if not ,
 8212	return self.empty_form.media .
 8213	define the method as_table with an argument self .
 8214	for every form in self call the form.as_table method , join the results in a string , separated by an empty string .
 8215	join return value of the function six.text_type called with an argument self.management_form and forms into a string , separated by newline , use it as an argument for the call to the function mark_safe , return the result .
 8216	define the method as_p with an argument self .
 8217	for every form in self call the form.as_p method , join the results in a string , separated by an empty string .
 8218	join return value of the function six.text_type called with an argument self.management_form and forms into a string , separated by newline , use it as an argument for the call to the function mark_safe , return the result .
 8219	define the method as_ul with an argument self .
 8220	for every form in self call the form.as_ul method , join the results in a string , separated by an empty string .
 8221	join return value of the function six.text_type called with an argument self.management_form and forms into a string , separated by newline , use it as an argument for the call to the function mark_safe , return the result .
 8222	define the function formset_factory with 9 arguments : form , formset set to BaseFormSet , extra set to integer 1 ,
 8223	if min_num is None ,
 8224	substitute DEFAULT_MIN_NUM for min_num ,
 8225	if max_num is None ,
 8226	substitute DEFAULT_MAX_NUM for max_num ,
 8227	sum max_num and DEFAULT_MAX_NUM , substitute the result for absolute_max .
 8228	attrs is an dictionary with 9 initial entries : form for STR0 , extra for STR1 , can_order for STR2 , can_delete for STR3 , min_num for STR4 , max_num for STR5 , absolute_max for STR6 , validate_min for STR7 for validate_max for STR8 .
 8229	create a class class which name is generated by converting STR0 into a string and appending it to form.__name__ , is derived from the formset base class and with fields contained in attrs , return an instance of the obtained class .
 8230	define the function all_valid with an argument formsets .
 8231	valid is boolean True .
 8232	for every formset in formsets ,
 8233	call the function formset.is_valid , if it evaluates to false ,
 8234	valid is boolean False .
 8235	return valid .
 8236	from __future__ import unicode_literals into default name space .
 8237	from collections import OrderedDict into default name space .
 8238	import module warnings .
 8239	django.core.exceptions import ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS and FieldError into default namespace .
 8240	from django.forms.fields import Field and ChoiceField into default name space .
 8241	from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space .
 8242	from django.forms.formsets import BaseFormSet and formset_factory into default name space .
 8243	from django.forms.utils import ErrorList into default name space .
 8244	from django.forms.widgets import SelectMultiple , HiddenInput , MultipleHiddenInput into default namespace .
 8245	from django.utils import six into default name space .
 8246	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 8247	from django.utils.encoding import smart_text and force_text into default name space .
 8248	from django.utils.text import get_text_list and capfirst into default name space .
 8249	from django.utils.translation import ugettext_lazy as _ and ugettext into default name space .
 8250	__all__ is a tuple containing strings : STR0 , STR1 , STR2 , STR3 , STR4 ,
 8251	STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , and STR6 . ALL_FIELDS is a string STR7 .
 8252	define the function construct_instance with 4 arguments : form , instance , fields set to None and exclude set to None .
 8253	from django.db import models into default namespace .
 8254	substitute instance._meta for opts .
 8255	substitute form.cleaned_data for cleaned_data .
 8256	file_field_list is an empty list .
 8257	for every f in opts.fields ,
 8258	if f.editable is true and f is an instance of models.AutoField , or f.name is not contained in cleaned_data ,
 8259	skip this loop iteration .
 8260	if fields is not None and f.name is not contained in fields ,
 8261	skip this loop iteration .
 8262	if exclude is true and f.name is contained in exclude ,
 8263	skip this loop iteration .
 8264	if f is an instance of models.FileField ,
 8265	append f to file_field_list .
 8266	if not ,
 8267	call the method f.save_form_data with 2 arguments : instance and value under the f.name key of cleaned_data dictionary .
 8268	for every f in file_field_list ,
 8269	call the method f.save_form_data with 2 arguments : instance and value under the f.name key of cleaned_data dictionary .
 8270	return instance .
 8271	define the function save_instance with 7 arguments : form , instance , fields set to None , fail_message as string STR0 ,
 8272	if construct is true ,
 8273	call the function construct_instance with 4 arguments form , instance , fields , exclude and substitute the result for instance .
 8274	substitute instance._meta for opts .
 8275	if form.errors is true ,
 8276	raise an ValueError with an argument string STR0 , where STR1 is replaced with opts.object_name and fail_message , respectively .
 8277	define the function save_m2m .
 8278	substitute form.cleaned_data for cleaned_data .
 8279	append opts.virtual_fields to opts.many_to_many , for every f in the result ,
 8280	if f doesnt has an STR0 attribute ,
 8281	skip this loop iteration .
 8282	if fields is true and f.name is not contained in fields ,
 8283	skip this loop iteration .
 8284	if exclude is true and f.name is contained in exclude ,
 8285	skip this loop iteration .
 8286	if f.name is contained in cleaned_data ,
 8287	call the method f.save_form_data with 2 arguments : instance and value under the f.name key of cleaned_data dictionary .
 8288	if commit is true ,
 8289	call the method instance.save .
 8290	call the function save_m2m .
 8291	if not ,
 8292	substitute save_m2m for form.save_m2m .
 8293	return instance .
 8294	define the function model_to_dict with 3 arguments : instance , fields set to None and exclude set None .
 8295	from django.db.models.fields.related import ManyToManyField .
 8296	substitute instance._meta for opts .
 8297	data is an empty dictionary .
 8298	concatenate opts.concrete_fields , opts.virtual_fields and opts.many_to_many , for every f in the result ,
 8299	get STR0 attribute from object f , if it doesnt exists or its true ,
 8300	skip this loop iteration .
 8301	if fields is true and f.name is not contained in fields ,
 8302	skip this loop iteration .
 8303	if exclude is true and f.name is contained in exclude ,
 8304	skip this loop iteration .
 8305	if f is an instance of ManyToManyField ,
 8306	if instance.pk is None ,
 8307	value under f.name key of the dta dictionary is an empty list .
 8308	if not ,
 8309	call the method f.value_from_object with an argument instance , substitute the result for qs .
 8310	if qs._result_cache is not None ,
 8311	for every item in qu append item.pk to a list , substitute resulting list for value under f.name key of the data dictionary .
 8312	if not ,
 8313	call the method qs.values_list with 2 arguments : string STR0 and flat set to boolean True , put the results in a list , substitute the result for value under the f.name key of data dictionary .
 8314	if not ,
 8315	call the method f.value_from_object with an argument instance , substitute the result for value under the f.name key of the data dictionary .
 8316	return data .
 8317	define the function fields_for_model with 9 arguments : model , fields set to None , exclude set to None , widgets set to None ,
 8318	field_list is an empty list .
 8319	ignored is an empty list .
 8320	substitute model._meta for opts .
 8321	from django.db.models.fields import Field as ModelField .
 8322	if f is an instance of ModelFiled , for every f in opts.virtual_fields , append f to a list , substitute the resulting list for sortable_virtual_fields .
 8323	concatenate opts.concrete_fields , sortable_virtual_fields and opts.many_to_many , for every f in sorted result ,
 8324	get STR0 attribute from object f , if it doesnt exists or its true ,
 8325	skip this loop iteration .
 8326	if fields is not None and f.name is not contained in fields ,
 8327	skip this loop iteration .
 8328	if exclude is true and f.name is contained in exclude ,
 8329	skip this loop iteration .
 8330	kwargs is an empty dictionary ,
 8331	if widgets is true and f.name is contained in widgets ,
 8332	substitute value under the f.name key of the widgets dictionary for value under the STR0 key of kwargs dictionary .
 8333	if localized_fields equals ALL_FIELDS , or if localized_fields is true and f.name is contained in localized_fields ,
 8334	value under STR0 key of kwargs dictionary is boolean True .
 8335	if labels is true and f.name is contained in labels ,
 8336	substitute value under the f.name key of the labels dictionary for value under the STR0 key of kwargs dictionary .
 8337	if help_texts is true and f.name is contained in help_texts ,
 8338	substitute value under the f.name key of the help_texts dictionary for value under the STR0 key of kwargs dictionary .
 8339	if error_messages is true and f.name is contained in error_messages ,
 8340	substitute value under the f.name key of the error_messages dictionary for value under the STR0 key of kwargs dictionary .
 8341	if formfield_callback is None ,
 8342	call the method f.formfield with an argument , unpacked dictionary kwargs , substitute the result for formfield .
 8343	otherwise if formfield_callback is not callable object ,
 8344	raise an TypeError with an string STR0 .
 8345	if not ,
 8346	call the method formfield_callback with 2 arguments : f and unpacked dictionary kwargs , substitute the result for formfield .
 8347	if formfield is true ,
 8348	append a tuple with 2 elements : f.name and formfield to field_list .
 8349	if not ,
 8350	append f.name to ignored list .
 8351	field_dict is an instance of OrderedDict class , created with an argument field_list .
 8352	if fields is true ,
 8353	for every f in fields , if exclude is false , or if exclude is true and f is not contained in exclude , and only if f is not in ignored , append to list , a tuple with 2 elements : f and value under the f key of field_dict dictionary , use the resulting list as an argument , for the creation of the instance of OrderedDict class , substitute it for field_dict .
 8354	return field_dict .
 8355	derive the class ModelFormOptions from object base class .
 8356	define the method __init__ with arguments : self and options set to None .
 8357	get STR0 attribute from the options object , if it exists substitute it for self.model , if not self.model is None .
 8358	get STR0 attribute from the options object , if it exists substitute it for self.fields , if not self.fields is None .
 8359	get STR0 attribute from the options object , if it exists substitute it for self.exclude , if not self.exclude is None .
 8360	get STR0 attribute from the options object , if it exists substitute it for self.widgets , if not self.widgets is None .
 8361	get STR0 attribute from the options object , if it exists substitute it for self.localized_fields , if not self.localized_fields is None .
 8362	get STR0 attribute from the options object , if it exists substitute it for self.labels , if not self.labels is None .
 8363	get STR0 attribute from the options object , if it exists substitute it for self.help_texts , if not self.help_texts is None .
 8364	get STR0 attribute from the options object , if it exists substitute it for self.error_messages , if not self.error_messages is None .
 8365	derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class .
 8366	define the method __new__ with 4 arguments : mcs , name , bases and attrs .
 8367	remove entry under the STR0 key of the attrs dictionary , if it exists substitute if for formfield_callback , if not formfield_callback is None .
 8368	call the method __new__ from the base class of the class ModelFormMetaclass , with 4 arguments : mcs , name , bases and attrs , substitute the result for new_class .
 8369	if bases equals a tuple with an element : class BaseModelForm .
 8370	return new_class .
 8371	instantiate class ModelFormOptions with argument : attribute STR0 of the new_class object . if it exists or None , if not , assign the result to opts and new_class._meta .
 8372	for every opt in list containing 3 elements : strings STR0 , STR1 and STR2 ,
 8373	get opt attribute of the opts object , substitute it for value .
 8374	if value is an instance of six.string_types and value is not equal to ALL_FIELDS ,
 8375	msg is a string STR0 , where STR1 is replaced , with new_class.__name__ , STR2 is replaced with opt and STR3 is replaced with value .
 8376	raise an TypeError exception with an argument msg .
 8377	if opts.model is true ,
 8378	if opts.fields is None and opts.exclude is None ,
 8379	raise an ImproperlyConfigured exception with an argument string STR0or the STR1 attribute is prohibited ; form % s needs updating . `` , where STR2 is replaced with name .
 8380	if opts.fields equals ALL_FIELDS ,
 8381	opts.fields is None .
 8382	call the function fields_for_model with 9 arguments : opts.model , opts.fields , opts.exclude , opts.widgets , formfield_callback , opts.localized_fields , opts.labels , opts.help_texts and opts.error_messages , substitute the result for fields .
 8383	for every k and v in return value of the function six.iteritems called with an argument fields , if n is false , append it to a list , substitute the resulting list for none_model_fields .
 8384	missing_fields is difference between set containing none_model_fields and set containing result of the method , new_class.declared_fields.keys .
 8385	if missing_fields is true ,
 8386	message is an string STR0 .
 8387	join missing_fields into a string separated by string STR0 , use it and opts.model.__name__ to format message , substitute the result for message .
 8388	raise an FieldError exception with an argument message .
 8389	update fields dictionary with new_class.declared_fields .
 8390	if not ,
 8391	substitute new_class.declared_fields for fields .
 8392	substitute fields for new_class.base_fields .
 8393	return new_class .
 8394	derive the class BaseModelForm from the BaseForm base class .
 8395	define the method __init__ with 10 arguments : self , data set to None , files set to None , auto_id set to string STR0 , prefix set to None , initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False , instance set to None .
 8396	substitute self._meta for opts .
 8397	if opts.model is None .
 8398	raise an ValueError with an argument string STR0 .
 8399	if instance is None ,
 8400	call the method opts.model , substitute the result for self.instance .
 8401	object_data is an empty dictionary .
 8402	if not ,
 8403	substitute instance for self.instance .
 8404	call the method model_to_dict with 3 arguments : instance , opts.fields , opts.exclude and substitute the result for object_data .
 8405	if initial is not None ,
 8406	update object_data dictionary with initial .
 8407	self._validate_unique is boolean False .
 8408	call the method __init__ from the base class of the class BaseModelForm , with 8 arguments : data , files , auto_id , prefix , object_data , error_class , label_suffix and empty_permitted .
 8409	for every field_name in self.fields ,
 8410	substitute value under the field_name key of the self.fields dictionary for formfield .
 8411	if formfield has an attribute STR0 ,
 8412	substitute formfield.limit_choices_to for limit_choices_to .
 8413	if limit_choices_to is not None ,
 8414	if limit_choices_to is callable object ,
 8415	call the function limit_choices_to , substitute the result for limit_choices_to .
 8416	call the method formfield.queryset.complex_filter with an argument limit_choices_to , substitute the result for formfield.queryset .
 8417	define the method _get_validation_exclusions with an argument self .
 8418	exclude is an empty list .
 8419	for every f in self.instance._meta.fields ,
 8420	substitute f.name for field .
 8421	if field is not contained in self.fields ,
 8422	append f.name to exclude .
 8423	otherwise if self._meta.fields is true and field is not contained in self._meta.fields ,
 8424	append f.name to exclude .
 8425	otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude ,
 8426	append f.name to exclude .
 8427	otherwise if field is contained in the result of the call to the method self._errors.keys ,
 8428	append f.name to exclude .
 8429	if not ,
 8430	substitute value under the field key of the self.fields dictionary for form_field .
 8431	get the value under the field key of the self.cleaned_data dictionary , if it exists substitute it for field_value , if not field_value is None .
 8432	if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values ,
 8433	append f.name to exclude .
 8434	return exclude .
 8435	define the method clean with an argument self .
 8436	self._validate_unique is boolean True .
 8437	return self.cleaned_data .
 8438	define the method _update_errors with 2 arguments : self and errors .
 8439	substitute self._meta for opts .
 8440	call the function errors.error_dict.items , for every field and messages in the result ,
 8441	if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages ,
 8442	substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages .
 8443	otherwise if field is contained in self.fields ,
 8444	get the value under the field key of self.fields dictionary , substitute error_messages field of the result for error_messages .
 8445	if not ,
 8446	skip this loop iteration .
 8447	for every message in messages ,
 8448	if message is an instance of ValidationError class and message.code is contained in error_messages ,
 8449	substitute error_messages under the message.code key of error_messages dictionary for message.message .
 8450	call the method self.add_error with 2 arguments : None and errors .
 8451	define the method _post_clean with an argument self .
 8452	substitute self._meta for opts .
 8453	call the method self._get_validation_exclusions , substitute the result for exclude .
 8454	convert exclude elements to list , substitute it for construct_instance_exclude .
 8455	call the method self.fields.items , for every name and field in result ,
 8456	if field is an instance of InlineForeignKeyField class ,
 8457	if value under the name key of self.cleaned_data dictionary is not None ,
 8458	and field _state.adding of value under the name key of self.cleaned_data dictionary is true , append name to construct_instance_exclude list .
 8459	append name to exclude .
 8460	call the function construct_instance with 4 arguments : self , self.instance , opts.fields and construct_instance_exclude , substitute the result for self.instance .
 8461	try ,
 8462	call the method self.instance.full_clean with 2 arguments : exclude set to exclude and validate_unique set to boolean False .
 8463	if ValidationError , renamed to e , exception is caught ,
 8464	call the method self._update_errors with an argument e .
 8465	if self._validate_unique is true ,
 8466	call the method self.validate_unique .
 8467	define the method validate_unique with an argument self .
 8468	call the method self._get_validation_exclusions , substitute the result for exclude .
 8469	try ,
 8470	call the method self.instance.validate_unique with an argument exclude set to exclude .
 8471	if ValidationError , renamed to e , exception is caught ,
 8472	call the method self._update_errors with an argument e .
 8473	define the method save with 2 arguments : self and commit set to boolean True .
 8474	if self.instance.pk is None ,
 8475	fail_message is a string STR0 .
 8476	if not ,
 8477	fail_message is a string changed ' .
 8478	call the function with 7 arguments : self , self.instance , self._meta.fields , fail_message , commit , self._meta.exclude , and construct as boolean False , return the result .
 8479	save.alters_data is boolean True .
 8480	derive the class ModelForm from the base class in the return value of the method six.with_metaclass , called with 2 arguments : ModelFormMetaclass and BaseModelForm .
 8481	do nothing .
 8482	define the function modelform_factory with 10 arguments : model , form set to ModelForm , fields set to None , exclude set to None ,
 8483	attrs is a dictionary with model for STR0 .
 8484	if fields is not None ,
 8485	substitute fields for value under the STR0 key of attrs dictionary .
 8486	if exclude is not None ,
 8487	substitute exclude for value under the STR0 key of attrs dictionary .
 8488	if widgets is not None ,
 8489	substitute widgets for value under the STR0 key of attrs dictionary .
 8490	if localized_fields is not None ,
 8491	substitute localized_fields for value under the STR0 key of attrs dictionary .
 8492	if labels is not None ,
 8493	substitute labels for value under the STR0 key of attrs dictionary .
 8494	if help_texts is not None ,
 8495	substitute help_texts for value under the STR0 key of attrs dictionary .
 8496	if error_messages is not None ,
 8497	substitute error_messages for value under the STR0 key of attrs dictionary .
 8498	parent is a tuple with 1 element , object .
 8499	if form has an attribute STR0 ,
 8500	parent is a tuple with 2 arguments : form.Meta and object .
 8501	Meta is an instance of class with name STR0 , parent base class and fields attrs .
 8502	append string STR0 to model.__name__ , substitute the result for class_name .
 8503	form_class_attrs is a dictionary with 2 entries : Meta for STR0 and formfield_callback for STR1 .
 8504	if STR0 attribute of Meta object is None and STR1 attribute of Meta object is None ,
 8505	raise an ImproperlyConfigured with an argument string STR0
 8506	get the type of form object , return an instance of resulting class created with 3 arguments : class_name , tuple with an element form , and form_class_attrs .
 8507	derive the class BaseModelFormSet from the BaseFormSet base class .
 8508	model is None .
 8509	define the method __init__ with 7 arguments : self , data set to None , files set to None , auto_id set to string STR0 , prefix set to None , queryset set to None and unpacked dictionary kwargs .
 8510	substitute queryset for self.queryset .
 8511	remove entry under STR0 key of the kwargs dictionary , substitute it for self.initial_extra if it exists , if not self.initial_extra is None .
 8512	defaults is a dictionary with 4 entries : data for STR0 , files for STR1 , auto_id for STR2 and prefix for STR3 .
 8513	update defaults dictionary with kwargs .
 8514	call the method __init__ from the base class of the class BaseModelFormSet , with an argument unpacked dictionary defaults .
 8515	define the method initial_form_count with an argument self .
 8516	if self.data and self.files are both False ,
 8517	call the method self.get_queryset , return the length of the result .
 8518	call the method initial_form_count from the base class of the class BaseModelFormSet , return the result .
 8519	define the method _existing_object with 2 arguments : self and pk .
 8520	if self has an attribute STR0 ,
 8521	call the function dict with an argument tuple with 2 elements : o.pk and o , for every o in result of the method self.get_queryset , substitute the result for self._object_dict .
 8522	return the value under the pk key of self._object_dict dictionary .
 8523	define the method _get_to_python with 2 arguments : self and field .
 8524	while field.rel is not None ,
 8525	call the method field.rel.get_related_field , substitute the result for field .
 8526	return field.to_python .
 8527	define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs .
 8528	if self.is_bound is true and i is smaller than self.initial_form_count ,
 8529	pk_key is a string STR0 , where STR1 is replaced with : result of the method self.add_prefix called with an argument i , and self.model._meta.pk.name .
 8530	substitute the value under the pk_key key of the self.data dictionary for pk .
 8531	substitute self.model._meta.pk for pk_field .
 8532	call the method self._get_to_python with an argument pk_field , substitute the result for to_python .
 8533	call the function to_python with an argument pk , substitute the result for pk .
 8534	call the method self._existing_object with an argument pk , substitute the result for value under the STR0 key of kwargs .
 8535	if i is smaller than result of the method self.initial_form_count and key STR0 is not contained in kwargs ,
 8536	call the method self.get_queryset , substitute i-th element of the result for value under the STR0 key of kwargs dictionary .
 8537	if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true ,
 8538	try ,
 8539	subtract result of the method self.initial_form_count from i , use the result as an index to get the element from self.initial_extra , substitute it for value under the STR0 key of kwargs dictionary .
 8540	if IndexError exception is caught ,
 8541	do nothing .
 8542	call the method _construct_form from the base class of the class BaseModelFormSet , with 2 arguments : i and unpacked dictionary kwargs .
 8543	define the method get_queryset with an argument self .
 8544	if self doesnt have STR0 attribute ,
 8545	if self.queryset is not None ,
 8546	substitute self.queryset for qs .
 8547	if not ,
 8548	call the method self.model._default_manager.get_queryset with an argument qs .
 8549	if qs.ordered is false ,
 8550	call the method qs.order_by with argument self.model._meta.pk.name , substitute the result for qs .
 8551	substitute qs for self._queryset .
 8552	return self._queryset .
 8553	define the method save_new with 3 arguments : self , form and commit set to boolean True .
 8554	call the method form.save with an argument commit as commit , return the result .
 8555	define the method save_existing with 4 arguments : self , form , instance and commit set to boolean True .
 8556	call the method form.save with an argument commit as commit , return the result .
 8557	define the method save with 2 arguments : self and commit set to boolean True .
 8558	if commit is true ,
 8559	self.saved_forms is an empty list .
 8560	define the function save_m2m .
 8561	for every form in self.saved_forms ,
 8562	call the function form.save_m2m .
 8563	substitute save_m2m for self.save_m2m .
 8564	sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects , called with an argument commit , return the result .
 8565	save.alters_data is boolean True .
 8566	define the method clean with an argument self .
 8567	call the method self.validate_unique .
 8568	define the method validate_unique with an argument self .
 8569	all_unique_checks is an empty set .
 8570	all_date_checks is an empty set .
 8571	substitute self.deleted_forms for forms_to_delete .
 8572	for every form in self.forms append form to a list , if function form.is_valid evaluates to true , and form is not contained in forms_to_delete , substitute the resulting list for valid_forms .
 8573	for every form in valid_forms ,
 8574	call the method form._get_validation_exclusions , substitute the result for exclude .
 8575	call the method form.instance._get_unique_checks with an argument exclude as exclude , substitute the result for unique_checks , and date_checks , respectively .
 8576	all_unique_checks is union of all_unique_checks set and unique_checks set .
 8577	all_date_checks is union of all_date_checks set and date_checks set .
 8578	errors is an empty list .
 8579	for every uclass , unique_check in all_unique_checks ,
 8580	seen_data is an empty set .
 8581	for every form in valid_forms ,
 8582	row_data is an generator object that returns value under the field key of form.cleaned_data dictionary , for every field in unique_check , if field is contained in form.cleaned_data .
 8583	create a generator that for every d in row_data , if d has an STR0 attribute , returns the result of the call the method d._get_pk_val , if not return d , put all the generator items into a tuple row_data .
 8584	if row_data is true and None is not contained in row_data ,
 8585	if row_data is contained in seen_data ,
 8586	call the method self.get_unique_error_message with an argument unique_check , append the result to errors .
 8587	call the method self.error_class with an argument list with a element : result of the method self.get_form_error , substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary .
 8588	for every field in unique_check ,
 8589	if field is contained in form.cleaned_data ,
 8590	delete the form.cleaned_data dictionary entry under the field key .
 8591	add row_data to seen_data set .
 8592	for every date_check in all_date_checks ,
 8593	seen_data is an empty set .
 8594	substitute date_check elements to uclass , lookup , field and unique_for , respectively .
 8595	for every form in valid_forms ,
 8596	if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None ,
 8597	and value under the unique_for key of form.cleaned_data dictionary is not None , if lookup equals a string STR0 ,
 8598	substitute value under the unique_for key of form.cleaned_data dictionary for date .
 8599	date_data is a tuple with 3 elements : date.year , date.month and date.day .
 8600	if not ,
 8601	date_data is a tuple with an entry : attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary .
 8602	create a tuple out of elements under the key field of the form.cleaned_data dictionary , add elements of date_data to it , substitute it for data .
 8603	if data is contained in seen_data ,
 8604	call the method self.get_date_error_message with an argument date_check , append the result to errors .
 8605	call the method self.error_class with an argument list with one element , return value of the method self.get_form_error , substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary .
 8606	delete entry from form.cleaned_data dictionary under the field key .
 8607	add data to seen_data set .
 8608	if errors is true ,
 8609	raise an ValidationError exception with an argument errors .
 8610	define the method get_unique_error_message with 2 arguments : self and unique_check .
 8611	if length of unique_check equals integer 1 ,
 8612	call the function ugettext with an argument string STR0 , where STR1 is replaced with first element of unique_check , return the result .
 8613	if not ,
 8614	call the function ugettext with an argument string STR0 , where STR1 is replaced with return value of the get_text_list function called with 2 arguments : unique_check and return value of the function six.text_type called with return value of the function _ with an argument string STR2 , return the result .
 8615	define the method get_date_error_message with 2 arguments : self and date_check .
 8616	call the function ugettext with an argument string STR0 , where STR1 is replaced with third element of data_check , STR2 is replaced with fourth element of date_check and STR3 is replaced with result of the function , six.text_type called with second element of date_check as an argument , return the result .
 8617	define the method get_form_error with an argument self .
 8618	call the function ugettext with an argument string STR0 , return the result .
 8619	define the method save_existing_objects with 2 arguments : self and commit set to boolean True .
 8620	self.changed_objects is an empty list .
 8621	self.deleted_objects is an empty list .
 8622	if self.initial_forms is false ,
 8623	return an empty list .
 8624	saved_instances is an empty list .
 8625	substitute self.deleted_forms for forms_to_delete .
 8626	for every form in self.initial_forms ,
 8627	substitute form.instance for obj .
 8628	if form is contained in forms_to_delete ,
 8629	if obj.pk is None ,
 8630	skip this loop iteration .
 8631	append obj to self.deleted_objects list .
 8632	if commit is true ,
 8633	call the method obj.delete .
 8634	otherwise if form.has_changed method evaluates to true ,
 8635	append a tuple with 2 elements : obj and form.changed_data to self.changed_objects .
 8636	call the method self.save_existing with 3 arguments : form , obj and commit as commit , append the result to saved_instances .
 8637	if commit is false ,
 8638	append form to self.saved_forms .
 8639	return saved_instances .
 8640	define the method save_new_objects with 2 arguments : self and commit set to boolean True .
 8641	self.new_objects is an empty list .
 8642	for every form in self.extra_forms ,
 8643	if function form.has_changed evaluates to false ,
 8644	skip this loop iteration .
 8645	if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true ,
 8646	skip this loop iteration .
 8647	call the method self.save_new with 2 arguments : form and commit as commit , append the result to self.new_objects .
 8648	if commit is false ,
 8649	append form to self.saved_forms .
 8650	return self.new_objects .
 8651	define the method add_fields with 2 arguments : self , form and index .
 8652	from django.db.models import AutoField , OneToOneField and ForeignKey .
 8653	assign self.model._meta.pk to self._pk_field and pk .
 8654	define the method pk_is_not_editable with an argument pk .
 8655	if pk.editable is true , or pk.auto_created is true or pk is an instance of AutoField class , or if pk.rel is true ,
 8656	and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true , if function pk_is_not_editable called with an argument pk evaluates to true , or pk.name is not contained in form.fields ,
 8657	if form.is_bound is true ,
 8658	substitute form.instance.pk for pk_value .
 8659	if not ,
 8660	try ,
 8661	if index is not None ,
 8662	call the method self.get_queryset , substitute field pk under the result at the index index for pk_value .
 8663	if not ,
 8664	pk_value is None .
 8665	if IndexError exception is caught ,
 8666	pk_value is None .
 8667	if pk is an instance of OneToOneField or ForeignKey classes ,
 8668	call the method pk.rel.to._default_manager.get_queryset , substitute the result for qs .
 8669	if not ,
 8670	call the method self.model._default_manager.get_queryset with an argument qs .
 8671	call the method qs.using with an argument form.instance._state.db , substitute the result for qs .
 8672	if form._meta.widgets is true ,
 8673	get the value under self._pk_field.name key of form._meta.widgets dictionary , if it exists substitute it for widget , if not , widget is an instance of HiddenInput class .
 8674	if not ,
 8675	widget is an instance of HiddenInput class
 8676	value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class , created with 4 arguments : qs , initial as pk_value , required as boolean False and widget as widget .
 8677	call the method add_fields from the base class of the class BaseModelFormSet , with 2 arguments : form and index .
 8678	define the function modelformset_factory with 18 arguments : model , form set to ModelForm , formfield_callback set to None ,
 8679	get STR0 attribute from form object , if it exists substitute it for meta , if not meta is None .
 8680	if meta is None ,
 8681	meta is an instance of a class named STR0 , derived from the object base class , without any fields .
 8682	if STR0 attribute of meta is None , or if it doesnt exists if fields is None and if STR1 attribute of meta is None , or if it doesnt exists if exclude is None .
 8683	raise an ImproperlyConfigured with an argument string STR0
 8684	call the function modelform_factory with 10 arguments : model , form as form , fields as fields , exclude as exclude , formfield_callback as formfield_callback , widgets as widgets , localized_fields as localized_fields , labels as labels , help_texts as help_texts and error_messages as error_messages , substitute the result for form .
 8685	call the function formset_factory with 10 arguments : form , formset , extra as extra , min_num as min_num , max_num as max_num , can_order as can_order , can_delete as can_delete , validate_min as validate_min , validate_max as validate_max , substitute the result for form .
 8686	substitute model for FormSet.model .
 8687	return FormSet .
 8688	derive the class BaseInlineFormSet from the BaseModelFormSet base class .
 8689	define the method __init__ with 8 arguments : self , data set to None , files set to None , instance set to None , save_as_new set to boolean False , prefix set to None , queryset set to None and unpacked dictionary kwargs .
 8690	if instance is None ,
 8691	call the method self.fk.rel.to , substitute the result for self.instance .
 8692	if not ,
 8693	substitute instance for self.instance .
 8694	substitute save_as_new for self.save_as_new .
 8695	if queryset is None ,
 8696	substitute self.model._default_manager for queryset .
 8697	if self.instance.pk is not None ,
 8698	call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name , substitute the result for qs .
 8699	if not ,
 8700	call the method queryset.none , substitute it for qs .
 8701	call the method __init__ from the base class of the class BaseInlineFormSet , with 5 arguments : data , files , prefix set to prefix , queryset set to qs and unpacked dictionary kwargs .
 8702	define the method initial_form_count with an argument self .
 8703	if self.save_as_new is true ,
 8704	return integer 0 .
 8705	call the method initial_form_count from the base class of the class BaseInlineFormSet , return the result .
 8706	define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs .
 8707	call the method _construct_form from the base class of the class BaseInlineFormSet , with 2 arguments : i , and unpacked dictionary kwargs , substitute the result for form .
 8708	if self.save_as_new is true ,
 8709	call the method form.add_prefix with an argument self._pk_field.name , use the result as an key to get the value of the form.data dictionary , assign it value None .
 8710	call the method form.add_prefix with an argument self.fk.name , use the result as an key to get the value of the form.data dictionary , assign it value None .
 8711	use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set , set it to self.instance.pk .
 8712	return form .
 8713	classmethod decorator ,
 8714	define the method get_default_prefix with an argument cls .
 8715	from django.db.models.fields.related import RelatedObject into default namespace .
 8716	instantiate RelatedObject class with 3 arguments : cls.fk.rel.to , cls.model and cls.fk , call the method get_accessor_name on the result , substitute all occurrences of STR0 in the result with an empty string , return it .
 8717	define the method save_new with 3 arguments : self , form and commit set to boolean True .
 8718	call the method form.save , with an argument commit set to boolean False , substitute the result for obj .
 8719	get self.instance
 8720	get attribute STR0 of the pk_value object , if it doesnt exists use pk_value , set to it self.fk.get_attname return value attribute , of the obj object .
 8721	if commit is true ,
 8722	call the method obj.save .
 8723	if commit is true and form has an attribute STR0 ,
 8724	call the method form.save_m2m .
 8725	return obj .
 8726	define the method add_fields with 3 arguments : self , form and index .
 8727	call the method add_fields from the base class of the class BaseInlineFormSet , with 2 arguments : form and index .
 8728	if self._pk_field equals self.fk ,
 8729	substitute self._pk_field.name for name .
 8730	kwargs is a dictionary with boolean True for STR0 .
 8731	if not ,
 8732	substitute self.fk.name for name .
 8733	kwargs is a dictionary with an entry : attribute STR0 of the object under the name key of the form.fields dictionary for STR1 , if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for STR2 .
 8734	if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name ,
 8735	substitute self.fk.rel.field_name for value under the STR0 key of the kwargs dictionary .
 8736	value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments : self.instance and unpacked dictionary kwargs .
 8737	if form._meta.fields is true ,
 8738	if form._meta.fields is an instance of tuple type ,
 8739	form._meta.fields is a list created out of form._meta.fields elements .
 8740	append self.fk.name to form._meta.fields .
 8741	define the method get_unique_error_message with 2 arguments : self and unique_check .
 8742	unique_check is a list with elements field , for every field in unique_check if field is not equal to self.fk.name .
 8743	call the method get_unique_error_message from the base class of the class BaseInlineFormSet , with an argument unique_check , return the result .
 8744	define the function _get_foreign_key with 4 arguments : parent_model , model , fk_name set to None and can_fail set to boolean False .
 8745	from django.db.models import ForeignKey .
 8746	substitute model._meta for opts .
 8747	if fk_name is true ,
 8748	fks_to_parent is a list containing f , for every f in opts.fields if f.name equals fk_name .
 8749	if length of fks_to_parent equals integer 1 .
 8750	substitute first element of fks_to_parent for fk .
 8751	if fk is not an instance of ForeignKey class , or fk.rel.to is not equal to parent_model , and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list .
 8752	raise an ValueError with an argument string STR0 , where STR1 is replaced with , fk_name , parent_model._meta.app_label and parent_model._meta.object_name , respectively .
 8753	otherwise if length of fks_to_parent is zero ,
 8754	raise an ValueError with an argument string STR0 , where STR1 is replaced with , model._meta.app_label , model._meta.object_name , fk_name , respectively .
 8755	if not ,
 8756	fks_to_parent is a list containing f for every f in opts.fields , only if f is an instance of ForeignKey , and , if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list .
 8757	if length of fks_to_parent is integer 1 ,
 8758	substitute first element of fks_to_parent for fk .
 8759	otherwise if length of fks_to_parent is zero ,
 8760	if can_fail is true ,
 8761	return nothing .
 8762	raise an ValueError with an argument string STR0 , where STR1 is replaced with , model._meta.app_label , model._meta.object_name , parent_model._meta.app_label , parent_model._meta.object_name , respectively .
 8763	if not ,
 8764	raise an ValueError with an argument string STR0 , where STR1 is replaced with , model._meta.app_label , model._meta.object_name , parent_model._meta.app_label , parent_model._meta.object_name , respectively .
 8765	return fk .
 8766	define the function inlineformset_factory with 20 arguments : parent_model , model , form set to ModelForm ,
 8767	call the function _get_foreign_key with 3 arguments : parent_model , model and fk_name=fk_name , substitute the result for fk .
 8768	if fk.unique is boolean true ,
 8769	max_num is integer 1 .
 8770	kwargs is a dictionary with 17 entries : form for STR0 , formfield_callback for STR1 , formset for STR2 , extra for STR3 , can_delete for STR4 , can_order for STR5 , fields for STR6 , exclude for STR7 , min_num for STR8 , max_num for STR9 , widgets for STR10 , validate_min for STR11 , validate_max for STR12 , localized_fields for STR13 , labels for STR14 , help_texts for STR15 , and error_messages for STR16 .
 8771	call the function modelformset_factory with 2 arguments : model and unpacked dictionary kwargs , substitute the result for FormSet .
 8772	substitute fk for FormSet.fk .
 8773	return FormSet .
 8774	derive the class InlineForeignKeyField from the Field base class .
 8775	substitute HiddenInput for widget .
 8776	default_error_messages is an dictionary with an entry : return value of the function _ called with an argument , string STR0 for STR1 .
 8777	define the method __init__ with 4 arguments : self , parent_instance , unpacked list args and unpacked dictionary kwargs .
 8778	substitute parent_instance for self.parent_instance .
 8779	remove element from kwargs dictionary under the key STR0 , substitute it for self.pk_field if it exists , if not self.pk_field is boolean False .
 8780	remove element from kwargs dictionary under the key STR0 , substitute it for self.to_field if it exists , if not self.to_field is None .
 8781	if self.parent_instance is not None ,
 8782	if self.to_field is true ,
 8783	get self.to_field attribute of self.parent_instance object , substitute it for value under the STR0 key of the kwargs dictionary .
 8784	if not ,
 8785	substitute self.parent_instance.pk for value under the STR0 key of the kwargs dictionary .
 8786	value under the STR0 key of the kwargs dictionary is boolean False .
 8787	call the method __init__ from the base class of the class InlineForeignKeyField , with 2 arguments unpacked list args , and unpacked dictionary kwargs .
 8788	define the method clean with 2 arguments : self and value .
 8789	if value is contained in self.empty_values ,
 8790	if self.pk_field ,
 8791	return None .
 8792	return self.parent_instance .
 8793	if self.to_field is true ,
 8794	get self.to_field attribute of self.parent_instance , substitute it for orig .
 8795	if not ,
 8796	substitute self.parent_instance.pk for orig .
 8797	if return values of the function force_text called two times with 1 argument , with value , and with orig , are equal ,
 8798	raise an ValidationError with 2 arguments : self.error_messages dictionary value under the STR0 key , and code set to a string STR1 .
 8799	return self.parent_instance .
 8800	define the method _has_changed with 3 arguments : self , initial and data .
 8801	return boolean False .
 8802	derive the class ModelChoiceIterator from object base class .
 8803	define the method __init__ with 2 arguments : self and field .
 8804	substitute field for self.field .
 8805	substitute field.queryset for self.queryset .
 8806	define the method __iter__ with an argument self .
 8807	if self.field.empty_label is not None ,
 8808	yield a tuple with 2 elements : an empty string and self.field.empty_label .
 8809	if self.field.cache_choices is true ,
 8810	if self.field.choice_cache is None ,
 8811	self.field.choice_cache is a list containing results of the method self.choice called with an argument obj , for every obj in result of the method self.queryset.all .
 8812	for every choice in self.field.choice_cache ,
 8813	yield choice .
 8814	if not ,
 8815	for every obj in result of the call to the method self.queryset.all ,
 8816	call the method self.choice with an argument obj , yield the result .
 8817	define the method __len__ with an argument self .
 8818	sum length of self.quertset and integer 1 if self.field.empty_label is not None , or integer 0 if not , return the result .
 8819	define the method choice with 2 arguments : self and obj .
 8820	return a tuple with 2 elements : result of the method self.field.prepare_value called with an argument obj , and result of the method self.field.label_from_instance , called with an argument obj .
 8821	derive the class ModelChoiceField from the ChoiceField base class .
 8822	default_error_messages is a dictionary with an entry , result of the call to the function _ with an argument , string STR0 for STR1 .
 8823	define the method __init__ with 13 arguments : self , queryset , empty_label set to a string STR0 , cache_choices set to None , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , to_field_name set to None , limit_choices_to set to None , unpacked list args and unpacked dictionary kwargs .
 8824	if required is true and initial is not None ,
 8825	self.empty_label is None .
 8826	if not ,
 8827	substitute empty_label for self.empty_label .
 8828	if cache_choices is not None ,
 8829	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to integer 2 .
 8830	if not ,
 8831	substitute boolean False for cache_choices .
 8832	substitute cache_choices for self.cache_choices .
 8833	call the method Field.__init__ with 8 arguments : self , required , widget , label , initial , help_text , unpacked list args , and unpacked dictionary kwargs .
 8834	substitute queryset for self.queryset .
 8835	substitute limit_choices_to for self.limit_choices_to .
 8836	self.choice_cache is None .
 8837	substitute to_field_name for self.to_field_name
 8838	define the method __deepcopy__ with 2 arguments : self and memo .
 8839	call the method __deepcopy__ from the base class of the class ChoiceField , with an argument memo , substitute the result for result .
 8840	substitute result.queryset for result.queryset .
 8841	return result .
 8842	define the method _get_queryset with an argument self .
 8843	return self._queryset .
 8844	define the method _set_queryset with 2 arguments : self and queryset .
 8845	substitute queryset for self._queryset .
 8846	substitute self.choices for self.widget.choices .
 8847	queryset is an property object of this class , with _get_queryset getter and _set_queryset setter functions .
 8848	define the method label_from_instance with 2 arguments : self and obj .
 8849	call the function smart_text with an argument obj , return the result .
 8850	define the method _get_choices with an argument self .
 8851	if self has an attribute STR0 ,
 8852	return self._choices .
 8853	return an instance of ModelChoiceIterator class , created with an argument self .
 8854	choices is an property property object of this class , with _get_choices getter and ChoiceField._set_choices setter functions .
 8855	define the method prepare_value with 2 arguments : self and value .
 8856	if value has an attribute STR0 ,
 8857	if self.to_field_name is true ,
 8858	call the method value.serializable_value with an argument self.to_field_name , return the result .
 8859	if not ,
 8860	return value.pk .
 8861	call the method prepare_value from the base class of the class ModelChoiceField , with an argument value , return the result .
 8862	define the method to_python with 2 arguments : self and value .
 8863	if value is contained in self.empty_values ,
 8864	return None .
 8865	try ,
 8866	substitute self.to_field_name , if exists , for key , if not substitute string STR0 for key .
 8867	call the method self.queryset.get with an argument , unpacked dictionary with an element : value for key , substitute the result for value .
 8868	if ValueError or self.queryset.model.DoesNotExist exception is caught ,
 8869	raise an ValidationError exception with 2 arguments : value under the STR0 key of the self.error_messages dictionary , code set to a string STR1 .
 8870	return value .
 8871	define the method validate with 2 arguments : self and value .
 8872	call the method Field.validate with 2 arguments : self and value , return the result .
 8873	define the method _has_changed with 3 arguments : self , initial and data .
 8874	if initial is not None , substitute initial for initial_value , otherwise initial_value is an empty string .
 8875	if data is not None , substitute data for initial_value , otherwise data_value is an empty string .
 8876	call the method self.prepare_value with an argument initial_value , use it as the argument for the call to the function force_text , if the result is equal to the result of the call to the function force_text with data_value as an argument , return boolean True , otherwise return boolean False .
 8877	derive the class ModelMultipleChoiceField from the ModelChoiceField base class .
 8878	substitute SelectMultiple for widget .
 8879	substitute MultipleHiddenInput for hidden_widget .
 8880	default_error_messages is an dictionary with 3 entries : return value of the function _ called with an argument , string STR1 for STR2 , return value of the function _ called with an argument , string STR3 for STR4 , and return value of the function _ called with an argument string STR5 for STR6 .
 8881	define the method __init__ with 10 arguments : self , queryset , cache_choices set to None , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty strign , unpacked list args and unpacked dictionary kwargs .
 8882	call the method __init__ from the base class of the class ModelMultipleChoiceField , with 10 arguments : queryset , None , cache_choices , required , widget , label , initial , help_text , unpacked list args and unpacked dictionary kwargs .
 8883	define the method to_python with 2 arguments : self and value .
 8884	if value is false ,
 8885	return an empty list .
 8886	instantiate base class of the class ModelMultipleChoiceField , substitute filed to_python of the result for to_py .
 8887	return a list containing return values of the function to_py called with an argument val , for every val in value .
 8888	define the method clean with 2 arguments : self and value .
 8889	if self.required is true and value is false ,
 8890	raise an ValidationError with 2 arguments : dictionary self.error_messages value under the key STR0 , and code set to string 'required .
 8891	otherwise if self.required is false and value is false ,
 8892	call the method self.queryset.none , return the result .
 8893	if value is not an instance of list or tuple types ,
 8894	raise an ValidationError with 2 arguments : dictionary self.error_messages value under the key STR0 , and code set to string 'list .
 8895	substitute self.to_field_name , if true , for key , or if not , substitute string STR0 for key .
 8896	for every pk in value ,
 8897	try ,
 8898	call the method self.queryset.filter with an argument , unpacked dictionary with an entry : pk for key .
 8899	if ValueError exception is caught ,
 8900	raise an ValidationError with 3 arguments : dictionary self.error_messages value under the key STR0 , code set to string STR1pk ' .
 8901	call the method self.queryset.filter with an argument , unpacked dictionary with an entry : value for string STR0 appended to key , substitute the result for qs .
 8902	pks is a set containing results of the call to the function force_text with an argument , key attribute of the o object , for every o in opts .
 8903	for every val in value ,
 8904	call the function force_text with an argument val , if the result is not contained in pks ,
 8905	raise an ValidationError with 3 arguments : dictionary self.error_messages value under the key STR0 , code set to string STR1 and params as a dictionary with an entry , val for STR2 .
 8906	call the method self.run_validators with an argument value .
 8907	return qs .
 8908	define the method prepare_value with 2 arguments : self and value .
 8909	if value has an attribute STR0 and value is not an instance of six.text_type and value doesnt have an attribute STR1 ,
 8910	call the method prepare_value from the base class of the class ModelMultipleChoiceField , with an argument v , for every v in value , return the list of results .
 8911	call the method prepare_value the base class of the class ModelMultipleChoiceField , with an argument value , return the result .
 8912	define the method _has_changed with 3 arguments : self , initial and data .
 8913	if initial is None ,
 8914	initial is an empty list .
 8915	if data is None ,
 8916	data is an empty list .
 8917	if lengths of initial and data are equal ,
 8918	return boolean True .
 8919	initial_set is set created out of return values of the function force_text called with an argument value , for every value in result of the method self.prepare_value called with an argument initial .
 8920	data_set is set created out of return values of the function force_text called with an argument value , for every value in data .
 8921	if data_set is not equal to initial_set return boolean True , otherwise return boolean False .
 8922	define the function modelform_defines_fields with an argument form_class .
 8923	only if form_class is not None , and if form_class has an attribute STR0 and form_class._meta.fields is not None ,
 8924	import module warnings .
 8925	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
 8926	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to an integer 2 .
 8927	from django.forms.utils import everything into default name space .
 8928	from __future__ import unicode_literals into default name space .
 8929	import module json .
 8930	import module sys .
 8931	try ,
 8932	from collections import UserList into default namespace .
 8933	if ImportError exception is caught .
 8934	from UserList import UserList into default namespace .
 8935	from django.conf import settings into default name space .
 8936	from django.utils.encoding import force_text and python_2_unicode_compatible into default name space .
 8937	from django.utils.html import format_html , format_html_join and escape into default name space .
 8938	from django.utils import timezone into default name space .
 8939	from django.utils.translation import ugettext_lazy as _ into default name space .
 8940	from django.utils import six into default name space .
 8941	from django.core.exceptions import ValidationError into default name space .
 8942	define the function flatatt with an argument attrs .
 8943	boolean_attrs is an empty list .
 8944	convert items of attrs dictionary to list of tuples , for every attr and value in it ,
 8945	if value is boolean True ,
 8946	append tuple containing element attr to boolean_attrs .
 8947	delete entry under the attr key of the attrs dictionary .
 8948	otherwise if value is boolean False ,
 8949	delete entry under the attr key of the attrs dictionary .
 8950	call the function format_html_join twice , first time with 3 elements : an empty string , string STR1 and sorted return value of the items of the attrs dictionary , and second time with 3 arguments : an empty string , string STR2 , and sorted list of boolean_attrs elements , concatenate the results and return the resulting list .
 8951	python_2_unicode_compatible decorator ,
 8952	derive the class ErrorDict from the dict base class .
 8953	define the method as_data with an argument self .
 8954	return a dictionary generated with an expression , return value of the method e.as_data for f , for every f and e in list of tuples of self dictionary key , pair entries .
 8955	define the method as_json with 2 argumens self and escape_html set to boolean False .
 8956	call the method json.dumps with a dictionary generate with an expression as an argument , return value of the function e.get_json_data , with an argument escape_html for f , for every f and e in list of tuples of self dictionary key , pair entries , return the result .
 8957	define the method as_ul with an argument self .
 8958	if self is false ,
 8959	return an empty string .
 8960	call the function format_html with 2 arguments : string STR1 , and return value of the function , format_html_join , called with 3 arguments : empty string , string STR2 , tuple containing tuples with 2 elements : k and result of the function force_text with an argument v , for every k and v in items of the dictionary self , return the result .
 8961	define the method as_text with an argument self .
 8962	output is an empty list .
 8963	call the method self.items , for every field and errors in the result .
 8964	convert field into a string and concatenate it to a string STR0 , append the result to output .
 8965	for every e in errors convert e into a string and append it to a string STR0 , join all the results into a string separated by newlines , append the result to output .
 8966	join elements of output into a string , separated by newline characters , return the result .
 8967	define the method __str__ with an argument self .
 8968	call the method self.as_ul , return the result .
 8969	python_2_unicode_compatible decorator ,
 8970	derive the class ErrorList from the UserList and list base classes .
 8971	define the method __init__ with 3 arguments : self , initlist set to None and error_class set to None .
 8972	call the method __init__ with an argument initlist from the base class of the class ErrorList .
 8973	if error_class is None ,
 8974	self.error_class is a string STR0 .
 8975	if not ,
 8976	append error_class converted into a string to string STR0 , substitute the result for self.error_class .
 8977	define the method as_text with an argument self .
 8978	instantiate ValidationError class with an argument self.data , return its field error_list .
 8979	define the method get_json_data with 2 arguments self and escape_html set to boolean False .
 8980	errors is an empty list .
 8981	call the method self.as_data , for every error in the result .
 8982	convert elements of error into a list , substitute the first element for message .
 8983	append to errors list a dictionary created with 2 etries , if escape_html is true , return value of the function escape
 8984	with an argument message for STR0 , or if not message for STR1 and error.code for STR2 in error.code is true , if not , an empty string for STR3 . return errors .
 8985	define the method as_json with 2 arguments self and escape_html set to boolean False .
 8986	call the method self.get_json_data with an argument escape_html , use the result as an argument for the call to the json.dumps function , return the result .
 8987	define the method as_text with an argument self .
 8988	if self.data is false ,
 8989	return an empty string .
 8990	call the function format_html with 3 arguments : string STR1 , self.error_class and return value of the function , format_html_join , called with 3 arguments : empty string , string STR2 , tuple containing results of the function , force_text with an argument e , for every e in self , return the result .
 8991	define the method as_text with an argument self .
 8992	for every e in self , append convert e to an string and append it to string STR0 , join all of the results into a string separated by newline character , return the result .
 8993	define the method __str__ with an argument self .
 8994	call the method self.as_ul , return the result .
 8995	define the method __repr__ with an argument self .
 8996	convert elements of self into a list , return the its printable representation .
 8997	define the method __contains__ with an argument self .
 8998	if item is contained in the list of the elements of self , return boolean True , otherwise return boolean False .
 8999	define the method __eq__ with an argument self .
 9000	if other equals list containing elements of self , return boolean True , otherwise return boolean False .
 9001	define the method __ne__ with an argument self .
 9002	if other is not equal to list containing elements of self , return boolean True , otherwise return boolean False .
 9003	define the method __getitem__ with an argument self .
 9004	substitute i-th element of self.data for error .
 9005	if error is an instance of ValidationError ,
 9006	return first element of the list containing elements of error .
 9007	call the function force_text with an argument error , return the result .
 9008	define the function from_current_timezone with an argument value .
 9009	if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value , evaluates to true ,
 9010	call the method timezone.get_current_timezone , substitute the result for current_timezone .
 9011	try ,
 9012	call the function timezone.make_aware with arguments value and current_timezone , return the result .
 9013	if Exception exception is caught ,
 9014	call the function _ with an argument string STR0 , substitute the result for message .
 9015	params is an dictionary containing 2 initial entries : value for STR0 and current_timezone for STR1 .
 9016	call the function six.reraise with 3 arguments : class ValidationError , class ValidationError , created with 3 arguments : message , code as a string STR0 and params as params , and third element of the return value of the function sys.exc_info .
 9017	return value .
 9018	define the function to_current_timezone with an argument value .
 9019	if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value , evaluates to true ,
 9020	call the function timezone.get_current_timezone , substitute the result for current_timezone .
 9021	call the function timezone.make_naive with 2 arguments value , current_timezone , return the result .
 9022	return value .
 9023	from __future__ import unicode_literals into default name space .
 9024	import module copy .
 9025	from itertools import chain into default name space .
 9026	from django.conf import settings into default name space .
 9027	from django.forms.utils import flatatt and to_current_timezone into default name space .
 9028	from django.utils.datastructures import MultiValueDict and MergeDict into default name space .
 9029	from django.utils.encoding import force_text and python_2_unicode_compatible into default name space .
 9030	from django.utils.html import conditional_escape and format_html into default name space .
 9031	from django.utils.translation import ugettext_lazy into default name space .
 9032	from django.utils.safestring import mark_safe into default name space .
 9033	from django.utils import formats and six into default name space .
 9034	from django.utils.six.moves.urllib.parse import urljoin into default name space .
 9035	__all__ is a tuple of strings : STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , STR11 , STR12 , STR13 , STR14 , STR15 , STR16 , STR17 , STR18 , STR19 , STR20 , STR21 , STR22 , STR23 and STR24 .
 9036	MEDIA_TYPES is a tuple with 2 strings : STR0 and STR1 .
 9037	python_2_unicode_compatible decorator ,
 9038	derive the class Media from the object base class .
 9039	define the method __init__ with 3 arguments : self , media set to None and unpacked dictionary kwargs .
 9040	if media is true ,
 9041	substitute media.__dict__ for media_attrs .
 9042	if not ,
 9043	substitute kwargs for media_attrs .
 9044	self._css is an empty dictionary .
 9045	self._js is an empty list .
 9046	for every name in MEDIA_TYPES ,
 9047	append name to string STR0 use it as the name of the attribute to get from object self , call the result as an function , with an argument : value under the name key of the media_attrs dictionary , if it exists , if not use None as an argument .
 9048	define the method __str__ with an argument self .
 9049	call the method self.render , return the result .
 9050	define the method render with an argument self .
 9051	call the function chain with an argument unpacked list , append name to string STR0 , and use it as the name of the attribute to get from the self object , call the result and append it to a list for every name in MEDIA_TYPES , join all the results into a string with newline separator , use the result as an argument for the call to the function mark_safe , return the result .
 9052	define the method render_js with an argument self .
 9053	return a list containing results of the function format_html called with 2 arguments : string STR2 and absolute file path of the path , for every path is self._js .
 9054	define the method render_css with an argument self .
 9055	call the method self._css.keys , sort the result and substitute it for media .
 9056	return the result of the call to the function chain , with an argument unpacked list , containing the result of the function , format_html called with 3 arguments : string STR4 , return value of the function self.absolute_path called with an argument path and medium , for every medium in media and for every path in value under the medium key of the self._css dictionary .
 9057	define the method absolute_path with 3 arguments self , path and prefix set to None .
 9058	if path starts with string STR0 or string STR1 or with string STR2 ,
 9059	return path ,
 9060	if prefix is None ,
 9061	if settings.STATIC_URL is None ,
 9062	substitute settings.MEDIA_URL for prefix .
 9063	if not ,
 9064	substitute settings.STATIC_URL for prefix .
 9065	join prefix and path into an url , return it .
 9066	define the method __getitem__ with arguments self and name .
 9067	if name is contained in MEDIA_TYPES ,
 9068	return an instance of the class Media , called with an unpacked dictionary with an entry : name appended to string STR0 , attribute of the self object for name converted into a string .
 9069	raise an KeyError with an argument string STR1 , where STR2 is replaced with name .
 9070	define the method __getitem__ with arguments self and name .
 9071	if data is true ,
 9072	for every path in data ,
 9073	if path is not contained in self._js ,
 9074	append path to self._js .
 9075	define the method add_css with arguments self and data .
 9076	if data is true ,
 9077	call the method data.items , for every medium and paths in the result .
 9078	for every path in paths ,
 9079	if call to the method self._css.get with an argument medium evaluates to false , or path is not contained in the value under the medium key of self._css dictionary .
 9080	call the method self._css.setdefault with 2 arguments medium and an empty string , append path to the result .
 9081	define the method __add__ with arguments self and other .
 9082	combined is an instance of Media class .
 9083	for every name in MEDIA_TYPES ,
 9084	append name to STR0 use it as the name of the attribute to get from combined object , call the result with an argument : name appended to string STR1 , as the name of the attribute to get from self object , or if the previous doesnt exist , None .
 9085	append name to STR0 use it as the name of the attribute to get from combined object , call the result with an argument : name appended to string STR1 , as the name of the attribute to get from other object , or if the previous doesnt exist , None .
 9086	return combined .
 9087	define the function media_property with an argument cls .
 9088	define the method _media with an argument self .
 9089	sup_cls is base class of the class cls .
 9090	try ,
 9091	substitute sup_cls.media for base .
 9092	if AttributeError exception is caught ,
 9093	base is an instance of Media class .
 9094	get the attribute STR0 of the cls object , if it exists substitute it for definition , if not definition is None .
 9095	if definition is true ,
 9096	get the attribute STR0 of the cls object , if it exists substitute it for extend , if not extend is boolean True .
 9097	if extend is true ,
 9098	if extend is boolean True ,
 9099	substitute base for m .
 9100	if not ,
 9101	m is an instance of Media class .
 9102	for every medium in extend ,
 9103	sum m and value under the medium key of the base dictionary , substitute it for m .
 9104	sum m and class Media created with definition , return the result .
 9105	if not ,
 9106	return an instance of Media class , created with definition as an argument .
 9107	if not ,
 9108	return base .
 9109	return property object with _media as getter function .
 9110	derive the class MediaDefiningClass from the type base class .
 9111	define the method __new__ with 4 arguments mcs , name , bases and attrs .
 9112	call the method __new__ from the base class of the class MediaDefiningClass , called with 4 arguments : mcs , name , bases and attrs .
 9113	if STR0 is not contained in attrs ,
 9114	call the method media_property with an argument new_class , substitute the result for new_class.media .
 9115	return new_class .
 9116	python_2_unicode_compatible decorator
 9117	derive the class SubWidget from the object base class .
 9118	define the method __init__ with 6 arguments self , parent_widget , name , value , attrs and choices .
 9119	substitute parent_widget for self.parent_widget .
 9120	substitute name and value for self.name and self.value .
 9121	substitute attrs and choices for self.attrs and self.choices
 9122	define the method __str__ with an argument self .
 9123	args is an list with 3 initial elements self.name , self.value and self.attrs .
 9124	if self.choices is true ,
 9125	append self.choices to args .
 9126	call the method self.parent_widget.render with unpacked list args as an argument , return the result .
 9127	derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass .
 9128	needs_multipart_form is boolean False .
 9129	is_localized is boolean False .
 9130	is_required is boolean False .
 9131	define the method __init__ with arguments self and attrs set to None .
 9132	if attrs is not None ,
 9133	call the method attrs.copy , substitute the result for self.attrs .
 9134	if not ,
 9135	self.attrs is an empty dictionary .
 9136	define the method __deepcopy__ with arguments self and memo .
 9137	call the method copy.copy , substitute the result for obj .
 9138	call the method self.attrs.copy , substitute the result for obj.attrs .
 9139	substitute obj for the value of the memo dictionary at the identity of the self object key .
 9140	return obj .
 9141	property decorator ,
 9142	define the method is_hidden with an argument self .
 9143	if self.input_type equals string STR0 and self has an attribute STR1 , return boolean True , otherwise return boolean False .
 9144	define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9145	yield an instance of SubWidget class created with 5 arguments : self , name , value , attrs and choices .
 9146	define the method render with 4 arguments : self , name , value and attrs set to None .
 9147	raise an NotImplementedError with an argument string STR0 .
 9148	define the method build_attrs with 3 arguments : self , extra_attrs set to None and unpacked dictionary kwargs .
 9149	unpack dictionary kwargs , map it through self.attrs and convert to dictionary , substitute the result for attrs .
 9150	if extra_attrs is true ,
 9151	update attrs dictionary with extra_attrs entry .
 9152	return attrs .
 9153	define the method render with 4 arguments : self , name , value and attrs set to None .
 9154	get the value under the name key of the data dictionary , return it , if the previous doesnt exists , return None .
 9155	define the method id_for_label with 2 arguments : self and id .
 9156	return id_ .
 9157	derive the class Input from the Widget base class .
 9158	input_type is None .
 9159	define the method _format_value with 2 arguments : self and value .
 9160	if self.is_localized is true ,
 9161	call the method formats.localize_input with an argument value , return the result .
 9162	return value .
 9163	define the method render with 4 arguments : self , name , value and attrs set to None .
 9164	if value is None ,
 9165	value is an empty string .
 9166	call the method self.build_attrs with 3 arguments : attrs , type as self.input_type , name as name , substitute the result for final_attrs .
 9167	if value is not equal to an empty string ,
 9168	call the method self._format_value with an argument value , use the result as an argument for the call to the function force_text , substitute the result for final_attrs dictionary value under the STR0 key .
 9169	call the function format_html with 2 arguments : string STR0 , result of the function flatatt called with an argument final_attrs , return the result .
 9170	derive the class TextInput from the Input base class .
 9171	input_type is a string STR0 .
 9172	define the method __init__ with 2 arguments : self and attrs set to None .
 9173	if attrs is not None ,
 9174	remover the entry under the STR0 key of the attrs dictionary , substitute it for self.input_type , if the key doesnt exists , substitute self.input_type for self.input_type .
 9175	call the method __init__ from the base class of the class TextInput , called with an argument attrs .
 9176	derive the class NumberInput from the TextInput base class .
 9177	input_type is a string STR0 .
 9178	derive the class EmailInput from the TextInput base class .
 9179	input_type is a string STR0 .
 9180	derive the class URLInput from the TextInput base class .
 9181	input_type is a string STR0 .
 9182	derive the class PasswordInput from the TextInput base class .
 9183	input_type is a string STR0 .
 9184	define the method __init__ with 3 arguments : self , attrs set to None and render_value set to boolean False .
 9185	call the method __init__ from the base class of the class PasswordInput , called with an argument attrs .
 9186	substitute render_value for self.render_value .
 9187	define the method render with 4 arguments : self , name , value and attrs set to None .
 9188	if self.render_value is false ,
 9189	value is None .
 9190	call the method render from the base class of the class PasswordInput , called with 3 arguments : name , value and attrs , return the result .
 9191	derive the class HiddenInput from the Input base class .
 9192	input_type is a string STR0 .
 9193	derive the class MultipleHiddenInput from the HiddenInput base class .
 9194	define the method __init__ with 3 arguments : self , attrs set to None and choices set to an empty tuple .
 9195	call the method __init__ from the base class of the class MultipleHiddenInput , called with an argument attrs .
 9196	substitute choices for self.choices .
 9197	define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9198	if value is None ,
 9199	value is an empty list .
 9200	call the method self.build_attrs with 3 arguments : attrs , type set to self.input_type , name set to name , substitute the result for final_attrs .
 9201	get the value under the STR0 key of final_attrs dictionary , substitute if for id_ if the key doesnt exists , id_ is None .
 9202	inputs is an empty list .
 9203	for every i and v in enumerated iterable value ,
 9204	unpack dictionary final_attrs , map the values through force_text function with an argument v and convert it to a dictionary , again , substitute the result input_attrs .
 9205	if id_ ,
 9206	replace STR0 in string STR1 with id_ and i , substitute the result for input_attrs dictionary value under the STR2 key .
 9207	call the function format_html with 2 arguments : string STR0 , return value of the function flatatt , called with an argument , input_attrs , append the result to inputs list .
 9208	join inputs elements into a string , separated with newline character , use it as an argument for the call to the function mark_safe , return the result .
 9209	define the method value_from_datadict with 4 arguments : self , data , files and name .
 9210	if data is an instance of MultiValueDict or MergeDict class ,
 9211	call the method data.getlist with an argument name , return the result .
 9212	return value under the name key of the data dictionary , if it doesnt exists , return None .
 9213	derive the class FileInput from the Input base class .
 9214	input_type is a string STR0 .
 9215	needs_multipart_form is boolean True .
 9216	define the method render with 4 arguments : self , name , value and attrs set to None .
 9217	call the method render from the base class of the class FileInput , called with 3 arguments : name , None and attrs as attrs .
 9218	define the method value_from_datadict with 4 arguments : self , data , files and name .
 9219	return value under the name key of the files dictionary , if it doesnt exists , return None .
 9220	FILE_INPUT_CONTRADICTION is an instance of object class .
 9221	derive the class ClearableFileInput from the FileInput base class .
 9222	call the function ugettext_lazy with an argument string STR0 , substitute the result for initial_text .
 9223	call the function ugettext_lazy with an argument string STR0 , substitute the result for input_text .
 9224	call the function ugettext_lazy with an argument string STR0 , substitute the result for clear_checkbox_label .
 9225	template_with_initial is a string STR0 .
 9226	template_with_clear is a string STR1 .
 9227	url_markup_template is a string STR1 .
 9228	define the method clear_checkbox_name with 2 arguments : self and name .
 9229	concatenate name and string STR0 , return it .
 9230	define the method clear_checkbox_id with 2 arguments : self and name .
 9231	concatenate name and string STR0 , return it .
 9232	define the method render with 4 arguments : self , name , value and attrs set to None .
 9233	substitutions is a dictionary with 4 initial entries : self.initial_text for STR0 , self.input_text for STR1 , an empty string for STR2 and self.clear_checkbox_label for STR3 .
 9234	template is a string STR0 .
 9235	call the method render from the base class of the class ClearableFileInput , called with 3 arguments : name , value and attrs , substitute the result for value under the STR0 key of the substitutions dictionary .
 9236	if value is true and value has an attribute STR0 ,
 9237	substitute self.template_with_initial for template .
 9238	call the function format_html with 3 arguments : self.url_markup_template , value.url and return value of the function force_text , called with an argument value , substitute the result for value under the STR0 key of the substitutions dictionary .
 9239	if self.is_required is false ,
 9240	call the method self.clear_checkbox_name with an argument name , substitute the result for checkbox_name .
 9241	call the method self.clear_checkbox_id with an argument checkbox_name , substitute the result for checkbox_id .
 9242	call the function conditional_escape with an argument checkbox_name , substitute the result for value under the STR0 key of the substitutions dictionary .
 9243	call the function conditional_escape with an argument checkbox_id , substitute the result for value under the STR0 key of the substitutions dictionary .
 9244	call the method render from the instance of CheckboxInput class , with 3 arguments : checkbox_name , boolean False , attrs as a dictionary with an entry : checkbox_id for STR0 , substitute the result for value under the STR1 key of the substitutions dictionary .
 9245	format self.template_with_clear with substitutions , substitute the result for value under the STR0 key of , substitutions dictionary .
 9246	call the function mark_safe with an argument template , formated with substitutions , return the result .
 9247	define the method value_from_datadict with 4 arguments : self , data , files and name .
 9248	call the method value_from_datadict from the base class of the class ClearableFileInput , called with 3 arguments : data , files and name , substitute the result for upload .
 9249	if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class , with 3 arguments : data , files and return value of the function self.clear_checkbox_name called with an argument name , evaluates to true ,
 9250	if upload is true ,
 9251	return FILE_INPUT_CONTRADICTION .
 9252	return boolean False .
 9253	return boolean upload .
 9254	derive the class Textarea from the Widget base class .
 9255	define the method __init__ with 2 arguments : self and attrs set to None .
 9256	default_attrs is an dictionary with 2 initial entries : string STR0 for STR1 and string STR2 for STR3 .
 9257	if attrs is true ,
 9258	update default_attrs dictionary with attrs entry .
 9259	call the method __init__ from the base class of the class Textarea , with an argument default_attrs .
 9260	define the method render with 4 arguments : self , name , value and attrs set to None .
 9261	if value is None ,
 9262	value is an empty string .
 9263	call the method self.build_attrs with 2 arguments : attrs and name set to name , substitute the result for final_attrs .
 9264	call the function format_html with 3 arguments : string ( STR0 , return value of the function flatatt , called with an argument final_attrs and return value of the function force_text called with an argument value , return the result .
 9265	derive the class DateTimeBaseInput from the TextInput base class .
 9266	format key is an empty string .
 9267	supports_microseconds is boolean False .
 9268	define the method __init__ with 3 arguments : self , attrs set to None and format is None .
 9269	call the method __init__ from the base class of the class DateTimeBaseInput , with an argument attrs .
 9270	substitute format for self.format if format is true , if not self.format is None .
 9271	define the method _format_value with 2 arguments : self and value .
 9272	call the function formats.localize_input with 2 arguments : value and self.format if true , if not , then the first element of the result of the function formats.get_format called with an argument self.format_key , return the result .
 9273	derive the class DateInput from the DateTimeBaseInput base class .
 9274	format_key is a string STR0 .
 9275	derive the class DateTimeInput from the DateTimeBaseInput base class .
 9276	format_key is a string STR0 .
 9277	derive the class TimeInput from the DateTimeBaseInput base class .
 9278	format_key is a string STR0 .
 9279	define the function boolean_check with an argument v .
 9280	if v is boolean False or v is None or v is an empty string , return boolean False , otherwise return boolean True .
 9281	derive the class CheckboxInput from the Widget base class .
 9282	define the method __init__ with 3 arguments : self , attrs set to None and check_test set to None .
 9283	call the method __init__ from the base class of the class CheckboxInput , with an argument attrs .
 9284	substitute boolean_check for self.check_test if check_test is None , otherwise substitute check_test for self.check_test .
 9285	define the method render with 4 arguments : self , name , value and attrs set to None .
 9286	call the method self.build_attrs with 3 arguments : attrs , type as a string STR0 , name as name , substitute the result for final_attrs .
 9287	call the method self.check_test with an argument value , if it evaluates to true ,
 9288	substitute string STR0 for value under the STR1 key of final_attrs dictionary .
 9289	if value is boolean False or boolean True or value is None or value is an empty string , do not perform the following ,
 9290	call the function force_text with an argument value , substitute the result for value under the STR0 key of the final_attrs .
 9291	return the result of the function format_html called with 2 arguments : string STR0 , and result of the function flatatt , called with an argument final_attrs .
 9292	define the method value_from_datadict with 4 arguments : self , data , files and name .
 9293	if name is not contained in data ,
 9294	return boolean False .
 9295	get the name key of the data dictionary , substitute it for value .
 9296	values is an dictionary with 2 arguments : boolean False for STR0 and boolean True for STR1 .
 9297	if value is an instance of six.string_types class ,
 9298	get the value of the values dictionary under the value converted to lowercase key , substitute it for value , if the key doesnt exists , substitute value for value .
 9299	return value converted into a boolean .
 9300	derive the class Select from the Widget base class .
 9301	allow_multiple_selected is boolean False .
 9302	define the method __init__ with 3 arguments : self , attrs set to None and choices set to an empty tuple .
 9303	call the method __init__ from the base class of the class Select , with an argument attrs .
 9304	convert elements of choices into a list , substitute it for self.choices .
 9305	define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9306	if value is None ,
 9307	value is an empty string .
 9308	call the method self.build_attrs with arguments attrs , name as name , substitute the result for final_attrs .
 9309	output is a list containing an element : result of the function format_html called with 2 arguments : string STR0 , and return value of the function flatatt called with an argument final_attrs , substitute the result for output .
 9310	call the method self.render_options with 2 arguments : choices and list with an entry , value , substitute the result for options .
 9311	if options is true ,
 9312	append options to output .
 9313	append string STR0 to output .
 9314	join elements of output into a string , separated by newline characters , use it as the argument for the call the function mark_safe , return the result .
 9315	define the method render_option with 4 arguments : self , selected_choices , option_value and option_label .
 9316	if option_value is None ,
 9317	option_value is an empty string .
 9318	call the function force_text with an argument option_value , substitute the result for option_value .
 9319	if option_value is contained in selected_choices ,
 9320	call the function mark_safe with an argument string STR1 , substitute the result for selected_html .
 9321	if self.allow_multiple_selected is false ,
 9322	call the method selected_choices.remove with an argument option_value .
 9323	if not ,
 9324	selected_html is an empty string .
 9325	call the function format_html with 4 arguments : string STR1 , option_value , selected_html , result of the function force_text with an argument option_label , return the result .
 9326	define the method render_options with 3 arguments : self , choices and selected_choices .
 9327	call the function force_text with an argument v , for every v in selected_choices , add results to a set , substitute the resulting set for selected_choices .
 9328	output is an empty list .
 9329	call the function chain with arguments self.choices and choices , for every option_value and option_label in the result ,
 9330	if option_label is an instance of list or tuple ,
 9331	call the function format_html with 2 arguments : string STR1 and return value of the function force_text , called with an argument option_value , append the result to output .
 9332	for every option in option_label ,
 9333	call the method self.render_option with 2 arguments : selected_choices and unpacked list option , append the result to output .
 9334	append string STR0 to output .
 9335	if not ,
 9336	call the method self.render_option with 3 arguments : selected_choices , option_value and option_label , append the result to output .
 9337	join elements of output in a string , separated by newlines , return it .
 9338	derive the class NullBooleanSelect from the Select base class .
 9339	define the method __init__ with 2 arguments : self and attrs set to None .
 9340	choices is a tuple with 3 elements : tuple with 2 elements : string STR0 and return value of the function ugettext_lazy , called with an argument string STR1 , tuple with 2 elements : string STR2 and return value of the function ugettext_lazy , called with an argument string STR3 and tuple with 2 elements : string STR4 and return value of the function ugettext_lazy , called with an argument string STR5 .
 9341	call the method __init__ from the base class of the class NullBooleanSelect , with arguments attrs and choices .
 9342	define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9343	try ,
 9344	get the value under value key of a dictionary with 4 entries : STR0 for boolean True , STR1 for boolean False , STR2 for STR3 , and STR4 for STR5 , substitute it for value .
 9345	if KeyError exception is caught ,
 9346	value is an string STR0 .
 9347	call the method render from the base class of the class NullBooleanSelect , with 4 arguments : name , value , attrs and choices , return the result .
 9348	define the method value_from_datadict with 4 arguments : self , data , files and name .
 9349	get the value under the name key of the data dictionary , if it exists substitute it for value , if not , value is None .
 9350	get the value under the value key of a dictionary with 6 entries : boolean True for STR0 , boolean True for boolean True , boolean True for STR1 , boolean False for STR2 , boolean False for STR3 and boolean False for boolean False , return it if the key exists , if not return None .
 9351	derive the class SelectMultiple from the Select base class .
 9352	allow_multiple_selected is boolean True .
 9353	define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9354	if value is None ,
 9355	value is an empty list .
 9356	call the method self.build_attrs with 2 arguments : attrs and name set to name , substitute the result for final_attrs .
 9357	output is a list containing an entry : result of the function format_html called with 2 arguments : string STR1 and result of the function flatatt called with an argument final_attrs .
 9358	call the method self.render_options with 2 arguments : choices and value , substitute the result for options .
 9359	if options is true ,
 9360	append options to output .
 9361	append string STR0 to output .
 9362	join elements of output into a string , separated with newline character , use it as an argument for the call to the mark_safe function , return the result .
 9363	define the method value_from_datadict with 4 arguments : self , data , files and name .
 9364	if data is an instance of MultiValueDict or MergeDict ,
 9365	call the method data.getlist with an argument name , return the result .
 9366	get the value under the name key of the data dictionary , if it exists return it , if not return None .
 9367	python_2_unicode_compatible decorator ,
 9368	derive the class ChoiceInput from the SubWidget base class .
 9369	input_type is None .
 9370	define the method __init__ with 6 arguments : self , name , value , attrs , choice and index .
 9371	substitute name for self.name .
 9372	substitute value for self.value .
 9373	substitute attrs for self.attrs .
 9374	call the function force_text with first element of choice as an argument , substitute the result for self.choice_value .
 9375	call the function force_text with second element of choice as an argument , substitute the result for self.choice_label .
 9376	substitute index for self.index .
 9377	if string STR0 is contained in self.attrs ,
 9378	convert self.index into a string and append it to STR0 string , substitute it for value under the STR1 key of self.attrs dictionary .
 9379	define the method __str__ with an argument self .
 9380	call the method self.render , return the result .
 9381	define the method render with 5 arguments : self , name set to None , value set to None , attrs set to None and choices set to an empty tuple .
 9382	self.id_for_label is true ,
 9383	call the function format_html with 2 arguments : string STR1 and self.id_for_label , substitute the result for label_for .
 9384	if not ,
 9385	label_for is an empty string .
 9386	call the function format_html with 4 arguments : string STR0 , label_for , result of the method self.tag , and self.choice_label , return the result .
 9387	define the method is_checked with an argument self .
 9388	if self.value equals self.choice_value , return boolean True , if not , return boolean False .
 9389	define the method tag with an argument self .
 9390	call the method dict with 4 : self.attrs , type as self.input_type , name as self.name , value as self.choice_value , substitute the result for final_attrs .
 9391	call the method self.is_checked , if it evaluates to true ,
 9392	substitute string STR0 for value under the STR1 key of final_attrs dictionary .
 9393	call the function format_html with 2 arguments : string STR0 and result of the function flatatt , called with an argument final_attrs , return the result .
 9394	property decorator ,
 9395	define the method id_for_label with an argument self .
 9396	get the value under the STR0 key of the self.attrs dictionary , return it , if the key doesnt exists return an empty string .
 9397	derive the class RadioChoiceInput from the ChoiceInput base class .
 9398	input_type is a string STR0 .
 9399	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 9400	call the method __init__ from the base class of the class RadioChoiceInput , with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
 9401	call the function force_text with an argument self.value , substitute the result for self.value .
 9402	derive the class CheckboxChoiceInput from the ChoiceInput base class .
 9403	input_type is a string STR0 .
 9404	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 9405	call the method __init__ from the base class of the class CheckboxChoiceInput , with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
 9406	for every v in self.value call the function force_text with an argument v , add the result to a set , substitute set of the results for self.value .
 9407	define the method is_checked with an argument self .
 9408	if self.choice_value is contained in self.value return boolean True , otherwise return boolean False .
 9409	python_2_unicode_compatible decorator ,
 9410	derive the class ChoiceFieldRenderer from the object base class .
 9411	choice_input_class is None .
 9412	outer_html is a string STR0 .
 9413	inner_html is a string STR0 .
 9414	define the method __init__ with 5 arguments : self , name , value , attrs and choices .
 9415	substitute name for self.name .
 9416	substitute value for self.value .
 9417	substitute attrs for self.attrs .
 9418	substitute choices for self.choices .
 9419	define the method __getitem__ with 2 arguments : self and idx .
 9420	substitute idx-th element of self.choices for choice .
 9421	call the method self.choice_input_class with 5 arguments : self.name , self.value , result of the method self.attrs.copy , choice and idx , return the result .
 9422	define the method __str__ with an argument self .
 9423	call the method self.render , return the result .
 9424	define the method render with an argument self .
 9425	get the value under the STR0 key of the self.attrs dictionary , substitute it for id_ if the key exists , if not id_ is None .
 9426	output is an empty list .
 9427	for every i and choice in enumerated iterable self.choices ,
 9428	substitute choice for choice_value and choice_label , respectively .
 9429	if choice_label is an instance of tuple or list ,
 9430	call the method self.attrs.copy , substitute the result for attrs_plus .
 9431	if id_ is true ,
 9432	prepend string STR0 to i converted to an string , append the result to the value under the STR1 key of the attrs_plus .
 9433	sub_ul_renderer is an instance of ChoiceFieldRenderer class , created with 4 arguments : name as self.name , value as self.value , attrs as attrs_plus and choices as choice_label .
 9434	substitute self.choice_input_class for sub_ul_renderer.choice_input_class .
 9435	call the function format_html with 3 arguments : self.inner_html , choice_value set to choice_value , and sub_widgets set to return value of the function sub_ul_renderer.render , append the result to output .
 9436	if not ,
 9437	call the method self.choice_input_class with 5 arguments : self.name , self.value , return value of the method self.attrs.copy , choice and i , substitute the result for w .
 9438	call the function format_html with 3 arguments : self.inner_html , choice_value set to result of the function force_text , called with an argument w , and sub_widgets as an empty string , append the result to output .
 9439	call the function format_html with 3 arguments : self.outer_html , if id_ is true id_attr set to return value of the function format_html , if not id_attr set to an empty string , content set to result of the function mark_safe with an argument : string created by joining elements of outputs , with STR0 separator , return the result .
 9440	derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class .
 9441	substitute RadioChoiceInput for choice_input_class .
 9442	derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class .
 9443	substitute CheckboxChoiceInput for choice_input_class .
 9444	derive the class RendererMixin from the object base class .
 9445	renderer is None .
 9446	_empty_value is None .
 9447	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
 9448	remove entry under STR0 key of the kwargs dictionary and substitute it for renderer , if the key doesnt exists , renderer is None .
 9449	if renderer is true ,
 9450	substitute renderer for self.renderer .
 9451	call the method __init__ from the base class of the class RendererMixin , with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
 9452	define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9453	call the method self.get_renderer with 4 arguments : name , value , attrs and choices , for every widget in result ,
 9454	yield widget .
 9455	define the method get_renderer with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9456	if value is None ,
 9457	substitute self._empty_value for value .
 9458	call the method self.build_attrs with an argument attrs , substitute the result for final_attrs .
 9459	call the function chain with 2 arguments : self.choices and choices , convert the result into a list and substitute it for choices .
 9460	call the method self.renderer with 4 arguments : name , value , final_attrs and choices , return the result .
 9461	define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
 9462	call the method self.get_renderer with 4 arguments : name , value , attrs and choices , call the render method on the result , return the result .
 9463	define the method id_for_label with 2 arguments : self and id_ .
 9464	if id_ is true ,
 9465	append string STR0 to id_ .
 9466	return id_ .
 9467	derive the class RadioSelect from the RendererMixin and Select base classes .
 9468	substitute RadioFieldRenderer for renderer .
 9469	_empty_value is an empty string .
 9470	derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes .
 9471	substitute CheckboxFieldRenderer for renderer .
 9472	_empty_value is an empty list .
 9473	derive the class MultiWidget from the Widget base class .
 9474	define the method __init__ with 3 arguments : self , widgets and attrs set to None .
 9475	for every w in widgets , call the function w and append the result to a list , if w is an instance of type class , if not append w to the list , substitute the resulting list for self.widgets .
 9476	call the method __init__ from the base class of the class MultiWidget , with an argument attrs .
 9477	property decorator ,
 9478	define the method is_hidden with an argument self .
 9479	for every w in self.widgets , if all elements w.is_hidden are true , return boolean True , otherwise return boolean False .
 9480	define the method render with 4 arguments : self , name , value and attrs set to None .
 9481	if self.is_localized is true ,
 9482	for every bwidget in self.widgets ,
 9483	substitute self.is_localized for widget.is_localized .
 9484	if value is not an instance of list type ,
 9485	call the method self.decompress with an argument value , substitute the result for value .
 9486	output is an empty list .
 9487	call the method self.build_attrs with an argument attrs , substitute the result for final_attrs .
 9488	get the value under the STR0 key of the final_attrs dictionary , substitute it for id_ , if it doesnt exists , id_ is None .
 9489	for every i and widget in enumerated iterable self.widgets ,
 9490	try ,
 9491	substitute i-th element of value for widget_value .
 9492	if IndexError exception is caught ,
 9493	widget_value is None .
 9494	if id_ is true ,
 9495	call the dict function with 2 arguments : final_attrs and id set to string STR0 , where STR1 is replaced with id_ and i , substitute the result for final_attrs .
 9496	call the method widget.render with 3 arguments : string created by concatenation from : name , string STR0 and i , widget_value , and final_attrs , append the result to output .
 9497	call the method self.format_output with an argument output , use the result as an argument for the call to the function mark_safe , return the result .
 9498	define the method id_for_label with 2 arguments : self and id_ .
 9499	if id_ is true ,
 9500	append string STR0 to id_ .
 9501	return id_ .
 9502	define the method value_from_datadict with 2 arguments : self , data , files and name .
 9503	for every i and widget in enumerated iterable self.widgets , call the function widget.value_from_datadict with 3 arguments : data , files and string created with concatenation of : name , string STR0 and i converted into a string , return the results in a list .
 9504	define the method format_output with 2 arguments : self and rendered_widgets .
 9505	join rendered_widgets into a string , return it .
 9506	define the method decompress with 2 arguments : self and value .
 9507	raise NotImplementedError exception with an argument string STR0 .
 9508	define the method _get_media with an argument self .
 9509	media is an instance of Media class .
 9510	for every w in self.widgets ,
 9511	sum media and w.media , substitute the result for media .
 9512	return media .
 9513	media is a property object of the current class , with _get_media as getter function .
 9514	define the method __deepcopy__ with 2 arguments : self and memo .
 9515	call the method __deepcopy__ from the base class of the class MultiWidget , with an argument memo , substitute the result for obj .
 9516	call the method copy.deepcopy with an argument self.widgets , substitute the result for obj.widgets .
 9517	return obj .
 9518	property decorator ,
 9519	define the method needs_multipart_form with an argument self .
 9520	if any w.needs_multipart_form for every w in self.widgets is true , return boolean True , if not return boolean False .
 9521	derive the class SplitDateTimeWidget from the MultiWidget base class .
 9522	supports_microseconds is boolean False .
 9523	define the method __init__ with 4 arguments : self , attrs set to None , date_format set to None and time_format set to None .
 9524	widgets is a tuple with 2 elements : instance of DateInput class , created with 2 arguments : attrs as attrs and format as date_format , and instance of TimeInput class , created with 2 arguments : attrs set to attrs and format set to date_format .
 9525	call the method __init__ from the base class of the class SplitDateTimeWidget , with 2 arguments : widgets and attrs .
 9526	define the method decompress with 2 arguments : self and value .
 9527	if value is true ,
 9528	call the function to_current_timezone with an argument , substitute the result for value .
 9529	return a list containing 2 elements : return value of the value.date method and return value of the replace method , called with the argument microseconds set to integer 0 , on the result of the method value.time .
 9530	return list containing 2 elements : None and None .
 9531	derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class .
 9532	define the method render with 4 arguments : self , attrs set to None , date_format set to None and time_format set to None .
 9533	call the method __init__ from the base class of the class SplitHiddenDateTimeWidget , with 3 arguments : attrs , date_format , and time_format .
 9534	for every widget in self.widgets : ,
 9535	widget.input_type is a string STR0 .
 9536	from django.http.cookie import SimpleCookie and parse_cookie into default name space .
 9537	from django.http.request import HttpRequest , QueryDict , RawPostDataException , UnreadablePostError and build_request_repr into default name space .
 9538	from django.http.response import HttpResponse , StreamingHttpResponse , HttpResponseRedirect , HttpResponsePermanentRedirect , HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse into default name space .
 9539	from django.http.utils import fix_location_header and conditional_content_removal into default name space .
 9540	__all__ is a list of strings , STR0 , STR1 , STR2 , STR3 , STR4 ,
 9541	from __future__ import unicode_literals into default name space .
 9542	from django.utils.encoding import force_st into default name space .
 9543	from django.utils import six into default name space .
 9544	from django.utils.six.moves import http_cookies into default name space .
 9545	call the function http_cookies.SimpleCookie , on the return value call the value_encode method , with the argument character STR1 , if the tuple result equals to tuple containing character STR2 and string STR3 , respectively , assign _cookie_encodes_correctly the boolean True value , otherwise assign it False .
 9546	assign return value of the call to the http_cookies.SimpleCookie function to _tc .
 9547	try ,
 9548	call the _tc.load method with the STR0 converted to string as an argument .
 9549	_cookie_allows_colon_in_names is a boolean True .
 9550	if http_cookies.CookieError exception is caught ,
 9551	_cookie_allows_colon_in_names is boolean False .
 9552	if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True ,
 9553	substitute http_cookies.SimpleCookie for SimpleCookie .
 9554	if not ,
 9555	substitute http_cookies.Morsel for Morsel .
 9556	derive class SimpleCookie from the base class http_cookies.SimpleCookie .
 9557	if _cookie_encodes_correctly is boolean False ,
 9558	define method value_encode with self class instance and val as arguments .
 9559	from the base class of the class SimpleCookie call the value_encode method with val as the argument , store the result in the val and encoded , respectively .
 9560	in encoded , replace all the occurrences of unicode character STR0 with STR2 character and STR1 with STR3 characters .
 9561	if encoded contains string STR0 and if encoded doesnt start with the double quote symbol ,
 9562	put the double qoutes around encoded .
 9563	return val and encoded as a tuple .
 9564	if _cookie_allows_colon_in_names is False ,
 9565	define the method load with self class instance and rawdata as arguments .
 9566	self.bad_cookies is an empty set .
 9567	if six.PY2 is true and rawdata is an instance of the type six.text_type .
 9568	call the function force_str with raw data as an argument and substitute it for rawdata .
 9569	from the base class of the SimpleCookie class call the method load with rawdata as argument .
 9570	for every key is self.bad_cookies ,
 9571	delete self entry under the key key .
 9572	define protected method _BaseCookie__set with self class instance , key , real_value and coded_value as arguments .
 9573	evaluate the function force_str with key as the argument , substitute it for key .
 9574	try ,
 9575	get the value under the key of the dictionary self , if key does not exists return evaluated result of the function Morsel , substitute it for M .
 9576	call the M.set method with the key , real_value , coded_value as the arguments .
 9577	call the private dict.__setitem__ method with self class instance , key and M as arguments .
 9578	if http_cookies.CookieError exception is raised .
 9579	if self does not have STR0 attribute ,
 9580	self.bad_cookies is an empty set .
 9581	add key to the self.bad_cookies set .
 9582	call the private dict.__setitem__ method with self class instance , key and result of the function http_cookies.Morsel ( ) as arguments .
 9583	define the function parse_cookie with cookie as the argument .
 9584	if cookie is an empty string ,
 9585	return an empty dictionary .
 9586	if cookie is not an instance of http_cookies.BaseCookie ,
 9587	try ,
 9588	c is an instance of the class SimpleCookie .
 9589	call the load method on the c class instance , with the cookie argument .
 9590	if http_cookies.CookieError exception is raised ,
 9591	return an empty dictionary .
 9592	if not ,
 9593	substitute cookie for c .
 9594	cookiedict is an empty dictionary .
 9595	for every key in return value of the method c.keys call ,
 9596	get the value filed from the return value of the call to the c.key with the argument key , add the value to the cookiedict under the key key .
 9597	return cookiedict .
 9598	from __future__ import unicode_literals into default name space .
 9599	import module base64 .
 9600	import module binascii .
 9601	import module cgi .
 9602	import module sys .
 9603	from django.conf import settings into default name space .
 9604	from django.core.exceptions import SuspiciousMultipartF into default name space .
 9605	from django.utils.datastructures import MultiValueDict into default name space .
 9606	from django.utils.encoding import force_text into default name space .
 9607	from django.utils import six into default name space .
 9608	from django.utils.text import unescape_entities into default name space .
 9609	from django.core.files.uploadhandler import StopUpload , SkipFile and StopFutureHandlers into default name space .
 9610	__all__ is an tuple with 3 elements : strings STR0 , STR1 and STR2 .
 9611	derive the class MultiPartParserError from the Exception base class .
 9612	do nothing .
 9613	derive the class InputStreamExhausted from the Exception base class .
 9614	do nothing .
 9615	RAW is a string STR0 .
 9616	FILE is a file '' .
 9617	FIELD is a field '' .
 9618	if six.PY2 is true , _BASE64_DECODE_ERROR is TypeError , if not , _BASE64_DECODE_ERROR is binascii.Error .
 9619	derive the class MultiPartParser from the object base class .
 9620	define the method __init__ wiht 5 arguments : self , META , input_data , upload_handlers and encoding set to None .
 9621	get the value from META dictionary , under the STR0 key , if the key doesnt exist , return the value under the STR1 of the META dictionary , if it doesnt exist return an empty string , substitute the result for content_type .
 9622	if content_type doesnt start with string STR0 ,
 9623	raise an MultiPartParserError with an argument string STR0 , where STR1 is replaced with content_type .
 9624	call the method boundary with an argument string STR0 , use the result to call to the parse_header function , assign the result to ctypes and opts .
 9625	get the value under the STR0 key of the opts dictionary , substitute it for boundary .
 9626	if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false ,
 9627	raise an MultiPartParserError with an argument string STR0 is replaced with boundary .
 9628	try ,
 9629	convert value under the STR0 key of the META dictionary to an integer of base of value under the STR1 key of META dictionary , if the key doesnt exists use 0 as the base , substitute the result for content_length .
 9630	if ValueError or TypeError are caught ,
 9631	content_length is integer 0 .
 9632	if content_length is lesser than integer 0 ,
 9633	raise an MultiPartParserError with an argument string STR0 , where STR1 is replaced with content_length .
 9634	if boundary is an instance of six.text_type class ,
 9635	call the method boundary.encode with an argument string STR0 , substitute the result for boundary .
 9636	substitute boundary for self._boundary .
 9637	substitute input_data for self._input_data .
 9638	for every x in upload_handlers if x.chunk_size is true , append x.chunk_size to a list , substitute the result for possible_sizes .
 9639	bring integer 2 to the power of 31 , subtract the result by 4 , put the result into a list , append possible_sizes to it , substitute minimal element of the resulting list for self._chunk_size .
 9640	substitute META for self._meta .
 9641	if encoding is true , substitute it for self._encoding , if not substitute settings.DEFAULT_CHARSET for self._encoding .
 9642	substitute content_length for self._content_length .
 9643	substitute _upload_handlers for self.__upload_handlers .
 9644	define the method parse with an argument self .
 9645	from django.http import QueryDict into default namespace .
 9646	substitute self._encoding for encoding .
 9647	substitute self._upload_handlers for handlers .
 9648	if self._content_length equals integer 0 ,
 9649	instantiate QueryDict class with 2 arguments : an empty string and encoding set to self._encoding , instantiate a class MultiValueDict , return them .
 9650	for every handler in handlers ,
 9651	call the method handler.handle_raw_input with 5 arguments : self._input_data , self._meta , self._content_length , self._boundary , and encoding , substitute the result for result .
 9652	if result is not None ,
 9653	return first and second element of result .
 9654	self._post is an instance of QueryDict class , created with an empty string and mutable set to boolean True .
 9655	self._files is an instance of MultiValueDict class .
 9656	instantiate class ChunkIter with 2 arguments : self._input_data and self._chunk_size , use it to instantiate LazyStream class , assign the handle to stream .
 9657	old_field_name is None .
 9658	counters is a list containing length of handlers number of zeros .
 9659	try ,
 9660	call the Parser object with stream and self._boundary , for every item_type , meta_data and field_stream in return value ,
 9661	if old_field_name is true ,
 9662	call the method self.handle_file_complete with arguments old_field_name , counters .
 9663	old_field_name is None .
 9664	try ,
 9665	get the value under the STR0 key of the meta_data dictionary , substitute second element of it for disposition .
 9666	get the value under the STR0 key of the disposition dictionary , strip it of whitespaces , substitute the result for field_name .
 9667	if KeyError , IndexError and AttributeError exception is caught ,
 9668	skip this loop iteration ,
 9669	get the value under the STR0 key of the disposition meta_data , substitute it for transfer_encoding .
 9670	if transfer_encoding is not None ,
 9671	strip of the whitespaces first element of transfer_encoding , substitute the result for transfer_encoding .
 9672	call the function force_text with 3 arguments : field_name , encoding and errors as a string STR0 , substitute the result for field_name .
 9673	if item_type equals FIELD ,
 9674	if transfer_encoding equals a string STR0 ,
 9675	call the method field_stream.read , substitute the result for raw_data .
 9676	try ,
 9677	call the function base64.b64decode with an argument raw_data , substitute the result for data .
 9678	if _BASE64_DECODE_ERROR exception is caught ,
 9679	substitute raw_data for data .
 9680	if not ,
 9681	call the method field_stream.read , substitute the result for data .
 9682	call the method self._post.appendlist with 2 arguments : field_name and result of the function force_text called with 3 arguments : data , encoding and errors as a string STR0 .
 9683	otherwise if item_type equals FILE ,
 9684	get the value under the STR0 key of the disposition dictionary , substitute it for file_name .
 9685	if file_name is false ,
 9686	skip this loop execution .
 9687	call the function force_text with 3 arguments : file_name , encoding and errors set to string STR0 , substitute the result for file_name .
 9688	call the function unescape_entities with an argument file_name , use the result as an argument for the call to the self.IE_sanitize , method , substitute the result for file_name .
 9689	get the value under the STR0 of the meta_data dictionary , if it exists assign it to content_type , content_type_extra , if not , content_type is an empty string and content_type_extra is an empty dictionary .
 9690	strip the content_type of the whitespaces , substitute it for content_type .
 9691	get the value under the STR0 key of the content_type_extra dictionary , substitute it for charset .
 9692	try ,
 9693	convert to an integer first element of the value under the STR0 key of the meta_data dictionary , substitute it for content_length .
 9694	if IndexError , TypeError or ValueError exception is caught ,
 9695	content_length is None .
 9696	counters is a list containing length of handlers number of zeros .
 9697	try ,
 9698	for every handler in handlers ,
 9699	try ,
 9700	call the method handler.new_file with 6 arguments : field_name , file_name , content_type , content_length , charset and content_type_extra .
 9701	if StopFutureHandlers exception is caught .
 9702	break the loop execution .
 9703	for every chunk in field_stream ,
 9704	if transfer_encoding equals string STR0 ,
 9705	calculate length of chunk modulo integer 4 , substitute the result for over_bytes .
 9706	if over_bytes is true ,
 9707	call the method field_stream.read with an argument : over_bytes subtracted from integer 4 , substitute the result for over_chunk .
 9708	increment chunk by over_chunk .
 9709	try ,
 9710	call the method base64.b64decode with an argument chunk , substitute the result for chunk .
 9711	if Exception , renamed to e , exception is caught ,
 9712	msg is a string STR0 , where STR1 is replace with e .
 9713	call the method six.reraise with 3 arguments : MultiPartParserError , MultiPartParserError created with msg , and third element of the result of the function sys.exc_info .
 9714	for every i and handler in enumerated iterable handlers ,
 9715	substitute length of chunk for chunk_length .
 9716	call the method handler.receive_data_chunk with 2 arguments : chunk and i-th element of counters , substitute the result for chunk .
 9717	increment i-th element of counters by chunk_length .
 9718	if chunk is None ,
 9719	break the loop execution .
 9720	if SkipFile exception is caught ,
 9721	call the method self._close_files .
 9722	call the function exhaust with an argument field_stream .
 9723	if not ,
 9724	substitute field_name for old_field_name .
 9725	if not ,
 9726	call the function exhaust with an argument stream .
 9727	if StopUpload , renamed to e , exception is caught ,
 9728	call the method self._close_files .
 9729	if e.connection_reset is false ,
 9730	call the function exhaust with an argument self._input_data .
 9731	if not ,
 9732	call the function exhaust with an argument self._input_data .
 9733	for every handler in handlers ,
 9734	call the method handler.upload_complete , substitute the result for retval .
 9735	if retval is true ,
 9736	break the loop execution .
 9737	return self._post and self._files .
 9738	define the method handle_file_complete with 3 arguments : self , old_field_name and counters .
 9739	for every i and handler in enumerated iterator self._upload_handlers ,
 9740	call the method handler.file_complete with i-th element of counters as an argument , substitute the result for file_obj .
 9741	if file_obj is true ,
 9742	call the function force_text with 3 arguments : old_field_name , self._encoding and errors as a string STR0 , use the result and file_obj as arguments for the call to the method self._files.appendlist .
 9743	break the loop execution .
 9744	define the method IE_sanitize with arguments self and filename .
 9745	call the method filename.rfind with an argument string `` \STR , increment the result by one , slice the filename from the previous result as start index to the end , strip it of white spaces from both ends , if the result is not an empty string and filename is not an empty string , return boolean True , otherwise return boolean False .
 9746	define the method _close_files with an argument self .
 9747	for every handler in self._upload_handlers ,
 9748	if handler has an attribute STR0 ,
 9749	call the method handler.file.close .
 9750	derive the class LazyStream from the six.Iterator base class .
 9751	define the method __init__ with 3 arguments : self , producer and length set to None .
 9752	substitute producer for self._producer .
 9753	self._empty is boolean False .
 9754	self._leftover is an empty string .
 9755	substitute length for self._length .
 9756	self.position is an integer 0 .
 9757	substitute length for self._remaining .
 9758	self._unget_history is an empty list .
 9759	define the method tell with an argument self .
 9760	return self.position .
 9761	define the method read with arguments self and size set to None .
 9762	define the function parts .
 9763	if size is None substitute self._remaining for remaining , if not , substitute size for remaining .
 9764	if remaining is None ,
 9765	join self into a bytes string , yield the result as the return value of the generator .
 9766	return nothing .
 9767	while remaining is not equal to integer 0 ,
 9768	if remaining is not greater than 0 , assert an error with the message string STR0 .
 9769	get the next element of iterable self , substitute it for chunk .
 9770	create list of first remaining elements of chunk , substitute it for emitting .
 9771	call the method self.unget with list containing first remaining elements of chunk as an argument .
 9772	decrement remaining by length of emitting .
 9773	yield emitting as result of the generator .
 9774	join result of the parts function into a bytes string , substitute it for out .
 9775	return out .
 9776	define the method __next__ with an argument self .
 9777	if self._leftover is true ,
 9778	substitute self._leftover for output .
 9779	self._leftover is an empty string .
 9780	if not ,
 9781	get the next element of the self._producer iterable , substitute it for output .
 9782	self._unget_history is an empty list .
 9783	increment self.position by length of output .
 9784	return output .
 9785	define the method close with an argument self .
 9786	self._producer is an empty list .
 9787	define the method _iter with an argument self .
 9788	return self .
 9789	define the method unget with arguments self and bytes .
 9790	if bytes is false ,
 9791	return nothing .
 9792	call the method self._update_unget_history with length of bytes as an argument .
 9793	decrement self.position by length of bytes .
 9794	join bytes and self._leftover into a bytes string , substitute it for self._leftover .
 9795	define the method _update_unget_history with arguments self and num_bytes .
 9796	append first 49 elements of self._unget_history to list containing num_bytes , substitute the result for self._unget_history .
 9797	append current_number to a list for current_number in self._unget_history , if current_number is equal to num_bytes , substitute the length of the resulting list for number_equal .
 9798	if number_equal is greater than integer 40 ,
 9799	raise SuspiciousMultipartForm exception with an argument string , STR0 .
 9800	derive the class ChunkIter from the six.Iterator base class .
 9801	define the method __init__ with arguments self , flo and chunk_size set to integer 64 multiplied by integer 1024 .
 9802	substitute flo for self.flo .
 9803	substitute chunk_size for self.chunk_size .
 9804	define the method __next__ with an argument self .
 9805	try ,
 9806	call the method self.flo.read with an argument self.chunk_size , substitute the result for data .
 9807	if InputStreamExhausted exception is caught ,
 9808	raise an StopIteration exception .
 9809	if data is true ,
 9810	return data .
 9811	if not ,
 9812	raise an StopIteration exception .
 9813	define the method __iter__ with an argument self .
 9814	return self .
 9815	derive the class InterBoundaryIter from the six.Iterator base class .
 9816	define the method __init__ with arguments self , stream and boundary .
 9817	substitute stream for self._stream .
 9818	substitute boundary for self.boundary .
 9819	define the method __iter__ with an argument self .
 9820	return self .
 9821	define the method __next__ with an argument self .
 9822	try ,
 9823	instantiate class BoundaryIter with 2 arguments : self._stream and self._boundary , use it to instantiate LazyStream class , return it .
 9824	if InputStreamExhausted exception is caught ,
 9825	raise an StopIteration .
 9826	derive the class BoundaryIter from the six.Iterator base class .
 9827	define the method __init__ with arguments self , stream and boundary .
 9828	substitute stream for self._stream .
 9829	substitute boundary for self._boundary .
 9830	self._done is boolean False .
 9831	increment length of boundary by integer 6 , substitute the result for self._rollback .
 9832	call the method self._stream.read with an argument integer 1 , substitute the result for unused_char .
 9833	if unused_char is false ,
 9834	raise an InputStreamExhausted exception ,
 9835	call the method self._stream.unget with an argument unused_char .
 9836	define the method __iter__ with an argument self .
 9837	return self .
 9838	define the method __next__ with an argument self .
 9839	if self._done is true ,
 9840	raise an StopIteration exception ,
 9841	substitute self._stream for stream .
 9842	substitute self._rollback for rollback .
 9843	bytes_read is integer 0 .
 9844	chunks is an empty list .
 9845	for every bytes in stream ,
 9846	increment bytes_read by length of bytes .
 9847	append bytes to chunks .
 9848	if bytes_read is greater than rollback ,
 9849	break the loop execution .
 9850	if bytes is false ,
 9851	break the loop execution .
 9852	if not ,
 9853	self._done is boolean True .
 9854	if chunks is false ,
 9855	raise an StopIteration exception .
 9856	join chunks into bytes string , substitute it for chunk .
 9857	call the method self._find_boundary with 2 arguments : chunk and boolean if length of chunks is lesser than self._rollback , or boolean False if not , substitute the result for boundary .
 9858	if boundary is true ,
 9859	substitute elements of tuple boundary to end and next , respectively .
 9860	call the method stream.unget with elements of list chunk from the index next to the end .
 9861	self._done is boolean True .
 9862	return first end elements of list chunk .
 9863	if not ,
 9864	slice chunk list to get the last rollback elements , if the new list is not empty ,
 9865	self._done is boolean True .
 9866	return chunk .
 9867	if not ,
 9868	call the method stream.unget with last rollback elements of chunk as an argument .
 9869	return last rollback elements of chunk .
 9870	define the method _find_boundary with an arguments self , data and eof set to boolean False .
 9871	call the method data.find with an argument self._boundary , substitute the result for index .
 9872	if index is lesser than integer 0 ,
 9873	return None .
 9874	if not ,
 9875	substitute index for end .
 9876	sum index and length of self._boundary , substitute the result for next .
 9877	substitute greater element between integer 0 and end decremented by one for last .
 9878	element of data at the index last equals to newline bytes character .
 9879	decrement end by one .
 9880	substitute greater element between integer 0 and end decremented by one for last .
 9881	element of data at the index last equals to carriage return bytes character .
 9882	decrement end by one .
 9883	return end ans next .
 9884	define the function exhaust with an argument stream_or_iterable .
 9885	iterator is None .
 9886	try ,
 9887	iterator is iterator created out of stream_or_iterable .
 9888	if TypeError exception is caught ,
 9889	iterator is an instance of ChunkIter class , created with arguments : stream_or_iterable and integer 16384 .
 9890	if iterator is None ,
 9891	raise an MultiPartParserError with an argument string STR0 .
 9892	for every __ in iterator ,
 9893	do nothing .
 9894	define the function parse_boundary_stream with arguments stream and max_header_size .
 9895	call the method stream.read with an argument max_header_size , substitute the result for chunk .
 9896	call the method chunk.find with an argument bytes string STR0 , substitute the result for header_end .
 9897	define the method _parse_header with an argument line .
 9898	call the function parse_header with an argument line , substitute the result for main_value_pair and params , respectively .
 9899	try ,
 9900	split into two parts string main_value_pair at character STR0 , substitute the parts for name and value , respectively .
 9901	if ValueError exception is caught ,
 9902	raise an ValueError with an argument string STR0 , where STR1 is replaced with line .
 9903	return name and tuple containing 2 elements value and params .
 9904	if header_end equals integer negative 1 ,
 9905	call the method stream.unget with an argument chunk .
 9906	return tuple containing 3 elements : RAW , an empty dictionary and stream .
 9907	substitute first header_end elements of chunk list for header .
 9908	call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument .
 9909	substitute RAW for TYPE .
 9910	outdict is an empty dictionary .
 9911	split header string at string STR0 , for every line in result ,
 9912	try ,
 9913	call the method _parse_header with an argument line , assign the result to name and tuple with 2 elements : value and params , respectively .
 9914	if ValueError exception is caught ,
 9915	skip this loop iteration .
 9916	if name equals a string STR0 ,
 9917	substitute FIELD for TYPE ,
 9918	get the value under the STR0 key of the params dictionary , if it is true ,
 9919	substitute FILE for TYPE .
 9920	assign value and params to the value under the name key of the outdict dictionary .
 9921	if TYPE equals to RAW ,
 9922	call the method stream.unget with an argument chunk .
 9923	return a tuple with 3 elements : TYPE , outdict and stream .
 9924	derive the class Parser from the base class object .
 9925	define the method __init__ with arguments self , stream and boundary .
 9926	substitute stream for self._stream .
 9927	append boundary to bytes string STR0 , substitute the result for self._separator .
 9928	define the method __iter__ with an argument self .
 9929	boundarystream is an instance of InterBoundaryIter class , created with self._stream and self._separator as arguments .
 9930	for every sub_stream in boundarystream ,
 9931	call the function parse_boundary_stream with 2 arguments : sub_stream and integer 1024 , yield the result as the return value of the generator .
 9932	define the function parse_header with an argument line .
 9933	append line to bytes string STR0 , use it as an argument for the call to the function _parse_header_params , substitute the result for plist .
 9934	pop the first element from plist , convert it to lowercase , call the method decode on it , with string STR0 as an argument , substitute the result for key .
 9935	pdict is an empty dictionary .
 9936	for every p in plist ,
 9937	call the method p.find with bytes string STR0 as an argument , substitute the result for i .
 9938	if i is greater or equal to integer 0 ,
 9939	take the first i elements of string p , strip the whitespaces from the both sides , convert it to lowercase and apply on it the method , decode with an argument string STR0 , substitute the result for name .
 9940	take elements of p from index i incremented by 1 to the end , strip the result of the whitespaces , substitute it for value .
 9941	if length of value is greater or equal to integer 2 and first and last elements of value are an empty string ,
 9942	strip value of the first and last element .
 9943	replace all the occurrences of STR0 in string value with STRspecial and all occurrences of STR1 for STR , substitute the result for value .
 9944	substitute value for the vale under the name key of the pdict dictionary .
 9945	return key and pdict .
 9946	define the function _parse_header_params with an argument s .
 9947	plist is an empty list .
 9948	while first element of s is equal to bytes string STR0 ,
 9949	substitute s without the first element for s .
 9950	call the method s.find with an argument bytes string STR0 , substitute the result for end .
 9951	while end is greater than integer 0 and return value of the s.count called with 3 arguments : an empty string , integer 0 and end ,
 9952	is an even number , call the method s.find with 2 arguments : bytes string STR0 and end incremented by one , substitute the result for end .
 9953	if end is lesser than integer 0 ,
 9954	substitute length of s for end .
 9955	substitute first end elements of s for f .
 9956	strip f of whitespaces and append it to plist .
 9957	substitute elements of s from the end index to end for s .
 9958	return plist .
 9959	from __future__ import unicode_literals into default name space .
 9960	import module copy .
 9961	import module os .
 9962	import module re .
 9963	import module sys .
 9964	from io import BytesIO into default name space .
 9965	from itertools import chain into default name space .
 9966	from pprint import pformat into default name space .
 9967	from django.conf import settings into default name space .
 9968	from django.core import signing into default name space .
 9969	from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space .
 9970	from django.core.files import uploadhandler into default name space .
 9971	from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space .
 9972	from django.utils import six into default name space .
 9973	from django.utils.datastructures import MultiValueDict and ImmutableList into default name space .
 9974	from django.utils.encoding import force_bytes , force_text , force_str and iri_to_uri into default name space .
 9975	from django.utils.six.moves.urllib.parse import parse_qsl , urlencode , quote , urljoin and urlsplit into default name space .
 9976	RAISE_ERROR is an instance of object class .
 9977	compile the regex STR0 with an argument re.I , substitute it for absolute_http_url_re .
 9978	compile the regex STR0 , substitute it for host_validation_re .
 9979	derive the class UnreadablePostError from the base class IOError .
 9980	do nothing .
 9981	derive the class RawPostDataException from the base class Exception .
 9982	do nothing .
 9983	derive the class HttpRequest from the object base class .
 9984	_encoding is None .
 9985	_upload_handlers is an empty list .
 9986	define the method __init__ with an argument self .
 9987	self.GET is an instance of QueryDict class created with an argument mutable set to boolean True .
 9988	self.POST is an instance of QueryDict class created with an argument mutable set to boolean True .
 9989	self.COOKIES is an empty dictionary .
 9990	self.META is an empty dictionary .
 9991	self.FILES is an instance of MultiValueDict class .
 9992	self.path is an empty string .
 9993	self.path_info is an empty string .
 9994	self.method is None .
 9995	self.resolver_match is None .
 9996	self._post_parse_error is boolen False .
 9997	define the method __repr__ with an argument self .
 9998	call the method build_request_repr with an argument self , return the result .
 9999	define the method get_host with an argument self .
10000	if settings.USE_X_FORWARDED_HOST is true and STR0 is contained in self.META .
10001	get the value under the STR0 key of the self.META dictionary , substitute the result for host .
10002	if STR0 is contained in self.META ,
10003	substitute the value under the STR0 key of the self.META dictionary , substitute it for host .
10004	if not ,
10005	substitute the value under the STR0 key of the self.META dictionary , substitute it for host .
10006	convert the value under the STR0 key of the self.META dictionary to a string , substitute result for server_port .
10007	if return value of the self.is_secure method is true and server_port is not equal to string STR0 ,
10008	if return value of the self.is_secure is false and server port is not equal to string STR0 , join host and server_port into a string , separated with STR1 , substitute the result for host .
10009	if settings.DEBUG is true ,
10010	return host .
10011	call the function split_domain_port with an argument host , assign the result to domain and port , respectively .
10012	if domain is true and return value of the function validate_host called with 2 arguments : domain and settings.ALLOWED_HOSTS , evaluates to true ,
10013	return host .
10014	if not ,
10015	msg is a string STR0 , replace STR1 with host .
10016	if domain is true ,
10017	append string STR0 to msg , where STR1 is replaced with domain .
10018	if not ,
10019	append string STR0 to msg .
10020	raise an DisallowedHost exception with an argument msg .
10021	define the method get_full_path with an argument self .
10022	if the value under the STR0 key of the self.META dictionary is true , call the function iri_to_uri , called with value under the STR1 key of the self.META dictionary and append it to string STR2 , append the result th the self.path converted into a string and return it , if the value under the STR3 key of the self.META dictionary is false , return self.path converted into a string .
10023	def the method get_signed_cookie with 5 arguments : self , key , default set to RAISE_ERROR , salt as an empty string ,
10024	try ,
10025	substitute value under the key key of the self.COOKIES dictionary , substitute it for cookie_value .
10026	if KeyError exception is caught ,
10027	if default is true and RAISE_ERROR is false ,
10028	return default .
10029	if not ,
10030	raise an exception .
10031	try ,
10032	call the method signing.get_cookie_signer with an argument salt set to sum of key and salt , call the method unsign on the result , with arguments cookie_value and max_age set to max_age .
10033	if signing.BadSignature exception is caught ,
10034	if default is true and RAISE_ERROR is false ,
10035	return default .
10036	if not ,
10037	raise an exception .
10038	return value .
10039	define the method build_absolute_uri with an arguments self and location set to None .
10040	if location is None ,
10041	call the method self.get_full_path , append the result to string STR0 , substitute it for location .
10042	call the function urlsplit with an argument location , substitute the result for bits .
10043	do not perform the following only if bits.scheme and bits.netloc are both true ,
10044	format the string STR0 by replacing scheme with self.scheme , host with return value of the self.get_host method , and path with self.path , substitute the result for current_uri .
10045	call the function urljoin with arguments current_uri and location , substitute the result for location .
10046	call the function iri_to_uri with an argument location , return the result .
10047	define the method _get_scheme with an argument self .
10048	return string STR1 if value under the STR0 key of the os.environ dictionary equals string STR2 , if not return STR3 .
10049	property decorator .
10050	define the method scheme with an argument self .
10051	if settings.SECURE_PROXY_SSL_HEADER is true ,
10052	try ,
10053	assign the settings.SECURE_PROXY_SSL_HEADER to header and value , respectively .
10054	if ValueError exception is caught ,
10055	raise an ImproperlyConfigured exception with an argument string STR0 .
10056	if value under the header key of the self.META dictionary is equal to value ,
10057	return string STR0 .
10058	call the method self._get_scheme , return the result .
10059	define the method is_secure with an argument self .
10060	if self.scheme equals to string STR0 , return boolean True , otherwise return boolean False .
10061	define the method is_ajax with an argument self .
10062	get the value under the STR0 key of the self.META dictionary , if it equals string STR1 , return boolean True , otherwise return boolean False .
10063	property decorator .
10064	define the method encoding with an argument self .
10065	return self._encoding .
10066	encoding.setter decorator ,
10067	define the method encoding with arguments self and val .
10068	substitute val for self._encoding .
10069	if self has an STR0 attribute ,
10070	delete self._get .
10071	if self has an STR0 attribute ,
10072	del self._post
10073	define the method _initialize_handlers with an argument self .
10074	for every handler in settings.FILE_UPLOAD_HANDLERS , add to a list result of the method uploadhandler.load_handler called with arguments handler and self , substitute resulting list for self._upload_handlers .
10075	property decorator ,
10076	define the method upload_handlers with an argument self .
10077	if self._upload_handlers is false ,
10078	call the method self._initialize_handlers ,
10079	return self._upload_handlers .
10080	upload_handlers.setter decorator .
10081	define the method upload_handlers with arguments : self and upload_handlers .
10082	if self has an STR0 attribute .
10083	raise an AttributeError exception with an argument string STR0 .
10084	substitute upload_handlers for self._upload_handlers .
10085	define the method parse_file_upload with 3 arguments : self , META and post_data .
10086	self.upload_handlers is an instance of ImmutableList , created with 2 arguments : self.upload_handlers , and warning as a string STR0 .
10087	parser is an instance of MultiPartParser class , created with 4 arguments : META , post_data , self.upload_handlers and self.encoding .
10088	call the method parser.parse , return the result .
10089	property decorator ,
10090	define the method body with an argument self .
10091	if self doesnt have an STR0 attribute ,
10092	if self._read_started is true ,
10093	raise an RawPostDataException exception with an argument string STR0 .
10094	try ,
10095	call the method self.read , substitute the result or self._body .
10096	if IOError , renamed to e , exception is caught ,
10097	call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args , third element of the result of the function sys.exc_info .
10098	self._stream is an instance of BytesIO class created with an argument self._body .
10099	return self._body .
10100	define the method_mark_post_parse_error with an argument self .
10101	self._post is an instance of QueryDict class created with an empty string as argument .
10102	self._files is an instance of MultiValueDict class .
10103	self._post_parse_error is boolean True .
10104	define the method _load_post_and_files with an argument self .
10105	if self.method is not equal to string STR0 ,
10106	self._post is an instance of QueryDict created with arguments : an empty string and encoding set to self._encoding ,
10107	self._files is an instance of class MultiValueDict . return nothing .
10108	if self._read_started is true and self doesnt have an STR0 attribute .
10109	call the method self._mark_post_parse_error .
10110	return nothing .
10111	get the value under the STR0 key of the self.META dictionary , if it starts with a string STR1 ,
10112	if self has an attribute STR0 ,
10113	data is an instance of BytesIO class , created with an argument : self._body .
10114	if not ,
10115	substitute self for data .
10116	try ,
10117	call the method self.parse_file_upload with arguments self.META and data , assign the result to self._post and self._files .
10118	if MultiPartParserError exception is caught ,
10119	call the method self._mark_post_parse_error .
10120	raise an exception .
10121	otherwise if value under the STR0 key of hte self.META dictionary starts with STR1 ,
10122	self._post is an instance of QueryDict created with arguments : self.body and encoding set to self._encoding , self._files is an instance of class MultiValueDict .
10123	if not ,
10124	self._post is an instance of QueryDict created with arguments : an empty string and encoding set to self._encoding , self._files is an instance of class MultiValueDict .
10125	define the method close with an argument self .
10126	if self has an attribute STR0 ,
10127	for every f in return value of the return value of the method chain.from_iterable called with argument :
10128	second element of l for every l in return value of the self._files.lists call the method f.close .
10129	define the method read with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
10130	self._read_started is True .
10131	try ,
10132	call the method self._stream.read with 2 arguments : unpacked list args and unpacked dictionary kwargs .
10133	if IOError , renamed to e , exception is caught ,
10134	call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args , third element of the result of the function sys.exc_info .
10135	define the method readline with 3 arguments : self , unpacked list args and unpacked list kwargs .
10136	self._read_started is boolean True .
10137	try ,
10138	call the method self._stream.readline with 2 arguments : unpacked list args , unpacked dictionary kwargs .
10139	if IOError , substituted to e , exception is caught ,
10140	call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args , third element of the result of the function sys.exc_info .
10141	define the method __init__ with an argument self .
10142	endless loop ,
10143	read one line from self file stream , substitute the result for buf .
10144	if buf is false ,
10145	break the loop execution .
10146	yield buf as return value of the generator .
10147	substitute xreadlines for __iter__ .
10148	define the method __init__ with an argument self .
10149	append to a list elements of the iterator self , return the resulting list .
10150	derive the class QueryDict from the base class MultiValueDict .
10151	_mutable is boolean True .
10152	_encoding is None .
10153	define the method __init__ with 4 arguments : self , query_string is None , mutable is boolean False and encoding set to None .
10154	call the __init__ method of the base class of the QueryDict class .
10155	if encoding is false .
10156	substitute settings.DEFAULT_CHARSET for encoding .
10157	substitute encoding for self.encoding .
10158	if six.PY3 is true ,
10159	if query_string is an instance of bytes ,
10160	call the method query_string.decode , substitute the result for query_string .
10161	for every key and value in return value of the parse_qsl with 3 arguments : query_string is it exists or an empty string if not , keep_blank_values set to boolean True , encoding set to encoding .
10162	call the method appendlist with 2 arguments : key and value .
10163	if not ,
10164	for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True .
10165	call the method self.appendlist with 2 arguments : return value of the function force_text with 3 arguments : key , encoding and errors set to string STR0 , and return value of the function force_text with 3 arguments : value , encoding and errors set to string STR1 .
10166	call the method mutable substitute for self._mutable .
10167	property decorator ,
10168	define the method encoding with an argument self .
10169	if self._encoding is None ,
10170	substitute settings.DEFAULT_CHARSET for self._encoding .
10171	return self._encoding .
10172	encoding.setter decorator ,
10173	define the method encoding with arguments self and value .
10174	substitute value for self._encoding .
10175	define the method _assert_mutable with an argument self .
10176	if not self._mutable ,
10177	raise an AttributeError with an argument string STR0 .
10178	define the method __setitem__ with 3 arguments : self , key and value .
10179	call the method self._assert_mutable .
10180	call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for key .
10181	call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for value .
10182	call the method __setitem__ from the base class of the QueryDict class , with arguments key and value .
10183	define the method __delitem__ with 3 arguments : self and key .
10184	call the method self._assert_mutable .
10185	call the method __delitem__ from the base class of the QueryDict class , with an argument key .
10186	define the method __copy__ with an argument self .
10187	call the method self.__class__ with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding , substitute the result for result .
10188	for key and value in return value of the six.iterlists function called with an argument self ,
10189	call the method result.setlist with the arguments : key and value .
10190	return result .
10191	define the method __deepcopy__ with 3 arguments : self and memo .
10192	call the method self.__class__ with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding , substitute the result for result .
10193	get the identity of the self object , use it as a key to get the value of the memo dictionary , substitute result for it .
10194	for key and value in result of the function six.iterlists called with an argument ,
10195	call the method result.setlist with 2 arguments : return value of the function copy.deepcopy called with 2 arguments : key and memo , and return value of the function copy.deepcopy called with 2 arguments : value and memo .
10196	return result .
10197	define the method setlist with 3 arguments : self , key and list_ .
10198	call the method self._assert_mutable .
10199	call the method bytes_to_text with an arguments key and self.encoding , substitute the result for key .
10200	for every elt in list_ call the method bytes_to_text with 2 argument : elt and self.encoding , append the result into a list , substitute the resulting list for list_ .
10201	call the method setlist from the base class of the QueryDict class , with arguments key and list_ .
10202	define the method setlistdefault with 3 arguments : self , key and default_list set to None .
10203	call the method self._assert_mutable .
10204	call the method setlistdefault from the base class of the class QueryDict , with arguments key and default_list , return the result .
10205	define the method appendlist with 3 arguments : self , key and value .
10206	call the method self._assert_mutable .
10207	call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for key .
10208	call the method bytes_to_text with 2 arguments : value and self.encoding , substitute the result for value .
10209	call the method appendlist from the base class of the QueryDict class , with arguments key and value .
10210	define the method pop with 3 arguments : self , key and unpacked list args .
10211	call the method self._assert_mutable .
10212	call the method pop from the base class of the class QueryDict , with arguments key and unpacked list args , return the result .
10213	define the method popitem with an argument self .
10214	call the method self._assert_mutable .
10215	call the method popitem from the base class of the class QueryDict , return the result .
10216	define the method clear with an argument self .
10217	call the method self._assert_mutable .
10218	call the method clear from the base class of the class QueryDict , return the result .
10219	define the method setdefault with 3 arguments : self , key and default set to None .
10220	call the method self._assert_mutable .
10221	call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for key .
10222	call the method bytes_to_text with 2 arguments : default and self.encoding , substitute the result for default .
10223	call the method setlistdefault from the base class of the class QueryDict , with arguments key and default_list , return the result .
10224	define the method copy with an argument self .
10225	call the method self.__deepcopy__ with an empty dictionary as an argument .
10226	define the method urlencode with 3 arguments : self and safe set to None .
10227	output is an empty list .
10228	if safe is true ,
10229	call the function force_bytes with 2 arguments : safe and self.encoding , substitute it for safe .
10230	encode is an lambda function with arguments k and v , return value is string STR0 , where STR1 is replaced with : return value of the function quote called with arguments k and safe , and with return value of the function quote called with arguments v and safe .
10231	if not ,
10232	encode is an lambda function with 2 arguments k and v , return value is the result of the function urlencode , called with an argument : dictionary containing element v for k .
10233	for every k and list_ in return value of the method self.lists ,
10234	call the function force_bytes with arguments k and self.encoding , substitute the result for k .
10235	for every v in list_ append to a list result of the function encode , called with arguments : k and result of the function force_bytes , called with arguments v and self.encoding , extend the output with the result .
10236	join elements of the output into a string , separated with STR0 , return the result .
10237	define the function build_request_repr with arguments : request , path_override set to None , GET_override set to None ,
10238	try ,
10239	get is a tuple containing elements generated by the call to the function pformat with an argument GET_override , if GET_override is not None , or otherwise generated with the call to the function pformat with an argument request.GET .
10240	if Exception exception is caught ,
10241	get is a string STR0 .
10242	if request._post_parse_error is true ,
10243	post is a string STR0 .
10244	if not ,
10245	try ,
10246	get is a tuple containing elements generated by the call to the function pformat with an argument POST_override , if POST_override is not None , or otherwise generated with the call to the function pformat with an argument request.POST .
10247	if Exception exception is caught ,
10248	post is a string STR0 .
10249	try ,
10250	get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override , if COOKIES_override is not None , or otherwise generated with the call to the function pformat with an argument request.COOKIES .
10251	if Exception exception is caught ,
10252	cookies is a string STR0 .
10253	try ,
10254	get is a tuple containing elements generated by the call to the function pformat with an argument META_override , if META_override is not None , or otherwise generated with the call to the function pformat with an argument request.META .
10255	if Exception exception is caught ,
10256	meta is a string STR0 .
10257	substitute path_override for path if path_override is not None , otherwise substitute request.path for path
10258	call the function force_str with an argument string STR0 , where STR1 is replaced with request.__class__.__name__ , path , return value of the function six.text_type called with an argument get , return value of the function six.text_type called with an argument post , return value of the function six.text_type , called with an argument cookies and return value of the function six.text_type called with an argument meta .
10259	define the function bytes_to_text with 2 arguments s and encoding .
10260	if s is an instance of bytes class ,
10261	call the method six.text_type with 3 arguments : s , encoding and string STR0 .
10262	if not ,
10263	return s .
10264	define the function split_domain_port with an argument host .
10265	convert host to lowercase .
10266	call the method host_validation_re.match with an argument host .
10267	return an empty string and an empty string .
10268	if last element of host equals character STR0 ,
10269	return host and an empty string .
10270	split host from the right side into 2 parts at the STR0 , substitute the result for bits .
10271	if length of bits equals integer 2 ,
10272	add bits to a tuple , return it .
10273	return the first element of bits and an empty string .
10274	define the method validate_host with 2 arguments : host and allowed_hosts .
10275	if host ends with STR0 , remove the last element from host .
10276	for every pattern in allowed_hosts :
10277	convert pattern to lowercase , substitute it for pattern .
10278	if pattern equals STR0 or pattern starts with STR1 or pattern equals host , and only if : host ends with STR2 and host ends with pattern or host is equal to all but first elements of pattern , substitute boolean true for match , otherwise substitute boolean False for match .
10279	if match is true ,
10280	return boolean True .
10281	return boolean False .
10282	from __future__ import unicode_literals into default name space .
10283	import module datetime .
10284	import module json .
10285	import module sys .
10286	import module time .
10287	from email.header import Header into default name space .
10288	from django.conf import settings into default name space .
10289	from django.core import signals into default name space .
10290	from django.core import signing into default name space .
10291	from django.core.exceptions import DisallowedRedirect into default name space .
10292	from django.core.serializers.json import DjangoJSONEncode into default name space .
10293	from django.http.cookie import SimpleCookie into default name space .
10294	from django.utils import six and timezone into default name space .
10295	from django.utils.encoding import force_bytes , force_text and iri_to_uri into default name space .
10296	from django.utils.http import cookie_date into default name space .
10297	from django.utils.six.moves import map into default name space .
10298	from django.utils.six.moves.urllib.parse import urlparse into default name space .
10299	REASON_PHRASES is a dictionary containing 59 initial entries : STR0 for 100 , STR1 for 101 , STR2 for 102 , STR3 for 200 , STR4 for 201 , STR5 for 202 , STR6 for 203 , STR7 for 204 , STR8 for 205 , STR9 for 206 , STR10 for 207 , STR11 for 208 , STR12 for 226 , STR13 for 300 , STR14 for 301 , STR15 for 302 , STR16 for 303 , STR17 for 304 , STR18 for 305 , STR19 for 306 , STR20 for 307 , STR21 for 308 , STR22 for 400 , STR23 for 401 , STR24 for 402 , STR25 for 403 , STR26 for 404 , STR27 for 405 , STR28 for 406 , STR29 for 407 , STR30 for 408 , STR31 for 409 , STR32 for 410 , STR33 for 411 , STR34 for 412 , STR35 for 413 , STR36 for 414 , STR37 for 415 , STR38 for 416 , STR39 for 417 , STR40M A TEAPOT STR41UNPROCESSABLE ENTITY STR42LOCKED STR43FAILED DEPENDENCY STR44UPGRADE REQUIRED STR45PRECONDITION REQUIRED STR46TOO MANY REQUESTS STR47REQUEST HEADER FIELDS TOO LARGE STR48INTERNAL SERVER ERROR STR49NOT IMPLEMENTED STR50BAD GATEWAY STR51SERVICE UNAVAILABLE STR52GATEWAY TIMEOUT STR53HTTP VERSION NOT SUPPORTED STR54VARIANT ALSO NEGOTIATES STR55INSUFFICIENT STORAGE STR56LOOP DETECTED STR57NOT EXTENDED STR58NETWORK AUTHENTICATION REQUIRED ' for 511 .
10300	derive the class BadHeaderError from the ValueError base class .
10301	do nothing .
10302	derive the class HttpResponseBase from the six.Iterator base class .
10303	status_code is an integer 200 .
10304	reason_phrase is None .
10305	define the method __init__ with 4 arguments : self , content_type set to None , status set to None , reason set to None .
10306	self._headers is an empty dictionary .
10307	substitute settings.DEFAULT_CHARSET for self._charset .
10308	self._closable_objects is an empty list .
10309	self._handler_class is None .
10310	if content_type is false ,
10311	replace STR1 in string STR0 with settings.DEFAULT_CONTENT_TYPE and self._charset , substitute it for content_type .
10312	self.cookies is an instance of a class SimpleCookie .
10313	if status is not None .
10314	substitute status for self.status_code .
10315	if reason is not None ,
10316	substitute reason for self.reason_phrase .
10317	otherwise if self.reason_phrase is None ,
10318	get the value under the self.status_code key of the REASON_PHRASES dictionary , if it exists substitute it for the self.reason_phrase , if not , self.reason_phrase is a string STR0 .
10319	substitute content_type for value under the STR0 key of the self dictionary .
10320	define the method serialize_headers with an argument self .
10321	define the function to_bytes with arguments val and encoding .
10322	if val is an instance of bytes , return val , otherwise return result of the method val.encode called with an argument encoding .
10323	for every key and value in return value of the self._headers.values method , call the function to_bytes with 2 arguments : key , and string STR0 and call the function to_bytes with 2 arguments : value and string STR1 , join the previous 2 results into a string , separated by STR2 , append it to a list , substitute the resulting list for headers .
10324	join headers into a string , separated by string STR0 .
10325	if six.PY3 is true ,
10326	substitute serialize_headers for __bytes__ .
10327	if not ,
10328	substitute serialize_headers for __str__ .
10329	define the method _convert_to_charset with 4 arguments : self , value , charset and mime_encode set to boolean False .
10330	if value is not an instance of bytes or six.text_type classes ,
10331	convert value to an string and substitute it for value .
10332	try ,
10333	if six.PY3 is true ,
10334	if value is an instance of str type ,
10335	call the method value.encode with an argument charset .
10336	if not ,
10337	call the method value.decode with an argument charset , substitute the result for value .
10338	if not ,
10339	if value is an instance of str type ,
10340	call the method value.decode with an argument charset .
10341	if not ,
10342	call the method value.encode with an argument charset , substitute the result for value .
10343	if UnicodeError , renamed to e , exception is caught ,
10344	if mime_encode is true ,
10345	instantiate class Header with 3 arguments : value , string STR0 , maxlinelen set to sys.maxsize , call the encode method on it , convert the result into a string and substitute it for value .
10346	if not ,
10347	replace STR0 in string STR1 for charset , append it to e.reason .
10348	raise an exception .
10349	convert STR0 to a string , if it is contained in value or STR1 converted to an string is contained in value ,
10350	raise an BadHeaderError exception with an argument string STR0 , where STR1 is replaced with value .
10351	return value .
10352	define the method __setitem__ with 3 arguments : self , header and value .
10353	call the method self._convert_to_charset with arguments : header and string STR0 , substitute the result for header .
10354	call the method self._convert_to_charset with arguments : header , string STR0 and mime_encode set to boolean True , substitute the result for value .
10355	substitute tuple containing 2 elements : header and value for the value under the header converted to lowercase key of the self._headers dictionary .
10356	define the method __delitem__ with 2 arguments : self and header .
10357	try ,
10358	delete the value under the header converted to lowercase key of the self._headers dictionary .
10359	if KeyError exception is caught ,
10360	do nothing .
10361	define the method __getitem__ with 2 arguments : self and header .
10362	convert header to lowercase , use it as the key to get the value from the self._headers dictionary , return the second element of the result .
10363	define the method __getstate__ with an argument self .
10364	call the method self.__dict__.copy , substitute the result for state .
10365	get the value under the STR0 key of the state dictionary , convert it to a string and substitute it for value under the STR1 key of the state dictionary .
10366	return state .
10367	define the method __setstate__ with 2 arguments : self and state .
10368	add state element to self.__dict__ dictionary .
10369	self.cookies is an instance of SimpleCookie class created with self.cookies as an argument .
10370	define the method has_header with 2 arguments : self and header .
10371	convert deader to lowercase , if it is contained in self._headers return boolean True , if not , return boolean False .
10372	substitute has_header for __contains__ .
10373	define the method items with an argument self .
10374	call the method self._headers.values , return the result ,
10375	define the method get with 3 arguments : self , header and alternate set to None .
10376	convert header to lowercase , use it to as a key to get the value of the self._headers dictionary , if it exists return the second element of the result , if not , return alternate .
10377	define the method set_cookie with 9 arguments : self , key , value set to an empty string , max_age set to None , expires set to None ,
10378	substitute value for self.cookies dictionary value under the key key .
10379	if expires is not None ,
10380	if expires is an instance of datetime.datetime class ,
10381	call the method timezone.is_aware with an argument expires , if it evaluates to true ,
10382	call the method timezone.make_naive with arguments : expires , timezone.utc , substitute the result for expires .
10383	call the method expires.utcnow , subtract the result from expires , substitute the result for delta .
10384	call the method datetime.timedelta with an argument seconds set to integer 1 , increment delta by it .
10385	expires is None .
10386	multiply delta.days with an integer 86400 add to the result delta.seconds , if the result is greater than integer 0 , substitute it for max_age , if not , max_age is integer 0 .
10387	if not ,
10388	get the value under the key key of the self.cookies dictionary , substitute expires for STR0 key of the returned dictionary .
10389	if max_age is not None ,
10390	get the value under the key key of the self.cookies dictionary , substitute max-age for STR0 key of the returned dictionary .
10391	if expires is false ,
10392	get the value under the key key of the self.cookies dictionary , call the cookie_date function with an argument : sum of the result of the function time.time and max_age , substitute it for STR0 key of the previously returned dictionary .
10393	if path is not None ,
10394	get the value under the key key of the self.cookies dictionary , substitute path for STR0 key of the returned dictionary .
10395	if domain is not None ,
10396	get the value under the key key of the self.cookies dictionary , domain expires for STR0 key of the returned dictionary .
10397	if secure is true ,
10398	get the value under the key key of the self.cookies dictionary , substitute boolean True for STR0 key of the returned dictionary .
10399	if httponly is true ,
10400	get the value under the key key of the self.cookies dictionary , substitute boolean True for STR0 key of the returned dictionary .
10401	define the method set_signed_cookie with 5 arguments : self , key , value , salt as an empty string and unpacked dictionary kwarg .
10402	call the method signing.get_cookie_signer with an argument salt set to sum of key and salt , call the method sign on the result with an argument value , substitute the result for value .
10403	call the method self.set_cookie with 3 arguments : key , value and unpacked dictionary kwargs , return the result .
10404	define the method delete_cookie with 4 arguments : self , key , path set to character STR0 and domain set to None .
10405	call the method self.set_cookie with 5 arguments : key , max_age as integer 0 , path as path , domain as domain , expires as a string STR0 , return the result .
10406	define the method make_bytes with 2 arguments : self and value .
10407	call the method self.has_header with string STR0 as an argument , if it evaluates to true ,
10408	call the function bytes with an argument value , return the result .
10409	if value is an instance of bytes class ,
10410	call the function bytes with an argument value , return the result .
10411	if value is an instance of six.text_type class ,
10412	call the method value.encode with an argument self._charset , use the result as an argument for the call to the bytes function , return the result .
10413	call the function force_bytes with arguments value and self._charset , return the result .
10414	define the method close with an argument self .
10415	for every closable in self._closable_objects ,
10416	try ,
10417	call the method closable.close .
10418	if Exception exception is caught ,
10419	do nothing .
10420	call the method signals.request_finished.send with an argument sender set to self._handler_class .
10421	define the method write with 2 arguments : self and value .
10422	raise an Exception exception with an argument string STR0 , where STR1 is replaced with self.__class__.__name__ .
10423	define the method flush with an argument self .
10424	do nothing .
10425	define the method tell with an argument self .
10426	raise an Exception exception with an argument string STR0 , where STR1 is replaced with self.__class__.__name__ .
10427	derive the class HttpResponse from the HttpResponseBase base class .
10428	streaming is boolean False .
10429	define the method __init__ with 4 arguments : self , content set to an empty list , unpacked list args and unpacked dictionary kwargs .
10430	call the __init__ method from the base class of the HttpResponse class , with the arguments : unpacked list args and unpacked dictionary kwargs .
10431	substitute content for self.content .
10432	define the serialize content with an argument self .
10433	call method self.serialize_headers , append bytes string STR0 to the result , append self.content to the result , return it .
10434	if six.PY3 is true ,
10435	substitute serialize for __bytes__ .
10436	if not ,
10437	substitute serialize for __str__ .
10438	property decorator ,
10439	define the method content with an argument self .
10440	join self._container elements into a string , return it .
10441	content.setter decorator ,
10442	define the method content with 2 arguments : self and value .
10443	if value has an STR0 attribute and value is not an instance of bytes or six.string_types class .
10444	if value has an STR0 attribute ,
10445	append value to the self._closable_objects list .
10446	call the self.make_bytes method with an argument chunk , for every chunk in value join the result to a bytes string , substitute the result for value .
10447	if not ,
10448	call the method self.make_bytes with an argument value , substitute the result for value .
10449	self._container is a list containing element value .
10450	define the method __iter__ with an argument self .
10451	return self._container converted into a iterable .
10452	define the method write with 2 arguments : self and content .
10453	call the method self.make_bytes with an argument content , append it to self._container .
10454	define the method tell with an argument self .
10455	return the length of self.content .
10456	derive the class StreamingHttpResponse from the HttpResponseBase base class .
10457	streaming is boolean True .
10458	define the method __init__ with 4 arguments : self , result of the function streaming_content= ( ) , unpacked list args , and unpacked dictionary kwargs .
10459	call the __init__ method from the base class of the StreamingHttpResponse class , called with arguments : unpacked list args , and unpacked dictionary kwargs .
10460	substitute streaming_content for self.streaming_content .
10461	property decorator ,
10462	define the method content with an argument self .
10463	raise an AttributeError with an argument string STR0Use `streaming_content` instead . `` , where STR1 is replaced with self.__class__.__name__ .
10464	property decorator ,
10465	define the method serialize_headers with an argument self .
10466	map elements of self._iterator through self.make_bytes function , return the result .
10467	streaming_content.setter decorator ,
10468	define the method streaming_content with 2 arguments : self and value .
10469	convert value into a iterator , substitute the result for self._iterator .
10470	if value has an attribute STR0 ,
10471	append value to self._closable_objects list .
10472	define the method __iter__ with an argument self .
10473	return self.streaming_content
10474	derive the class HttpResponseRedirectBase from the HttpResponse base class .
10475	allowed_schemes is an list containing 3 elements : strings STR0 , STR1 and STR2 .
10476	define the method __init__ with 4 arguments : self , redirect_to , unpacked list args and unpacked dictionary kwargs .
10477	call the function force_text with an argument redirect_to , use the result as an argument for the call to the function urlparse , substitute the result for parsed .
10478	if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes ,
10479	raise an DisallowedRedirect exception with an argument string STR0 , where STR1 is replaced with parsed.scheme .
10480	call the __init__ method from the base class of the HttpResponseRedirectBase class , called with arguments : unpacked list args , and unpacked dictionary kwargs .
10481	call the function iri_to_uri with an argument redirect_to , substitute the result for the value under the STR0 key of the self dictionary .
10482	url is a property of the class , lambda function is getter attribute with an argument self and return value is the value under the STR0 key of the self dictionary .
10483	derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class .
10484	status_code is an integer 302 .
10485	derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class .
10486	status_code is an integer 301 .
10487	derive the class HttpResponseNotModified from the HttpResponse base class .
10488	status_code is an integer 304 .
10489	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
10490	call the __init__ method from the base class of the HttpResponseNotModified class , called with arguments : unpacked list args , and unpacked dictionary kwargs .
10491	delete the value under the STR0 key of the self dictionary .
10492	HttpResponse.content.setter property ,
10493	define the method content with self and value .
10494	if value ,
10495	raise an AttributeError exception with an argument string STR0 .
10496	self._container is an list .
10497	derive the class HttpResponseBadRequest from the HttpResponse base class .
10498	status_code is an integer 400 .
10499	derive the class HttpResponseNotFound from the HttpResponse base class .
10500	status_code is an integer 404 .
10501	derive the class HttpResponseForbidden from the HttpResponse base class .
10502	status_code is an integer 403 .
10503	derive the class HttpResponseNotAllowed from the HttpResponse base class .
10504	status_code is an integer 405 .
10505	define the method __init__ with 4 arguments : self , permitted_methods , unpacked list args and unpacked dictionary kwargs .
10506	call the __init__ method from the base class of the HttpResponseNotAllowed class , called with arguments : unpacked list args , and unpacked dictionary kwargs .
10507	join into a string permitted_methods , separated by string STR0 , substitute it for value under the STR1 key of the self dictionary .
10508	derive the class HttpResponseGone from the HttpResponse base class .
10509	status_code is an integer 410 .
10510	derive the class HttpResponseServerError from the HttpResponse base class .
10511	status_code is an integer 500 .
10512	derive the class Http404 from the Exception base class .
10513	do nothing .
10514	derive the class JsonResponse from the HttpResponse base class .
10515	define the method __init__ with 5 arguments : self , data , encoder set to DjangoJSONEncoder , safe set to boolean True , and unpacked dictionary kwargs .
10516	if safe is true and data is not an instance of dict type .
10517	raise an TypeError exception with an argument string STR0 .
10518	if STR0 key doesnt exist in kwargs , set its value to STR1 .
10519	serialize data to JSON format with cls set to encoder , substitute it for data .
10520	call the __init__ method from the base class of the JsonResponse class , called with arguments : content set to data ,
10521	define function fix_location_header with request and response as arguments .
10522	if STR0 is contained in response and function request.get_host evaluates to True ,
10523	modify value at the key STR0 of the dictionary response by applying function request.build_absolute_uri on it .
10524	return response .
10525	define the function conditional_content_removal with request and response as the arguments .
10526	if response.status_code is lesser than integer 200 and grater or equal than 100 , or response.status_code equals to integer 204 or 304 ,
10527	if response.streaming is True ,
10528	response.streaming_content is an empty list .
10529	if not ,
10530	response.content is bytes empty string .
10531	substitute char STR0 for the value under the STR1 key of the response dictionary .
10532	if request.method equals to string STR0 ,
10533	if response.streaming is true ,
10534	response.streaming_content is an empty list .
10535	if not ,
10536	response.content is bytes empty string .
10537	return response .
10538	from django.template.base import ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END , BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START , FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END , SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR , TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR , VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re and tag_re .
10539	from django.template.base import ContextPopException , InvalidTemplateLibrary , TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError and VariableDoesNotExist .
10540	from django.template.base import Context , FilterExpression , Lexer , Node , NodeList , Parser , RequestContext , Origin , StringOrigin , Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string and filter_raw_string .
10541	from django.template.base import compile_string , resolve_variable , unescape_string_literal and generic_tag_compiler .
10542	from django.template.base import Library , add_to_builtins , builtins , get_library , get_templatetags_modules , get_text_list , import_library and libraries .
10543	__all__ is a tuple containing 4 strings : STR0 , STR1 , STR2 and STR3 .
10544	from __future__ import unicode_literals into default name space .
10545	import module re .
10546	from functools import partial into default name space .
10547	from importlib import import_module into default name space .
10548	from inspect import getargspec and getcallargs into default name space .
10549	import module warnings .
10550	from django.apps import apps into default name space .
10551	from django.conf import settings into default name space .
10552	from django.template.context import BaseContext , Context , RequestContext and ContextPopException into default namespace .
10553	from django.utils.deprecation import RemovedInDjango20Warning into default name space .
10554	from django.utils.itercompat import is_iterable into default name space .
10555	from django.utils.text import smart_split , unescape_string_literal and get_text_list into default namespace .
10556	from django.utils.encoding import force_str and force_text into default name space .
10557	from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space .
10558	from django.utils.safestring import SafeData , EscapeData , mark_safe and mark_for_escaping into default namespace .
10559	from django.utils.formats import localize into default name space .
10560	from django.utils.html import escape into default name space .
10561	from django.utils.module_loading import module_has_submodule into default name space .
10562	from django.utils import six into default name space .
10563	from django.utils.timezone import template_localtime into default name space .
10564	from django.utils.encoding import python_2_unicode_compatible into default name space .
10565	TOKEN_TEXT is integer 0
10566	TOKEN_VAR is integer 1
10567	TOKEN_BLOCK is integer 2
10568	TOKEN_COMMENT is integer 3 .
10569	TOKEN_MAPPING is a dictionary with 4 initial entries : STR0 for TOKEN_TEXT , STR1 for TOKEN_VAR , STR2 for TOKEN_BLOCK , and STR3 for TOKEN_COMMENT .
10570	FILTER_SEPARATOR is a string STR0 .
10571	FILTER_ARGUMENT_SEPARATOR is a string STR0 .
10572	VARIABLE_ATTRIBUTE_SEPARATOR is a string STR0 .
10573	BLOCK_TAG_START is a string STR0 .
10574	BLOCK_TAG_END is a string STR0 .
10575	VARIABLE_TAG_START is a string STR0 .
10576	VARIABLE_TAG_END is a string STR0 .
10577	COMMENT_TAG_START is a string STR0 .
10578	COMMENT_TAG_END is a string STR0 .
10579	TRANSLATOR_COMMENT_MARK is a string STR0 .
10580	SINGLE_BRACE_START is a string STR0 .
10581	SINGLE_BRACE_END is a string STR0 .
10582	ALLOWED_VARIABLE_CHARS is a string STR0 .
10583	UNKNOWN_SOURCE is a string STR0 .
10584	call the function re.compile with an argument string STR0 , substitute all occurrences of STR1 with , return value of the function re.escape called with an argument BLOCK_TAG_START , return value of the function re.escape called with an argument BLOCK_TAG_END , return value of the function re.escape called with an argument VARIABLE_TAG_START , return value of the function re.escape called with an argument VARIABLE_TAG_END , return value of the function re.escape called with an argument COMMENT_TAG_START , and return value of the function re.escape called with an argument COMMENT_TAG_END , substitute the result for tag_re .
10585	libraries is an empty dictionary .
10586	builtins is an empty list .
10587	invalid_var_format_string is None .
10588	derive the class TemplateSyntaxError form the base class Exception .
10589	do nothing .
10590	derive the class TemplateDoesNotExist form the base class Exception .
10591	do nothing .
10592	derive the class TemplateEncodingError form the base class Exception .
10593	do nothing .
10594	python_2_unicode_compatible decorator ,
10595	derive the class VariableDoesNotExist form the base class Exception .
10596	define the method __init__ with 3 arguments : self , msg and params set to an empty tuple .
10597	substitute msg for self.msg .
10598	substitute params for self.params .
10599	define the method __str__ with an argument self .
10600	return self.msg formatted with a tuple , with elements generated from return value of the function force_text with 2 arguments : p and errors set to string STR0 , for p in self.params .
10601	derive the class InvalidTemplateLibrary form the base class Exception .
10602	do nothing .
10603	derive the class Origin form the base class object .
10604	define the method __init__ with 2 arguments : self and name .
10605	substitute name for self.name .
10606	define the method reload with an argument self .
10607	raise an NotImplementedError exception with an argument string STR0 .
10608	define the method with reload with an argument self .
10609	return self.name .
10610	derive the class StringOrigin form the base class Origin .
10611	define the method __init__ with 2 arguments : self and source .
10612	call the method __init__ with an argument UNKNOWN_SOURCE , from the base class of the class StringOrigin .
10613	substitute source for self.source .
10614	define the method with reload with an argument self .
10615	return self.source .
10616	derive the class Template form the base class object .
10617	define the method __init__ with 4 arguments : self , template_string , origin set to None and name set to None .
10618	try ,
10619	call the function force_text with an argument template_string .
10620	if UnicodeDecodeError exception is caught ,
10621	raise an TemplateEncodingError exception with an argument STR0 .
10622	if settings.TEMPLATE_DEBUG is true and origin is None ,
10623	origin is an instance of StringOrigin class created with an argument template_string .
10624	call the function compile_string with 2 arguments : template_string and origin , substitute the result for self.nodelist .
10625	substitute name for self.name .
10626	substitute origin for self.origin .
10627	define the method __iter__ with an argument self .
10628	for every node in self.nodelist ,
10629	for every subnode in node ,
10630	yield subnode .
10631	define the method _render with 2 arguments self and context .
10632	call the method self.nodelist.render with an argument context , return the result .
10633	define the method render with 2 arguments self and context .
10634	call the method context.render_context.push .
10635	try ,
10636	call the method self._render with an argument context , return the result ,
10637	finally perform ,
10638	remove the first element from context.render_context .
10639	define the method compile_string with 2 arguments : template_string and origin .
10640	if settings.TEMPLATE_DEBUG is true ,
10641	from django.template.debug import DebugLexer and DebugParser .
10642	substitute DebugLexer and DebugParser for lexer_class and parser_class .
10643	if not ,
10644	substitute Lexer and Parser for lexer_class and parser_class .
10645	call the method lexer_class with an arguments template_string and origin , substitute the result for lexer .
10646	call the method lexer.tokenize , use it as an argument for the call to the parser_class function , substitute the result for parser .
10647	call the method parser.parse , return the result .
10648	derive the class Token form the base class object .
10649	define the method __init__ with 3 arguments : self , token_type and contents .
10650	substitute token_type and contents for self.token_type and self.contents .
10651	self.lineno is None .
10652	define the method __str__ with an argument self .
10653	substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name .
10654	return a string STR1 with STR2 , replace STR3 with token_name and 20 self.contents elements with every newline deleted .
10655	define the method split_contents with an argument self .
10656	split is an empty list .
10657	call the function smart_split with an argument self.contents , substitute the result converted to an iterable for bits .
10658	for every bit in bits ,
10659	if bit starts with STR0 ot bit starts with STRspecial ,
10660	append STR0 to third element of bit , substitute it for sentinal .
10661	trans_bit is a list with an element bit .
10662	while bit doesnt end with sential ,
10663	call the method next with an argument bits , substitute the result for bit .
10664	append bit to trans_bit .
10665	join trans_bit into a string separated with whitespaces , substitute the result for bit .
10666	append bit to split .
10667	return split .
10668	derive the class Lexer form the base class object .
10669	define the method __init__ with 3 arguments : self , template_string and origin .
10670	substitute template_string for self.template_string .
10671	substitute origin for self.origin .
10672	self.lineno is integer 1 .
10673	self.verbatim is boolean False .
10674	define the method tokenize with an argument self .
10675	in_tag is boolean False .
10676	result is an empty list .
10677	split tag_re by self.template_string separator , for every bit in result ,
10678	if bit is true ,
10679	call the method self.create_token with 2 arguments bit and in_tag , append the result to result .
10680	in_tag is boolean True if in_tag is False , otherwise is boolean False .
10681	return result .
10682	define the method create_token with 3 arguments : self , token_string and in_tag .
10683	if in_tag is true and token_string starts with BLOCK_TAG_START .
10684	take elements of token_string from second to second last element and strip the whitespaces surrounding the result , substitute the result for block_content .
10685	if self.verbatim is true and block_content equals self.verbatim ,
10686	self.verbatim is boolean False .
10687	if in_tag and is not contained in self.verbatim ,
10688	if token_string starts with VARIABLE_TAG_START ,
10689	token is an instance of Token class , created with 2 arguments : TOKEN_VAR , and elements of token_string from second to second last element wiht the whitespaces striped from the both sides .
10690	otherwise if token_string starts with BLOCK_TAG_START ,
10691	if first nine elements of block_content is string STR0 or STR1 ,
10692	append block_content to a string STR0 , substitute the result for self.verbatim .
10693	token is an instance of Token class , created with 2 arguments : TOKEN_BLOCK and block_content .
10694	otherwise if token_string starts with COMMENT_TAG_START ,
10695	content is an empty string .
10696	call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK , if it evaluates to true ,
10697	take elements of token_string from second to second last element and strip the whitespaces surrounding the result , substitute the result for content .
10698	token is an instance of Token class , created with 2 arguments : TOKEN_COMMENT and content .
10699	if not ,
10700	token is an instance of Token class , created with 2 arguments : TOKEN_TEXT and token_string .
10701	substitute self.lineno for token.lineno .
10702	call the method token_string.count with an argument STR0 , append the result to self.lineno .
10703	return token .
10704	derive the class Parser form the base class object .
10705	define the method __init__ with 2 arguments : self and token .
10706	substitute tokens for self.tokens .
10707	self.tags is an empty dictionary .
10708	self.filters is an empty dictionary .
10709	for every lib in builtins ,
10710	call the method self.add_library with an argument lib .
10711	define the emethod parse with 2 arguments : self and parse_until set to None .
10712	if parse_until is None ,
10713	parse_until is an empty list ,
10714	call the method self.create_nodelist , substitute the result for nodelist .
10715	while self.tokens is true ,
10716	call the method self.next_token , substitute the result for token .
10717	if token.token_type equals integer 0 ,
10718	call the method self.extend_nodelist with 3 arguments : nodelist , instance of TextNode class , created with an argument token.contents , and token .
10719	otherwise if token.token_type equals integer 1 ,
10720	if token.contents is false ,
10721	call the method self.empty_variable with an argument token ,
10722	try ,
10723	call the method self.compile_filter with an argument token.contents , substitute the result for filter_expression .
10724	if TemplateSyntaxError , replaced with e , exception is caught ,
10725	call the method self.compile_filter_error with 2 arguments : token and e , if it evaluates to false ,
10726	raise an exception ,
10727	call the method self.create_variable_node with an argument filter_expression , substitute the result for var_node .
10728	call the method self.extend_nodelist with 3 arguments : nodelist , var_node and token .
10729	otherwise if token.token_type equals integer 2 ,
10730	try ,
10731	split token.contents into separate words , substitute the first element of the result for command .
10732	if IndexError exception is caught ,
10733	call the method self.empty_block_tag with an argument token .
10734	if command is contained in parse_until ,
10735	call the method self.prepend_token with an argument token ,
10736	return nodelist .
10737	call the method self.enter_command with 2 arguments command and token .
10738	try ,
10739	substitute the value under the command key of self.tags dictionary for compile_func .
10740	if KeyError exception is caught ,
10741	call the method self.invalid_block_tag with 3 arguments : token , command and parse_until .
10742	try ,
10743	call the method compile_func with 2 arguments self and token , substitute the result for compiled_result .
10744	if TemplateSyntaxError , renamed to e , exception is caught ,
10745	call the method self.compile_function_error with 2 arguments token and e , if it evaluates to false ,
10746	raise an exception ,
10747	call the method self.extend_nodelist with 3 arguments : nodelist , compiled_result and token .
10748	call the method self.exit_command .
10749	if parse_until is true ,
10750	call the method self.unclosed_block_tag with an argument parse_until .
10751	return nodelist .
10752	define the method skip_past with 2 arguments : self and endtag .
10753	while self.tokens is true ,
10754	call the method self.next_token , substitute the result for token .
10755	if token.token_type equals TOKEN_BLOCK and token.contents equals endtag ,
10756	return nothing .
10757	call the method self.unclosed_block_tag with an argument list with an element endtag .
10758	define the method create_variable_node with 2 arguments self and filter_expression .
10759	return an instance of VariableNode class with an argument filter_expression .
10760	define the method create_nodelist with an argument self .
10761	return an instance of NodeList class .
10762	define the method extend_nodelist with 4 arguments : self , nodelist , node and token .
10763	if node.must_be_first is true and nodelist is true ,
10764	try ,
10765	if nodelist.contains_nontext is true ,
10766	raise AttributeError exception ,
10767	if AttributeError exception is raised ,
10768	raise TemplateSyntaxError ( STR0 , where STR1 is replaced with node .
10769	if nodelist is an instance of NodeList and node is not an instance of TextNode class .
10770	nodelist.contains_nontext is boolean True .
10771	append node to nodelist .
10772	define the method enter_command with 3 arguments : self , command and token .
10773	do nothing .
10774	define the method exit_command with an argument self .
10775	do nothing .
10776	define the method enter_command with 3 arguments : self , token and msg .
10777	return an instance of TemplateSyntaxError class with an argument msg .
10778	define the method empty_variable with 2 arguments : self and token .
10779	call the method self.error with 2 arguments : token and string STR0 , return the result .
10780	define the method empty_block_tag with 2 arguments : self and token .
10781	call the method self.error with 2 arguments : token and string STR0 , return the result .
10782	define the method invalid_block_tag with 4 arguments : self , token , command and parse_until as None .
10783	if parse_until is true ,
10784	raise an self.error exception with 2 arguments : token and string STR0 , where STR1 is replaced with command and result of the function get_text_list called with an argument list , with p converted into a string and surrounded with single quotes for every p in parse_until .
10785	call the method self.error with 2 arguments : token and string STR0 , where STR1 is replaced with command , return the result .
10786	define the method unclosed_block_tag with 2 arguments : self and parse_until .
10787	raise an self.error with 2 arguments : None and string STR0 , where STR1 is replaced with parse_until elements joined into a string , separated with STR2 .
10788	define the method compile_filter_error with 3 arguments : self , token and e .
10789	do nothing .
10790	define the method compile_function_error with 3 arguments : self , token and e .
10791	do nothing .
10792	define the method next_token with an argument self .
10793	remove first element from self.tokens , return removed element .
10794	define the function prepend_token with 2 arguments : self and token .
10795	insert token at the beginning of self.tokens .
10796	define the method delete_first_token with an argument self .
10797	delete the first element of self.tokens .
10798	define the function add_library with 2 arguments : self and lib .
10799	update self.tags dictionary with lib.tags .
10800	update self.filters dictionary with lib.filters .
10801	define the function compile_filter with 2 arguments : self and token .
10802	return an instance of FilterExpression class , created with 2 arguments : token and self .
10803	define the function find_filter with 2 arguments : self and filter_name .
10804	if filter_name is contained in self.filters ,
10805	return the value under the filter_name key of the self.filters dictionary .
10806	if not ,
10807	raise an TemplateSyntaxError with an argument string STR0 , substitute STR1 with filter_name .
10808	derive the class TokenParser form the base class object .
10809	define the function next_space_index with 2 arguments : self and subject .
10810	substitute subject for self.subject .
10811	self.pointer is integer 0 .
10812	self.backout is an empty list .
10813	call the method self.tag , substitute the result for self.tagname .
10814	define the method top with an argument self .
10815	raise an NotImplementedError with an argument string STR0 .
10816	define the method more with an argument self .
10817	if self.pointer is smaller than length of self.subject , return boolean True , otherwise return False .
10818	define the method back with an argument self .
10819	if length of self.backout is greater than zero ,
10820	raise an TemplateSyntaxError exception with an argument string STR0 .
10821	remove the first element from self.backout , substitute the result for self.pointer .
10822	define the method tag with an argument self .
10823	substitute self.subject for subject .
10824	substitute self.pointer for i .
10825	if i is greater than or equal to length of subject .
10826	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with subject .
10827	substitute i for p .
10828	while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,
10829	increment i by integer 1 .
10830	take subject elements from p-th to i-th index , substitute it for s .
10831	while i is lesser than length of subject and i-th element of subject is an empty space or tab character ,
10832	increment i by integer 1 .
10833	append self.pointer to self.backout .
10834	substitute i for self.pointer .
10835	return s .
10836	define the method value with an argument self .
10837	substitute self.subject for subject .
10838	substitute self.pointer for i .
10839	define the next_space_index with 2 arguments : subject and i .
10840	while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,
10841	if i-th element of subject is STR character or STR character ,
10842	substitute i-th element of subject for c .
10843	increment i by integer 1 .
10844	while i is lesser than length of subject and i-th element of subject is not equal to c ,
10845	increment i by one .
10846	if i is greater than , or equal to subject ,
10847	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with i and STR2 is replaced with subject .
10848	increment i by one .
10849	return i .
10850	if i is greater than or equal to length of subject ,
10851	raise an TemplateSyntaxError exception with an argument STR0 , where STR1 is replaced with subject .
10852	if i-th element of subject is STR character or STR character ,
10853	substitute i for p .
10854	increment i by integer 1 ,
10855	while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject ,
10856	increment i by integer 1 ,
10857	if i is greater than length of subject ,
10858	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with i and STR2 is replaced with subject .
10859	increment i by integer 1 ,
10860	call the function next_space_index with 2 arguments : subject and i , substitute the result for i .
10861	substitute subject elements from p-th to i-th index for res .
10862	while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
10863	increment i by integer 1 ,
10864	append self.pointer to self.backout .
10865	substitute i for self.pointer .
10866	return res .
10867	if not ,
10868	substitute i for p .
10869	call the function next_space_index with 2 arguments subject and i , substitute the result for i .
10870	take subject elements from p-th to i-th index , substitute it for s .
10871	while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
10872	increment i by integer 1 , .
10873	append self.pointer to self.backout .
10874	substitute i for self.pointer .
10875	return s .
10876	constant_string is a raw string STR0 , where STR4 is replaced with STR5 , STR6 is replaced with STR3 , STR7 is replaced with return value of function re.escape called with an argument string STR8 , STR9 is replaced with return value of function re.escape called with an argument string STR10 .
10877	remove all occurrences of newline character from constant_string .
10878	filter_raw_string is a raw string STR0 , where STR2 is replaced with constant_string , STR3 with raw string STR4 , STR5 with string STR1 , STR6 with result of the function re.escape called with an argument FILTER_SEPARATOR , anbd STR7 with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR .
10879	call the function re.compile with 2 arguments : filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE , substitute the result for filter_re .
10880	derive the class FilterExpression form the base class object .
10881	define the function __init__ with 3 arguments : self , token and parser .
10882	substitute token for self.token .
10883	call the method filter_re.finditer with an argument token , substitute the result for matches .
10884	var_obj is None .
10885	filters is an empty list .
10886	upto is integer 0 .
10887	for every match in matches ,
10888	call the method match.start , substitute the result for start .
10889	if upto is not equal to start .
10890	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first upto elements of token string , token string elements from upto to start index , and token string elements from start index to the end .
10891	if var_obj is None ,
10892	call the method match.group with 2 arguments : strings STR0 and STR1 , substitute the result for var and constant , respectively .
10893	if constant is true ,
10894	try ,
10895	instantiate Variable class , with an argument constant , call the resolve method with an empty dictionary as an argument , substitute the result for var_obj .
10896	if VariableDoesNotExist exception is not caught ,
10897	var_obj is None .
10898	otherwise if var is None ,
10899	raise an TemplateSyntaxError exception with an argument STR0 , replace STR1 with token .
10900	if not ,
10901	var_obj is an instance of Variable class , created with an argument var .
10902	if not ,
10903	call the methof match.group with an argument STR0 , substitute the result for filter_name .
10904	args is an empty list .
10905	call the method match.group with 2 arguments : strings STR0 and STR1 , substitute the result for constant_arg , and var_arg , respectively .
10906	if constant_arg is true ,
10907	take a tuple with 2 elements : boolean False and method resolve called with an empty dictionary on the instance of Variable class , created with an argument constant_arg , append it to args .
10908	otherwise if var_arg is true ,
10909	take a tuple with 2 elements : boolean False and instance of Variable class , created with an argument constant_arg , append it to args .
10910	call the method parser.find_filter with an argument filter_name , substitute the result for filter_func .
10911	call the method self.args_check with 3 arguments : filter_name , filter_func and args .
10912	append a tuple with 2 arguments : filter_func and args to filters .
10913	call the method match.end , substitute the result for upto .
10914	if upto is not equal to length of token ,
10915	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with elemnts of token from upto index till the end , and token .
10916	substitute filters for self.filters .
10917	substitute var_obj for self.var .
10918	define the method resolve with 3 arguments : self , context and ignore_failures set to boolean False .
10919	if self.var is an instance of Variable class ,
10920	try ,
10921	call the method self.var.resolve with an argument context , substitute it for obj .
10922	if VariableDoesNotExist exception is caught ,
10923	if ignore_failures is true ,
10924	obj is None ,
10925	if not ,
10926	if settings.TEMPLATE_STRING_IF_INVALID is true ,
10927	use global variable invalid_var_format_string .
10928	if invalid_var_format_string is None ,
10929	if STR0 is contained in settings.TEMPLATE_STRING_IF_INVALID , invalid_var_format_string is boolean True , otherwise it is False .
10930	if invalid_var_format_string is true ,
10931	format settings.TEMPLATE_STRING_IF_INVALID with self.var , return the result .
10932	return settings.TEMPLATE_STRING_IF_INVALID .
10933	if not ,
10934	substitute settings.TEMPLATE_STRING_IF_INVALID with obj .
10935	if not ,
10936	substitute self.var for obj .
10937	for every func and args in self.filters ,
10938	arg_vals is an empty list ,
10939	for every lookup and arg in args ,
10940	if lookup is false ,
10941	call the function mark_safe with an argument arg , append it to arg_vals .
10942	if not ,
10943	call the method arg.resolve with an argument context , append the result to arg_vals .
10944	if STR0 attribute of func object exists and is true ,
10945	call the function template_localtime with 2 arguments : obj and context.use_tz , substitute the result for obj .
10946	if STR0 attribute of func object exists and is true ,
10947	call the function func with 3 arguments : obj , autoescape set to context.autoescape and unpacked list arg_vals , substitute the result for new_obj .
10948	if not ,
10949	call the function func with 2 arguments : obj and unpacked list arg_vals , substitute the result for new_obj .
10950	if STR0 attribute of func object exists and is true and obj is an instance of SafeData ,
10951	call the function mark_safe with an argument new_obj , substitute the result for obj .
10952	otherwise if obj is an instance of EscapeData ,
10953	call the function mark_for_escaping with an argument new_obj , substitute the result for obj .
10954	if not ,
10955	substitute new_obj for obj .
10956	return obj .
10957	define the method args_check with 3 arguments : name , func and provided .
10958	convert provided into a list and substitute it for provided .
10959	calculate length of provided and increment it by one , substitute the result for plen .
10960	get the STR0 attribute from func object , if it exists substitute it for func .
10961	call the function getargspec with an argument func , substitute the result for args , varargs , varkw and defaults , respectively .
10962	calculate the length of args , substitute it for alen .
10963	substitute the length of defaults for dlen .
10964	if plen is lesser than difference of alen and dlen , or if plen is greater than alen ,
10965	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with name , dlen subtracted from alen , and plen .
10966	return boolean True .
10967	args_check is a static method .
10968	define the method __str__ with an argument self .
10969	return self.token .
10970	define the method resolve_variable with 2 arguments : path and context .
10971	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango20Warning , and stacklevel set to integer 2 .
10972	call the method resolve with an argument context , from the instance of Variable class , created with an argument path .
10973	derive the class Variable form the base class object .
10974	define the method __init__ with 2 arguments self and var .
10975	substitute var for self.var .
10976	self.literal is None ,
10977	self.lookups is None .
10978	self.translate is boolean False .
10979	self.message_context is None .
10980	if var is not an instance of six.string_types ,
10981	raise an TypeError exception with an argument string STR0 , replace STR1 with type of var .
10982	try ,
10983	convert var into an floating point number , substitute it for self.literal .
10984	if STR0 is not contained in var and STR1 is not contained in var converted into lowercase ,
10985	convert self.literal into an integer , substitute it for self.literal .
10986	if var ends with STR0 ,
10987	raise an ValueError exception .
10988	if ValueError exception is caught ,
10989	if var starts with STR0 and var ends with STR1 ,
10990	self.translate is boolean True .
10991	remove first 2 and last 2 elements from var .
10992	try ,
10993	call the function unescape_string_literal with an argument var , use it as an argument for the call to the function mark_safe , substitute the result for self.literal .
10994	if ValueError exception is caught ,
10995	call the function var.find with an argument : STR0 appended to VARIABLE_ATTRIBUTE_SEPARATOR , if the result is greater than integer -1 ,
10996	or first element of var equals STR1 , raise an TemplateSyntaxError exception with an argument string STR0 , where STR2 is replaced with var .
10997	call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR , convert the result to a tuple and substitute it for self.lookups .
10998	define the method resolve with 2 arguments : self and context .
10999	if self.lookups is not None ,
11000	call the function self._resolve_lookup with an argument context , substitute the result for value .
11001	if else ,
11002	substitute self.literal for value .
11003	if self.translate is true ,
11004	if self.message_context is true ,
11005	call the function pgettext_lazy with an argument self.message_context and value , return the result .
11006	if not ,
11007	call the function ugettext_lazy with an argument value , return the result .
11008	return value .
11009	define the method __repr__ with an argument self .
11010	return an string STR0 , where STR1 is replaced with self.__class__.__name__ and self.var , respectively .
11011	define the method __str__ with an argument self .
11012	return self.var .
11013	define the method _resolve_lookup with 2 arguments : self and context .
11014	substitute context for current .
11015	try ,
11016	for bit in self.lookups ,
11017	try ,
11018	substitute element at the bit index of current for current .
11019	if TypeError , AttributeError , KeyError or ValueError exceptions are caught ,
11020	try ,
11021	if current is an instance of BaseContext and bit attribute of type of current is true ,
11022	raise an AttributeError exception .
11023	get the bit attribute of current object , substitute it for current .
11024	if TypeError and AttributeError exceptions are caught ,
11025	try ,
11026	convert bit to an integer and use it as index to obtain an element for list current , substitute it for current .
11027	if IndexError , ValueError , KeyError or TypeError exceptions are caught ,
11028	raise an VariableDoesNotExist exception with an argument string STR0 , where STR1 is replaced with bit and STR2 is replaced with current .
11029	if current is callable object ,
11030	get the STR0 attribute of current object , if it exists and is true ,
11031	do nothing .
11032	otherwise , get the STR0 attribute of current object , if it exists and is true ,
11033	substitute settings.TEMPLATE_STRING_IF_INVALID for current .
11034	if not ,
11035	try ,
11036	call the function current , substitute the result for current .
11037	if TypeError exception is caught ,
11038	try ,
11039	call the function getcallargs with an argument current ,
11040	if TypeError exception is caught ,
11041	substitute settings.TEMPLATE_STRING_IF_INVALID for current ,
11042	if not ,
11043	raise an exception ,
11044	if Exception , renamed to e , exception is caught ,
11045	get the STR0 attribute of e object , if it exists and is true ,
11046	substitute settings.TEMPLATE_STRING_IF_INVALID for current .
11047	if not ,
11048	raise an exception .
11049	return current .
11050	derive the class Node form the base class object .
11051	must_be_first is boolean False .
11052	child_nodelists is an tuple with an element STR0 .
11053	define the method render with 2 arguments : self and context .
11054	do nothing .
11055	define the method __iter__ with an argument self .
11056	yield self .
11057	define the method get_nodes_by_type with 2 arguments : self and nodetype .
11058	nodes is an empty list .
11059	if self is an instance of nodetype ,
11060	append self to nodes .
11061	for every attr in self.child_nodelists ,
11062	get attr attribute of self object , if it exists substitute it for nodelist , if not nodelist is None .
11063	if nodelist is true ,
11064	call the method nodelist.get_nodes_by_type with an argument nodetype , extend nodes with the result .
11065	return nodes .
11066	derive the class NodeList form the base class list .
11067	contains_nontext is boolean False .
11068	define the method render with 2 arguments : self and context .
11069	bits is an empty list .
11070	for every node in self ,
11071	if node is an instance of Node ,
11072	call the method self.render_node with 2 arguments : node and context , substitute the result for bit .
11073	if not ,
11074	substitute node for bit .
11075	call the function force_text with an argument bit , append the result to bits .
11076	call the function mark_safe with an argument , elements of bits joined into a string , return the result .
11077	define the method get_nodes_by_type with 2 arguments : self and nodetype .
11078	modes is an empty list .
11079	for every node in self ,
11080	call the method node.get_nodes_by_type with an argument nodetype , extend nodes with it .
11081	return nodes .
11082	define the method render_node with 3 arguments : self , node and context .
11083	call the method node.render with an argument context , return the result .
11084	derive the class TextNode form the base class Node .
11085	define the method __init__ with 2 arguments : self and s .
11086	substitute s for self.s .
11087	define the method __repr__ with an argument self .
11088	call the function force_str with 3 arguments : string STR0 , with STR1 replaced with first 25 elements of self.s string , string STR2 and errors set to a string STR3 , return the result .
11089	define the method render with 2 arguments : self and context .
11090	return self.s .
11091	define the function render_value_in_context with 2 arguments : value and context .
11092	call the method template_localtime with 2 arguments : value and use_tz=context.use_tz , substitute the result for value .
11093	call the function localize with 2 arguments : value and use_l10n=context.use_l10n , substitute the result for value .
11094	call the function force_text with an argument value , substitute the result for value .
11095	if context.autoescape is true and value is not an instance of SafeData , or value is an instance of EscapeData ,
11096	call the function escape with an argument value , return the result .
11097	if not ,
11098	return value .
11099	derive the class VariableNode form the base class Node .
11100	define the method __init__ with 2 arguments : self and filter_expression .
11101	substitute filter_expression for self.filter_expression .
11102	define the method __repr__ with an argument self .
11103	return a string STR0 , substitute STR1 with self.filter_expression .
11104	define the method render with 2 arguments self and context .
11105	try ,
11106	call the method self.filter_expression.resolve with an argument context , substitute the result for output .
11107	if UnicodeDecodeError exception is caught ,
11108	return an empty string .
11109	call the function render_value_in_context with 2 arguments output and context , return the result .
11110	call the function re.compile with an argument raw string STR0 , substitute the result for kwarg_re .
11111	define the method token_kwargs : bits , parser and support_legacy set to boolean False .
11112	if bits is false ,
11113	return an empty dictionary .
11114	call the method kwarg_re.match with an argument first element of bits , substitute the result for match .
11115	if match is true and call to the method match.group with an argument integer 1 evaluates to true , kwarg_format is boolean True , otherwise it is boolean False .
11116	if kwarg_format is false ,
11117	if support_legacy is false ,
11118	return an empty dictionary .
11119	if length of bits is lesser than integer 3 or second element of bits is not equal to string STR0 ,
11120	return an empty dictionary .
11121	kwargs is an empty dictionary ,
11122	while bits is true ,
11123	if kwarg_format is true ,
11124	call the method kwarg_re.match with an argument first element of bits , substitute the result for match .
11125	if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false ,
11126	return kwargs .
11127	call the method match.groups with 2 arguments : key and value .
11128	delete first element of bits .
11129	if not ,
11130	if length of bits is lesser than integer 3 or second element of bits is not equal to string STR0 ,
11131	return kwargs .
11132	substitute third and first element of bits for key and value , respectively .
11133	delete first 3 elements of bits .
11134	call the method parser.compile_filter with an argument value , substitute the result for value under the key key of kwargs dictionary .
11135	if bits is true and kwarg_format is false ,
11136	if first element of bits is not equal to string STR0 ,
11137	return kwargs .
11138	delete first element of bits .
11139	return kwargs .
11140	define the function parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and name .
11141	if takes_context is true ,
11142	if first element of params equals a string STR0 ,
11143	substitute params without the first element for params .
11144	if not ,
11145	raise an TemplateSyntaxError exception STR0 , where STR1 is replaced with name .
11146	args is an empty list .
11147	kwargs is an empty dictionary .
11148	convert params into a list , substitute it for unhandled_params .
11149	for every bit in bits ,
11150	call the function
11151	if kwarg is true ,
11152	call the method six.iteritems with an argument kwarg , convert the result into a list , substitute first element of the result for param and value .
11153	if param is not in params and varkw is None ,
11154	raise an TemplateSyntaxError exception with an argument STR0 , where STR1 are replaced with name and param .
11155	otherwise if param is contained in kwargs ,
11156	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 are replaced with name and param .
11157	if not ,
11158	convert param to a string , use it as a key to get the value from kwargs dictionary , assign it value .
11159	if param is contained in unhandled_params ,
11160	call the method unhandled_params.remove with an argument param .
11161	if not ,
11162	if kwargs is true ,
11163	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with name .
11164	if not ,
11165	call the method parser.compile_filter with an argument bit , append the result to args .
11166	try ,
11167	remove first element of unhandled_params .
11168	if IndexError exception is caught ,
11169	if varargs is None ,
11170	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with name .
11171	if defaults is not None ,
11172	slice list unhandled_params from the beginning to the length of defaults last element ,
11173	if unhandled_params is true ,
11174	raise TemplateSyntaxError (
11175	return args and kwargs .
11176	define the method generic_tag_compiler with 9 arguments : parser , token , params , varargs , varkw , defaults , name , takes_context ,
11177	call the function token.split_contents , substitute the result without the first element for bits .
11178	call the method parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and name , substitute the result for args and kwargs , respectively .
11179	call the function node_class with 3 arguments : takes_context , args and kwargs .
11180	derive the class TagHelperNode form the base class Node .
11181	define the method __init__ with 4 arguments : self , takes_context , args and kwargs .
11182	substitute takes_context for self.takes_context .
11183	substitute args for self.args .
11184	substitute kwargs for self.kwargs .
11185	define the method get_resolved_arguments with 2 arguments : self and context .
11186	resolved_args is an list with elements , return value of the method var.resolve with an argument context , for every var in self.args .
11187	if self.takes_context is true ,
11188	append resolved_args to a list containing context element , substitute it for resolved_args .
11189	resolved_kwargs is dictionary with elements : return value of the method v.resolve called with an argument context , for k , for every k and v in return value of the method self.kwargs.items .
11190	return resolved_args and resolved_kwargs .
11191	derive the class Library form the base class object .
11192	define the method with reload with an argument self .
11193	self.filters is an empty dictionary .
11194	self.tags is an empty dictionary .
11195	define the method tag with 3 arguments : self , name set to None and compile_function set to None .
11196	if name is None and compile_function is None ,
11197	return self.tag_function .
11198	otherwise if name is not None and compile_function is None ,
11199	if name is callable object ,
11200	call the method self.tag_function with an argument name , return the result .
11201	if not ,
11202	define the function dec with an argument func ,
11203	call the method self.tag with 2 arguments name and func , return the result .
11204	return dec .
11205	otherwise if name is not None and compile_function is not None ,
11206	substitute compile_function for self.tags dictionary value under the name key .
11207	return compile_function .
11208	if not ,
11209	raise an InvalidTemplateLibrary exception with an argument string STR0 , substitute STR1 with name and compile_function .
11210	define the method tag_function with 2 argument : self and func .
11211	get STR0 attribute from func , return func if the attribute doesnt exists , use its __name__ field as a key to get the value from self.tags , assign func to it .
11212	return func .
11213	define the method filter with 4 arguments : self , name set to None , filter_func set to None and unpacked dictionary flags .
11214	if name is None and filter_func is None ,
11215	define the function dec with an argument func ,
11216	call the method self.filter_function with 2 arguments func and unpacked dictionary flags , return the result .
11217	return dec .
11218	otherwise if name is not None and filter_func is None ,
11219	if name is callable object ,
11220	call the method self.filter_function with arguments name and unpacked dictionary flags , return the result .
11221	if not ,
11222	define the function dec with an argument func ,
11223	call the method self.filter with 3 arguments : name , func and unpacked dictionary flags , return the result .
11224	return dec .
11225	otherwise if name is not None and filter_func is not None ,
11226	substitute filter_func for value under the name key of self.filters dictionary .
11227	for every attr in tuple with 3 arguments : strings STR0 , STR1 and STR2 ,
11228	if attr is contained in flags ,
11229	substitute value under the attr key of flags dictionary for value .
11230	set filter_func objec attr attribute to value .
11231	if filter_func has an attribute STR0 ,
11232	set filter_func._decorated_function objects attr attribute to value .
11233	substitute name for filter_func._filter_name .
11234	return filter_func .
11235	if not ,
11236	raise an InvalidTemplateLibrary exception with an argument string ( STR0 , where STR1 is replaced with name and filter_func , respectively .
11237	define the method filter_function with 3 arguments : self , func and unpacked dictionary flags .
11238	get STR0 attribute from func object , if it exists substitute __name__ field of the result for name , if not , substitute func.__name__ for name .
11239	call the method self.filter with 3 arguments : name , func and unpacked dictionary flags .
11240	define the method simple_tag with 4 arguments : self , func and None , takes_context and None and name set to None .
11241	define the function dec with an argument func .
11242	call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults , respectively .
11243	derive the class SimpleNode form the base class TagHelperNode .
11244	define the method render with 2 arguments self and context .
11245	call the method self.get_resolved_arguments with an argument context , substitute the result for resolved_args and resolved_kwargs .
11246	call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs , return it .
11247	if name is true , substitute it for function_name , if not get attribute STR0 from func object , substitute its __name__ field for function name , if it doesnt exists substitute func.__name__ for function_name .
11248	call the function generic_tag_compiler , params set to params , varargs set to varargs , varkw set to varkw , defaults set to defaults , name set to function_name , and takes_context set to takes_context and node_class set to SimpleNode .
11249	substitute func.__doc__ for compile_func.__doc__ .
11250	call the method self.tag with 2 arguments : function_name and compile_func .
11251	return func .
11252	if func is None ,
11253	return dec .
11254	otherwise if func is callable object ,
11255	call the function dec with an argument func , return the result .
11256	if not ,
11257	raise an TemplateSyntaxError exception with an argument string STR0 .
11258	define the method assignment_tag with 4 arguments : self , func set to None , takes_context set to None and name set to None .
11259	define the function dec with an argument func .
11260	call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults .
11261	derive the class AssignmentNode form the base class TagHelperNode .
11262	define the function __init__ with 5 arguments : self , takes_context , args , kwargs and target_var .
11263	call the method __init__ from the base class of the class AssignmentNode , with 3 arguments : takes_context , args and kwargs .
11264	substitute target_var for self.target_var .
11265	define the method render with 2 arguments self and context .
11266	call the method self.get_resolved_arguments with an argument context , substitute the result for resolved_args and resolved_kwargs .
11267	call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs , substitute the result for value under the self.target_var key of the context dictionary .
11268	return an empty string .
11269	if name is true , substitute it for function_name , if not get STR0 attribute from func object , if it exists , substitute __name__ field of the result for function_name , in not , substitute func.__name__ for function_name .
11270	define the function compile_func with 2 arguments : parser and token .
11271	call the function token.split_contents , substitute the result without the first element for bits .
11272	if length of bits is smaller than integer 2 or second last element of bits is not equal to STR0 ,
11273	raise an TemplateSyntaxError exception with an argument string , STR0 , where STR1 is replaced with function_name .
11274	substitute last element of bits for target_var .
11275	substitute bits without last two elements for bits .
11276	call the function parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and function_name , substitute the result for args and kwargs .
11277	return an instance of AssignmentNode class created with 4 arguments : takes_context , args , kwargs and target_var .
11278	substitute func.__doc__ for compile_func.__doc__ .
11279	call the method self.tag with 2 arguments : function_name and compile_func .
11280	return func .
11281	if func is None ,
11282	return dec .
11283	otherwise if func is callable ,
11284	call the function dec with an argument func , return the result .
11285	if not ,
11286	raise an TemplateSyntaxError exception with an argument string STR0 .
11287	define the method inclusion_tag with 5 arguments : self , file_name , context_class set to Context , takes_context set to boolean False , and name set to None .
11288	define the function dec with an argument func .
11289	call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults .
11290	derive the class InclusionNode form the base class TagHelperNode .
11291	define the method render with 2 arguments : self and context .
11292	call the method self.get_resolved_arguments with context as an argument , substitute the result for resolved_args and resolved_kwargs .
11293	call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs , substitute the result for _dict .
11294	get STR0 attribute from self object . if it doesnt exists return boolean False , if the result evaluates to false ,
11295	from django.template.loader import get_template , select_template .
11296	if file_name is an instance of Template class .
11297	substitute file_name for t .
11298	otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name ,
11299	evaluates to true , call the function select_template with an argument file_name , substitute the result for t .
11300	if not ,
11301	call the function get_template with an argument file_name , substitute the result for t .
11302	substitute t.nodelist for self.nodelist .
11303	call the function context_class with 2 arguments : _dict and unpacked dictionary containing 4 entries : context.autoescape for STR0 , context.autoescape for STR1 , context.use_l10n for STR2 , and context.use_tz for STR3 , substitute the result for new_context .
11304	call the function context.get with 2 argument STR0 and None , substitute the result for csrf_token .
11305	if csrf_token is not None ,
11306	substitute csrf_token for value under the STR0 key of new_context dictionary .
11307	call the method self.nodelist.render with an argument new_context , return the result .
11308	if name is true , substitute it for function_name , if not get STR0 attribute from func object , if it exists , substitute __name__ field of the result for function_name , in not , substitute func.__name__ for function_name .
11309	call the function partial with 8 arguments : generic_tag_compiler , params set to params , varargs set to varargs , varkw set to varkw , defaults set to defaults , name set to function_name , takes_context set to takes_context and node_class set to InclusionNode , substitute the result for compile_func .
11310	substitute func.__doc__ for compile_func.__doc__ .
11311	call the function self.tag with 2 arguments : function_name and compile_func .
11312	return func .
11313	return dec .
11314	define the function is_library_missing with an argument name .
11315	split string name into two parts from the right side by the separator STR0 , substitute parts for path and module , respectively .
11316	try ,
11317	call the function import_module with an argument path , substitute it for package .
11318	call the function module_has_submodule with 2 arguments : package and module , return inverted boolean result .
11319	if ImportError exception is caught ,
11320	call the function is_library_missing with an argument path , return the result .
11321	define the function import_library with an argument taglib_module .
11322	try ,
11323	call the function import_module with an argument taglib_module , substitute the result for mod .
11324	if ImportError , renamed to e , exception is caught ,
11325	call the function is_library_missing with an argument taglib_module , if it evaluates to true ,
11326	return None .
11327	if not ,
11328	raise an InvalidTemplateLibrary exception with an argument string STR0 , where STR1 is replaced with taglib_module and e .
11329	try ,
11330	return mod.register .
11331	if AttributeError exception is caught ,
11332	raise an InvalidTemplateLibrary exception with an argument string STR0 , where STR1 is replaced with taglib_module .
11333	templatetags_modules is an empty list .
11334	define the function get_templatetags_modules .
11335	use global variable templatetags_modules .
11336	if templatetags_modules is false ,
11337	_templatetags_modules is an empty list .
11338	templatetags_modules_candidates is an list with an argument string STR0 .
11339	add string STR0 to a list , where STR1 is replaced with app_config.name , for every app_config in result of the method apps.get_app_configs , append the resulting list to templatetags_modules_candidates .
11340	for every templatetag_module in templatetags_modules_candidates ,
11341	try ,
11342	call the function import_module with an argument templatetag_module .
11343	append templatetag_module to _templatetags_modules .
11344	if ImportError exception is caught ,
11345	skip this loop iteration .
11346	substitute _templatetags_modules for templatetags_modules .
11347	return templatetags_modules .
11348	define the function get_library with an argument library_name .
11349	get the value under the library_name key of the libraries dictionary , if it exists , substitute it for lib , if not , lib is None .
11350	if lib is false ,
11351	call the function get_templatetags_modules , substitute the result for templatetags_modules .
11352	tried_modules is an empty list .
11353	for every module in templatetags_modules ,
11354	taglib_module is an string STR0 , where STR1 is replaced to module and library_name .
11355	append taglib_module to tried_modules .
11356	call the function import_library with an argument taglib_module , substitute the result for lib .
11357	if lib is true ,
11358	substitute lib for value under the library_name key of libraries dictionary .
11359	break loop execution .
11360	if lib is false ,
11361	raise an InvalidTemplateLibrary exception with an argument string STR0 , where STR1 is replaced with library_name and elements of tried_modules joined into a string , separated by STR2 .
11362	return lib .
11363	define the function add_to_builtins with an argument module .
11364	call the function import_library with an argument module , append the result to builtins .
11365	call the function add_to_builtins with an argument string STR0 .
11366	call the function add_to_builtins with an argument string STR0 .
11367	call the function add_to_builtins with an argument string STR0 .
11368	from copy import copy into default name space .
11369	from django.utils.module_loading import import_string into default name space .
11370	_standard_context_processors is None .
11371	_builtin_context_processors is a tuple containing a string STR0 .
11372	derive the class ContextPopException from the Exception base class .
11373	do nothing .
11374	derive the class ContextDict from the dict base class .
11375	define the method __init__ with 4 arguments : self , context , unpacked list args and unpacked dictionary kwargs .
11376	call the method __init__ from the base class of the class ContextDict , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
11377	append self to context.dicts .
11378	substitute context for self.context .
11379	define the method __enter__ with an argument self .
11380	return self .
11381	define the method __exit__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
11382	remove the first element from the self.context .
11383	derive the class BaseContext from the object base class .
11384	define the method __init__ with 2 arguments : self and dict_ set to None .
11385	call the method self._reset_dicts with an argument dict_ .
11386	define the method _reset_dicts with 2 arguments : self and value set to None .
11387	builtins is an dictionary with 3 initial entries : boolean True for STR0 , boolean False for STR1 and None for STR2 .
11388	self.dicts is an list with element builtins .
11389	if value is not None ,
11390	append value to self.dicts list .
11391	define the method __copy__ with an argument self .
11392	call the function copy with an argument base class of the class BaseContext , substitute the result for duplicate .
11393	hard copy list self.dicts to duplicate.dicts .
11394	return duplicate .
11395	define the method __repr__ with an argument self .
11396	return printable representation of self.dicts .
11397	define the method __iter__ with an argument self .
11398	for every d in reversed list self.dicts ,
11399	yield d .
11400	define the method push with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
11401	instantiate class ContextDict with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , return it .
11402	define the method pop with an argument self .
11403	if length of self.dicts is equal to an integer 1 ,
11404	raise an ContextPopException .
11405	call the method self.dicts.pop , return the result .
11406	define the method __setitem__ with 3 arguments : self , key and value .
11407	substitute value for value under the key key of dictionary at last element of self.dicts .
11408	define the method __getitem__ with 2 arguments : self and key .
11409	for every d in reversed list self.dicts ,
11410	if key is contained in d ,
11411	return value under the key key of d dictionary .
11412	raise KeyError exception with an argument key .
11413	define the method __delitem__ with 2 arguments : self and key .
11414	delete value under the key key of dictionary at last element of self.dicts .
11415	define the method has_key with 2 arguments : self and key .
11416	for every d in self.dicts ,
11417	if key is contained in d ,
11418	return boolean True .
11419	return boolean False .
11420	define the method __contains__ with 2 arguments : self and key .
11421	call the method self.has_key with an argument key , return the result .
11422	define the method got with 3 arguments : self , key and otherwise set to None .
11423	for every d in reversed list self.dicts ,
11424	if key is contained in d ,
11425	return value under the key key of d dictionary .
11426	return otherwise .
11427	define the method new with 2 arguments : self and values set to None .
11428	call the function copy with an argument self , substitute the result for new_context .
11429	call the method new_context._reset_dicts values .
11430	return new_context .
11431	define the method flatten with an argument self .
11432	flat is an empty dictionary ,
11433	for every d in self.dicts ,
11434	update flat dictionary with d .
11435	return flat .
11436	define the method __eq__ with 2 arguments : self and other .
11437	if other is an instance of BaseContext class ,
11438	call the flatten method of the self and other objects , if they are equal , return boolean True , if not return boolean False .
11439	return boolean False .
11440	derive the class Context from the BaseContext base class .
11441	define the method __init__ with 6 arguments : self , dict_ set to None , autoescape set to True , current_app set to None , use_l10n set to None and use_tz set to None .
11442	substitute autoescape for self.autoescape .
11443	substitute current_app for self.current_app .
11444	substitute use_l10n for self.use_l10n .
11445	substitute use_tz for self.use_tz .
11446	self.render_context is a instance of RenderContext class .
11447	call the the method __init__ from the base class of the class Context .
11448	define the method __copy__ with an argument self .
11449	call the the method __copy__ from the base class of the class Context , substitute the result for duplicate .
11450	call the function copy with an argument self.render_context , substitute the result for duplicate.render_context .
11451	return duplicate
11452	define the method update with 2 arguments : self and other_dict .
11453	if other_dict doesnt have an STR0 attribute ,
11454	raise an TypeError exception with an argument string STR0 .
11455	append other_dict to self.dicts .
11456	return other_dict .
11457	derive the class RenderContext from the BaseContext base class .
11458	define the method __iter__ with an argument self .
11459	for every d in last element of self.dicts ,
11460	yield d .
11461	define the method has_key with 2 arguments : self and key .
11462	if key is contained in last element of self.dicts , return boolean True , otherwise return boolean False .
11463	define the method get with 3 arguments : self , key and otherwise set to None .
11464	return value under the key key of dictionary in last element of self.dicts , if it doesnt exists return otherwise .
11465	define the method __getitem__ with 2 arguments : self and key .
11466	return value under the key key of dictionary in last element of self.dicts .
11467	define the function get_standard_processors .
11468	from django.conf import settings into default namespace .
11469	use global variable _standard_context_processors .
11470	if _standard_context_processors is None ,
11471	processors is an empty list .
11472	collect is an empty list .
11473	extend collect list with _builtin_context_processors .
11474	extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS .
11475	for every path in collect ,
11476	call the function import_string with an argument path , substitute the result for func .
11477	append func to processors .
11478	convert processors elements into a tuple , substitute it for _standard_context_processors .
11479	return _standard_context_processors .
11480	derive the class RequestContext from the Context base class .
11481	define the method __init__ with 7 arguments : self , request , dict_ set to None , processors set to None , current_app set to None , use_l10n set to None and use_tz set to None .
11482	call the method Context.__init__ with 5 arguments : self , dict_ , current_app as current_app , use_l10n as use_l10n , use_tz as use_tz .
11483	if processors is None ,
11484	processors is an empty tuple .
11485	if not ,
11486	convert processors into a tuple and substitute it for processors .
11487	updates is an empty dictionary .
11488	call the function get_standard_processors , append processors to the result , for every processor is the result ,
11489	call the function processor with an argument request , update updates dictionary with the result .
11490	update self dictionary with updates .
11491	from django.template.base import Lexer , Parser , tag_re , NodeList , VariableNode and TemplateSyntaxError into default name space .
11492	from django.utils.encoding import force_text into default name space .
11493	from django.utils.html import escape into default name space .
11494	from django.utils.safestring import SafeData and EscapeData into default name space .
11495	from django.utils.formats import localize into default name space .
11496	from django.utils.timezone import template_localtime into default name space .
11497	derive the class DebugLexer from the Lexer base class .
11498	define the method __init__ with 3 arguments : self , template_string and origin .
11499	call the method __init__ from the base class of the class DebugLexer , with 2 arguments : template_string and origin .
11500	define the method tokenize with an argument self .
11501	result is an empty list , upto is integer 0 .
11502	call the method tag_re.finditer with an argument self.template_string , for every match in result ,
11503	call the method match.span , substitute the result for start an end , respectively .
11504	if start is greater than upto ,
11505	call the method self.create_token with 3 arguments : self.template_string list elements from upto index to start index , tuple with 2 elements : upto and start and boolean False , append the result to result .
11506	substitute start for upto .
11507	call the method self.create_token with 3 arguments : self.template_string list elements from start index to end index , tuple with 2 elements : start and end and boolean False , append the result to result .
11508	substitute end for upto .
11509	substitute elements of self.template_string list from upto index to the end for last_lit .
11510	if last_bit is true ,
11511	call the method self.create_token with 3 arguments : last_bit , tuple with 2 elements : upto and sum of upto and length of last_bit , and boolean False , append the result to result .
11512	return result .
11513	define the method create_token with 4 arguments : self , token_string , source and in_tag .
11514	call the method create_token from the base class of the class DebugLexer , with 2 arguments : template_string and in_tag , substitute the result for token .
11515	assign self.origin , source to token.source .
11516	return token .
11517	derive the class DebugParser from the Parser base class .
11518	define the method __init__ with 2 arguments : self and lexer .
11519	call the method __init__ with an argument lexer , from the base class of the class DebugParser .
11520	self.command_stack is an empty list .
11521	define the method enter_command with 3 arguments : self , command and token .
11522	append tuple with 2 elements : command and token.source , append the result to self.command_stack .
11523	define the method exit_command with an argument self .
11524	remove first element from self.command_stack .
11525	define the method error with 3 arguments : self , token and msg .
11526	call the method self.source_error with 2 arguments : token.source and msg , return the result .
11527	define the method source_error with 3 arguments : self , source and msg .
11528	e is an instance of TemplateSyntaxError class , created with an argument msg .
11529	substitute source for e.django_template_source .
11530	return e .
11531	define the method create_nodelist with an argument self .
11532	return an instance of DebugNodeList class .
11533	define the method create_variable_node with 2 arguments : self and contents .
11534	return an instance of DebugVariableNode , created with an argument contents .
11535	define the method extend_nodelist with 4 arguments : self , nodelist , node and token .
11536	substitute token.source for node.source .
11537	call the method extend_nodelist with 3 arguments : nodelist , node and token , from the base class of the class DebugParser .
11538	define the method unclosed_block_tag with 2 arguments : self and parse_until .
11539	remove the first element from self.command_stack , assign the result to command and source , respectively .
11540	msg is an string STR0 , where STR1 is replaced with command , and elements of parse_until joined into a string , separated by string STR2 .
11541	raise an self.source_error exception with 2 arguments : source and msg .
11542	define the method compile_filter_error with 3 arguments : self , token and e .
11543	if e doesnt have an STR0 attribute ,
11544	substitute token.source for e.django_template_source .
11545	define the method compile_function_error with 3 arguments : self , token and e .
11546	if e doesnt have an STR0 attribute ,
11547	substitute token.source for e.django_template_source .
11548	derive the class DebugNodeList from the NodeList base class .
11549	define the method render_node with 3 arguments : self , node and context .
11550	try ,
11551	call the method node.render with an argument context , return the result .
11552	if Exception , renamed to e , exception is caught ,
11553	if e doesnt have an STR0 attribute ,
11554	substitute node.source for e.django_template_source .
11555	raise an exception .
11556	derive the class DebugVariableNode from the VariableNode base class .
11557	define the method render with 2 arguments : self and context .
11558	try ,
11559	call the method self.filter_expression.resolve with an argument context , substitute the result for output .
11560	call the function template_localtime with 2 arguments : output and use_tz set to context.use_tz , substitute the result for output .
11561	call the function localize with 2 arguments : output and use_l10n set to context.use_l10n , substitute the result for output .
11562	call the function force_text with an argument output , substitute the result for output .
11563	if UnicodeDecodeError exception is caught ,
11564	return an empty string .
11565	if Exception , renamed to e , exception is caught ,
11566	if e doesnt have an STR0 attribute ,
11567	substitute self.source for e.django_template_source .
11568	raise an exception .
11569	if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class ,
11570	call the function escape with an argument output .
11571	if not ,
11572	return output .
11573	from __future__ import unicode_literals into default name space .
11574	import module re .
11575	import module random as random_module .
11576	from decimal import Decimal , InvalidOperation , Context and ROUND_HALF_UP into default name space .
11577	from functools import wraps into default name space .
11578	from pprint import pformat into default name space .
11579	from django.template.base import Variable , Library and VariableDoesNotExist into default name space .
11580	from django.conf import settings into default name space .
11581	from django.utils import formats into default name space .
11582	from django.utils.dateformat import format and time_format into default name space .
11583	from django.utils.encoding import force_text and iri_to_uri into default name space .
11584	from django.utils.html import conditional_escape , escapejs , escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping , and remove_tags .
11585	from django.utils.http import urlquote into default name space .
11586	from django.utils.text import Truncator , wrap and phone2numeric into default name space .
11587	from django.utils.safestring import mark_safe , SafeData and mark_for_escaping into default name space .
11588	from django.utils import six into default name space .
11589	from django.utils.timesince import timesince and timeuntil into default name space .
11590	from django.utils.translation import ugettext and ungettext into default name space .
11591	from django.utils.text import normalize_newlines and slugify as _slugify into default name space .
11592	register is an instance of Library class .
11593	define the method stringfilter with an argument func .
11594	define the method _dec with 2 arguments : unpacked list args and unpacked dictionary kwargs .
11595	if args in true ,
11596	convert args into a list , substitute it for args .
11597	call the function force_text with an argument first element of args , substitute the result for first element of args .
11598	if first element of args is an instance of SafeData , and STR0 attribute of dec._decorated_function object is true ,
11599	call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs , use the result as an argument for the call to the mark_safe function , return the result .
11600	call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result .
11601	get STR0 attribute from the func object , substitute it for _dec._decorated_function , if it doesnt exist , substitute func for _dec._decorated_function .
11602	call the function wraps with an argument func , call the result with an argument _dec , return the result .
11603	decorator function register.filter with an argument is_safe set to boolean True .
11604	decorator stringfilter ,
11605	define the function addslashes with an argument value .
11606	replace all occurrences of STRspecial with STR1 in value , replace all occurrences of STR with STR2 in the previous result , replace all occurrences of STR with STR0 in the previous result , return the result .
11607	decorator function register.filter with an argument is_safe set to boolean True .
11608	decorator stringfilter ,
11609	define the function capfirst with an argument value .
11610	if value is false , return it , if it is true convert first element of value to uppercase letter , return the value .
11611	decorator function register.filter with an argument string STR0 .
11612	decorator stringfilter ,
11613	define the function escapejs_filter with an argument value .
11614	call the function escapejs with an argument value , return the result .
11615	multiply 10 to the power of 200 , with itself , substitute the result for pos_inf .
11616	multiply 10 to the power of 200 , with 10 to the power of 200 , negative , substitute the result for neg_inf .
11617	divide 10 to the power of 400 by 10 to the power of 400 , substitute the result for nan .
11618	special_floats is an list with 3 elements , pos_inf , neg_inf and nan , all converted to strings .
11619	decorator function register.filter with an argument is_safe set to boolean True .
11620	define the function floatformat with 2 arguments text and arg set to integer -1 .
11621	try ,
11622	call the function force_text with an argument text , substitute the result for input_val .
11623	d is an instance of Decimal class created with an argument input_val .
11624	if UnicodeEncodeError exception is caught ,
11625	return an empty string .
11626	if InvalidOperation exception is caught ,
11627	if every input_val in special_floats ,
11628	return input_val .
11629	try ,
11630	d is an instance of class Decimal , created with result of the function force_text , called with an argument text converted into a floating point number .
11631	if ValueError , InvalidOperation , TypeError or UnicodeEncodeError exceptions are caught ,
11632	return an empty string .
11633	try ,
11634	convert arg to an integer , substitute it for p .
11635	if ValueError exception is caught ,
11636	return input_val .
11637	try ,
11638	convert d into a integer , subtract d from it , substitute the result for m .
11639	if ValueError , OverflowError or InvalidOperation exceptions are caught ,
11640	return input_val .
11641	if m is false and p is lesser than integer 0 ,
11642	call the method formats.number_format with 2 arguments , d converted to a integer and then to string , and integer 0 , use the result as an argument for the call to the function mark_safe , return the result .
11643	if p equals integer 0 ,
11644	exp is an instance of Decimal , created with an argument integer 1 .
11645	if not ,
11646	instantiate class Decimal with string STR0 as argument , divide it by product of instance of Decimal class created with integer 10 , and absolute value of p , substitute the result for exp .
11647	try ,
11648	call the method d.as_tuple , substitute the result for tupl .
11649	subtract third element of tupl from length of second element of tupl , substitute the result for units .
11650	sum absolute p with units an integer 1 , substitute the result for prec .
11651	call the method d.quantize with 3 arguments : exp , ROUND_HALF_UP and instance of Context class created with prec as prec , call the method as_tuple on the result , substitute the result for sign , digits and exponent , respectively .
11652	append result of method six.text_type called with an argument digit to an list , for every digit in reversed order of digits , substitute the resulting list for digits .
11653	while length of digits is smaller than or equal to absolute value of exponent ,
11654	append STR0 to digits .
11655	insert STR0 to digits at negative exponent index .
11656	if sign is true ,
11657	append STR0 to digits .
11658	reverse element order of dicts , join them in a string , substitute the result for number .
11659	call the method formats.number_format with 2 arguments : number and absolute value of p , use the result as an argument for the call to the mark_safe function , return the result .
11660	if InvalidOperation exception is caught ,
11661	return input_val .
11662	decorator function register.filter with an argument is_safe set to boolean True .
11663	decorator stringfilter ,
11664	define the function iriencode with an argument value .
11665	call the function iri_to_uri with an argument value , use the result as an argument for the call to the force_text function , return the result .
11666	decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
11667	decorator stringfilter ,
11668	define the function linenumbers with 2 arguments value and autoescape set to None .
11669	split value by newline characters , substitute the result for lines .
11670	call the function six.text_type with length of lines as an argument , use length of result as an argument for the call to the function six.text_type , substitute the result for width .
11671	if autoescape is false , if value is an instance of SafeData ,
11672	for every i and line in enumerated iterable lines ,
11673	concatenate string STR1 , width and string STR0 , format the previous string with i incremented by 1 and line , substitute the result for i-th element of lines .
11674	if not ,
11675	for every i and line in enumerated iterable lines ,
11676	concatenate string STR1 , width and string STR0 , format the previous string with i incremented by 1 , and result of the function escape called with an argument line , substitute the result for i-th element of lines .
11677	call the method mark_safe with lines joined into a string , separated by newlines as argument , return the result .
11678	decorator function register.filter with an argument is_safe set to boolean True .
11679	decorator stringfilter ,
11680	define the function lower with an argument value .
11681	convert value to lowercase and return the result .
11682	decorator function register.filter with an argument is_safe set to boolean False .
11683	decorator stringfilter ,
11684	define the function make_list with an argument value .
11685	return value converted into a list .
11686	decorator function register.filter with an argument is_safe set to boolean True .
11687	decorator stringfilter ,
11688	define the function slugify with an argument value .
11689	call the function _slugify with an argument value , return the result .
11690	decorator function register.filter with an argument is_safe set to boolean True .
11691	define the function stringformat with 2 arguments value and arg .
11692	try ,
11693	call the function six.text_type with an argument arg , append the result to STR0 , format the previous with value , return the result .
11694	if TypeError or ValueError exceptions are caught ,
11695	return an empty string .
11696	decorator function register.filter with an argument is_safe set to boolean True .
11697	decorator stringfilter ,
11698	define the function title with an argument value .
11699	call the function re.sub with 3 arguments : string STR0 , lambda function with an argument m and return value , result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title , substitute the result for t .
11700	call the function re.sub with 3 arguments : string STR0 , lambda function with an argument m and return value , result of the m.group method called with an argument integer 0 converted into lowercase and t , return the result .
11701	decorator function register.filter with an argument is_safe set to boolean True .
11702	decorator stringfilter ,
11703	define the function truncatechars with 2 arguments value and arg .
11704	try ,
11705	substitute arg converted into a integer for length .
11706	if ValueError exception is caught ,
11707	return value .
11708	instantiate class Truncator , with an argument value , call the method chars on the result with an argument length , return the result .
11709	decorator function register.filter with an argument is_safe set to boolean True .
11710	decorator stringfilter ,
11711	define the function truncatechars_html with 2 arguments value and arg .
11712	try ,
11713	substitute arg converted into an integer for length .
11714	if ValueError exception is caught ,
11715	return value .
11716	instantiate class Truncator , with an argument value , call the method chars on the result with 2 arguments length , and html set to boolean True , return the result .
11717	decorator function register.filter with an argument is_safe set to boolean True .
11718	decorator stringfilter ,
11719	define the function truncatewords with 2 arguments value and arg .
11720	try ,
11721	substitute arg converted into an integer for length .
11722	if ValueError exception is caught ,
11723	return value .
11724	instantiate class Truncator , with an argument value , call the method words on the result with 2 arguments length , and truncate set to string STR0 , return the result .
11725	decorator function register.filter with an argument is_safe set to boolean True .
11726	decorator stringfilter ,
11727	define the function truncatewords_html with 2 arguments value and arg .
11728	try ,
11729	substitute arg converted into an integer for length .
11730	if ValueError exception is caught ,
11731	return value .
11732	instantiate class Truncator , with an argument value , call the method words on the result with 3 arguments length , html set to boolean True and truncate set to string STR0 , return the result .
11733	decorator function register.filter with an argument is_safe set to boolean False .
11734	decorator stringfilter ,
11735	define the function upper with an argument value .
11736	convert value to uppercase , return the result .
11737	decorator function register.filter with an argument is_safe set to boolean False .
11738	decorator stringfilter ,
11739	define the function urlencode with 2 arguments value and safe set to None .
11740	kwargs is an empty dictionary .
11741	if safe is not None ,
11742	substitute safe for value under the STR0 key of kwargs dictionary .
11743	call the function urlquote with 2 arguments value and unpacked dictionary kwargs , return the result .
11744	decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
11745	decorator stringfilter ,
11746	define the function urlize with 2 arguments value and autoescape set to None .
11747	call the function _urlize with 3 arguments : value , nofollow set to boolean True , autoescape set to autoescape , use the result as an argument for the call to the function mark_safe , return the result .
11748	decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
11749	decorator stringfilter ,
11750	define the function urlizetrunc with 3 arguments value , limit and autoescape set to None .
11751	call the function _urlize with 4 arguments : value , trim_url_limit as limit converted into an integer , nofollow as boolean True , and autoescape as autoescape , use the result as an argument for the call to the function mark_safe , return the result .
11752	decorator function register.filter with an argument is_safe set to boolean False .
11753	decorator stringfilter ,
11754	define the function wordcount with an argument value .
11755	split value into words , return the length of the result .
11756	decorator function register.filter with an argument is_safe set to boolean True .
11757	decorator stringfilter ,
11758	define the function wordwrap with 2 arguments value and arg .
11759	call the method wrap with 2 arguments , value and arg converted into a integer , return the result .
11760	decorator function register.filter with an argument is_safe set to boolean True .
11761	decorator stringfilter ,
11762	define the function ljust with 2 arguments value and arg .
11763	call the method value.ljust with an argument , arg converted into a integer , return the result .
11764	decorator function register.filter with an argument is_safe set to boolean True .
11765	decorator stringfilter ,
11766	define the function rjust with 2 arguments value and arg .
11767	call the method value.rjust with an argument , arg converted into a integer , return the result .
11768	decorator function register.filter with an argument is_safe set to boolean True .
11769	decorator stringfilter ,
11770	define the function center with 2 arguments value and arg .
11771	call the method value.center with an argument , arg converted into a integer , return the result .
11772	decorator register.filter .
11773	decorator stringfilter ,
11774	define the function cut with 2 arguments value and arg .
11775	if value is an instance of SafeData , safe is boolean True , otherwise it is boolean False .
11776	replace every occurrence of arg is value for an empty string , substitute the result for value .
11777	if safe is true and arg is not equal to string STR0 ,
11778	call the function mark_safe with an argument value , return the result .
11779	return value .
11780	decorator function register.filter with 2 arguments string STR0 and is_safe set to boolean True .
11781	decorator stringfilter ,
11782	define the function escape_filter with an argument value .
11783	call the function mark_for_escaping with an argument value , return the result .
11784	decorator function register.filter with an argument is_safe set to boolean True .
11785	decorator stringfilter ,
11786	define the function force_escape with an argument value .
11787	call the function escape with an argument value , return the result .
11788	decorator function register.filter with 3 arguments string STR0 , is_safe set to boolean True and needs_autoescape set to True .
11789	decorator stringfilter ,
11790	define the function linebreaks_filter with 2 arguments value and autoescape set to None .
11791	if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False .
11792	call the function linebreaks with 2 arguments value and autoescape , use the result as an argument for the call to the mark_safe , return the result .
11793	decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
11794	decorator stringfilter ,
11795	define the function linebreaksbr with 2 arguments value and autoescape set to None .
11796	if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False .
11797	call the function normalize_newlines with an argument value , substitute the result for value .
11798	if autoescape is true ,
11799	call the function escape with an argument value , substitute it for value .
11800	replace every occurrence of newline character in value with string STR0 , use it as an argument for the call to the mark_safe , return the result .
11801	decorator function register.filter with an argument is_safe set to boolean True .
11802	decorator stringfilter ,
11803	define the function safe with an argument value .
11804	call the function mark_safe with an argument value , return the result .
11805	decorator function register.filter with an argument is_safe set to boolean True .
11806	define the function safeseq with an argument value .
11807	for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj , return all the results in a list .
11808	decorator function register.filter with an argument is_safe set to boolean True .
11809	decorator stringfilter ,
11810	define the function removetags with 2 arguments value and arg .
11811	call the function remove_tags with 2 arguments value and tags , return the result .
11812	decorator function register.filter with an argument is_safe set to boolean True .
11813	decorator stringfilter ,
11814	define the function striptags with an argument value .
11815	call the function strip_tags with an argument value , return the result .
11816	decorator function register.filter with an argument is_safe set to boolean False .
11817	define the function dictsort with 2 arguments value and arg .
11818	try ,
11819	sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , return the result .
11820	if TypeError or VariableDoesNotExist exceptions are caught ,
11821	return an empty string .
11822	decorator function register.filter with an argument is_safe set to boolean False .
11823	define the function dictsortreversed with 2 arguments value and arg .
11824	try ,
11825	sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , reverse the sort and return the result .
11826	if TypeError or VariableDoesNotExist exceptions are caught ,
11827	return an empty string .
11828	decorator function register.filter with an argument is_safe set to boolean False .
11829	define the function first with an argument value .
11830	try ,
11831	return first element of value .
11832	if IndexError exception is caught ,
11833	return an empty string .
11834	decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
11835	define the function join with 3 arguments : value , arg and autoescape set to None .
11836	map elements of value through mapping function force_text , substitute the result for value .
11837	if autoescape is true ,
11838	for every v in value call the function conditional_escape with an argument v , append the result in a list , substitute the resulting list for value .
11839	try ,
11840	call the function conditional_escape with an argument arg , call the method join on the result with an argument value , substitute the result for data .
11841	if AttributeError exception is caught ,
11842	return value .
11843	call the function mark_safe with an argument data , return the result .
11844	decorator function register.filter with an argument is_safe set to boolean True .
11845	define the function last with an argument value .
11846	try ,
11847	return last element of value .
11848	if IndexError exception is caught ,
11849	return an empty string .
11850	decorator function register.filter with an argument is_safe set to boolean False .
11851	define the function length with an argument value .
11852	try ,
11853	return length of value ,
11854	if TypeError or ValueError exceptions are caught ,
11855	return integer 0 .
11856	decorator function register.filter with an argument is_safe set to boolean False .
11857	define the function length_is with 2 arguments value and arg .
11858	try ,
11859	if lengths of value and arg are equal , return boolean True , otherwise return boolean False .
11860	if TypeError or ValueError exceptions are caught ,
11861	return an empty string .
11862	decorator function register.filter with an argument is_safe set to boolean True .
11863	define the function random with an argument value .
11864	call the function random_module.choice with an argument value , return the result .
11865	decorator function register.filter with 2 arguments string STR0 and is_safe set to boolean True .
11866	define the function slice_filter with 2 arguments value and arg .
11867	try ,
11868	bits is an empty list .
11869	split arg by STR0 , for every x in result ,
11870	if length of x is equal to integer 0 ,
11871	append None to bits .
11872	if not ,
11873	append x converted to an integer to bits .
11874	slice the list value with unpacked list bits as an argument , return the result .
11875	if TypeError or ValueError exceptions are caught ,
11876	return value .
11877	decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
11878	define the function unordered_list with 2 arguments value and autoescape set to None .
11879	if autoescape is true ,
11880	substitute conditional_escape for escaper .
11881	if not ,
11882	escaper is an identity lambda function .
11883	define the function convert_old_style_list with an argument list_ .
11884	if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2 ,
11885	return list_ and boolean False .
11886	substitute list_ for first_item and second_item , respectively .
11887	if second_item is an empty list ,
11888	return list with an element first_item , and boolean True .
11889	try ,
11890	convert second item to an iterable ,
11891	if TypeError exception is caught ,
11892	return list_ and boolean False .
11893	old_style_list is boolean True .
11894	new_second_item is an empty list .
11895	for every sublist in second_item ,
11896	call the function convert_old_style_list with an argument sublist , substitute the result for item and old_style_list .
11897	if old_style_list is false ,
11898	break from the loop execution ,
11899	extend new_second_item with item .
11900	if old_style_list is true ,
11901	substitute new_second_item with second_item .
11902	return list with 2 elements : first_item and second_item , and old_style_list .
11903	define the function _helper with 2 arguments list and tabs set to integer 1 .
11904	indent contain tabs number of tab character .
11905	output is an empty list .
11906	substitute length of list_ for list_length .
11907	i is integer 0 .
11908	while i is smaller than list_length ,
11909	substitute i-th element of list for title .
11910	sublist is an empty string .
11911	sublist_item is None .
11912	if title is an instance of list or tuple ,
11913	substitute title for sublist_item .
11914	title is an empty string .
11915	otherwise if i is smaller than list_length decremented by one ,
11916	substitute ( i+1 ) -th element of list_ for next_item .
11917	if next_item is true and next_item is an instance of list or tuple type ,
11918	substitute next_item for sublist_item .
11919	increment i by integer 1 .
11920	if sublist_item is true ,
11921	call the function _helper with 2 arguments : sublist_item and tabs incremented by 1 , substitute the result for sublist .
11922	sublist is an string STR0 , where every STR1 is replaced with indent , sublist , indent and indent , respectively .
11923	substitute every STR0 in string STR1 with indent , with result of the function escaper called with an argument : result of the function force_text called with an argument title , and with sublist , append the string to output .
11924	increment i by 1 .
11925	join elements of output into a string , separated with newlines , return the result .
11926	call the function convert_old_style_list with an argument value , substitute the result for value and converted , respectively .
11927	call the function _helper with an argument value , use it as an argument for the call to the function mark_safe , return the result .
11928	decorator function register.filter with an argument is_safe set to boolean False .
11929	define the function add with 2 arguments value and arg .
11930	try ,
11931	convert value and arg into a integers , return their sum .
11932	if TypeError or ValueError exceptions are caught ,
11933	try ,
11934	sum value and arg , return the result .
11935	if Exception exception is caught ,
11936	return an empty string .
11937	decorator function register.filter with an argument is_safe set to boolean False .
11938	define the function get_digit with 2 arguments value and arg .
11939	try ,
11940	convert arg to an integer .
11941	convert value to an integer .
11942	if ValueError exception is caught ,
11943	return value .
11944	if arg is smaller than integer 1 ,
11945	return value .
11946	try ,
11947	convert value into a string , take character at the negative arg index , convert it into an integer , return it .
11948	if IndexError exception is caught ,
11949	return integer 0 .
11950	decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False .
11951	define the function date with 2 arguments value and arg set to None .
11952	if vale is None or an empty string ,
11953	return an empty string .
11954	if arg is None ,
11955	substitute settings.DATE_FORMAT for arg .
11956	try ,
11957	call the method formats.time_format with 2 arguments : value and arg , return the result .
11958	if AttributeError exception is caught ,
11959	try ,
11960	format value into printable data representation with formating rules arg , return the result .
11961	if AttributeError exception is caught ,
11962	return an empty string .
11963	decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False .
11964	define the function time with 2 arguments value and arg set to None .
11965	if vale is None or an empty string ,
11966	return an empty string .
11967	if arg is None
11968	substitute settings.TIME_FORMAT for arg .
11969	try ,
11970	call the method formats.time_format with 2 arguments : value and arg , return the result .
11971	if AttributeError exception is caught ,
11972	try ,
11973	call the function time_format with 2 arguments : value and arg , return the result .
11974	if AttributeError exception is caught ,
11975	return an empty string .
11976	decorator function register.filter with 2 arguments string STR0 and is_safe set to boolean False .
11977	define the function timesince_filter with 2 arguments value and arg set to None .
11978	if value is false ,
11979	return an empty string .
11980	try ,
11981	if arg is true ,
11982	call the function timesince with 2 arguments : value and arg , return the result .
11983	call the function timesince with an argument value , return the result .
11984	if TypeError or ValueError exceptions are caught ,
11985	return an empty string .
11986	decorator function register.filter with 2 arguments string STR0 and is_safe set to boolean False .
11987	define the function timeuntil_filter with 2 arguments value and arg set to None .
11988	if value is false ,
11989	return an empty string .
11990	try ,
11991	call the function timeuntil with 2 arguments value and arg , return the result .
11992	if TypeError or ValueError exceptions are caught ,
11993	return an empty string .
11994	decorator function register.filter with an argument is_safe set to boolean False .
11995	define the function default with 2 arguments value and arg .
11996	return value , if it is None return arg .
11997	decorator function register.filter with an argument is_safe set to boolean False .
11998	define the function default_if_none with 2 arguments value and arg .
11999	if value is None ,
12000	return arg .
12001	return value .
12002	decorator function register.filter with an argument is_safe set to boolean False .
12003	define the function divisibleby with 2 arguments value and arg .
12004	convert value and arg to integers , if value is divisible by arg , return True , otherwise return boolean False .
12005	decorator function register.filter with an argument is_safe set to boolean False .
12006	define the function yesno with 2 arguments value and arg set to None .
12007	if arg is None
12008	call the function ugettext with string STR0 as an argument , substitute the result for arg .
12009	split arg by STR0 , substitute the result for bits .
12010	if length of bits is lesser than integer 2 ,
12011	return value .
12012	try ,
12013	assign bits elements to yes , no and maybe , respectively .
12014	if ValueError exception is caught ,
12015	substitute first , second and second elements of bits for yes , no , maybe , respectively .
12016	if value is None ,
12017	return maybe .
12018	if value is true ,
12019	return yes .
12020	return no .
12021	decorator function register.filter with an argument is_safe set to boolean True .
12022	define the function filesizeformat with an argument bytes .
12023	try ,
12024	convert bytes to floating point number , substitute it for bytes .
12025	if TypeError , ValueError or UnicodeDecodeError exceptions are caught ,
12026	call the function ungettext with 3 arguments : string STR0 , string STR1 and 0 , STR2 is replaced with 0 , substitute the result for value .
12027	call the function avoid_wrapping with an argument value , return the result .
12028	filesize_number_format is an lambda function with an argument value , return value is the result of the method formats.number_format , called with 2 arguments : value rounded to 1 decimal point and integer 1 .
12029	move integer 1 left for 10 bits , substitute the result for KB .
12030	move integer 1 left for 20 bits , substitute the result for MB .
12031	move integer 1 left for 30 bits , substitute the result for GB .
12032	move integer 1 left for 40 bits , substitute the result for TB .
12033	move integer 1 left for 50 bits , substitute the result for PB .
12034	if bytes is smaller than KB ,
12035	call the function ugettext with 3 arguments , string STR0 , string STR1 and bytes ,
12036	replace ' % ( size ) d with bytes , substitute the result for value . otherwise if bytes is smaller than MB ,
12037	call the function ugettext with an argument string STR0 , substitute STR1 with the result of the call to the function , filesize_number_format with result of division of bytes by KB as an argument , substitute the result for value .
12038	otherwise if bytes is smaller than GB ,
12039	call the function ugettext with an argument string STR0 , substitute STR1 with the result of the call to the function , filesize_number_format with result of division of bytes by MB as an argument , substitute the result for value .
12040	otherwise if bytes is smaller than TB ,
12041	call the function ugettext with an argument string STR0 , substitute STR1 with the result of the call to the function , filesize_number_format with result of division of bytes by GB as an argument , substitute the result for value .
12042	otherwise if bytes is smaller than PB ,
12043	call the function ugettext with an argument string STR0 , substitute STR1 with the result of the call to the function , filesize_number_format with result of division of bytes by TB as an argument , substitute the result for value .
12044	if not ,
12045	call the function ugettext with an argument string STR0 , substitute STR1 with the result of the call to the function , filesize_number_format with result of division of bytes by PB as an argument , substitute the result for value .
12046	call the function avoid_wrapping with an argument value , return the result .
12047	decorator function register.filter with an argument is_safe set to boolean False .
12048	define the function pluralize with 2 arguments value and arg set to character STR0 .
12049	if STR0 is not contained in arg ,
12050	append arg to STR0 , substitute the result for arg .
12051	split arg by STR0 , substitute the result for bits.s
12052	if length of bits is greater than integer 2 ,
12053	return an empty string .
12054	substitute first 2 elements of bits for singular_suffix and plural_suffix , respectively .
12055	try ,
12056	convert value to an floating point number if it is not equal to integer 1 ,
12057	return plural_suffix .
12058	if ValueError exception is caught ,
12059	do nothing ,
12060	if TypeError exception is caught ,
12061	try ,
12062	if length of value is not equal to integer 1 ,
12063	return plural_suffix .
12064	if TypeError exception is caught ,
12065	do nothing ,
12066	return singular_suffix .
12067	decorator function register.filter with 2 arguments string STR0 and is_safe set to boolean True .
12068	define the function phone2numeric_filter with an argument value .
12069	call the function phone2numeric with an argument value , return the result .
12070	decorator function register.filter with an argument is_safe set to boolean True .
12071	define the function pprint with an argument value .
12072	try ,
12073	call the function pformat with an argument value , return the result .
12074	if Exception , renamed to e , exception is caught ,
12075	return an string STR0 , replace STR1 with result of the function force_text ,
12076	from __future__ import unicode_literals into default name space .
12077	import module os .
12078	import module sys .
12079	import module re .
12080	from datetime import datetime into default name space .
12081	from itertools import groupby and cycle as itertools_cycle into default name space .
12082	import module warnings .
12083	from django.conf import settings into default name space .
12084	from django.template.base import Node , NodeList , Template , Context , Library , TemplateSyntaxError , VariableDoesNotExist , validTemplateLibrary , BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END , SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END , VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re and render_value_in_context .
12085	from django.template.smartif import IfParser and Literal into default name space .
12086	from django.template.defaultfilters import date into default name space .
12087	from django.utils.deprecation import RemovedInDjango20Warning into default name space .
12088	from django.utils.encoding import force_text and smart_text into default name space .
12089	from django.utils.safestring import mark_safe into default name space .
12090	from django.utils.html import format_html into default name space .
12091	from django.utils import six into default name space .
12092	from django.utils import timezone into default name space .
12093	register is an instance of Library class .
12094	derive the class AutoEscapeControlNode from Node base class .
12095	define the method __init__ with 3 arguments : self , setting and nodelist .
12096	substitute setting and nodelist for self.setting and self.nodelist , respectively .
12097	define the method render with 2 arguments : self and context .
12098	substitute context.autoescape for old_setting .
12099	substitute self.setting for context.autoescape .
12100	call the method self.nodelist.render with an argument context , substitute the result for output .
12101	substitute old_setting for context.autoescape .
12102	if self.setting is true ,
12103	call the function mark_safe with an argument output .
12104	if not ,
12105	return output .
12106	derive the class CommentNode from Node base class .
12107	define the method render with 2 arguments : self and context .
12108	return an empty string ,
12109	derive the class CsrfTokenNode from Node base class .
12110	define the method render with 2 arguments : self and context .
12111	get the value under the STR0 key of the context dictionary , if it exists substitute the result for csrf_token , if not csrf_token is None .
12112	if csrf_token is true ,
12113	if csrf_token equals string STR0 ,
12114	call the function format_html with an argument empty string , return the result .
12115	if not ,
12116	call the function format_html with 2 arguments : string STR0 , and csrf_token , return the result .
12117	if not ,
12118	if settings.DEBUG is true ,
12119	call the function warnings.warn with an argument string STR0 .
12120	return an empty string ,
12121	derive the class CycleNode from Node base class .
12122	define the method __init__ with 4 arguments : self , cyclevars , variable_name set to None and silent set to boolean False .
12123	substitute cyclevars for self.cyclevars .
12124	substitute variable_name for self.variable_name .
12125	substitute silent for self.silent .
12126	define the method render with 2 arguments : self and context .
12127	if self is not contained in context.render_context ,
12128	call the function itertools_cycle with an argument self.cyclevars , substitute the result for value under the self dictionary context.render_context .
12129	get the value under the self key of the context.render_context dictionary , substitute it for cycle_iter .
12130	call the function next with an argument cycle_iter , call the method resolve on the result with an argument context , substitute the result for value .
12131	if self.variable_name is true .
12132	substitute value for value under the self.variable_name key of the context dictionary .
12133	if self.silent is true ,
12134	return an empty string ,
12135	call the function render_value_in_context with 2 arguments : value and context , return the result .
12136	derive the class DebugNode from Node base class .
12137	define the method render with 2 arguments : self and context .
12138	from pprint import pformat .
12139	output is an list with initial elements generated with call to the function pformat with an argument val , for every val in context .
12140	append 2 consecutive newlines to output .
12141	call the function pformat with an argument sys.modules , append the result for output .
12142	join elements of output into a string , return the result .
12143	derive the class FilterNode from Node base class .
12144	define the method __init__ with 3 arguments : self , filter_expr and nodelist ) .
12145	substitute filter_expr and nodelist for self.filter_expr and self.nodelist , respectively .
12146	define the method render with 2 arguments : self and context .
12147	call the method self.nodelist.render with an argument context , substitute the result output .
12148	call the method context.push with an argument var set to output , with the result perform ,
12149	call the function self.filter_expr.resolve with an argument context , return the result .
12150	derive the class FirstOfNode from Node base class .
12151	define the method __init__ with 2 arguments : self and variables .
12152	substitute variables for self.vars .
12153	define the method render with 2 arguments : self and context .
12154	for every var in self.vars ,
12155	call the method var.resolve with 2 arguments : context and True , substitute the result for value .
12156	if value is true ,
12157	call the function render_value_in_context with 2 arguments : value and context , return the result .
12158	return an empty string ,
12159	derive the class ForNode from Node base class .
12160	child_nodelists is an tuple with 2 elements : strings STR0 and STR1 .
12161	define the method __init__ with 6 arguments : self , loopvars , sequence , is_reversed , nodelist_loop and nodelist_empty set to None .
12162	substitute loopvars and sequence for self.loopvars and self.sequence , respectively .
12163	substitute is_reversed for self.is_reversed .
12164	substitute nodelist_loop for self.nodelist_loop .
12165	if nodelist_empty is None ,
12166	self.nodelist_empty is an instance of NodeList class .
12167	if not ,
12168	substitute nodelist_empty for self.nodelist_empty .
12169	define the method __repr__ with an argument self .
12170	if self.is_reversed is true , substitute reversed_text is an string STR0 , if not , reversed_text is an empty string .
12171	return an string STR0 , substitute STR1 with elements of self.loopvars joined into a string , separated with string STR2 , substitute STR3 with self.sequence , substitute STR4 with length of self.nodelist_loop , substitute STR5 with reversed_text .
12172	define the method __iter__ with an argument self .
12173	for every node in self.nodelist_loop ,
12174	yield node .
12175	for every node in self.nodelist_empty ,
12176	yield node .
12177	define the method render with 2 arguments : self and context .
12178	if string STR0 is contained in context ,
12179	substitute value under the the STR0 key of the context dictionary for parentloop .
12180	if not ,
12181	parentloop is an empty dictionary .
12182	call the method context.push , with the result perform ,
12183	try ,
12184	call the method self.sequence.resolve with 2 arguments : context and boolean True , substitute the result for values .
12185	if VariableDoesNotExist exception is caught ,
12186	values is an empty list .
12187	if values is None ,
12188	if values is None ,
12189	if values has an attribute STR0 ,
12190	convert values into a list , substitute it for value .
12191	substitute length of values for len_values .
12192	if len_values is smaller than integer 1 ,
12193	call the method self.nodelist_empty.render with an argument context , return the result .
12194	nodelist is an empty list .
12195	if self.is_reversed is true ,
12196	reverse elements order of values .
12197	substitute length of self.loopvars for num_loopvars .
12198	if num_loopvars is greater than integer 1 , unpack is an boolean True , otherwise is an boolean False .
12199	loop_dict and value under the STR0 key of the context dictionary are dictionaries with an entry : parentloop for STR1 .
12200	for every i and item in enumerated iterable values ,
12201	substitute i for value under the STR0 key of the loop_dict dictionary .
12202	substitute i incremented by 1 for value under the STR0 key of the loop_dict dictionary .
12203	subtract i from len_values , substitute the result for value under the STR0 key of the loop_dict dictionary .
12204	subtract i from len_values , decrement the result by integer 1 , substitute it for value under the STR0 key of the loop_dict dictionary .
12205	if i is equal to integer 0 , value under the STR0 key of the loop_dict dictionary is boolean True , otherwise it is False .
12206	if i is equal to len_values decremented by 1 , value under the STR0 key of the loop_dict dictionary is boolean True , otherwise it is False .
12207	pop_context is boolean False .
12208	if unpack is true ,
12209	if item is not an instance of list or tuple class ,
12210	len_item is integer 1 .
12211	if not ,
12212	substitute length of item for len_item .
12213	if num_loopvars is not equal to len_item ,
12214	call the function warnings.warn with 2 arguments : string STR0 formated with num_loopvars and len_item , respectively , and RemovedInDjango20Warning .
12215	try ,
12216	zip self.loopvars and item is a list to tuples , convert the result to an dictionary , substitute it for unpacked_vars .
12217	if TypeError exception is caught ,
12218	do nothing .
12219	if not ,
12220	pop_context is boolean True .
12221	call the method context.update with an argument unpacked_vars .
12222	if not ,
12223	substitute item for value under the first element of self.loopvars key of the context dictionary .
12224	if settings.TEMPLATE_DEBUG is true ,
12225	for every node in self.nodelist_loop ,
12226	try ,
12227	call the method node.render with an argument context , append the result to the nodelist .
12228	if Exception , renamed to e , exception is caught ,
12229	if e doesnt have an STR0 attribute ,
12230	substitute node.source for e.django_template_source .
12231	raise an exception .
12232	if not ,
12233	for every node in self.nodelist_loop ,
12234	call the method node.render with an argument context , append the result to the nodelist .
12235	if pop_context is true ,
12236	remove the first element of context .
12237	call the function mark_safe with an arguments : for every n in nodelist results of the function force_text called with an argument n , joined in a string , return the result .
12238	derive the class IfChangedNode from Node base class .
12239	child_nodelists is a tuple with 2 initial elements : strings STR0 and STR1 .
12240	define the method __init__ with 4 arguments : self , nodelist_true , nodelist_false and unpacked list varlist .
12241	substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false , respectively .
12242	substitute varlist for self.varlist .
12243	define the method render with 2 arguments : self and context .
12244	call the method self._get_context_stack_frame with an argument context , substitute the result for state_frame .
12245	if self is not contained in state_frame ,
12246	value under the self key of state_frame dictionary is None .
12247	nodelist_true_output is None .
12248	try ,
12249	if self._varlist is true ,
12250	compare_to is an list with elements generated by calling the var.resolve method with 2 arguments : context and boolean True , for every var in self._varlist .
12251	if not ,
12252	call the method self.nodelist_true.render with an argument context , assign the result to compare_to and nodelist_true_output .
12253	if VariableDoesNotExist exception is caught ,
12254	compare_to is None .
12255	if compare_to is not equal to value under the self key of state_frame .
12256	substitute compare_to for value under the state_frame dictionary under the self key .
12257	return nodelist_true_output , if true , if not call the method self.nodelist_true.render with an argument context and return the result .
12258	otherwise if self.nodelist_false is true ,
12259	call the method self.nodelist_false.render with an argument context , return the result .
12260	return an empty string ,
12261	define the method _get_context_stack_frame with 2 arguments : self and context .
12262	if string STR0 is contained in context ,
12263	return value under the STR0 key of the context dictionary .
12264	if not ,
12265	return context.render_context .
12266	derive the class IfEqualNode from Node base class .
12267	child_nodelists is a tuple with 2 elements strings STR0 and STR1 .
12268	define the method __init__ with 6 arguments : ( self , var1 , var2 , nodelist_true , nodelist_false and negate .
12269	substitute var1 and var2 for self.var1 and self.var2 , respectively .
12270	substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false , respectively .
12271	substitute negate for self.negate .
12272	define the method __repr__ with an argument self .
12273	return an string STR0 .
12274	define the method render with 2 arguments : self and context .
12275	call the method self.var1.resolve with 2 arguments : context and boolean True , substitute the result for val2 .
12276	call the method self.var2.resolve with 2 arguments : context and boolean True , substitute the result for val2 .
12277	if self.negate is true and val1 is not equal to val2 , or if , self.negate is false and val1 equals val2 ,
12278	call the method self.nodelist_true.render with an argument context , return the result .
12279	call the method self.nodelist_false.render with an arguments context , return the result .
12280	derive the class IfNode from Node base class .
12281	define the method __init__ with 2 arguments : self and conditions_nodelists .
12282	substitute conditions_nodelists for self.conditions_nodelists .
12283	define the method __repr__ with an argument self .
12284	return an string STR0 .
12285	define the method __iter__ with an argument self .
12286	for every _ and nodelist in self.conditions_nodelists ,
12287	for every node in nodelist ,
12288	yield node as an return value of a generator .
12289	property decorator ,
12290	define the method nodelist with an argument self .
12291	return an instance of a NodeList class , created with arguments node , for every node in nodelist , and for every _ , nodelist in self.conditions_nodelists .
12292	define the method render with 2 arguments : self and context .
12293	for every condition and nodelist in self.conditions_nodelists ,
12294	if condition is not None ,
12295	try ,
12296	call the method condition.eval with an argument context , substitute the result for match .
12297	if VariableDoesNotExist exception is caught ,
12298	match is None .
12299	if not ,
12300	match is boolean True .
12301	if match is true ,
12302	call the method nodelist.render with an argument context , return the result .
12303	return an empty string ,
12304	derive the class RegroupNode from Node base class .
12305	define the method __init__ with 4 arguments : self , target , expression and var_name .
12306	substitute target and expression for self.target and self.expression , respectively .
12307	substitute var_name for self.var_name .
12308	define the method resolve_expression with 3 arguments : self , obj and context .
12309	substitute obj for value under the self.var_name key of the context dictionary .
12310	call the method self.expression.resolve with 2 arguments : context and boolean True , return the result .
12311	define the method render with 2 arguments : self and context .
12312	call the method self.target.resolve with 2 arguments : context and boolean True , substitute it for obj_list .
12313	if obj_list is None ,
12314	value under the self.var_name key of the context dictionary is an empty list .
12315	return an empty string ,
12316	value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries : key for STR0 and val converted into a list for STR1 , for every key and val in result of the function groupby , called with 2 arguments : obj_list and lambda function with an argument obj and return value as a result of the function , self.resolve_expression called with 2 arguments obj and context .
12317	return an empty string ,
12318	define the function include_is_allowed with an argument filepath .
12319	return the absolute path of file path filepath , substitute it for filepath .
12320	for every root in settings.ALLOWED_INCLUDE_ROOTS ,
12321	if filepath starts with root ,
12322	return boolean True .
12323	return boolean False .
12324	derive the class SsiNode from Node base class .
12325	define the method __init__ with 3 arguments : self , filepath and parsed .
12326	substitute filepath for self.filepath .
12327	substitute parsed for self.parsed .
12328	define the method render with 2 arguments : self and context .
12329	call the function self.filepath.resolve with an argument context , substitute the result for filepath .
12330	call the function include_is_allowed with an argument filepath , if it evaluates to false ,
12331	if settings.DEBUG is true ,
12332	return string STR0 .
12333	if not ,
12334	return an empty string ,
12335	try ,
12336	open filepath file in read mode , with file descriptor as fp , perform ,
12337	read file fp , substitute the read data for output .
12338	if IOError exception is caught ,
12339	output is an empty string .
12340	if self.parsed is true ,
12341	try ,
12342	t is an instance of Template class , created with 2 arguments output and name set to filepath .
12343	call the function t.render with an argument context , return the result .
12344	if TemplateSyntaxError , renamed to e , exception is caught ,
12345	if settings.DEBUG is true ,
12346	return an string STR0 , where STR1 is replaced with e .
12347	if not ,
12348	return an empty string ,
12349	return output .
12350	derive the class LoadNode from Node base class .
12351	define the method render with 2 arguments : self and context .
12352	return an empty string ,
12353	derive the class NowNode from Node base class .
12354	define the method __init__ with 2 arguments : self and format_string .
12355	substitute format_string for self.format_string .
12356	define the method render with 2 arguments : self and context .
12357	if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo , if not tzinfo is None .
12358	call the function date with 2 arguments : result of the call to the function datetime.now with an argument tz set to tzinfo , and self.format_string , return the result .
12359	derive the class SpacelessNode from Node base class .
12360	define the method __init__ with 2 arguments : self and nodelist .
12361	substitute nodelist for self.nodelist .
12362	define the method render with 2 arguments : self and context .
12363	from django.utils.html import strip_spaces_between_tags .
12364	call the method self.nodelist.render with an argument context , strip the result of the surrounding whitespaces , use the result as an argument for the call to the function strip_spaces_between_tags , return the result .
12365	derive the class TemplateTagNode from Node base class .
12366	mapping is an dictionary with 8 initial entries : BLOCK_TAG_START for STR0 , BLOCK_TAG_END for STR1 , VARIABLE_TAG_START for STR2 , VARIABLE_TAG_END for STR3 , SINGLE_BRACE_START for STR4 , SINGLE_BRACE_END STR5 , COMMENT_TAG_START STR6 and COMMENT_TAG_END for STR7 .
12367	define the method __init__ with 2 arguments : self and tagtype .
12368	substitute tagtype for self.tagtype .
12369	define the method render with 2 arguments : self and context .
12370	call the method self.mapping.get with 2 arguments : self.tagtype and an empty list , return the result .
12371	derive the class URLNode from Node base class .
12372	define the method __init__ with 5 arguments : self , view_name , args , kwargs and asvar .
12373	substitute view_name for self.view_name .
12374	substitute args for self.args .
12375	substitute kwargs for self.kwargs .
12376	substitute asvar for self.asvar .
12377	define the method render with 2 arguments : self and context .
12378	from django.core.urlresolvers import reverse , NoReverseMatch .
12379	for every arg in self.args call the method arg.resolve with an argument context , substitute the results in a list for args .
12380	kwargs is an dictionary , populated for every k and v in result of the method self.kwargs.items with : result of the call to the method v.resolve with an argument context , for result of the function smart_text called with 2 arguments k and string STR0 .
12381	call the method self.view_name.resolve with an argument context , substitute the result for view_name .
12382	url is an empty string .
12383	try ,
12384	call the function reverse with 4 arguments : view_name , args as args , kwargs as kwargs and current_app as context.current_app , substitute the result for url .
12385	if NoReverseMatch exception is caught ,
12386	call the function sys.exc_info with an argument exc_info .
12387	if settings.SETTINGS_MODULE is true ,
12388	split settings.SETTINGS_MODULE by STR0 character , substitute the first element of the result for project_name .
12389	try ,
12390	call the function reverse with 4 arguments : concatenated project_name , character STR0 and view_name , args as args , kwargs as kwargs , current_app as context.current_app , substitute the result for url .
12391	if NoReverseMatch exception is caught ,
12392	if self.asvar is None ,
12393	call the function six.reraise with unpacked list exc_info as an argument .
12394	if not ,
12395	if self.asvar is None ,
12396	raise an exception .
12397	if self.asvar is true ,
12398	substitute url for value under the self.asvar key of context dictionary .
12399	return an empty string .
12400	if not ,
12401	return url .
12402	derive the class VerbatimNode from Node base class .
12403	define the method __init__ with 2 arguments : self and content .
12404	substitute content for self.content .
12405	define the method render with 2 arguments : self and context .
12406	return self.content
12407	derive the class WidthRatioNode from Node base class .
12408	define the method __init__ with 5 arguments : self , val_expr , max_expr , max_width and asvar set to None .
12409	substitute val_expr for self.val_expr .
12410	substitute max_expr for self.max_expr .
12411	substitute max_width for self.max_width .
12412	substitute asvar for self.asvar .
12413	define the method render with 2 arguments : self and context .
12414	try ,
12415	call the method self.val_expr.resolve with an argument context , substitute the result for value .
12416	call the method self.max_expr.resolve with an argument context , substitute the result for max_value .
12417	call the method self.max_width.resolve with an argument context , convert the result to an integer and substitute it for max_width .
12418	if VariableDoesNotExist exception is caught ,
12419	return an empty string .
12420	if ValueError or TypeError exceptions are caught ,
12421	raise an TemplateSyntaxError exception with an argument string STR0 .
12422	try ,
12423	convert value into an floating point number , substitute it for value .
12424	convert max_value into an floating point number , substitute it for max_value .
12425	divide value by max_value , multiply the result with max_width , substitute it for ratio .
12426	round up radio , convert it to an integer and the convert it to a string and substitute the result for result .
12427	if ZeroDivisionError exception is caught ,
12428	return an string STR0 .
12429	if ValueError , TypeError or OverflowError exceptions are caught ,
12430	return an empty string ,
12431	if self.asvar is true ,
12432	substitute result for value under the self.asvar key of context dictionary .
12433	return an empty string ,
12434	if not ,
12435	return result .
12436	derive the class WithNode from Node base class .
12437	define the method __init__ with 5 arguments : self , var , name , nodelist and extra_context set to None .
12438	substitute nodelist for self.nodelist .
12439	if extra_context is true , substitute it for self.extra_context , if not self.extra_context is an empty dictionary .
12440	if name is true ,
12441	substitute var for value under the name key of the self.extra_context dictionary .
12442	define the method __repr__ with an argument self .
12443	return a string STR0
12444	define the method render with 2 arguments : self and context .
12445	values is an dictionary created with result of the method val.resolve called with an argument context , for every key and val in return value of the function six.iteritems called with an arguments self.extra_context .
12446	call the method context.push with an argument unpacked dictionary values , with the result as an argument ,
12447	call the method self.nodelist.render with an argument context , return the result .
12448	register.tag decorator ,
12449	define the function autoescape with 2 arguments : parser and token .
12450	call the method token.contents.split , substitute the result for args .
12451	if length of args is not equal to integer 2 ,
12452	raise an TemplateSyntaxError with an argument string STR0 .
12453	substitute first element of args for arg .
12454	if arg is not string STR0 or STR1 ,
12455	raise an TemplateSyntaxError exception with an argument string STR0 .
12456	call the method parser.parse with an argument tuple with an element string STR0 , substitute the result for nodelist .
12457	call the method parser.delete_first_token .
12458	return an instance of AutoEscapeControlNode with 2 arguments : boolean exception arg equals to string STR0 , and nodelist .
12459	register.tag decorator ,
12460	define the function comment with 2 arguments : parser and token .
12461	call the method parser.skip_past with an argument string STR0 .
12462	return an instance of CommentNode class .
12463	register.tag decorator ,
12464	define the function cycle with 2 arguments : parser and token .
12465	call the method token.split_contents , substitute the result for args .
12466	if length of args is smaller than integer 2 ,
12467	raise an TemplateSyntaxError exception with an argument string STR0 .
12468	if STR0 is contained in second element of args ,
12469	split first element of args by STR0 , convert separated elements to strings , substitute the first 2 elements of the result , for second and third element of args , respectively .
12470	if length of args equals integer 2 ,
12471	substitute second element of args for name .
12472	if parser doesnt have an STR0 attribute ,
12473	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with name .
12474	if name is not contained in parser._namedCycleNodes ,
12475	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with name .
12476	get the index name , of the parser._namedCycleNodes , return the result .
12477	as_form is boolean False .
12478	if length of args is greater than 4 .
12479	if third element from the end of the args equals string STR0 ,
12480	if last element of args is not equal to a string STR0 ,
12481	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with last element of args .
12482	as_form is boolean True
12483	silent is boolean True .
12484	substitute args , without the last element for args .
12485	if second from the end element of args equals a string STR0 ,
12486	as_form is boolean True .
12487	silent is boolean False .
12488	if as_form is true ,
12489	substitute the last element of args for name .
12490	call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2 , append the results into a list , substitute it for value .
12491	node is an instance CycleNode class , created with values , name and silent set to silent .
12492	if parser doesnt have an STR0 attribute ,
12493	parser._namedCycleNodes is an empty dictionary .
12494	substituet node for value under the name key of the parser._namedCycleNodes dictionary .
12495	if not ,
12496	call the function parser.compile_filter with an argument arg for every arg in args from first element to the end , append the results into a list , substitute it for value .
12497	node is an instance of CycleNode class , created wiht an argument values .
12498	return node .
12499	register.tag decorator ,
12500	define the function csrf_token with 2 arguments : parser and token .
12501	return an instance of CsrfTokenNode class .
12502	register.tag decorator ,
12503	define the function debug with 2 arguments : parser and token .
12504	return an instance of DebugNode class .
12505	register.tag decorator function with an argument STR0 ,
12506	define the function do_filter with 2 arguments : parser and token .
12507	split into two parts token.contents by None , substitute the parts for _ and rest , respectively .
12508	call the method parser.compile_filter with an argument string STR0 , where STR1 is replaced with rest , substitute the result for filter_expr .
12509	for every func and unused in filter_expr.filters ,
12510	get STR0 attribute of the func object , if it exists , substitute it for filter_name , if not , filter_name is None .
12511	if every filter_name in strings STR0 or STR1 ,
12512	raise an TemplateSyntaxError exception with an argument string STR2 , where STR3 is replaced with filter_name .
12513	call the method parser.parse with an argument tuple with an element string STR0 , substitute the result for nodelist .
12514	call the method parser.delete_first_token .
12515	return a class instance FilterNode , called with an arguments filter_expr and nodelist .
12516	register.tag decorator ,
12517	define the function firstof with 2 arguments : parser and token .
12518	call the method token.split_contents , substitute the result without the first element for bits .
12519	if length of bits is smaller than integer 1 ,
12520	raise an TemplateSyntaxError exception with an argument string STR0 .
12521	return an instance of FirstOfNode class , created with an argument , result of the method parser.compile_filter called with bit , for every bit in bits .
12522	register.tag decorator function with an argument STR0 ,
12523	define the function do_for with 2 arguments : parser and token .
12524	call the method token.split_contents , substitute the result .
12525	if length bits is smaller than intger 4 ,
12526	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with token.contents .
12527	assign the string STR0 to is_reversed and bits last elements .
12528	if index is negative inter 3 , if is_reversed , substitute it for in_index , if not , in_index is negative integer 2 .
12529	if in_index-th element of bits equals to string STR0 ,
12530	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with token.contents .
12531	call the method re.split with 2 arguments : raw string STR0 and elements of bits from 1 index to in_index index , joined into a string , separated by whitespaces , substitute the result for loopvars .
12532	for every var in loopvars ,
12533	if var is false or whitespaces are contained in var ,
12534	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with token.contents .
12535	call the method parser.compile_filter with an argument , in_index incremented by one , and used to index parser.compile_filter , substitute the result for sequence .
12536	call the method parser.parse with an argument tuple with 2 elements strings STR0 and STR1 , substitute the result for nodelist_loop .
12537	call the method parser.next_token , substitute the result for token .
12538	if token.contents equals string STR0 ,
12539	call the method parser.parse with an argument tuple with an element string STR0 , substitute the result for nodelist_empty .
12540	call the method parser.delete_first_token .
12541	if not ,
12542	nodelist_empty is None .
12543	return an instance of ForNode class , created with 5 arguments : loopvars , sequence , is_reversed , nodelist_loop and nodelist_empty .
12544	define the function do_ifequal with 2 arguments : parser , token and negate .
12545	call the method token.split_contents , convert the result into a list and substitute it for bits .
12546	if length of bits is not equal to integer 3 ,
12547	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first element of bits .
12548	append first element of bits to STR0 . substitute the result for end_tag .
12549	call the method parser.parse with an argument tuple with an element string STR0 and end_tag , substitute the result for nodelist_true .
12550	call the method parser.next_token , substitute the result for token .
12551	if token.contents equals a string STR0 ,
12552	call the method parser.parse with an argument tuple with an element end_tag , substitute the result for nodelist_false .
12553	call the method parser.delete_first_token .
12554	if not ,
12555	nodelist_false is an instance of NodeList class .
12556	call the method parser.compile_filter with an argument , second element of bits , substitute the result for val1 .
12557	call the method parser.compile_filter with an argument , third element of bits , substitute the result for val2 .
12558	return an instance of IfEqualNode class , created with 5 arguments : val1 , val2 , nodelist_true , nodelist_false and negate .
12559	register.tag decorator ,
12560	define the function ifequal with 2 arguments : parser and token .
12561	call the function do_ifequal with 3 arguments : parser , token and boolean False , return the result .
12562	register.tag decorator ,
12563	define the function ifnotequal with 2 arguments : parser and token .
12564	call the function do_ifequal with 3 arguments : parser , token and boolean False , return the result .
12565	derive the class TemplateLiteral from Literal base class .
12566	define the method __init__ with 3 arguments : self , value and text .
12567	substitute value for self.value .
12568	substitute text for self.text .
12569	define the method display with an argument self .
12570	return self.text .
12571	define the method eval with 2 arguments : self and context .
12572	call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True , return the result .
12573	derive the class TemplateIfParser from IfParser base class .
12574	substitute TemplateSyntaxError for error_class .
12575	define the method __init__ with 4 arguments : self , parser , unpacked list args and unpacked dictionary kwargs .
12576	substitute parser for self.template_parser .
12577	call the method __init__ from the base class of the class TemplateIfParser , with 2 arguments : unpacked list args and unpacked dictionary .
12578	define the method create_var with 2 arguments : self and value .
12579	return an instance of TemplateLiteral with 2 arguments : result of the function self.template_parser.compile_filter , called with an argument value and value .
12580	register.tag decorator function with an argument STR0 ,
12581	define the function do_if with 2 arguments : parser and token .
12582	call the method token.split_contents , substitute results without the first element for bits .
12583	call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition .
12584	call the method parser.parse with an argument tuple with 3 elements : strings STR0 , STR1 and STR2 , substitute the result for nodelist .
12585	conditions_nodelists is a list containing tuple with 2 elements condition and nodelist .
12586	call the method parser.next_token , substitute the result for token .
12587	while token.contents starts with a string STR0 ,
12588	call the method token.split_contents , substitute results without the first element for bits .
12589	call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition .
12590	call the method parser.parse with an argument tuple with 3 elements strings STR0 , STR1 and STR2 , substitute the result for nodelist .
12591	append a tuple with 2 elements : condition and nodelist to conditions_nodelists .
12592	call the method parser.next_token , substitute the result for token .
12593	if token.contents equals string STR0 ,
12594	call the method parser.parse with an argument tuple with an element string STR0 , substitute the result for nodelist .
12595	append a tuple with 2 elements : None and nodelist to conditions_nodelists .
12596	call the method parser.next_token , substitute the result for token .
12597	if token.contents doesn not equals a string STR0 , raise an AssertionError exception ,
12598	return an instance of IfNode class , created with an argument conditions_nodelists .
12599	register.tag decorator ,
12600	define the function ifchanged with 2 arguments : parser and token .
12601	call the method token.split_contents , substitute the result for bits .
12602	call the method parser.parse with an argument tuple with 2 elements strings : STR0 and STR1 , substitute the result for nodelistelse .
12603	call the method parser.next_token , substitute the result for token .
12604	if token.contents equals string STR0 ,
12605	call the method parser.parse with an argument tuple with an element string STR0 , substitute the result for nodelist_false .
12606	call the method parser.delete_first_token .
12607	if not ,
12608	nodelist_false is an instance of NodeList .
12609	for every bit in elements of bits without the first element , call the method parser.compile_filter , with an argument bit , substitute the list of results for values .
12610	return an instance of a class IfChangedNode , created with 3 arguments : nodelist_true , nodelist_false and unpacked list values .
12611	register.tag decorator ,
12612	define the function ssi with 2 arguments : parser and token .
12613	call the method token.split_contents , substitute the result for bits .
12614	parsed is boolean False .
12615	if length of bits is not integer 2 or 3 ,
12616	raise an TemplateSyntaxError exception with an argument string STR0 .
12617	if length of bits equals integer 3 ,
12618	if third element of bits equals a string STR0 ,
12619	parsed is boolean True .
12620	if not ,
12621	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first element of bits .
12622	call the method parser.compile_filter with second element of bits as an argument , substitute the result for filepath .
12623	return an instance of a SsiNode class , created with 2 arguments : filepath and parsed .
12624	register.tag decorator ,
12625	define the function load with 2 arguments : parser and token .
12626	call the method token.split_contents , substitute the result for bits .
12627	if length of bits is greater or equal to integer 4 and second last element of bits equals sting STR0 ,
12628	try ,
12629	substitute last element of bits for taglib .
12630	call the function get_library with an argument taglib , substitute the result for lib .
12631	if InvalidTemplateLibrary , renamed to e , exception is caught ,
12632	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with taglib and e .
12633	if not ,
12634	temp_lib is an instance of Library class .
12635	for every name in bits from the start index 1 to the end index negative 2 ,
12636	if name is contained in lib.tags ,
12637	substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary .
12638	if name is contained in lib.filters .
12639	substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary .
12640	otherwise if name is contained in lib.filters ,
12641	substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary .
12642	if not ,
12643	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with name and taglib .
12644	call the method parser.add_library with an argument temp_lib .
12645	if not ,
12646	for every taglib in bits without the first element ,
12647	try ,
12648	call the function get_library with an argument taglib , substitute the result for lib .
12649	call the method parser.add_library with an argument lib .
12650	if InvalidTemplateLibrary , renamed to e , exception is caught ,
12651	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with taglib and e .
12652	return an instance of a LoadNode class .
12653	register.tag decorator ,
12654	define the function now with 2 arguments : parser and token .
12655	call the method token.split_contents , substitute the result for bits .
12656	if length of bits is not equal to integer 2 ,
12657	raise an TemplateSyntaxError exception with an argument string STR0 .
12658	substitute second element of bits without the first and last element for format_string .
12659	return an instance of a NowNode class , created with an argument format_string .
12660	register.tag decorator ,
12661	define the function regroup with 2 arguments : parser and token .
12662	call the method token.split_contents , substitute the result for bits .
12663	if length of bits is not equal to integer 6 ,
12664	raise an TemplateSyntaxError exception with an argument string STR0 .
12665	call the method parser.compile_filter with an argument first element of bits , substitute the result for target .
12666	if third element of bits is not equal to a string STR0 ,
12667	raise an TemplateSyntaxError exception with an argument string STR0 .
12668	if fift element of bits is not equal to a string STR0 ,
12669	raise an TemplateSyntaxError exception with an argument string STR0 .
12670	substitute sixth element of bits for var_name .
12671	concatenate var_name , VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits , use the result as an argument for the call the method , parser.compile_filter , substitute the result for expression .
12672	return an instance of a RegroupNode class , created with 3 arguments target , expression and var_name .
12673	register.tag decorator ,
12674	define the function spaceless with 2 arguments : parser and token .
12675	call the method parser.parse with an argument tuple with an element string STR0 , substitute the result for nodelist .
12676	call the method parser.delete_first_token .
12677	return an instance of a SpacelessNode class , created with an argument nodelist .
12678	register.tag decorator ,
12679	define the function templatetag with 2 arguments : parser and token .
12680	call the method token.split_contents , substitute the result for bits .
12681	if length of bits is not equal to integer 2 ,
12682	raise an TemplateSyntaxError exception with an argument string STR0 .
12683	substitute second element of bits for tag .
12684	if tag is not contained in TemplateTagNode.mapping ,
12685	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with tag and TemplateTagNode.mapping converted into a list .
12686	return an instance of a TemplateTagNode class , created with an argument tag .
12687	register.tag decorator ,
12688	define the function url with 2 arguments : parser and token .
12689	call the method token.split_contents , substitute the result for bits .
12690	if length of bits is lesser than integer 2 ,
12691	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first element of bits .
12692	call the method parser.compile_filter with second element of bits as an argument , substitute the result for viewname .
12693	args is an empty list .
12694	kwargs is an empty dictionary .
12695	asvar is None .
12696	remove first two elements from bits .
12697	if length of bits is greater or equal to intger 2 and second last element of bits is equal to string STR0 ,
12698	substitute last element of bits for asvar .
12699	remove last 2 elements from bits .
12700	if length of bits is not zero ,
12701	for every bit in bits ,
12702	call the method kwarg_re.match with an argument bit , substitute it for match .
12703	if match is true ,
12704	raise an TemplateSyntaxError exception with an argument string STR0 .
12705	call the method match.groups , assign the result to name and value , respectively .
12706	if name is true ,
12707	call the method parser.compile_filter with an argument value , substitute the result for value under the name key of kwargs dictionary .
12708	if not ,
12709	call the method parser.compile_filter with an argument value , append the result to args .
12710	return an instance of a URLNode class , created with 4 arguments viewname , args , kwargs and asvar .
12711	register.tag decorator ,
12712	define the function verbatim with 2 arguments : parser and token .
12713	call the method parser.parse with an argument tuple with an element string STR0 , substitute the result for nodelist .
12714	call the method parser.delete_first_token .
12715	call the method nodelist.render with an argument , an instance of Context class , use the result as an argument for the creation of , an instance of VerbatimNode class , return it .
12716	register.tag decorator ,
12717	define the function widthratio with 2 arguments : parser and token .
12718	call the method token.split_contents , substitute the result for bits .
12719	if length of bits equals integer 4 ,
12720	assign the bits elements to tag , this_value_expr , max_value_expr and max_width , respectively .
12721	asvar is None .
12722	otherwise if length of bits equals integer 6 ,
12723	assign the bits elements to tag , this_value_expr , max_value_expr , max_width , as_ and asvar .
12724	if as_ is not equal to string STR0 ,
12725	raise an TemplateSyntaxError exception with an argument string STR0 .
12726	if not ,
12727	raise an TemplateSyntaxError exception with an argument string STR0 .
12728	return an instance of a class WidthRatioNode , created with 4 arguments : result of the method parser.compile_filter ,
12729	called with an argument this_value_expr , result of the method parser.compile_filter called with an argument max_value_expr , return value of the method parser.compile_filter called with an argument max_width and asvar as asvar . register.tag decorator function with an argument STR0 ,
12730	define the function do_with with 2 arguments : parser and token .
12731	call the method token.split_contents , substitute the result for bits .
12732	substitute bits without the first element for remaining_bits .
12733	call the function token_kwargs with 3 arguments : remaining_bits , parser and support_legacy set to boolean True , substitute the result for extra_context .
12734	if extra_context is false ,
12735	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first element of bits .
12736	if remaining_bits is true ,
12737	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with , first element of bits and first element of remaining_bits .
12738	all the method parser.parse with an argument tuple , with an element string STR0 , substitute the result for nodelist .
12739	call the method parser.delete_first_token .
12740	return an instance of a class WithNode , created with 4 arguments : None , None , nodelist and extra_context as extra_context .
12741	from django.core.exceptions import ImproperlyConfigured into default name space .
12742	from django.template.base import Origin , Template , Context and TemplateDoesNotExist into default name space .
12743	from django.conf import settings into default name space .
12744	from django.utils.module_loading import import_string into default name space .
12745	from django.utils import six into default name space .
12746	template_source_loaders is None .
12747	derive the class BaseLoader from the object base class .
12748	is_usable is boolean False .
12749	define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
12750	do nothing .
12751	define the method __call__ with 3 arguments : self , template_name and template_dirs set to None .
12752	call the method self.load_template with 2 arguments : template_name and template_dirs , return the result .
12753	define the method load_template with 3 arguments : self , template_name and template_dirs set to None .
12754	call the method self.load_template_source with arguments template_name and template_dirs , assign the result to source and display_name .
12755	call the function make_origin with 4 arguments : display_name , self.load_template_source , template_name and template_dirs , substitute the result for origin .
12756	try ,
12757	call the function get_template_from_string with 3 arguments : source , origin and template_name , substitute the result for template .
12758	return template and None .
12759	if TemplateDoesNotExist exception is caught ,
12760	return source and display_name .
12761	define the method load_template_source with 3 arguments : self , template_name and template_dirs set to None .
12762	raise an NotImplementedError with an argument string STR0 .
12763	define the method reset with an argument self .
12764	do nothing .
12765	derive the class LoaderOrigin from the Origin base class .
12766	define the method __init__ with 5 arguments : self , display_name , loader , name and dirs .
12767	call the method __init__ with an argument display_name , from the base class of the LoaderOrigin class .
12768	substitute loader , name and dirs for self.loader , self.loadname and self.dirs , respectively .
12769	define the method reload with an argument self .
12770	call the method self.loader with 2 arguments : self.loadname and self.dirs , return the first element of the result .
12771	define the function make_origin with 4 arguments : display_name , loader , name and dirs .
12772	if settings.TEMPLATE_DEBUG and display_name are both true ,
12773	return an instance of LoaderOrigin class , created with 4 arguments : display_name , loader , name and dirs .
12774	if not ,
12775	return None .
12776	define the function find_template_loader with an argument loader .
12777	if loader is an instance of tuple or list ,
12778	substitute first element of loader for loader and loader without the first element for args .
12779	if not ,
12780	args is an empty list .
12781	if loader is an instance of six.string_types ,
12782	call the function import_string with an argument loader , substitute the result for TemplateLoader .
12783	if TemplateLoader has an attribute STR0 ,
12784	func is an instance of TemplateLoader class , created with unpacked list args .
12785	if not ,
12786	if args is true ,
12787	raise an ImproperlyConfigured exception with an argument string STR0 , where STR1 is replaced with loader .
12788	substitute TemplateLoader for func .
12789	func.is_usable in false ,
12790	import module warnings .
12791	call the function warnings.warn with an argument string STR0 , where STR1 is replaced with loader .
12792	return None .
12793	if not ,
12794	return func .
12795	if not ,
12796	raise an ImproperlyConfigured with an argument string STR1 .
12797	define the function find_template with 2 : template_name and dirs set to None .
12798	use global variable template_source_loaders .
12799	if template_source_loaders is None ,
12800	loaders is an empty list .
12801	for every loader_name in settings.TEMPLATE_LOADERS ,
12802	call the function find_template_loader with an argument loader_name , substitute the result for loader .
12803	if loader is not None ,
12804	append loader to loaders .
12805	put loaders elements in a tuple , substitute it for template_source_loaders .
12806	for every loader in template_source_loaders ,
12807	try ,
12808	call the function loader with 2 arguments name and dirs , substitute the result for source and display_name , respectively .
12809	call the function make_origin with 4 arguments : display_name , loader , name and dirs , return a tuple containing 2 elements : source and previous result .
12810	if TemplateDoesNotExist exception is caught ,
12811	do nothing ,
12812	raise an TemplateDoesNotExist exception with an argument name .
12813	define the function get_template with 2 : template_name and dirs set to None .
12814	call the function find_template with 2 arguments : template_name and dirs , substitute the result for template and origin .
12815	if template has an attribute STR0 ,
12816	call the function get_template_from_string with 3 arguments : template , origin and template_name , substitute the result for template .
12817	return template .
12818	define the function get_template_from_string with 3 : source , origin set to None and name set to None .
12819	return an instance of Template class , created with 2 arguments : source , origin and name , return the result .
12820	define the function render_to_string with 4 arguments : template_name , dictionary set to None , context_instance set to None and dirs set to None .
12821	if template_name is an instance of list or tuple types ,
12822	call the function select_template with 2 arguments : template_name , dirs , substitute the result for t .
12823	if not ,
12824	call the function get_template with 2 arguments : template_name and dirs , substitute the result for t .
12825	if context_instance is false ,
12826	call the method t.render with an argument , instance of Context class , created with an argument dictionary , return the result .
12827	if dictionary is false ,
12828	call the function t.render with an argument context_instance , return the result .
12829	call the method context_instance.push with an argument dictionary , with the result perform ,
12830	call the function t.render with an argument context_instance , return the result .
12831	define the function select_template with 2 arguments : template_name_list and dirs set to None .
12832	if template_name_list is false ,
12833	raise an TemplateDoesNotExist exception with an argument string STR0 .
12834	not_found is an empty list .
12835	for every template_name in template_name_list ,
12836	try ,
12837	call the function get_template with 2 arguments template_name and dirs , return the result .
12838	if TemplateDoesNotExist , renamed to e , exception is caught ,
12839	if first element of e.args is not contained in not_found ,
12840	append first element of e.args to not_found list .
12841	skip this loop iteration .
12842	raise an TemplateDoesNotExist exception with an argument , elements of not_found joined into a string , separated with STR0
12843	from collections import defaultdict into default name space .
12844	from django.conf import settings into default name space .
12845	from django.template.base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs and Variable into default namespace .
12846	from django.template.loader import get_template into default name space .
12847	from django.utils.safestring import mark_safe into default name space .
12848	from django.utils import six into default name space .
12849	register is an instance of Library class .
12850	BLOCK_CONTEXT_KEY is a strign STR0 .
12851	derive the class ExtendsError from the Exception base class .
12852	do nothing .
12853	derive the class BlockContext from the Exception base class .
12854	define the method __init__ with an argument self .
12855	convert elements of defaultdict to list , substitute it for self.blocks .
12856	define the method self and blocks .
12857	call the function six.iteritems with an argument blocks , for every name and block in result ,
12858	get the value under the name key of self.blocks dictionary , insert to it block at the beginning .
12859	define the method self and name .
12860	try ,
12861	remove the first element of value under the name key of self.blocks dictionary , return it .
12862	if IndexError exception is caught ,
12863	return None .
12864	define the method push with 3 arguments : self , name and block .
12865	append block to the value under the name key of self.blocks dictionary .
12866	define the method get_block with 2 arguments self and name .
12867	try ,
12868	get value under the self.blocks dictionary under the name key , return the last element .
12869	if IndexError exception is caught ,
12870	return None .
12871	derive the class BlockNode from the Node base class .
12872	define the method __init__ with 4 arguments : self , name , nodelist , parent set to None .
12873	substitute name , nodelist and parent for self.name , self.nodelist and self.parent .
12874	define the method __repr__ with an argument self .
12875	return string STR0 , where STR1 is replaced with self.name and STR2 with self.nodelist .
12876	define the method render with 2 arguments self and context .
12877	get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary , substitute it for block_context .
12878	call the context.push method , with the result , perform ,
12879	if block_context is None ,
12880	substitute self for value under the STR0 key of context dictionary .
12881	call the method self.nodelist.render with an argument context , substitute the result for result .
12882	if not ,
12883	call the method block_context.pop with an argument self.name , assign the result to push and block .
12884	if block is None ,
12885	substitute self for block .
12886	convert self to a tuple , call the result with 2 arguments : block.name and block.nodelist , substitute the result for block .
12887	substitute context for block.context .
12888	substitute block for value under the STR0 key of context dictionary .
12889	call the method block.nodelist.render with an argument context , substitute the result for result .
12890	if push is not None ,
12891	call the method block_context.push with 2 arguments : self.name and push .
12892	return result .
12893	define the method super with an argument self .
12894	substitute self.context.render_context for render_context .
12895	if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object ,
12896	under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None , call the method self.render with an argument self.context , use it as an argument for the call to the mark_safe function , return the result .
12897	return an empty string .
12898	derive the class ExtendsNode from the Node base class .
12899	must_be_first is boolean True .
12900	define the method __init__ with 4 arguments : self , nodelist , parent_name and template_dirs set to None .
12901	substitute nodelist for self.nodelist .
12902	substitute parent_name for self.parent_name .
12903	substitute template_dirs for self.template_dirs .
12904	self.blocks is a dictionary with elements : n for n.name , for every n in return value of the method nodelist.get_nodes_by_type , called with an argument BlockNode .
12905	define the method __repr__ with an argument self .
12906	return an string STR0 , where STR1 is replaced with self.parent_name.token .
12907	define the method get_parent with 2 arguments self and context .
12908	call the method self.parent_name.resolve with an argument context .
12909	if parent is false ,
12910	error_msg is a string STR0 , where STR1 is replaced with parent .
12911	if self.parent_name.filters is true or self.parent_name.var is an instance of Variable .
12912	append string STR0 to error_msg , where ' % s is replaced with self.parent_name.token .
12913	raise an TemplateSyntaxError exception with an argument error_msg .
12914	if parent has an attribute STR0 ,
12915	return parent .
12916	call the function get_template with an argument parent , return the result .
12917	define the method render with 2 arguments self and context .
12918	call the method self.get_parent with an argument context , substitute the result for compiled_parent .
12919	if BLOCK_CONTEXT_KEY is not contained in context.render_context ,
12920	value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance .
12921	get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary , substitute it for block_context .
12922	call the method block_context.add_blocks with an argument self.block .
12923	for every node in compiled_parent.nodelist ,
12924	if node is not an instance of TextNode ,
12925	if node is not an instance of ExtendsNode ,
12926	blocks is a dictionary with elements : n for n.name , for every n in return value of the method , compiled_parent.nodelist.get_nodes_by_type , called with an argument BlockNode .
12927	call the method block_context.add_blocks with an argument blocks .
12928	break from the loop execution .
12929	call the method compiled_parent._render with an argument context , return the result .
12930	derive the class IncludeNode from the Node base class .
12931	define the method __init__ with 4 arguments : self , template , unpacked list args and unpacked dictionary kwargs .
12932	substitute template for self.template .
12933	remove kwargs dictionary entry under the STR0 key , if it exists substitute it for self.extra_context , if not self.extra_context is an empty dictionary .
12934	remove kwargs dictionary entry under the STR0 key , if it exists substitute it for self.isolated_context , if not self.isolated_context is boolean False .
12935	call the method __init__ from the base class of the class IncludeNode , called with 2 arguments : unpacked dictionary args , and unpacked dictionary kwargs .
12936	define the method render with 2 arguments self and context .
12937	try ,
12938	call the method self.template.resolve with an argument context , substitute the result for template .
12939	get STR0 attribute of template object , if it is callable ,
12940	call the method get_template with an argument template , substitute the result for template .
12941	values is an dictionary with entries : return value of the method var.resolve with an argument context for name , for every name and var in return value of the function six.iteritems called with an argument self.extra_context .
12942	if self.isolated_context is true ,
12943	call the method context.new with an argument values , use it as an argument for the call to the method template.render , return the result .
12944	call the method context.push with unpacked dictionary values as an argument , with the result perform ,
12945	call the method template.render with an argument context , return the result .
12946	if Exception exception is caught ,
12947	if settings.TEMPLATE_DEBUG is true ,
12948	raise an exception ,
12949	return an empty string .
12950	decorator method register.tag with an argument STR0 ,
12951	define the function do_block with 2 arguments parser and token .
12952	call the method token.contents.split , substitute the result for bits .
12953	if length of bits is not equal to integer 2 ,
12954	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first element of bits .
12955	substitute second element for bits for block_name .
12956	try ,
12957	if block_name is contained in parser.__loaded_blocks ,
12958	raise an TemplateSyntaxError exception with an argument string STR0 , substitute STR1 with first element of bits and block_name , respectively .
12959	append block_name to parser.__loaded_blocks .
12960	if AttributeError exception is caught ,
12961	substitute list with an element block_name for parser.__loaded_blocks .
12962	call the method parser.parse with an argument tuple with one element string STR0 , substitute the result for nodelist .
12963	call the method parser.next_token , substitute the result for endblock .
12964	acceptable_endblocks is a tuple with 2 elements : string STR0 and STR1 , where STR2 replaced with block_name .
12965	if endblock.contents is not contained in acceptable_endblocks ,
12966	call the method parser.invalid_block_tag with 3 arguments : endblock , STR0 and acceptable_endblocks .
12967	return an instance of a BlockNode class , created with 2 arguments : block_name and nodelist .
12968	decorator method register.tag with an argument STR0 ,
12969	define the function do_extends with 2 arguments parser and token .
12970	call the method token.split_contents , substitute the result for bits .
12971	if length of bits is not equalt to integer 2 ,
12972	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first element of bits .
12973	call the method parser.compile_filter with an argument second element for bits , substitute the result for parent_name .
12974	call the method parser.parse , substitute the result for nodelist .
12975	call the method nodelist.get_nodes_by_type with an argument ExtendsNode , if it evaluates to true ,
12976	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with first element of bits .
12977	return an instance of ExtendsNode with 2 arguments nodelist and parent_name .
12978	decorator method register.tag with an argument STR0 ,
12979	define the function do_include with 2 arguments parser and token .
12980	call the method token.split_contents , substitute the result for bits .
12981	if length of bits is lesser than integer 2 ,
12982	raise an TemplateSyntaxError with an argument string STR0 , where STR1 is replaced with first element of bits .
12983	options is an empty dictionary .
12984	substitute bits , without the first two elements , substitute the result for remaining_bits .
12985	while remaining_bits is true ,
12986	remove first element from remaining_bits , substitute the result for option .
12987	if option is contained in options ,
12988	raise an TemplateSyntaxError exception with an argument string STR0 , where STR1 is replaced with options .
12989	if option equals a string STR0 ,
12990	call the function token_kwargs with 3 arguments : remaining_bits , parser , support_legacy set to boolean False , substitute the result for value .
12991	if value is true ,
12992	raise an TemplateSyntaxError exception with an argument string STR1 , where STR2 is replaced with first element of bits .
12993	otherwise if options equals STR0 ,
12994	value is boolean True .
12995	if not ,
12996	raise an TemplateSyntaxError with an argument string STR0 , where STR1 is replaced with first element of bits and options .
12997	substitute value for value under the options key of options dictionary .
12998	get the value under the key STR0 of the options dictionary , if it exists substitute the result for isolated_context , if not , isolated_context is boolean False .
12999	get the value under the STR0 key of the options dictionary , if it exists , substitute it for namemap , if not namemap is an empty dictionary .
13000	return an instance of IncludeNode class , created with 3 arguments : return value of the method parser.compile_filter ,
13001	import module os .
13002	import module sys .
13003	from django.apps import apps into default name space .
13004	from django.conf import settings into default name space .
13005	from django.template.base import TemplateDoesNotExist into default name space .
13006	from django.template.loader import BaseLoader into default name space .
13007	from django.utils._os import safe_join into default name space .
13008	from django.utils import six into default name space .
13009	define the function calculate_app_template_dirs .
13010	if six.PY2 is true ,
13011	call the function sys.getfilesystemencoding , if it evaluates to true , substitute the result for fs_encoding , if not , call the function sys.getdefaultencoding and substitute the result for fs_encoding .
13012	app_template_dirs is an empty list .
13013	call the function apps.get_app_configs , for every app_config in result ,
13014	if app_config.path is true ,
13015	skip this loop iteration .
13016	join app_config.path and string STR0 into file path , substitute it for template_dir .
13017	if template_dir is directory ,
13018	if six.PY2 is true ,
13019	call the function template_dir.decode with an argument fs_encoding , substitute the result for template_dir .
13020	append template_dir to app_template_dirs .
13021	convert app_template_dirs to a tuple , return it .
13022	call the function calculate_app_template_dirs , substitute the result for app_template_dirs .
13023	derive the class Loader from the BaseLoader base class .
13024	is_usable is boolean True .
13025	define the method get_template_sources with 3 arguments : self , template_name , template_dirs set to None .
13026	if template_dirs is false ,
13027	substitute app_template_dirs for template_dirs .
13028	for every template_dir in template_dirs ,
13029	try ,
13030	call the function safe_join with 2 arguments template_dir and template_name , yield the result .
13031	if UnicodeDecodeError exception is caught ,
13032	raise an exception .
13033	if ValueError exception is caught ,
13034	do nothing .
13035	define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None .
13036	call the method self.get_template_sources with 2 arguments template_name and template_dirs , for every filepath in the result ,
13037	try ,
13038	open the file named filepath in read mode , with file descriptor renamed to fp perform ,
13039	read file fp , call the method decode on the result with an argument settings.FILE_CHARSET , return tuple containing 2 elements , previous result and filepath .
13040	if IOError exception is caught ,
13041	do nothing .
13042	raise an TemplateDoesNotExist exception with an argument template_name .
13043	import module hashlib .
13044	from django.template.base import TemplateDoesNotExist into default name space .
13045	from django.template.loader import BaseLoader , get_template_from_string , find_template_loader and make_origin into default name space .
13046	from django.utils.encoding import force_bytes into default name space .
13047	derive the class Loader from the BaseLoader base class .
13048	is_usable is boolean True .
13049	define the method __init__ with 2 arguments : self and loaders .
13050	self.template_cache is an empty dictionary .
13051	self.find_template_cache is an empty dictionary .
13052	substitute loaders for self._loaders .
13053	self._cached_loaders is an empty list .
13054	property decorator .
13055	define the method loaders with an argument self .
13056	if self._cached_loaders is false ,
13057	cached_loaders is an empty list .
13058	for every loader in self._loaders ,
13059	call the function find_template_loader with an argument loader , append the result to cached_loaders .
13060	substitute cached_loaders for self._cached_loaders .
13061	return self._cached_loaders .
13062	define the method cache_key with 3 arguments : self , template_name and template_dirs .
13063	if template_dirs is true ,
13064	join template_dirs elements into a string , separated by STR0 , use it as an argument for the call to the function force_bytes , use the result as the argument for the call to the function hashlib.sha1 , call the hexdigest method on the result , join template_name and previous final result into a string , separated with STR1 , return it .
13065	if not ,
13066	return template_name .
13067	define the method find_template with 3 arguments : self , name , dirs set to None .
13068	call the method self.cache_key with 2 arguments name and dirs , substitute the result for key .
13069	try ,
13070	get the value under the key key of the self.find_template_cache dictionary , substitute it for result .
13071	if KeyError exception is caught ,
13072	result is None .
13073	for every loader in self.loaders ,
13074	try ,
13075	call the function loader with arguments name and dirs , assign the result to template and display_name , respectively .
13076	if TemplateDoesNotExist exception is caught ,
13077	do nothing .
13078	if not ,
13079	result is an tuple with 2 elements : template and return value of the function make_origin called with 4 arguments : display_name , loader , name and dirs .
13080	break from the loop execution .
13081	substitute result for self.find_template_cache dictionary value under the key key .
13082	if result is true ,
13083	return result
13084	if not ,
13085	substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key .
13086	raise an TemplateDoesNotExist exception with an argument name .
13087	define the method load_template with 3 arguments : self , template_name , template_dirs set to None .
13088	get the value under the template_name key of the self.cache_key dictionary , if it exists , substitute it for key , if not , substitute template_dirs for key .
13089	get the value under the key key of the self.template_cache dictionary , substitute it for template_tuple .
13090	if template_tuple is contained in TemplateDoesNotExist ,
13091	raise an TemplateDoesNotExist exception .
13092	otherwise if template_tuple is None ,
13093	call the method self.find_template with 2 argumetns : template_name and template_dirs , assign the result to template , origin , respectively .
13094	if template doesnt have a STR0 attribute ,
13095	try ,
13096	call the function get_template_from_string with 3 arguments : template , origin and template_name , substitute the result for template .
13097	if TemplateDoesNotExist exception is caught ,
13098	substitute a tuple with 2 elements : template and origin , for self.find_template_cache dictionary value under the key key .
13099	substitute a tuple with 2 elements : template and None , for self.find_template_cache dictionary value under the key key .
13100	return self.find_template_cache dictionary value under the key key .
13101	define the method reset with an argument self .
13102	call the method self.template_cache.clear .
13103	call the method self.find_template_cache.clear .
13104	from __future__ import unicode_literals into default name space .
13105	try ,
13106	from pkg_resources import resource_string into default name space .
13107	if ImportError exception is caught ,
13108	resource_string is None .
13109	from django.apps import apps into default name space .
13110	from django.conf import settings into default name space .
13111	from django.template.base import TemplateDoesNotExist into default name space .
13112	from django.template.loader import BaseLoader into default name space .
13113	from django.utils import six into default name space .
13114	derive the class Loader from the BaseLoader base class .
13115	if resource_string is not None , is_usable is boolean True , otherwise is_usable is boolean False .
13116	define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None .
13117	if resource_string is not None ,
13118	concatenate string STR0 and template_name , substitute the result for pkg_name .
13119	call the method apps.get_app_configs , for app_config in the result ,
13120	try ,
13121	call the function resource_string with 2 arguments app_config.name and pkg_name , substitute the result for resource .
13122	if Exception exception is caught ,
13123	skip this loop iteration .
13124	if six.PY2 is true ,
13125	call the method resource.decode with an argument settings.FILE_CHARSET , substitute the result for resource .
13126	return a tuple with 2 elements : resource and string STR0 , where STR1 is replaced with app_config.name and pkg_name , respective .
13127	raise an TemplateDoesNotExist exception with an argument template_name .
13128	from django.conf import settings into default name space .
13129	from django.template.base import TemplateDoesNotExist into default name space .
13130	from django.template.loader import BaseLoader into default name space .
13131	from django.utils._os import safe_join into default name space .
13132	derive the class Loader from the BaseLoader base class .
13133	is_usable is boolean True .
13134	define the method get_template_source with 3 arguments : self , template_name , template_dirs set to None .
13135	if template_dirs is false ,
13136	substitute settings.TEMPLATE_DIRS for template_dirs .
13137	for every template_dir in template_dirs ,
13138	try ,
13139	call the function safe_join with 2 arguments template_dir and template_name , yield the result .
13140	if UnicodeDecodeError exception is caught ,
13141	raise an exception .
13142	if ValueError exception is caught ,
13143	do nothing .
13144	define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None .
13145	tried is an empty list .
13146	call the method self.get_template_sources with 2 arguments template_name and template_dirs , for every filepath in the result ,
13147	try ,
13148	open the file named filepath in read mode , with file descriptor renamed to fp perform ,
13149	read file fp , call the method decode on the result with an argument settings.FILE_CHARSET , return tuple containing 2 elements , previous result and filepath .
13150	if IOError exception is caught ,
13151	append filepath to tried .
13152	if tried is true ,
13153	err_msg is a string STR0 , where STR1 is replaced with tried .
13154	if not ,
13155	error_msg is a string STR0 .
13156	raise an TemplateDoesNotExist exception with an argument error_msg .
13157	load_template_source.is_usable is boolean True .
13158	from django.http import HttpResponse into default name space .
13159	from django.template import loader , Context and RequestContext into default name space .
13160	from django.utils import six into default name space .
13161	derive the class ContentNotRenderedError from the Exception base class .
13162	do nothing .
13163	derive the class SimpleTemplateResponse from the HttpResponse base class .
13164	rendering_attrs is a list containing 3 strings : STR0 , STR1 and STR2 .
13165	define the method __init__ with 5 arguments : self , template , context set to None , content_type set to None and status set to None .
13166	substitute template for self.template_name .
13167	substitute context for self.context_data .
13168	self._post_render_callbacks is an empty list .
13169	call the __init__ method from the base class of the class SimpleTemplateResponse , with 3 arguments : an empty string , content_type and status .
13170	self._is_rendered is boolean False .
13171	define the method __getstate__ with an argument self .
13172	call the __getstate__ method from the base class of the class SimpleTemplateResponse , substitute the result for obj_dict .
13173	if self._is_rendered is false ,
13174	raise an ContentNotRenderedError exception with an argument string STR0 .
13175	for every attr in self.rendering_attrs ,
13176	if attr is contained in obj_dict ,
13177	delete entry under the attr key of obj_dict dictionary .
13178	return obj_dict .
13179	define the method resolve_template with 2 arguments : self and template .
13180	if template is an instance of list or tuple types ,
13181	call the method loader.select_template with an argument template , return the result .
13182	otherwise is template is six.string_types instance ,
13183	call the method loader.get_template with an argument template , return the result .
13184	if not ,
13185	return template .
13186	define the method resolve_context with 2 arguments : self and context .
13187	if context is an instance of Context ,
13188	return context .
13189	if not ,
13190	return an instance of Context class , created with an argument context .
13191	property decorator ,
13192	define the method rendered_content with an argument self .
13193	call the method self.resolve_template with an argument self.template_name , substitute the result for template .
13194	call the method self.resolve_context with an argument self.context_data , substitute the result for context .
13195	call the method template.render with an argument context , substitute the result for content .
13196	return content .
13197	define the method add_post_render_callback with 2 arguments : self and callback .
13198	if self._is_rendered is true ,
13199	call the functoin callback with an argument self .
13200	if not ,
13201	append callback to self._post_render_callbacks list .
13202	define the method render with an argument self .
13203	substitute self for retval .
13204	if self._is_rendered is false ,
13205	substitute self.rendered_content for self.content .
13206	for every post_callback in self._post_render_callbacks ,
13207	call the function post_callback with an argument retval , substitute the result for newretval .
13208	if newretval is not None ,
13209	substitute newretval for retval .
13210	return retval .
13211	property decorator ,
13212	define the method is_rendered with an argument self .
13213	return self._is_rendered .
13214	define the method __iter__ with an argument self .
13215	if self._is_rendered is false ,
13216	raise an ContentNotRenderedError exception with an string STR0 .
13217	call the method __init__ from the base class of the class SimpleTemplateResponse , return the result .
13218	property decorator ,
13219	define the method content with an argument self .
13220	if self._is_rendered is false .
13221	raise an ContentNotRenderedError exception with an sring STR0 .
13222	return the content field of the base class of the class SimpleTemplateResponse .
13223	content.setter decorator ,
13224	define the method content with 2 arguments : self and value .
13225	call the method HttpResponse.content.fset with 2 arguments : self and value .
13226	self._is_rendered is boolean True .
13227	derive the class TemplateResponse from the SimpleTemplateResponse base class .
13228	append list with 2 strings : STR0 and STR1 to SimpleTemplateResponse.rendering_attrs , substitute the result for rendering_attrs .
13229	define the method __init__ with 7 arguments : self , request , template , context set to None , content_type set to None , status set to None and current_app set to None .
13230	substitute request for self._request .
13231	substitute current_app for self._current_app .
13232	call the __init__ method from the base class of the class TemplateResponse , with 4 arguments : template , context , content_type , status .
13233	define the method resolve_context with 2 arguments : self and context .
13234	if context is an instance of Context class .
13235	return context .
13236	return an instance of RequestContext class , created with 3 arguments : self._request , context and current_app set to self._current_app .
13237	derive the class TokenBase from the object base class .
13238	id is None .
13239	value is None .
13240	first and second are None .
13241	define the method nud with 2 arguments : self and parser .
13242	raise an exception parser.error_class with an argument string STR0 , where STR1 is replaced with self.id .
13243	define the method led with 3 arguments : self , left and parser .
13244	raise an exception parser.error_class with an argument string STR0 , where STR1 is replaced with self.id .
13245	define the method display with an argument self .
13246	return self.id .
13247	define the method __repr__ with an argument self .
13248	for x in a list containing 3 elements : self.id , self.first and self.second , if x is not None , convert x into a string and append it to a list , substitute the resulting list for out .
13249	join elements of out into a string , separated with whitespaces , append STR0 to it , append the result to STR1 , return it .
13250	define the function infix with 2 arguments bp and func .
13251	derive the class Operator from the base class TokenBase .
13252	substitute bp for lbp .
13253	define the method led with 3 arguments self , left and parser .
13254	substitute left for self.first .
13255	call the method parser.expression with an argument bp , substitute it for self.seconds .
13256	return self .
13257	define the method eval with 2 arguments self and context .
13258	try ,
13259	call the function func with 3 arguments : context , self.first and self.second , return the result .
13260	if Exception exception is caught ,
13261	return boolean False .
13262	return Operator .
13263	define the function prefix with 2 arguments bp and func .
13264	derive the class Operator from the base class TokenBase .
13265	substitute bp for lbp .
13266	define the method nud with 2 arguments self and parser .
13267	call the method parser.expression with an argument bp , substitute the result for self.first .
13268	self.second is None .
13269	return self .
13270	define the method evalu with 2 arguments self and context .
13271	try ,
13272	call the function func with 2 arguments : context and self.first , return the result .
13273	if Exception exception is caught ,
13274	return boolean False .
13275	return Operator .
13276	OPERATORS is an dictionary with 12 initial entries : result of the function inflix called with 2 arguments , integer 6 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) or y.eval ( context ) is True , for STR0 , result of the function inflix called with 2 arguments , integer 7 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) and y.eval ( context ) is True for STR1 , result of the function prefix called with 2 arguments , integer 8 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is True for STR2 , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is contained in y.eval ( context ) for STR3 , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is not contained in y.eval ( context ) , for STR4 , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) equals y.eval ( context ) for STR5 , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) equals y.eval ( context ) for STR6 , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) doesnt equals y.eval ( context ) for STR7 , result of the function inflix called with 2 arguments , integer 10 and , lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is greater than y.eval ( context ) for STR8 , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y13277	 , returns boolean True if x.eval ( context ) is greater than or equal to y.eval ( context ) for STR9 , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is smaller than y.eval ( context ) for STR10 , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is smaller than or equal to y.eval ( context ) for STR11 ,
13278	call the function OPERATORS.items , for every key and op in result ,
13279	substitute key for op.id .
13280	derive the class Literal from the TokenBase base class .
13281	id is a string STR0 .
13282	lbp is integer 0 .
13283	define the method __init__ with 2 arguments : self and value .
13284	substitute value for self.value .
13285	define the method display with an argument self .
13286	return printable representation of self.value .
13287	define the method nud with 2 arguments : self and parser .
13288	return self .
13289	define the method eval with 2 arguments : self and context .
13290	return self.value .
13291	define the method __repr__ with an argument self .
13292	return string STR0 , replace STR1 with self.if and STR2 with self.value .
13293	derive the class EndToken from the TokenBase base class .
13294	lbp is an integer 0 .
13295	define the method nud with 2 arguments : self and parser .
13296	raise an exception parser.error_class with an argument string STR0 .
13297	EndToken is an instance of EndToken class .
13298	derive the class IfParser from the object base class .
13299	substitute ValueError for error_class .
13300	define the method __init__ with 2 arguments : self and tokens .
13301	substitute length of tokens for l .
13302	mapped_tokens is an empty list .
13303	i is integer 0 .
13304	while i is smaller than l ,
13305	substitute i-th element of tokens for token .
13306	if token equals a string STR0 and i incremented by 1 is lesser than l ,
13307	and element of tokens at i incremented by 1 index equals a string STR0 , token is a string STR1 .
13308	increment i by integer 1 .
13309	call the method self.translate_token with an argument token , append the result to mapped_tokens .
13310	increment i by integer 1 .
13311	substitute mapped_tokens for self.tokens .
13312	self.pos is integer 0 .
13313	call the method self.next_token , substitute the result for self.current_token .
13314	define the method translate_token with 2 arguments : self and token .
13315	try ,
13316	substitute OPERATORS dictionary element under token key for op .
13317	if KeyError and TypeError exceptions are caught ,
13318	call the function self.create_var with an argument token , return the result .
13319	if not ,
13320	call the function op , return the result .
13321	define the method next_token with an argument self .
13322	if self.pos is greater than or equal to self.tokens ,
13323	return EndToken .
13324	if not ,
13325	substitute element at self.pos index of self.tokens for retval .
13326	increment self.pos by integer 1 .
13327	return retval .
13328	define the method parse with an argument self .
13329	call the method self.expression , substitute the result for retval .
13330	if self.current_token is not EndToken ,
13331	raise an exception self.error_class with an argument string STR Unused STR0 at end of if expression '' , where STR1 is replaced with result of the method self.current_token.display .
13332	return retval .
13333	define the method expression with 2 arguments : self and rbp set to integer 0 .
13334	substitute self.current_token for t .
13335	call the method self.next_token , substitute the result for self.current_token .
13336	call the method t.nud with an argument self , substitute the result for left .
13337	while rbp is smaller than self.current_token.lbp ,
13338	substitute self.current_token for t .
13339	call the method self.next_token , substitute the result for self.current_token .
13340	call the method t.led with 2 arguments left and self .
13341	return left .
13342	define the method create_var with 2 arguments : self and value .
13343	return an instance of Literal class , created with an argumen value .
13344	from __future__ import unicode_literals into default name space .
13345	from lib2to3 import fixer_base into default name space .
13346	from lib2to3.fixer_util import find_indentation , Name , syms and touch_import into default name space .
13347	from lib2to3.pgen2 import token into default name space .
13348	from lib2to3.pytree import Leaf and Node into default name space .
13349	derive the class FixUnicode from the base class fixer_base.BaseFix .
13350	BM_compatible is boolean True .
13351	PATTERN is a string STR0 .
13352	define the method transform with 3 arguments : self , node and results .
13353	substitute value under the STR0 key of the results dictionary for unifunc .
13354	strfunc is an instance of a class Name , created with 2 arguments : string STR0 and prefix as unifunc.prefix .
13355	call the method unifunc.replace with an argument strfunc .
13356	call the method node.clone , substitute the result for klass .
13357	call the method find_indentation with an argument node , append the result to newline , substitute the result for klass.prefix .
13358	decorator is an instance of class Node , created with 2 arguments : instance of Leaf class created with 2 arguments : token.AT and `` @ STR0python_2_unicode_compatible ' .
13359	decorated is an instance of class Node , created with 3 arguments : syms.decorated , list with 2 arguments : decorator and klass , and prefix as node.prefix .
13360	call the method node.replace with an argument decorated .
13361	call the function touch_import with 3 arguments : string STR0 , string STR1 and decorated .
13362	import module os .
13363	import module sta .
13364	import module sys .
13365	import module tempfile .
13366	from os.path import join , normcase , normpath , abspath , isabs , sep and dirname into default name space .
13367	from django.utils.encoding import force_text into default name space .
13368	from django.utils import six into default name space .
13369	try ,
13370	substitute WindowsError for WindowsError .
13371	if NameError exception is caught ,
13372	derive class WindowsError from Exception base class .
13373	do nothing .
13374	if six.PY2 is true ,
13375	call the function sys.getfilesystemencoding if it evaluates to true , substitute its result for fs_encoding , otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding .
13376	if six.PY3 is true or os.name equals a string STR0 ,
13377	substitute abspath for abspathu .
13378	if not ,
13379	define the function abspathu with an argument path .
13380	call the function isabs with an argument path , if it evaluates to false ,
13381	get the unicode representation of current working directory , join it and path into a string , substitute the result for path .
13382	call the function normpath with an argument path , return the result .
13383	define the function upath with an argument path .
13384	if six.PY2 is true and path is not an instance of six.text_type type ,
13385	call the method path.decode with an argument fs_encoding , return the result .
13386	return path .
13387	define the function npath with an argument path .
13388	if six.PY2 is true and path is not an instance of byes type ,
13389	call the method path.encode with an argument fs_encoding , return the result .
13390	return path .
13391	define the function safe_join with 2 arguments base and unpacked dictionary paths .
13392	call the function force_text with an argument base , substitute the result for base .
13393	paths is a list containing results of the function force_text called with an argument p , for every p in paths .
13394	join base an unpacked list paths into a string , get the absolute path in unicode representation of the result , substitute the result for final_path .
13395	get the unicode representation of the absolute path of base , substitute it for base_path .
13396	if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase , called with sep appended to base_path as an argument and results of the function normcase called twice with final_path , and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path , if not equal to the result of the function normcase called with an argument base_path .
13397	raise an ValueError with an argument string STR0 , where STR1 is replaced with final_path and base_path .
13398	return final_path .
13399	define the function rmtree_errorhandler with 3 arguments func , path and exc_info .
13400	substitute fist and second element of exc_info for exctype and value , respectively .
13401	if exctype is not WindowsError or string STR0 is not contained in value converted into a string ,
13402	raise an exception .
13403	call the function os.stat with an argument path , perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD ,
13404	if it is not equal to stat.S_IREAD , raise an exception .
13405	change access mode of path to stat.S_IWRITE mode .
13406	call the function func with an argument path .
13407	define the method symlinks_supported .
13408	call the function tempfile.mkdtemp , substitute the result for tmpdir .
13409	join tmpdir and sting STR0 into a file path name , substitute it for original_path .
13410	join tmpdir and sting STR0 into a file path name , substitute it for symlink_path .
13411	make a directory named original_path .
13412	try ,
13413	make a system symbolic link between original_path and symlink_path .
13414	supported is boolean True .
13415	if OSError , NotImplementedError or AttributeError exceptions are caught ,
13416	supported is boolean False .
13417	if not ,
13418	remove symlink_path file .
13419	finally perform ,
13420	remove original_path directory .
13421	remove tmpdir directory .
13422	return supported .
13423	import module os .
13424	import module shutil .
13425	import module tarfile .
13426	import module zipfile .
13427	from django.utils import six into default name space .
13428	derive the class ArchiveException from the Exception base class .
13429	derive the class UnrecognizedArchiveFormat from the ArchiveException base class .
13430	define the function extract with 2 arguments path and to_path set to empty string .
13431	instantiate Archive class with an argument path , with it renamed to archive , perform ,
13432	call the method archive.extract with an argument to_path .
13433	derive the class Archive from the object base class .
13434	define the method __init__ with 2 arguments self and file .
13435	call the method self._archive_cls with an argument file , call the result with an argument file , substitute the result for self._archive .
13436	static method ,
13437	define the method _archive_cls with an argument file .
13438	cls is None .
13439	if file is an instance of six.string_types .
13440	substitute file for filename .
13441	if not ,
13442	try ,
13443	substitute file.name for filename .
13444	if AttributeError exception is caught .
13445	raise an UnrecognizedArchiveFormat exception with an argument string STR0 .
13446	convert filename to lowercase , use the result as an argument for the call to the function os.path.splitext , substitute the result for base and tail_ext .
13447	get the value under the tail_ext key of the extension_map dictionary , substitute it for cls .
13448	if cls is false ,
13449	call the method os.path.splitext with an argument base , substitute the result for base and ext , respectively .
13450	get the value under the ext key of the extension_map dictionary , substitute it for cls .
13451	if cls is false ,
13452	raise an UnrecognizedArchiveFormat exception with an argument string STR0 , where STR1 is replaced with filename .
13453	return cls .
13454	define the method __enter__ with an argument self .
13455	return self .
13456	define the method __exit__ with 4 arguments : self , exc_type , exc_value and traceback .
13457	call the method self.close .
13458	define the method extract with 2 arguments : self and to_path set to an empty string .
13459	call the method self._archive.extract with an argument to_path .
13460	define the method list with an argument self .
13461	call the method self._archive.list .
13462	define the method close with an argument self .
13463	call the method self._archive.close .
13464	derive the class BaseArchive from the object base class .
13465	define the method split_leading_dir with 2 arguments self and path .
13466	convert path to a string , substitute the result for path .
13467	strip path of all leading STR0 and STRspecial characters , substitute the result for path .
13468	if STR0 is contained in path , and only if STRspecial is contained in path and index of the first occurrence of STR1 in path is lesser than ,
13469	index of the first occurrence of STRspecial in path , or alternatively if STRspecial is not contained in path , split path in two parts by STR0 character , return the result .
13470	otherwise if STRspecial is contained in path ,
13471	split path in two parts by STRspecial string , return the result .
13472	if not ,
13473	return path an an empty string .
13474	define the method has_leading_dir with 2 arguments self and paths .
13475	common_prefix is None .
13476	for every path in paths ,
13477	call the method self.split_leading_dir with an argument path , assign the result to prefix and rest , respectively .
13478	if prefix is false ,
13479	return boolean False .
13480	otherwise if common_prefix is None ,
13481	substitute prefix for common_prefix .
13482	otherwise if prefix is not equal to common_prefix ,
13483	return boolean False .
13484	return boolean True .
13485	define the method list with an argument self .
13486	raise an NotImplementedError exception with an argument string STR0 .
13487	define the method list with an argument self .
13488	raise an NotImplementedError exception with an argument string STR0 .
13489	derive the class TarArchive from the BaseArchive base class .
13490	define the method __init__ with 2 arguments self and file .
13491	call the method tarfile.open with an argument file , substitute the result for self._archive .
13492	define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs .
13493	define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
13494	define the method extract with 2 arguments self and to_path .
13495	members is a list with elements member for every member in the result of the function self._archive.getmembers , only if member.name is not equal to string STR0 .
13496	call the method self.has_leading_dir with an argument list , with elements x.name for every x in members , substitute the result for leading .
13497	for every member in members ,
13498	substitute member.name for name .
13499	if leading is true ,
13500	call the method self.split_leading_dir with an argument name , substitute the first element of result for name .
13501	join to_path and name into a valid system path , substitute the result for filename .
13502	if member is a directory ,
13503	if filename is true and filename path doesnt exist ,
13504	create directories from the elements in filename .
13505	if not ,
13506	try ,
13507	call the method self._archive.extractfile with an argument member , substitute the result for extracted .
13508	if KeyError or AttributeError , renamed to exc , exceptions are caught ,
13509	print a string STR0 , where STR1 is substituted with : name , member.name and exc , respectively .
13510	if not ,
13511	get the directory name of filename , substitute it for dirname .
13512	if dirname is true and dirname directory doesnt exists ,
13513	create directories from the elements in filename .
13514	open filename file in write mode , with the file descriptor renamed to outfile , perform ,
13515	call the method shutil.copyfileobj with 2 arguments : extracted and outfile .
13516	finally ,
13517	if extracted is true ,
13518	call the method extracted.close .
13519	define the method close with an argument self .
13520	call the method self._archive.close .
13521	derive the class ZipArchive from the BaseArchive base class .
13522	define the method __init__ with 2 arguments self and file .
13523	call the method zipfile.ZipFile with an argument self , substitute the result for self._archive .
13524	define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
13525	call the method self._archive.printdir with 2 arguments : unpacked list args and unpacked dictionary kwargs .
13526	define the method extract with 2 arguments self and to_path .
13527	call the method self._archive.namelist , substitute the result for namelist .
13528	call the method self.has_leading_dir with an argument namelist , substitute the result for leading .
13529	for every name in namelist ,
13530	call the method self._archive.read with an argument name , substitute the result for data .
13531	if leading is true ,
13532	call the method self.split_leading_dir with an argument name , substitute the second element of the result for name .
13533	join to_path and name into a file path , substitute the result for filename .
13534	get the directory name of filename , substitute the result for dirname .
13535	if dirname is true and dirname path doesnt exists ,
13536	create directories from the elements in filename .
13537	if filename ends with STR0 or with '\STR ,
13538	if filename path doesnt exists ,
13539	create directories from the elements in filename .
13540	if not ,
13541	open filename file in write mode , with the file descriptor renamed to outfile , perform ,
13542	write data bytes to outfile .
13543	define the method close with an argument self .
13544	call the method self._archive.close .
13545	extension_map is a dictioanry with 6 initial elntries : TarArchive for STR0 , TarArchive for STR1 , TarArchive for STR2 ,
13546	from __future__ import absolute_import into default name space .
13547	import module os .
13548	import module signal .
13549	import module sys .
13550	import module time .
13551	import module traceback .
13552	from django.apps import apps into default name space .
13553	from django.conf import settings into default name space .
13554	from django.core.signals import request_finished into default name space .
13555	try ,
13556	from django.utils.six.moves import _thread as thread into default name space .
13557	if imoportError exception is caught ,
13558	from django.utils.six.moves import _dummy_thread as thread into default name space .
13559	try ,
13560	import threading module .
13561	if ImportError exception is caught ,
13562	do nothing .
13563	try ,
13564	import termios module .
13565	if ImportError exception is caught ,
13566	termios is None .
13567	USE_INOTIFY is boolean False .
13568	try ,
13569	import pyinotify module .
13570	call the method pyinotify.INotifyWrapper.create , on the return value call the inotify_init method , substitute the result for fd .
13571	if fd is greater or equal to integer 0 .
13572	USE_INOTIFY is boolean True .
13573	close fd file descriptor .
13574	if ImportError exception is caught ,
13575	do nothing .
13576	RUN_RELOADER is boolean True .
13577	FILE_MODIFIED is integer 1 .
13578	I18N_MODIFIED is integer 2
13579	_mtimes is an empty dictionary .
13580	_win is a tuple containing 1 initial boolean : True is sys.platform equals to string STR0 , False otherwise .
13581	_error_files is an empty list .
13582	_cached_modules is an empty set .
13583	_cached_filenames is an empty list .
13584	define the function gen_filenames with an argument only_new defaulting to boolean False .
13585	declare that we use global variables cached_modules and _cached_filenames in this function .
13586	module_values is a set created from the elements of sys.modules.values method return value .
13587	if _cached_modules equals to module_values ,
13588	if only_new is true ,
13589	return an empty list .
13590	if not ,
13591	return _cached_filenames .
13592	subtract _cached_modules from module_values , assign the result to new_modules .
13593	create the list of paths from which filename module was included for every filename in new_modules , only is filename has STR0 attribute , substitute the resulting list for new_filenames .
13594	if _cached_filenames is empty and settings.USE_I18N is True ,
13595	return the directory name two directories up from the __file__ path , join it with STR0 and STR1 into valid path , separated by STR2 , basedirs is a list containing 2 elements : previous result and string STR3 .
13596	for app_config in reversed list of apps.get_app_configs ( ) elements ,
13597	join app_config.path and STR0 into a valid directory path , separated by STR1 , append it to basedirs .
13598	extend basedirs list with settings.LOCALE_PATHS .
13599	replace all the elements of the basedir list by its corresponding absolute directory path , only is that directory exists .
13600	for every basedir in basedirs ,
13601	for every dirpath , dirnames and locale_filenames in directory tree starting at the basedir directory .
13602	for every filenam in locale_filenames ,
13603	if filename ends with string STR0 ,
13604	join dirpath and filename into a path separated by STR0 , append it to new_filenames .
13605	if only_new is True ,
13606	substitute new_filenames for filelist .
13607	if not ,
13608	sum _cached_filenames , new_filenames and _error_files , store the result in filelist .
13609	filenames is an empty list .
13610	for every filename is filelist ,
13611	if filename is empty ,
13612	skip this loop iteration ,
13613	if filename ends with string STR0 or it ends with STR1 ,
13614	truncate the last element of filename .
13615	if filename ends with string STR0 ,
13616	truncate last 9 elements of filename and append it string STR0 .
13617	if file filename exists ,
13618	append filename to filenames .
13619	add elements from new_modules set to _cached_modules set .
13620	append new_filenames to _cached_filenames .
13621	return filenames .
13622	define the function reset_translation .
13623	import gettext module .
13624	from django.utils.translation import trans_real into default namespace .
13625	gettext._translations is an empty dictionary .
13626	trans_real._translations is an empty dictionary .
13627	trans_real._default is None .
13628	call the threading.local method , assign the result to trans_real._active .
13629	define the function inotify_code_changed .
13630	derive the EventHandler class from the base class pyinotify.ProcessEvent .
13631	modified_code is None .
13632	define the method process_default with self class instance and event as arguments .
13633	if event.path ends with string STR0 ,
13634	EventHandler.modified_code is I18N_MODIFIED .
13635	if not ,
13636	EventHandler.modified_code is FILE_MODIFIED .
13637	call the pyinotify.WatchManager method , assign the result to wm .
13638	call the method pyinotify.Notifier with wm and EventHandler ( ) as arguments , assign the result to notifier .
13639	define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs .
13640	if sender is true and sender attribute STR0 is also True ,
13641	return nothing .
13642	perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE , pyinotify.IN_ATTRIB , pyinotify.IN_MOVED_FROM , pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE , store the result in mask .
13643	for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True ,
13644	call the method wm.add_watch with path and mask as arguments .
13645	call the method request_finished.connect with argument update_watch .
13646	call the method update_watch .
13647	call the method notifier.check_events with argument timeout set to None .
13648	call the method notifier.read_events .
13649	call the method notifier.process_events .
13650	call the method notifier.stop .
13651	return EventHandler.modified_code .
13652	define the function code_changed .
13653	use the global variables _mtimes and _win in this function .
13654	for every filename in gen_filenames ( ) ,
13655	call the os.stat function with argument filename , store the return value in stat .
13656	substitute stat.st_mtime for mtime .
13657	if _win is true ,
13658	decrement mtime by stat.st_ctime .
13659	if filename is not contained in _mtimes ,
13660	substitute mtime for the value under the filename key of _mtimes dictionary .
13661	skip this loop iteration .
13662	if mtime is different than the value of dictionary _mtimes under the key filename ,
13663	_mtimes is an empty dictionary .
13664	try ,
13665	remove the first occurrence of the filename value in the _error_files list .
13666	if ValueError exception is caught ,
13667	do nothing .
13668	if filename ends with string STR0 return I18N_MODIFIED , otherwise return FILE_MODIFIED .
13669	return boolean False .
13670	define the function check_errors with argument fn .
13671	define the function wrapper with list args , and dictionary pair of values kwargs as arguments .
13672	try ,
13673	call the function fn with list of arguments args and dictionary of argument values kwargs .
13674	if ImportError , IndentationError , NameError , SyntaxError , TypeError or AttributeErrorexception is caught ,
13675	call the sys.exc_info function , assign the result to et , ev and tb , respectively .
13676	if STR0 attribute of ev is None ,
13677	call the traceback.extract_tb method with argument tb , substitute the first element of last row of the result to filename .
13678	if not ,
13679	substitute ev.filename for filename .
13680	if filename is not contained in _error_files ,
13681	append filename to _error_files .
13682	raise an exception .
13683	return wrapper .
13684	define ensure_echo_on function .
13685	if termios is true ,
13686	substitute sys.stdin for fd .
13687	evaluate the fd.isatty method , if the result is true ,
13688	call the method termios.tcgetattr with argument fd , substitute the result for attr_list .
13689	if fourth element of attr_list and termios.ECHO are both true ,
13690	perform binary or for operands : fourth element of_attr_list and termios.ECHO , store the result in fourth element of attr_list .
13691	if signal has an attribute STR0 ,
13692	call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments , store the result in old_handler .
13693	if not ,
13694	old_handler is None .
13695	call the method termios.tcsetattr with fd , termios.TCSANOW and attr_list , as arguments .
13696	if old_handler is not None ,
13697	call the method signal.signal with signal.SIGTTOU and old_handler , as arguments .
13698	define the function reloader_thread .
13699	call the function ensure_echo_on .
13700	if USE_INOTIFY is true ,
13701	substitute inotify_code_changed for fn .
13702	if not ,
13703	substitute code_changed for fn .
13704	while RUN_RELOADER is true .
13705	assign the return value of the function fn to change .
13706	if change equals to FILE_MODIFIED ,
13707	call the function sys.exit with argument integer 3 .
13708	otherwise id change equals to I18N_MODIFIED ,
13709	call the function reset_translations .
13710	call the function time.sleep with an argument integer 1 .
13711	define the function restart_with_reloader .
13712	endless loop ,
13713	in string STR0 replace STR1 with o for every o in sys.warnoptions , put the result into a list , append the list to a list containing sys.executable , append sys.argv to the end of the resulting list , substitute the result for args .
13714	if sys.platform equals to string STR0 ,
13715	args is a list containing arg surrounded by double quotes for every arg in args .
13716	call the method os.environ.copy , substitute the result for new_environ .
13717	value under the STR0 key of new_environ dictionary is a string STR1 .
13718	call the function os.spawnve with os.P_WAIT , sys.executable , args and new_environ as arguments , substitute the result for exit_code .
13719	if exit_code is not equal to integer 3 .
13720	return exit_code .
13721	define the function python_reloader with main_func and kwargs as arguments .
13722	if value under the STR0 key of the os.environ dictionary equals to string STR1 ,
13723	call the function thread.start_new_thread with main_func , args and kwargs as arguments .
13724	try ,
13725	call the function reloader_thread .
13726	if KeyboardInterrupt exception is caught ,
13727	do nothing .
13728	if not ,
13729	try ,
13730	call the function restart_with_reloader , substitute the return value for exit_code .
13731	if exit_code is lesser than integer 0 ,
13732	call the function os.kill with os.getpid ( ) and negative exit_code as arguments .
13733	if not ,
13734	call the function sys.exit with argument exit_code .
13735	if KeyboardInterrupt exception is caught ,
13736	do nothing ,
13737	define the function jython_reloader with main_func , args and kwargs as arguments .
13738	from _systemrestart import SystemRestart into default name space .
13739	call the function thread.start_new_thread with main_func and args as arguments .
13740	endless loop ,
13741	if return value of the code_changed function is true ,
13742	raise an SystemRestart exception ,
13743	call the function time.sleep with argument integer 1 .
13744	define the function main , with main_func , args defaulting to None and kwargs defaulting to None as arguments .
13745	if args is None ,
13746	args is a empty tuple .
13747	if kwargs is None ,
13748	kwargs is a empty dictionary .
13749	if sys.platform starts with string STR0 ,
13750	substitute jython_reloader for reloader .
13751	if not ,
13752	substitute python_reloader for reloader .
13753	call the function check_errors with argument main_func , substitute the result for wrapped_main_func .
13754	call the function reloader with wrapped_main_func , args and kwargs as arguments .
13755	BASE2_ALPHABET is a string STR0 .
13756	BASE16_ALPHABET is a string STR0 .
13757	BASE56_ALPHABET is a string STR0 .
13758	BASE36_ALPHABET is a string STR0 .
13759	BASE62_ALPHABET is string STR0 .
13760	append string STR0 to the BASE62_ALPHABET , substitute it for BASE64_ALPHABET .
13761	derive class BaseCOnverter from object base class .
13762	decimal_digits is a string STR0 .
13763	define the initialization function with self class instance , digits and sign defaulting to STR0 as arguments .
13764	substitute sign for self.sign .
13765	substitute digits for self.digits .
13766	if sign is contained in self.digits ,
13767	raise ValueError exception with string STR0 as an argument .
13768	define private method __repr__ with argument self .
13769	replace STR1 in the string STR0 with length of self.digits and self.digits , respectively , return the string .
13770	define the method encode with self class instance and i as arguments .
13771	call the self.convert method with i , self.decimal_digits , self.digits and STR0 as arguments , assign the result to the neg and value , respectively .
13772	if neg is true ,
13773	append value to the self.sign , return the result .
13774	return value .
13775	define the decode method with self class instance and s as arguments .
13776	call the self.convert method with s , self.decimal , self.decimal_digits and self.sign as arguments , assign the result to the neg and value , respectively .
13777	if neg is true ,
13778	append value to the STR0 , substitute it for value .
13779	convert value to an integer , return it .
13780	define convert method with self class instance , number , from_digits , to_digits and sign as arguments .
13781	convert number to string , if first element equals to sign ,
13782	convert number to a string , truncate first element .
13783	neg is integer 1 .
13784	if not ,
13785	neg is integer 0 .
13786	x is integer 0 .
13787	for every digit in number coverted to a string ,
13788	multiply x by length of from_digits add the return value of method from_digits.index with digit argument , substitute the result for x .
13789	if x equals to integer 0 ,
13790	substitute first element of to_digits for res .
13791	if not ,
13792	res is an empty string .
13793	while x is greater than zero ,
13794	calculate reminder of division of x by length to_digits , substitute it for digit .
13795	increment res by element of to_digit at the digit index .
13796	divide x by length of to_digits , convert floor value of the result to an integer , substitute it for x .
13797	return neg and res .
13798	call the BaseConverter function with BASE2_ALPHABET as argument , store the result in base2 .
13799	call the BaseConverter function with BASE16_ALPHABET as argument , store the result in base16 .
13800	call the BaseConverter function with BASE36_ALPHABET as argument , store the result in base36 .
13801	call the BaseConverter function with BASE56_ALPHABET as argument , store the result in base56 .
13802	call the BaseConverter function with BASE62_ALPHABET as argument , store the result in base62 .
13803	call the BaseConverter function with BASE64_ALPHABET and sign set to STR0 as arguments , store the result in base64 .
13804	from module __future__ import unicode_literals to default name space .
13805	import hashlib module .
13806	import re module .
13807	import time module .
13808	from django.conf import settings object to the default name space .
13809	from django.core.cache import caches to the default name space .
13810	from django.utils import iri_to_uri , force_bytes , force_text to the default name space .
13811	from django.utils.http import http_date to the default name space .
13812	from django.utils.timezone import get_current_timezone_name to the default name space .
13813	from django.utils.translation import get_language to the default name space .
13814	compile regular expression based on the string STR0 and assign the result to cc_delim_re .
13815	define function patch_cache_control , with response and dictionary set of arguments , kwargs , as arguments .
13816	define function dictitem with s as an argument .
13817	split string s once , with STR0 sign as a delimiter , assign the resulting list to the t .
13818	if length of t is greater than integer 1 ,
13819	return first element of t converted to lowercase and second element of t , as a tuple .
13820	if not ,
13821	return first element of t converted to lowercase and boolean True , as a tuple .
13822	define function dictvale , with an argument t .
13823	if second element of t is boolean True ,
13824	return first element of t .
13825	if not ,
13826	return string first element of t , STR0 , second element of t .
13827	if call to the method response.has_header with string STR0 as an argument returns boolean True ,
13828	find the value of response under the key STR0 , use it as a delimiter to split string ss_delim_re , assign the result to cc .
13829	cc is a dictionary populated with items by calling function dictitem with el as argument , for every el in cc .
13830	if not ,
13831	cc is an empty dictionary .
13832	if cc contains item STR0 and kwargs contains item STR1 ,
13833	convert to integer value of dictionary cc under the key STR0 , if it is smaller than the value of dictionary kwargs under the key STR1 , substitute kwargs value under the key STR2 by it .
13834	if cc contains item STR0 and kwargs contains item STR1 ,
13835	delete dictionary item STR0 from cc .
13836	if cc contains item STR0 and kwargs contains item STR1 ,
13837	delete dictionary item STR0 from cc .
13838	for every k and v in items of dictionary kwargs , respectively ,
13839	replace all occurrences of symbol STR0 in string k with symbol STR1 , use new string as key to find a value in dictionary cc , replace this value with v .
13840	call the function dictvalue with el as argument for every el in values of dictionary cc , join the resulting sequence in a string with comma as separator , assign the string to cc .
13841	substitute response dictionary value under the key STR0 for cc .
13842	define function get_max_age with response as an argument .
13843	if the result to the method call response.has_header , with string STR0 as an argument is boolean False ,
13844	return from the function
13845	cc is a dictionary populated with items by calling function _to_tuple with el as an argument , for every el in split string cc_delim_re , with delimiter being the value of dictionary response under the key STR0 .
13846	if cc contains item STR0 ,
13847	try ,
13848	convert to integer the value of dictionary cc under the key STR0 , and return it
13849	if exception ValueError or TypeError is raised ,
13850	do nothing .
13851	define the function _set_response_etag , with response as an argument .
13852	if response.streaming is boolean False ,
13853	create md5 hash from string response.content in hexadecimal format , surround the hash with double quotes , and store it in the value of the dictionary response under the key STR0 .
13854	return response
13855	define the function patch_response_headers , with response and cache_timeout with None as default value , as arguments .
13856	if cache_timeout equals to None ,
13857	substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout .
13858	if cache_timeout is lesser than integer 0 ,
13859	substitute integer 0 for cache_timeout .
13860	if settings.USE_ETAGS is True and function call response.has_header with string STR0 as argument returns boolean False ,
13861	if object response has an attribute STR0 and if response.render is callable object ,
13862	call the method response.add_post_render_callback with _set_response_etag as argument .
13863	if not ,
13864	substitute return value of call to the function _set_response_etag with response as an argument , for response .
13865	if call to the function response.has_header with string STR0 as an argument returns boolean False ,
13866	call the function http_date with no arguments , and substitute its return value for value of dictionary response under the key STR0 .
13867	if call to the function response.has_header with STR0 as argument returns boolean False ,
13868	sum return value of the function call time.time ( ) and cache_timeout , use it as an argument for function call of http_date , and substitute the return value for value under the key STR0 of dictionary response .
13869	call the function patch_cache_control , with response and max_age set to cache_timeout as arguments .
13870	define function add_never_cache_headers , with response as an argument .
13871	call the function patch_response with response and cache_timeout decremented by integer 1 as arguments .
13872	define function patch_vary_headers , with response and newheaders as arguments .
13873	doctring
13874	if call to the function response.has_header with argument STR0 returns boolean True ,
13875	split the string cc_delim_re with value under the key STR0 of response dictionary as delimiter , substitute result for vary_headers .
13876	if not ,
13877	vary_headers is an empty list .
13878	existing_headers is a set of lowercase headers for every header in vary_headers .
13879	put every header in newheaders in a list , only if newheader converted to lowercase does not exist in existing_headers , substitute this list for additional_headers .
13880	join all of the elements of vary_headers and additional_headers in a string delimited by a comma , substitute it for value of dictionary response under the key STR0 .
13881	define function has_vary_header , with response and header_query as arguments .
13882	if return value of function response.has_header with string STR0 as argument is boolean False ,
13883	return boolean False .
13884	split string cc_delim_re by value of dictionary response under the key STR0 as a delimiter , substitute it for vary_headers .
13885	existing_headers is a set containing lowercase strings header for every header in vary_headers .
13886	check if lowercase header_query exists is existing_headers , return the boolean result .
13887	define function _i18n_cache_key_suffix , with request and cache_key as arguments .
13888	if eather one of settings.USE_I18N or settings.USE_L10N is True ,
13889	call the function getattr with request , string STR0 and function get_language as arguments , append the result at the end of string STR1 , append it all at the end of string cache_key .
13890	if settings.USE_TZ is True ,
13891	call the function force_text , with the function get_current_timezone_name and errors set to string STR0 as arguments , replace the result for tz_name .
13892	call the method tz_name.encode with the arguments STR0 and STR1 , call the method decode on the result with STR2 as argument , in the resulting string replace all occurrences of STR with STR3 and append it to the end of cache_key .
13893	return cache_key .
13894	define function _generate_cache_key , with request , method , headerlist and key_prefix as arguments .
13895	ctx is an hashlib object , for calculating hash function with md5 algorithm .
13896	for every header in headerlist ,
13897	call method request.META.get with arguments header and None .
13898	if value is not None ,
13899	call function force_bytes with value as argument , use the result to as the result for the call to the methgod ctx.update .
13900	call iri_to_uri with return value of the request.build_absolute_uri method , us the result as the argument for the call to the force_bytes function , use the result as the argument for the call to the hashlib.mdb function , store the result in url .
13901	substitute the STR0 in string STR1 with key_prefix , method , return value of method url.hexdigest ( ) , return value of method ctx.hexdigest , respectively , substitute it for cache_key .
13902	call the function _i18n_cache_key_suffix with request and cache_key as arguments , return the result .
13903	define the funtion _generate_cache_header_key with key_prefix and request as arguments .
13904	call method request.build_absolute_uri , use the result as an argument for function call of iri_to_uri , use the result as an argument for function call of force_bytes , use the result as an argument for calling the method hashlib.md5 , put the result in url .
13905	substitute the STR0 in string STR1 with key_prefix and result of the function call , to the function url.hexdigest ( ) , respectively , substitute it for cache_key .
13906	call the function _i18n_cache_key_suffix with request and cache_key as arguments , return the result .
13907	define the function get_cache_key , with request key_prefix set to None , method set to STR0 and cache set to None as arguments .
13908	if key_prefix is None ,
13909	substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix .
13910	call the function _generate_cache_header_key with key_prefix and request as arguments , substitute the result for cache_key .
13911	if cache is None ,
13912	set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS .
13913	get the value of dictionary cache under the key cache_key , if key is not available return None , substitute it for headerlist .
13914	if header list is not None ,
13915	call the function _generate_cache_key with request , method , headerlist , key_prefix as arguments , return the result .
13916	if not ,
13917	return None .
13918	define function learn_cache_key with request , response , cache_timeout set to None , key_prefix set to None , cache set to None as arguments .
13919	if key_prefix is None ,
13920	substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix .
13921	if cache_timeout is None ,
13922	substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout .
13923	call function _generate_cache_header_key with arguments key_prefix and request , substitute the result for cache_key .
13924	if cache is None ,
13925	get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary , substitute with it the cache .
13926	if call to the function response.has_header with string STR0 as an argument returns True ,
13927	if eather of settings.USE_I18N or settings.USE_L10N is True , set is_accept_language_redundant to True .
13928	headerlist is an empty list .
13929	for every header in list of strings compiled by splitting string cc_delim_re with value under the key STR0 of response dictionary as a delimiter .
13930	convert string header to uppercase and replace all occurrences of STR0 with STR1 , substitute it for header .
13931	if header equals a string STR0 and is_accept_language_redundant is boolean True ,
13932	continue with the next iteration of the for loop .
13933	append header to the string STR0 , append the result to the list headerlist .
13934	call method sort on the headerlist .
13935	call the method cache.set , with cache_key , headerlist , cache_timeout as arguments .
13936	call the function _generate_cache_key with request , request.method , headerlist , key_prefix as arguments , return the result .
13937	if not ,
13938	call the method cache.set with cache_key , an empty list and cache_timeout as arguments .
13939	call the function _generate_cache_key with request , request.method , an empty list and key_prefix as arguments , return the result .
13940	define function _to_tuple with s as an argument .
13941	split string s once , with STR0 as delimiter , substitute the result for t .
13942	if length of t equals to integer 2 ,
13943	return tuple , consisting of first element of t converted to lowercase and second element of t .
13944	return tuple , consisting of first element of t converted to lowercase and True .
13945	__all__ is an list with an element STR0 .
13946	from django.utils import six into default name space .
13947	LUHN_ODD_LOOKUP is a tuple with 10 elements : integers 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 and 9 .
13948	define the function luhn with an argument candidate .
13949	if candidate is not an instance of six.string_types ,
13950	convert candidate to a string .
13951	try ,
13952	for every c in reversed order of candidate , convert c into an integer , sum all the results and substitute the result for evens .
13953	for every c in candidate without the last element and in reversed order , convert c into an integer , use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary , sum all the results and substitute the result for odds .
13954	sum evens and odds , if the result is divisible by integer 10 , return boolean True , if not return boolean False .
13955	if ValueError exception is caught ,
13956	return boolean False .
13957	from __future__ import unicode_literals into default name space .
13958	import module hmac .
13959	import module struc .
13960	import module hashlib .
13961	import module binascii .
13962	import module time .
13963	import module random .
13964	try ,
13965	random is an instance of random.SystemRandom class .
13966	using_sysrandom is boolean True .
13967	if NotImplementedError exception is caught ,
13968	import warnings .
13969	call the function warnings.warn with an argument , string STR0 .
13970	using_sysrandom is boolean False .
13971	from django.conf import settings into default name space .
13972	from django.utils.encoding import force_bytes into default name space .
13973	from django.utils import six into default name space .
13974	from django.utils.six.moves import xrange into default name space .
13975	define the function salted_hmac with 3 arguments : key_salt , value and secret set to None .
13976	if secret is None ,
13977	substitute settings.SECRET_KEY for secret .
13978	call the function force_bytes with an argument key_salt , substitute the result for key_salt .
13979	call the function force_bytes with an argument secret , substitute the result for secret .
13980	call the method hashlib.sha1 with an argument secret appended to key_salt , call the method digest on the result , return the result .
13981	call the method hmac.new with 3 arguments : key , msg set to result of the function force_bytes with an argument value , and digestmod set to hashlib.sha1 , return the result .
13982	define the function constant_time_compare with 2 arguments : length set to integer 12 ,
13983	if using_sysrandom is false ,
13984	format string STR0 with 3 elements : result of the function random.getstate , result of the call the the function time.time , and settings.SECRET_KEY , call on it method encode with an argument string STR1 , use the result as an argument for the call to the method hashlib.sha256 , call the method digest on the result , use the result as an argument for the call to the function random.seed .
13985	call the function random.choice with an argument allowed_chars , for every i in range of integers from 0 to lengths , join the results into a string , return it .
13986	if hmac has an attribute STR0 ,
13987	define the function constant_time_compare with 2 arguments : val1 and val2 .
13988	call the function hmac.compare_digest with 2 arguments : result of the function force_bytes called with an argument val1 , and result of the function force_bytes called with an argument val2 , return the result .
13989	if not ,
13990	call the function constant_time_compare with 2 arguments : val1 and val2 .
13991	if lengths of val1 and val2 are not equal ,
13992	return boolean False .
13993	result is an integer 0 .
13994	if six.PY3 is true and val1 and val2 are an instances of bytes ,
13995	zip val1 and va2 into list of tuples , for every x and y in the result ,
13996	perform bitwise exclusive OR on 2 operands x and y , perform bitwise OR with 2 operands : previous result and result , substitute the result for result .
13997	if not ,
13998	zip val1 and va2 into list of tuples , for every x and y in the result ,
13999	perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y , perform bitwise OR with 2 operands : previous result and result , substitute the result for result .
14000	if result is equal to integer 0 , return boolean True , otherwise return boolean False .
14001	define the function _bin_to_long with an argument x .
14002	call the function binascii.hexlify with an argument x , convert the result to base 16 integer , return the result .
14003	define the function _long_to_bin with 2 arguments : x and hex_format_string .
14004	format string hex_format_string with x , call the method encode on the result with an argument string STR0 , use the result as an argument for the call to the function binascii.unhexlify , return the result .
14005	if hashlib had an instance STR0 ,
14006	define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None .
14007	if digest is None ,
14008	substitute hashlib.sha256 for digest .
14009	if dklen is false ,
14010	dklen is None .
14011	call the function force_bytes with an argument password , substitute the result for password .
14012	call the function force_bytes with an argument salt , substitute the result for salt .
14013	call the function hashlib.pbkdf2_hmac with 5 arguments : field name of the result of the function digest , password , salt , iterations and dklen , return the result .
14014	if not ,
14015	define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None .
14016	if iterations is lesser than integer 0 , raise an error .
14017	if digest is false ,
14018	substitute hashlib.sha256 for digest .
14019	call the function force_bytes with an argument password , substitute the result for password .
14020	call the function force_bytes with an argument salt , substitute the result for salt .
14021	call the function digest , substitute the filed digest_size of the result for hlen .
14022	if dklen is false ,
14023	substitute hlen for dklen .
14024	bring intger 2 to integer 32 , decrement the result by 1 , multiply it with hlen , if dklen is greater than the previous result ,
14025	raise an OverflowError exception with an argument string STR0 .
14026	divide negative dklen with hlen , substitute floored result for l .
14027	decrement l by integer 1 , multiply it with hlen , subtract the result from dklen , substitute the result for r .
14028	hex_format_string is a string STR0 formated with hlen multiplied with integer 2 .
14029	call the function digest twice , substitute the results for inner , outer , respectively .
14030	if length of password is greater than inner.block_size ,
14031	call the function digest with an argument password , call the method digest on the result , substitute the result or password .
14032	decrement by length of password , create bytes string with previous result number of characters STR0 , append the result to password .
14033	call the method password.translate with an argument hmac.trans_36 , update inner dictionary with the result .
14034	call the method password.translate with an argument hmac.trans_5C , update outer dictionary with the result .
14035	define the function F with an argument i .
14036	call the method struct.pack with 2 arguments : bytes string STR0 and i , append the result to salt , substitute the result or u .
14037	result is an integer 0 .
14038	for every j in range of integers from 0 to iterations converted to an integer ,
14039	call the function inner.copy , substitute the result for dig1 , call the function outer.copy , substitute the result for dig2 .
14040	call the method dig1.update with an argument u .
14041	call the method dig1.digest , use the result as an argument for the call to the function dig2.update .
14042	call the method dig2.digest , substitute the result for u .
14043	call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands , previous result an result , substitute the result for result .
14044	call the function _long_to_bin with 2 arguments : result and hex_format_string , return the result .
14045	call the function F with an argument x , for every x in sequence of integers from 1 to l , not included , substitute the results in a list for T .
14046	join elements of T in a bytes string , append first r elements of result of the call to the function F with an argument l to it ,
14047	import module os .
14048	import module sys .
14049	from . import six into default name space .
14050	convert six.PY3 to an integer , substitute it for buffering .
14051	if os.name equals string STR0 ,
14052	define the function become_daemon with 4 arguments : our_home_dir set to STR0 , out_log set to a string STR1 ,
14053	try ,
14054	fork a child process , if the result equals integer 0 ,
14055	close the process with an argument 0 .
14056	if OSError , renamed to e , exception is caught ,
14057	call the method sys.stderr.write with an argument string STR0 , formated with e.errno and e.strerror .
14058	close the process with an argument 1 .
14059	call the method os.setsid .
14060	call the method os.chdir with an argument our_home_dir .
14061	call the function os.umask with an argument umask .
14062	try ,
14063	fork a child process , if the result equals integer 0 ,
14064	close the process with an argument 0 .
14065	if OSError , renamed to e , exception is caught ,
14066	call the method sys.stderr.write with an argument string STR0 , formated with e.errno and e.strerror .
14067	call the method os._exit with an argument integer 1 .
14068	open STR0 file in read mode , substitute the result for si .
14069	open out_log flie in append mode with buffering size of input buffer , substitute the result for so .
14070	open err_log flie in append mode with buffering size of input buffer , substitute the result for se .
14071	call the method os.dup2 with 2 arguments : result of the method si.fileno and result of the method sys.stdin.fileno .
14072	call the method os.dup2 with 2 arguments : result of the method so.fileno and result of the method sys.stdout.fileno .
14073	call the method os.dup2 with 2 arguments : result of the method se.fileno and result of the method sys.stderr.fileno .
14074	substitute so and se for sys.stdout and sys.stderr .
14075	if not ,
14076	define the function become_daemon with 4 argument : our_home_dir set to STR0 , out_log set to None , err_log set to None ,
14077	call the method os.chdir with an argument our_home_dir .
14078	call the method os.umask with an argument umask .
14079	call the method sys.stdin.close .
14080	call the method sys.stdout.close .
14081	call the method sys.stderr.close .
14082	if err_log is true ,
14083	open err_log file in append mode with buffering size of the input buffer , substitute the result for sys.stderr .
14084	if not ,
14085	sys.stderr is an instance of NullDevice class .
14086	if out_log is true ,
14087	open out_log file in append mode with buffering size of the input buffer , substitute the result for sys.stdout .
14088	if not ,
14089	sys.stdout is an instance of NullDevice class .
14090	derive the class NullDevice .
14091	define the method write with 2 arguments : self and s .
14092	do nothing .
14093	import module copy .
14094	import module warnings .
14095	from collections import OrderedDict into default name space .
14096	from django.utils import six into default name space .
14097	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
14098	derive the class MergeDict from the object base class .
14099	define the method __init__ with 2 arguments : self and unpacked list dicts .
14100	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and integer 2 .
14101	substitute dicts for self.dicts .
14102	define the method __bool__ with an argument self .
14103	if any element of self.dicts is true , return boolean True , otherwise return boolean False .
14104	define the method __nonzero__ with an argument self .
14105	get the type of self object , call its method __bool__ with an argument self , return the result .
14106	define the method __getitem__ with 2 arguments : self and key .
14107	for every dict_ in self.dicts ,
14108	try ,
14109	return value under key key of dict_ dictionary .
14110	if KeyError exception is caught ,
14111	do nothing .
14112	rise an KeyError exception with an argument key .
14113	define the method __copy__ with an argument self .
14114	call the method __copy__ with an argument unpacked list self.dicts , return the result .
14115	define the method get with 3 arguments : self , key and default set to None .
14116	try ,
14117	return value under key key of self dictionary
14118	if KeyError exception is caught ,
14119	return default .
14120	define the method getlist with 2 arguments : self and key .
14121	for every dict_ in self.dicts ,
14122	if key is contained in dict_ ,
14123	call the method dict_.getlist with an argument key , return the result .
14124	return an empty list .
14125	define the method _iteritems with an argument self .
14126	seen is an empty set .
14127	for every dict_ in self.dicts ,
14128	call the function six.iteritems with an argument dict_ , for every item in the result ,
14129	substitute first element of item for k .
14130	if k is contained in seen ,
14131	skip this loop iteration .
14132	add k to seen .
14133	yield item .
14134	define the method _iterkeys with an argument self .
14135	call the method self._iteritems , for every k and v in the result ,
14136	yield k .
14137	define the method _itervalues with an argument self .
14138	call the method self._iteritems , for every k and v in the result ,
14139	yield v .
14140	if six.PY3 is true ,
14141	substitute _iteritems for items .
14142	substitute _iterkeys for keys .
14143	substitute _itervalues for values .
14144	if not ,
14145	substitute _iteritems for iteritems .
14146	substitute _iterkeys for iterkeys .
14147	substitute _itervalues for itervalues .
14148	define the method items with an argument self .
14149	call the method self.iteritems , return the list of results .
14150	define the method keys with an argument self .
14151	call the method self.iterkeys , return the list of results .
14152	define the method values with an argument self .
14153	call the method self.itervalues , return the list of results .
14154	define the method has_key with 2 arguments : self and key .
14155	for every dict_ in self.dicts ,
14156	if key is contained in dict_ ,
14157	return boolean True .
14158	return boolean False .
14159	substitute has_key for __contains__ .
14160	substitute _iterkeys for __iter__ .
14161	define the method copy with an argument self .
14162	call the method self.__copy__ , return the result .
14163	define the method __str__ with an argument self .
14164	get dictionary self items , convert the result into a dictionary , convert the result into a string and return it .
14165	define the method __repr__ with an argument self .
14166	join printable representation of d into a string separated with STR0 , for every d in self.dicts , substitute the result for dictreprs .
14167	return a string STR0 formated with self.__class__.__name__ and dictreprs .
14168	derive the class SortedDict from the dict base class .
14169	define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
14170	call the method __new__ from the base class of the class SortedDict , with 3 arguments : cls , unpacked list args , and unpacked dictionary kwargs .
14171	instance.keyOrder is an empty list .
14172	return instance .
14173	define the method __init__ with 2 arguments : self and data set to None .
14174	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to integer 2 .
14175	if data is None or data is an instance of dict type ,
14176	if data is true , substitute it for data , otherwise data is an empty list .
14177	call the method __init__ from the base class of the class SortedDict , called with an argument data .
14178	if data is true , substitute list created from elements of data , substitute it for self.keyOrder , otherwise self.keyOrder is an empty list .
14179	if not ,
14180	call the method __init__ from the base class of the class SortedDict .
14181	substitute __setitem__ filed of the base class of the class SortedDict for super_set .
14182	for every key and value in data ,
14183	if key is not contained in self ,
14184	append key to self.keyOrder .
14185	call the function super_set with 2 arguments : key and value .
14186	define the method __deepcopy__ with 2 arguments : self and memo .
14187	call the method self.__class__ with an argument list , with 2 elements : key and result of the function copy.deepcopy , called with 2 arguments : value and memo , for every key and value in result for the method self.items , return the result .
14188	define the method __copy__ with an argument self .
14189	call the method self.copy , return the result .
14190	define the method __setitem__ with 3 arguments : self , kay and value .
14191	if key is not contained in self ,
14192	append key to self.keyOrder .
14193	call the method __setitem__ from the base class of the class SortedDict , with 2 arguments key and value .
14194	define the method __delitem__ with 2 arguments : self and key .
14195	call the method __delitem__ from the base class of the class SortedDict , with an argument key .
14196	remove key element from self.keyOrder dictionary .
14197	define the method __iter__ with an argument self .
14198	return iterable self.keyOrder .
14199	define the method __reversed__ with an argument self .
14200	reverse order of elements of self.keyOrder , return the result .
14201	define the method pop with 3 arguments : self , k and unpacked list args .
14202	call the method pop from the base class of the class SortedDict , with 2 arguments k and unpacked list args , substitute the result for result .
14203	try ,
14204	remove k element from self.keyOrder dictionary .
14205	if ValueError exception is caught ,
14206	do nothing .
14207	return result .
14208	define the method popitem with an argument self .
14209	call the method popitem from the base class of the class SortedDict , substitute the result for result .
14210	remove first element of result from self.keyOrder dictionary .
14211	return result .
14212	define the method _iteritems with an argument self .
14213	for every key in self.keyOrder ,
14214	yield key and value under key key of self dictionary .
14215	define the method _iterkeys with an argument self .
14216	for every key in self.keyOrder ,
14217	yield key .
14218	define the method _itervalues with an argument self .
14219	for every key in self.keyOrder ,
14220	yield value under key key of self dictionary .
14221	if six.PY3 is true ,
14222	substitute _iteritems for items .
14223	substitute _iterkeys for keys .
14224	substitute _itervalues for values .
14225	if not ,
14226	substitute _iteritems for iteritems .
14227	substitute _iterkeys for iterkeys .
14228	substitute _itervalues for itervalues .
14229	define the method items with an argument self .
14230	put a tuple with 2 elements : k and value under k key of self dictionary into a list , for every k in self.keyOrder , return resulting list .
14231	define the method keys with an argument self .
14232	return hard copy of self.keyOrder elements .
14233	define the method values with an argument self .
14234	append value under k key of self dictionary to a list , for every k in self.keyOrder , return the result .
14235	define the method update with 2 arguments : self and dict_ .
14236	call the method six.iteritems with an argument dict_ , for every k and v in the result ,
14237	substitute v for value under the k key of self dictionary .
14238	define the method setdefault with 3 arguments : self , key and default .
14239	if key is not contained in self ,
14240	append key to self.keyOrder dictionary .
14241	call the method setdefault from the base class of the class SortedDict , with 2 arguments key and default , return the result .
14242	define the method copy with an argument self .
14243	call the method self.__class__ with an argument self , return the result .
14244	define the method __repr__ with an argument self .
14245	for every k and v in result of the function six.iteritems , called with an argument self , joining string STR0 formated with k and v into a string , separated with STR1 , use it to format a string STR2 , return it .
14246	define the method clear with an argument self .
14247	call the method clear from the base class of the class SortedDict .
14248	self.keyOrder is an empty list .
14249	derive the class OrderedSet from the object base class .
14250	define the method __init__ with 2 arguments : self and iterable set to None .
14251	self.dict is an instance of OrderedDict class , created with arguments : tuples with 2 argument x and None , for every x in iterables , if iterable is true , otherwise use an empty list as an argument .
14252	define the method add with 2 arguments : self and item .
14253	value under the item key of self.dict dictionary is None .
14254	define the method remove with 2 arguments : self and item .
14255	delete entry under item key of self.dict dictionary .
14256	define the method discard with 2 arguments : self and item .
14257	try ,
14258	remove item from self dictionary .
14259	if KeyError exception is caught ,
14260	do nothing .
14261	define the method __iter__ with an argument self .
14262	convert keys of dictionary self.dict into a iterable , return it .
14263	define the method __contains__ with 2 arguments : self and item .
14264	if item is contained in self.dict , return boolean True , otherwise return boolean False .
14265	define the method __nonzero__ with an argument self .
14266	convert self.dict into boolean , return the result .
14267	derive the class MultiValueDictKeyError from the KeyError base class .
14268	do nothing .
14269	derive the class MultiValueDict from the dict base class .
14270	define the method __init__ with 2 arguments : self and key_to_list_mapping set to an empty tuple .
14271	call the method __init__ from the base class of the class MultiValueDict , with an argument key_to_list_mapping .
14272	define the method __repr__ with an argument self .
14273	return a string STR0 formated with self.__class__.__name__ , and a result of the method __repr__ called from instance of base class of the MultiValueDict class .
14274	define the method __getitem__ with 2 arguments : self and key .
14275	try ,
14276	call the method __getitem__ from the base class of the class MultiValueDict , with an argument key , substitute the result for list_ .
14277	if KeyError exception is caught ,
14278	raise an MultiValueDictKeyError exception with printable representation of key .
14279	try ,
14280	return last element of list_ .
14281	if IndexError exception is caught ,
14282	return an empty list .
14283	define the method __setitem__ with 3 arguments : self , key and value .
14284	call the method __setitem__ from the base class of the class MultiValueDict , with 2 arguments key and list containing element value .
14285	define the method __copy__ with an argument self .
14286	call the method self.__class__ with an argument list , with elements : tuples with 2 elements : k and hard copy of list v , for every k and v in result of method the self.lists .
14287	define the method __deepcopy__ with 2 arguments : self and memo set to None .
14288	if memo is None ,
14289	memo is an empty dictionary .
14290	call the method self.__class__ , substitute the result for result .
14291	substitute result for value under the id of self key of memo dictionary .
14292	for every key and value in items of dictionary self ,
14293	call the method dict.__setitem__ with 3 arguments : result , result of the function copy.deepcopy , called with 2 arguments : key , and memo , and result of the function copy.deepcopy called with 2 arguments : value and memo .
14294	return result .
14295	define the method __getstate__ with an argument self .
14296	call the method self.__dict__.copy , substitute the result for obj_dict .
14297	value under STR0 key of obj_dict is a dictionary created with tuples containing 2 elements : k and result of the function , self.getlist with an argument k , for every k in self .
14298	return obj_dict .
14299	define the method __setstate__ with 2 arguments : self and obj_dict .
14300	remove element under STR0 key of obj_dict dictionary , if it exists substitute it for data , if not data is an empty list .
14301	call the method data.items , for every k and v in the result ,
14302	call the method self.setlist with 2 arguments : k and v .
14303	update self.__dict__ dictionary with obj_dict .
14304	define the method get with 3 arguments : self , key and default set to None .
14305	try ,
14306	substitute value under the key key of self dictionary for val .
14307	if KeyError exception is caught ,
14308	return default ,
14309	if val equals an empty list .
14310	return default .
14311	return val .
14312	define the method getlist with 3 arguments : self , key and default set to None .
14313	try ,
14314	call the method __getitem__ from the base class of the class MultiValueDict , with an argument key , return the result..
14315	if KeyError exception is caught ,
14316	if default is None ,
14317	return an empty list .
14318	return default .
14319	define the method setlist with 3 arguments : self , key and list_ .
14320	call the method __setitem__ from the base class of the class MultiValueDict , with 2 arguments key and list_ .
14321	define the method setdefault with 3 arguments : self , key and default set to None .
14322	if key is not contanied in self ,
14323	substitute default for value under the key key of self dictionary .
14324	return value under the key key of self dictionary .
14325	define the method setlistdefault with 3 arguments : self , key and default_list set to None .
14326	if key is not contained in self ,
14327	if default_list is None ,
14328	default_list is an empty list .
14329	call the method self.setlist with 2 arguments : key and default_list .
14330	call the method self.getlist with an argument key , return the result .
14331	define the method appendlist with 3 arguments : self , key and value .
14332	call the method self.setlistdefault with an argument key , append value to the result .
14333	define the method _iteritems with an argument self .
14334	for every key in self ,
14335	yield key and value under the key key of self dictionary .
14336	define the method _iterlists with an argument self .
14337	call the function six.iteritems with an argument : instance of base class of the MultiValueDict class , return the result .
14338	define the method _itervalues with an argument self .
14339	for every key in self ,
14340	yield value under key key of self dictionary .
14341	if six.PY3 is true ,
14342	substitute _iteritems for items .
14343	substitute _iterlists for lists .
14344	substitute _itervalues for values .
14345	if not ,
14346	substitute _iteritems for iteritems .
14347	substitute _iterlists for iterlists .
14348	substitute _itervalues for itervalues .
14349	define the method items with an argument self .
14350	call the method self.iteritems , return list of results .
14351	define the method lists with an argument self .
14352	call the method self.iterlists , return list of results .
14353	define the method values with an argument self .
14354	call the method self.itervalues , return list of results .
14355	define the method copy with an argument self .
14356	call the method copy.copy with an argument self , return the result .
14357	define the method update with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
14358	if length of args is greater than integer 1 ,
14359	raise an TypeError with an argument string STR0 formated with length of args .
14360	if args is true ,
14361	substitute first args for other_dict .
14362	if other_dict is an instance of MultiValueDict .
14363	call the method other_dict.lists , for every key and value_list in result ,
14364	call the method self.setlistdefault with an argument key , extend the result with value_list .
14365	if not ,
14366	trym
14367	for every key and value in items of other_dict dictionary ,
14368	call the method self.setlistdefault with an argument key , append value to the result .
14369	if TypeError exception is caught ,
14370	raise an ValueError with an argument string STR0 .
14371	call the function six.iteritems with an argument kwargs , for every key and value in the result ,
14372	call the method self.setlistdefault with an argument key , append value to the result .
14373	define the method dict with an argument self .
14374	return dictionary created with tuples with 2 elements : key and value under the key key of self dictionary , for every key in self .
14375	derive the class ImmutableList from the tuple base class .
14376	define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
14377	if STR0 is contained in kwargs ,
14378	substitute value under STR0 key of kwargs dictionary for warning .
14379	delete element under STR0 key of kwargs dictionary .
14380	if not ,
14381	warning is a string STR0 .
14382	call the method tuple.__new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs , substitute the result for self .
14383	substitute warning for self.warning .
14384	return self .
14385	define the method complain with 3 arguments : self , unpacked dictionary wargs and unpacked dictionary kwargs .
14386	if self.warning is an instance of Exception class ,
14387	raise self.warning .
14388	if not ,
14389	raise an raise self.warning with an argument self.warning .
14390	substitute complain for __delitem__ .
14391	substitute complain for __delslice__ .
14392	substitute complain for __iadd__ .
14393	substitute complain for __imul__ .
14394	substitute complain for __setitem__ .
14395	substitute complain for __setslice__ .
14396	substitute complain for append .
14397	substitute complain for extend .
14398	substitute complain for insert .
14399	substitute complain for pop .
14400	substitute complain for remove .
14401	substitute complain for sort .
14402	substitute complain for reverse .
14403	derive the class DictWrapper from the dict base class .
14404	define the method __init__ with 4 arguments : self , data , func and prefix .
14405	call the method __init__ with an argument data , from the base class of the class DictWrapper .
14406	substitute func for self.func .
14407	substitute prefix for self.prefix .
14408	define the method __getitem__ with 2 arguments : self and key .
14409	if key starts with self.prefix .
14410	use_func is boolean True .
14411	key is a list with elements of list key from length of self.prefixes index to the end ,
14412	if not ,
14413	use_func is boolean False .
14414	call the method __getitem__ with an argument key from the base class of the class DictWrapper , substitute the result for value .
14415	if use_func is true ,
14416	call the method self.func with an argument value .
14417	return value .
14418	from __future__ import unicode_literals into default name space .
14419	import module re .
14420	import module time .
14421	import module calendar .
14422	import module datetime .
14423	from django.utils.dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS and WEEKDAYS_ABBR into default name space .
14424	from django.utils.translation import ugettext as _ into default name space .
14425	from django.utils.encoding import force_text into default name space .
14426	from django.utils import six into default name space .
14427	from django.utils.timezone import get_default_timezone , is_aware and is_naive into default name space .
14428	compile regex from a string STR0 , substitute it for re_formatchars .
14429	compile regex from a string STR0 , substitute it for re_escaped .
14430	derive the class Formatter from object base class .
14431	define the function format with 2 arguments self and formatstr .
14432	pieces is an empty list .
14433	call the function force_text with an argument formatstr , use the result as an argument for the call to the method ,
14434	re_formatchars.split , for every i and piece in enumerated result , if i is even number ,
14435	get attribute piece of the self object , call it and use the result as an argument for the call to the function force_text , append the result to pieces .
14436	otherwise if piece is true ,
14437	call the method re_escaped.sub with 2 arguments : raw string STR0 and piece , append the result to pieces .
14438	join elements of pieces into a string , return it .
14439	derive the class TimeFormat from the base class Formatter .
14440	define the method __init__ with 2 arguments : self and obj .
14441	substitute obj for self.data .
14442	self.timezone is None .
14443	if obj is an instance of datetime.datetime ,
14444	call the function is_naive with an argument obj .
14445	call the function get_default_timezone , substitute the result for self.timezone .
14446	if not ,
14447	substitute obj.tzinfo for self.timezone .
14448	define the method a with an argument self .
14449	if self.data.hour is greater than integer 11 ,
14450	call the function _ with an argument string STR0 , return the result .
14451	call the function _ with an argument string STR0 , return the result .
14452	define the method A with an argument self .
14453	if self.data.hour is greater than integer 11 ,
14454	call the function _ with an argument string STR0 , return the result .
14455	call the function _ with an argument string STR0 , return the result .
14456	define the method B with an argument self .
14457	raise an NotImplementedError exception with an argument string STR0 .
14458	define the method e with an argument self .
14459	if self.timezone is false ,
14460	return an empty string .
14461	try ,
14462	is self.data has an attribute STR0 and self.data.tzinfo is true ,
14463	call the method self.data.tzinfo.tzname with an argument self.data , if it is true , return it , otherwise return an empty string .
14464	if NotImplementedError exception is caught ,
14465	do nothing .
14466	return an empty string .
14467	define the method f with an argument self .
14468	if self.data.minute equals integer 0 ,
14469	call the method self.g , return the result .
14470	return a string STR0 formated with the results of the functions self.g and self.i , respectivley .
14471	define the method g with an argument self .
14472	if self.data.hour equals integer 0 ,
14473	return integer 12 .
14474	if self.data.hour is greater than inreger 12 ,
14475	subtract integer 12 from self.data.hour , return the result .
14476	return self.data.hour .
14477	define the method G with an argument self .
14478	return self.data.hour .
14479	define the method h with an argument self .
14480	return a string STR0 formated with the result of the function self.g .
14481	define the method H with an argument self .
14482	return a string STR0 formated with the result of the function self.G .
14483	define the method i with an argument self .
14484	return a string STR0 formated with self.data.minute .
14485	define the method O with an argument self .
14486	if self.timezone is false ,
14487	return an empty string .
14488	call the method self.Z , substitute the result for seconds .
14489	if seconds smaller than integer 0 , sign is STR0 , otherwise sign is STR1 ,
14490	substitute absolute seconds for seconds .
14491	return a string STR0 formated with sign , floored result of the division of seconds by integer 3000 , reminder of the division of floored result of division of seconds by 60 , by integer 60 .
14492	define the method P with an argument self .
14493	if self.data.minute equals integer 0 and self.data.hour equals integer 0 ,
14494	call the function _ with an argument string STR0 , return the result .
14495	if self.data.minute equals integer 0 and self.data.hour equals integer 12 ,
14496	call the function _ with an argument string STR0 , return the result .
14497	return a string STR0 formated with self.data.month .
14498	define the method s with an argument self .
14499	return a string STR0 formated with self.data.second .
14500	define the method T with an argument self .
14501	if self.timezone is false ,
14502	return an empty string .
14503	if self.timezone is true , call the method self.timezone.tzname with an argument self.data , substitute the result for name , otherwise name is None .
14504	if name is None ,
14505	call the method self.format with an argument string STR0 , substitute the result for name .
14506	call the function six.text_type with an argument name , return the result .
14507	define the method u with an argument self .
14508	return a string STR0 formated with self.data.microsecond .
14509	define the method Z with an argument self .
14510	if self.timezone is true ,
14511	return an empty string .
14512	call the method self.timezone.utcoffset with an argument self.data , substitute the result for offset .
14513	multiply offset.days with 86400 , add offset.seconds to the result , return the result .
14514	derive the class DateFormat from the base class TimeFormat .
14515	year_days is a list with 13 elements : None , integer 0 , integer 31 , integer 59 , integer 90 , integer 120 , integer 151 , integer 181 , integer 212 , integer 243 , integer 273 , integer 304 and integer 334 .
14516	define the method b with an argument self .
14517	return the value under the self.data.month key of the MONTHS_3 dictionary .
14518	define the method c with an argument self .
14519	call the method self.data.isoformat , return the result .
14520	define the method d with an argument self .
14521	return a string STR0 formated with self.data.day .
14522	define the method D with an argument self .
14523	call the method self.data.weekday , use the result as an key for obtaining WEEKDAYS_ABBR dictionary value , return it .
14524	define the method E with an argument self .
14525	return the value under the self.data.month key of the MONTHS_ALT dictionary .
14526	define the method F with an argument self .
14527	return the value under the self.data.month key of the MONTHS dictionary .
14528	define the method I with an argument self .
14529	if self.timezone is true and call to the method self.timezone.dst with an argument self.data , evaluates to true ,
14530	return string STR0 .
14531	if not ,
14532	return string STR0 .
14533	define the method j with an argument self .
14534	return self.data.day .
14535	define the method l with an argument self .
14536	call the method self.data.weekday , use the result as an key for obtaining WEEKDAYS dictionary value , return it .
14537	define the method L with an argument self .
14538	call the method calendar.isleap with an argument self.data.year , return the result .
14539	define the method m with an argument self .
14540	return a string STR0 formated with self.data.month .
14541	define the method M with an argument self .
14542	get the value under the self.data.month key of the MONTHS_3 dictionary , call on it the method title , return the result .
14543	define the method n with an argument self .
14544	return self.data.month .
14545	define the method N with an argument self .
14546	return the value under the self.data.month key of the MONTHS_AP dictionary .
14547	define the method o with an argument self .
14548	call the method self.data.isocalendar , return the first element of the result .
14549	define the method r with an argument self .
14550	call the method return self.format with an argument string STR0 , return the result .
14551	define the method S with an argument self .
14552	if self.data.day equals integer 11 , 12 or 13 ,
14553	return string STR0 .
14554	divide self.data.day by 10 , substitute reminder of the result for last .
14555	if las equals integer 1 ,
14556	return string STR0 .
14557	if las equals integer 2 ,
14558	return string STR0 .
14559	if las equals integer 3 ,
14560	return string STR0 .
14561	return string STR0 .
14562	define the method t with an argument self .
14563	call the method calendar.monthrange with 2 arguments : self.data.year and self.data.month , format string STR0 with the second element of the result , return it .
14564	define the method U with an argument self .
14565	if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true ,
14566	call the method self.data.utctimetuple , use the result as an argument for the call to the function calendar.timegm , return result converted into an integer .
14567	if not ,
14568	call the method self.data.timetuple , use the result as an argument for the call to the function time.mktime , return result converted into an integer .
14569	define the method w with an argument self .
14570	call the method self.data.weekday , increment the result by an integer 1 , divide it with integer 7 , return the reminder of the division .
14571	define the method W with an argument self .
14572	week_number is None .
14573	call the method self.data.replace with 2 arguments : month as integer 1 and day as integer 1 , on the result call the method , weekday , increment the result by integer 1 and substitute it for jan1_weekday .
14574	call the method self.data.weekday , increment the result by integer 1 , substitute the result for weekday .
14575	call the method self.z , substitute the result for day_of_year .
14576	if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4 ,
14577	if jan1_weekday equals integer 5 , or if jan1_weekday equals integer 6 and call to the function calendar.isleap ,
14578	with an argument self.data.year decremented by 1 , evaluates to true , week_number is integer 53 .
14579	if not ,
14580	week_number is integer 52 .
14581	if not ,
14582	call the function calendar.isleap with an argument self.data.year , if it evaluates to true ,
14583	i is integer 366 .
14584	if not ,
14585	i is integer 365 .
14586	subtract day_of_year from i , if the result is smaller than the result of subtraction of weekday from integer 4 ,
14587	week_number is integer 1 .
14588	if not ,
14589	sum day_of_year , result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday .
14590	divide j by integer 7 , substitute the floored result for week_number .
14591	if jan1_weekday is greater than integer 4 ,
14592	decrement week_number by integer 1 .
14593	return week_number .
14594	define the method y with an argument self .
14595	call the function six.text_type with an argument self.data.year , return the result without the first 2 elements .
14596	define the method Y with an argument self .
14597	return self.data.year .
14598	define the method z with an argument self .
14599	append self.data.day to the value under the self.data.month key of the self.year_days dictionary , substitute the result for doy .
14600	if call to the method self.L evaluates to true , and result of the call to the method self.data.month is greater than integer 2 ,
14601	increment doy by integer 1 .
14602	return doy .
14603	define the function format with 2 arguments : value and format_string .
14604	df is an instance of DateFormat class , created with an argument value .
14605	call the method df.format with an argument format_string , return the result .
14606	define the function time_format with 2 arguments : value and format_string .
14607	tf is an instance of TimeFormat class , created with an argument value .
14608	call the method tf.format with an argument format_string , return the result .
14609	import module datetime .
14610	import module re .
14611	from django.utils import six into default name space .
14612	from django.utils.timezone import utc and get_fixed_timezone into default name space .
14613	compile regex from raw string STR0 , substitute it for date_re .
14614	compile regex from raw string STR0 , substitute it for time_re .
14615	compile regex from raw string STR0 , substitute it for datetime_re .
14616	define the function parse_date with an argument value .
14617	match regex date_re with value , substitute the result for match .
14618	if match is true ,
14619	call the method match.groupdict , use the result as an argument for the call to the function six.iteritems , for every k and v in the previous result , add a key into a dictionary : v converted to an integer for k , substitute the resulting dictionary for kw .
14620	call the method datetime.date with an argument unpacked dictionary kw , return the result .
14621	define the function parse_time with an argument value .
14622	match regex time_re with value , substitute the result for match .
14623	if match is true ,
14624	call the method match.groupdict , substitute the result for kw .
14625	if value under the STR0 key of the kw dictionary is true ,
14626	left justify value under the STR0 key of the kw dictionary , in the field of width 6 , fill the rest with STR1 , substitute the result for value under the STR2 key of the kw dictionary .
14627	update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems , called with an argument kw , only if v is not None , substitute the result for kw .
14628	call the method datetime.time with an argument unpacked dictionary kw , return the result .
14629	define the function parse_datetime with an argument value .
14630	match regex datetime_re with value , substitute the result for match .
14631	if match is true ,
14632	call the method match.groupdict , substitute the result for kw .
14633	if value under the STR0 key of the kw dictionary is true ,
14634	left justify value under the STR0 key of the kw dictionary , in the field of width 6 , fill the rest with STR1 , substitute the result for value under the STR2 key of the kw dictionary .
14635	remove entry under the STR0 key of the kw dictionary , substitute it for tzinfo .
14636	if tzinfo equals a string STR0 ,
14637	substitute utc for tzinfo .
14638	otherwise if tzinfo is not None ,
14639	if length of tzinfo is greater than integer 3 , convert elements of tzinfo from indexes 1 to 3 to an integer , substitute the result for offset_mins , otherwise offset_mins is integer 0 .
14640	convert elements of tzinfo from indexes 1 to 3 to an integer , multiply it by integer 60 and increment it by offset_mins , substitute the result for offset .
14641	if first element of tzinfo equals STR0 ,
14642	multiply offset by integer -1 .
14643	call the function get_fixed_timezone with an argument offset , substitute the result for tzinfo .
14644	update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems , called with an argument kw , only if v is not None , substitute the result for kw .
14645	substitute tzinfo for value under the STR0 key of the kw dictionary .
14646	call the method datetime.datetime with an argument unpacked dictionary kw , return the result .
14647	from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space .
14648	WEEKDAYS is an dictionary with 7 entries : result of the call to the function _ with an argument string STR0 for 0 , result of the call to the function _ with an argument string STR1 for 1 , result of the call to the function _ with an argument string STR2 for 2 , result of the call to the function _ with an argument string STR3 for 3 , result of the call to the function _ with an argument string STR4 for 4 , result of the call to the function _ with an argument string STR5 for 5 , and result of the call to the function _ with an argument string STR6 for 6 .
14649	WEEKDAYS_ABBR is an dictionary with 7 entries : result of the call to the function _ with an argument string STR0 for 0 , result of the call to the function _ with an argument string STR1 for 1 , result of the call to the function _ with an argument string STR2 for 2 , result of the call to the function _ with an argument string STR3 for 3 , result of the call to the function _ with an argument string STR4 for 4 , result of the call to the function _ with an argument string STR5 for 5 , and result of the call to the function _ with an argument string STR6 for 6 .
14650	WEEKDAYS_REV is an dictionary with 7 entries : 0 for STR0 , 1 for STR1 , 2 for STR2 , 3 for STR3 , 4 for STR4 , 5 for STR5 and 6 for STR6 .
14651	MONTHS is an dictionary with 12 entries : result of the call to the function _ with an argument string STR0 for 1 , result of the call to the function _ with an argument string STR1 for 2 , result of the call to the function _ with an argument string STR2 for 3 , result of the call to the function _ with an argument string STR3 for 4 , result of the call to the function _ with an argument string STR4 for 5 , result of the call to the function _ with an argument string STR5 for 6 , result of the call to the function _ with an argument string STR6 for 7 , result of the call to the function _ with an argument string STR7 for 8 , result of the call to the function _ with an argument string STR8 for 9 , result of the call to the function _ with an argument string STR9 for 10 , result of the call to the function _ with an argument string STR10 for 11 , and result of the call to the function _ with an argument string STR11 for 12 .
14652	MONTHS_3 is an dictionary with 12 entries : result of the call to the function _ with an argument string STR0 for 1 , result of the call to the function _ with an argument string STR1 for 2 , result of the call to the function _ with an argument string STR2 for 3 , result of the call to the function _ with an argument string STR3 for 4 , result of the call to the function _ with an argument string STR4 for 5 , result of the call to the function _ with an argument string STR5 for 6 , result of the call to the function _ with an argument string STR6 for 7 , result of the call to the function _ with an argument string STR7 for 8 , result of the call to the function _ with an argument string STR8 for 9 , result of the call to the function _ with an argument string STR9 for 10 , result of the call to the function _ with an argument string STR10 for 11 , result of the call to the function _ with an argument string STR11 for 12 .
14653	MONTHS_3_REV is an dictionary with 12 entries : 1 for STR0 , 2 for STR1 , 3 for STR2 , 4 for STR3 , 5 for STR4 , 6 for STR5 , 7 for STR6 , 8 for STR7 , 9 for STR8 , 10 for STR9 , 11 for STR10 and 12 for STR11 .
14654	MONTHS_AP is an dictionary with 12 entries : result of the function pgettext_lazy with 2 arguments : STR0 and STR1 for 1 , result of the function pgettext_lazy with 2 arguments : strings STR2 and STR3 for 2 , result of the function pgettext_lazy with 2 arguments : strings STR4 and STR5 for 3 , result of the function pgettext_lazy with 2 arguments : strings STR6 and STR7 for 4 , result of the function pgettext_lazy with 2 arguments : strings STR8 and STR9 for 5 , result of the function pgettext_lazy with 2 arguments : strings STR10 and STR11 for 6 , result of the function pgettext_lazy with 2 arguments : strings STR12 and STR13 for 7 , result of the function pgettext_lazy with 2 arguments : strings STR14 and STR15 for 8 , result of the function pgettext_lazy with 2 arguments : strings STR16 and STR17 for 9 , result of the function pgettext_lazy with 2 arguments : strings STR18 and STR19 for 10 , result of the function pgettext_lazy with 2 arguments : strings STR20 and STR21 for 11 , result of the function pgettext_lazy with 2 arguments : strings STR22 and STR23 for 12 ,
14655	MONTHS_ALT is an dictionary with 12 entries : result of the function pgettext_lazy with 2 arguments : STR0 and STR1 for 1 ,
14656	from datetime import date as real_date and datetime as real_datetime into default name space .
14657	import module re .
14658	import module time .
14659	derive the class date from the real_date base class .
14660	define the method strftime with 2 arguments : self and fmt .
14661	call the function strftime with 2 arguments : self and fmt , return the result .
14662	derive the class datetime from the real_datetime base class .
14663	define the method strftime with 2 arguments : self and fmt .
14664	call the function strftime with 2 arguments : self and fmt , return the result .
14665	decorator classmethod ,
14666	define the method combine with 3 arguments : cls , date and time .
14667	call the function cls with 8 arguments : date.year , date.month , date.day , time.hour , time.minute , time.second , time.microsecond , and time.tzinfo , return the result .
14668	define the method date with an argument self .
14669	call the function data with 3 arguments : self.year , self.month and self.day , return the result .
14670	define the function new_date with an argument d .
14671	call the function data with 3 arguments : d.year , d.month and d.day , return the result .
14672	define the function new_datetime with an argument d .
14673	kw is a list with 3 elements : d.year , d.month and d.day .
14674	if d is an instance of real_datetime class ,
14675	extend list kw with a list with 5 elements : d.hour , d.minute , d.second , d.microsecond and d.tzinfo .
14676	call the function datetime with an argument unpacked list kw , return the result .
14677	compile the regex from the raw string STR0 , substitute the result for _illegal_formatting .
14678	define the function _findall with 2 arguments text and substr .
14679	sites is an empty list .
14680	i is integer 0 .
14681	endless loop ,
14682	call the method text.find with 2 arguments : substr and i , substitute the result for j .
14683	if j equals to integer -1 ,
14684	break from the loop execution .
14685	append j to sites .
14686	add j and integer 1 , substitute the result for i .
14687	return sites .
14688	define the function strftime with 2 arguments dt and fmt .
14689	if dt.year is greater than or equal to integer 1900 ,
14690	call the method strftime with an argument fmt , from the base class of the type of dt class .
14691	call the method _illegal_formatting.search with an argument fmt , substitute the result for illegal_formatting .
14692	if illegal_formatting is true ,
14693	raise an TypeError exception with an argument : result of the method illegal_formatting.group called with an argument , integer 0 , appended to a string STR0 .
14694	substitute dt.year for year .
14695	subtract year from integer 2000 , substitute the result for delta .
14696	floor the division of delta by integer 100 and delta by integer 400 , sum the two results , multiply integer 6 by it , substitute the result for off .
14697	sum year and off , substitute the result for year .
14698	subtract year from integer 2000 , divide the result by integer 28 , floor the result , multiply it with 28 and increment by year , substitute the result for year .
14699	call the method dt.timetuple , substitute the result for timetuple .
14700	call the function time.strftime with 2 arguments : fmt and and timetuple without the first element , added to a tuple with an element year , substitute the result for s1 .
14701	call the function _findall with 2 arguments : s1 and year converted into a string , substitute the result for sites1 .
14702	call the function time.strftime with 2 arguments : fmt and and timetuple without the first element , added to a tuple with an element sum of year an integer 28 , substitute the result for s2 .
14703	call the function _findall with 2 arguments : s2 and sum of year and integer 28 , converted into a string , substitute the result for sites2 .
14704	sites is an empty list .
14705	if site is contained in sites1 ,
14706	if site is contained in sites2 ,
14707	append site to sites .
14708	substitute s1 for s .
14709	syear is a string STR0 formated with dt.year .
14710	for every site in sites ,
14711	concatenate first site elements of s , syear and elements of s from the site incremented by integer 4 index , substitute the result for s .
14712	return s .
14713	define the function deconstructible with 2 arguments : unpacked list args and unpacked dictionary kwargs .
14714	remove elements under the STR0 key of the kwargs dictionary , if it exists substitute it for path , if not path is None .
14715	define the function decorator with an argument klass .
14716	define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
14717	call the method __new__ with an argument cls from the base class of the klass function .
14718	obj._constructor_args is a tuple with 2 elements : args and kwargs .
14719	return obj .
14720	define the function deconstruct with an argument obj .
14721	return a tuple with 3 elements : if path is true , path , in not , a string STR0 formated with obj.__class__.__module__ , and obj.__class__.__name__ , first element of obj._constructor_args and second element of obj._constructor_args .
14722	klass.__new__ is a static method of the function __new__ .
14723	substitute deconstruct for klass.deconstruct .
14724	return klass .
14725	if args is true ,
14726	return decorator .
14727	call the function decorator with 2 arugments : unpacked list args and unpacked dictionary kwargs , return the result .
14728	from functools import wraps , update_wrapper and WRAPPER_ASSIGNMENTS into default name space .
14729	from django.utils import six into default name space .
14730	derive the class classonlymethod from the classmethod base class .
14731	define the method __get__ with 3 arguments : self , instance and owner .
14732	if instance is not None ,
14733	raise an AttributeError exception with an argument string STR0 .
14734	call the method __get__ with 2 arguments : instance and owner , from the base class of the classonlymethod class , return the result .
14735	define the function method_decorator with an argument decorator .
14736	define the function _dec with an argument func .
14737	define the method _wrapper with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
14738	decorator decorator .
14739	define the function bound_func with 2 arguments : unpacked list args2 and unpacked dictionary kwargs2 .
14740	call the method func.__get__ with 2 arguments : self and type of self object , call the result with 2 arguments : unpacked list args2 and unpacked dictionary kwargs2 , return the result .
14741	call the function bound_func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result .
14742	decorator decorator .
14743	define the function dummy with 2 arguments : unpacked list args and unpacked dictionary kwargs .
14744	do nothing .
14745	call the function update_wrapper with 2 arguments : _wrapper and dummy .
14746	call the function update_wrapper with 2 arguments : _wrapper and func .
14747	return _wrapper .
14748	call the function update_wrapper with 3 arguments : _dec , decorator and assigned as result of the function available_attrs , called with an argument decorator .
14749	if decorator has an attribute STR0 ,
14750	_dec.__name__ is a string STR0 formated with decorator.__name__ .
14751	if not ,
14752	_dec.__name__ is a string STR0 formated with decorator.__class__.__name__ .
14753	return _dec .
14754	define the function decorator_from_middleware_with_args with an argument middleware_class .
14755	call the function make_middleware_decorator with an argument middleware_class , return the result .
14756	define the function decorator_from_middleware with an argument middleware_class .
14757	call the function make_middleware_decorator with an argument middleware_class , call the result , return the new result .
14758	define the function available_attrs with an argument fn .
14759	if six.PY3 is true ,
14760	return WRAPPER_ASSIGNMENTS .
14761	if not ,
14762	if fh has an attribute a , for every a in WRAPPER_ASSIGNMENTS , put a into a tuple , return the resulting tuple .
14763	define the function make_middleware_decorator with an argument middleware_class .
14764	define the function make_decorator with 2 arguments : unpacked list m_args and unpacked dictionary m_kwargs .
14765	call the function middleware_class with 2 arguments : unpacked list m_args and unpacked dictionary m_kwargs , substitute the middleware .
14766	define the function _decorator with an argument view_func .
14767	decorator function wraps with 2 arguments : view_func and assigned set to result of the function available_attrs , called with an argument view_func .
14768	define the function _wrapped_view with 3 arguments : request , unpacked list args and unpacked dictionary kwargs .
14769	if middleware has an attribute STR0 ,
14770	call the method middleware.process_request with an argument request , substitute the result for result .
14771	if result is not None ,
14772	return result .
14773	if middleware has an attribute STR0 ,
14774	call the method middleware.process_view with 4 arguments : request , view_func , args and kwargs , substitute the result for result .
14775	if result is not None ,
14776	return result .
14777	try ,
14778	call the function view_func with 3 arguments : request , unpacked list args , unpacked dictionary kwargs , substitute the result for response .
14779	if Exception , renamed to e , exception is caught ,
14780	if middleware has an attribute STR0 ,
14781	call the method middleware.process_exception with 2 arguments : request and e , substitute the result for result .
14782	if result is not None ,
14783	return result ,
14784	raise an exception .
14785	if response has an attribute STR0 and response.render is a callable object ,
14786	if middleware has an attribute STR0 ,
14787	call the method middleware.process_template_response with 2 arguments : request and response , substitute the result for response .
14788	if middleware has an attribute STR0 ,
14789	callback is an lambda function with an argument response and with return value result of the method middleware.process_response , called with 2 arguments : request and response .
14790	call the method response.add_post_render_callback with an argument callback .
14791	if not ,
14792	if middleware has an attribute STR0 ,
14793	call the method middleware.process_response with 2 arguments : request and response , return the result .
14794	return response .
14795	return _wrapped_view .
14796	return _decorator .
14797	return _make_decorator .
14798	import module inspect .
14799	import module warnings .
14800	derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class .
14801	do nothing .
14802	derive the class RemovedInDjango19Warning from DeprecationWarning base class .
14803	do nothing .
14804	substitute RemovedInDjango19Warning for RemovedInNextVersionWarning .
14805	derive the class warn_about_renamed_method from object base class .
14806	deifne the method __init__ with 5 arguments : self , class_name , old_method_name , new_method_name and deprecation_warning .
14807	substitute class_name for self.class_name .
14808	substitute old_method_name for self.old_method_name .
14809	substitute new_method_name for new_method_name .
14810	substitute deprecation_warning for self.deprecation_warning .
14811	define the method __call__ with 2 arguments : self and f .
14812	define the function wrapped with 2 arguments : unpacked list args and unpacked dictionary kwargs .
14813	call the function warnings.warn with 3 arguments : string STR0 , formated with 3 elements : self.class_name , self.old_method_name and self.new_method_name , self.deprecation_warning and integer 2 .
14814	call the function f with a arguments : unpacked list args and unpacked dictionary kwargs , return the result .
14815	return wrapped .
14816	derive the class RenameMethodsBase from type base class .
14817	renamed_methods is an tuple .
14818	define the method __new__ with 4 arguments : cls , name , bases and attrs .
14819	call the method __new__ with 4 arguments : cls , name , bases and attrs , from the base class of the class RenameMethodsBase .
14820	call the method inspect.getmro with an argument new_class , for every base in the result ,
14821	substitute base.__name__ for class_name .
14822	for every renamed_method in cls.renamed_methods ,
14823	substitute first element of renamed_method for old_method_name .
14824	get the value under the old_method_name key of the base.__dict__ dictionary , substitute it for old_method .
14825	substitute second element of renamed_method for new_method_name .
14826	get the value under the new_method_name key of the base.__dict__ dictionary , substitute it for new_method .
14827	substitute third element of renamed_method for deprecation_warning .
14828	call the function warn_about_renamed_method with 2 arguments : class_name and unpacked list renamed_method , substitute the result for wrapper .
14829	if new_method is false and old_method is true ,
14830	call the function warnings.warn with 3 arguments : string STR0 , formated with 3 elements : class_name , old_method_name and new_method_name , deprecation_warning and integer 2 .
14831	set new_method_name attribute of the base object to old_method .
14832	set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method .
14833	if old_method is false and new_method is true ,
14834	set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method .
14835	return new_class .
14836	import module warnings .
14837	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
14838	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to integer 2 .
14839	import module logging.handlers .
14840	import module re .
14841	import module sys .
14842	import module types .
14843	from django.utils import six into default name space .
14844	compile regex from string STR0 in case insensitive mode , substitute it for IDENTIFIER .
14845	define the function valid_ident with an argument s .
14846	match string s with regex IDENTIFIER , substitute the result for m .
14847	if m is false ,
14848	raise an ValueError exception with an argument string STR0 formated with s .
14849	return boolean True .
14850	try ,
14851	from logging import _checkLevel .
14852	if ImportError exception is caught ,
14853	define the function _checkLevel with an argument level .
14854	if level is an instance of int type ,
14855	substitute level for rv .
14856	otherwise if level converted into a string equals level ,
14857	if level is not contained in logging._levelNames ,
14858	raise an ValueError exception with an argument string STR0 formated with level .
14859	substitute value under level key of logging._levelNames dictionary for rv .
14860	if not ,
14861	raise an TypeError exception with an argument string STR0 formated with level .
14862	return rv .
14863	derive the class ConvertingDict from dict base class .
14864	define the method __getitem__ with 2 arguments : self and key .
14865	call the method dict.__getitem__ with 2 arguments self and key , substitute the result for value .
14866	call the method self.configurator.convert with an argument value , substitute the result for result .
14867	if value is not contained in result ,
14868	substitute result for self dictionary under key key .
14869	if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
14870	substitute self for result.parent .
14871	substitute key for result.key .
14872	return result .
14873	define the method get with 3 arguments : self , key and default set to None .
14874	get value under key key of self dictionary , if it doesnt exists return default , substitute the result for value .
14875	call the method self.configurator.convert with an argument value , substitute the result for result .
14876	if value is not contained in result ,
14877	substitute result for value under key key of self dictionary .
14878	if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
14879	substitute self for result.parent .
14880	substitute key for result.key .
14881	return result .
14882	define the method pop with 3 arguments : self , key and default set to None .
14883	remove value under key key of self dictionary , if it doesnt exists return default , substitute the result for value .
14884	call the method self.configurator.convert with an argument value .
14885	if value is not contained in result ,
14886	if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
14887	substitute self for result.parent .
14888	substitute key for result.key .
14889	return result .
14890	derive the class ConvertingList from list base class .
14891	define the method __getitem__ with 2 arguments : self and key .
14892	call the method list.__getitem__ with 2 arguments self and key , substitute the result for value .
14893	call the method self.configurator.convert with an arugment value , substitute the result for result .
14894	if value is not contained in result ,
14895	substitute result for value under key key of self dictionary .
14896	if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
14897	substitute self for result.parent .
14898	substitute key for result.key .
14899	return result .
14900	define the method pop with 2 arguments : self and idx set to negative integer 1 .
14901	remove idx-th element from self list .
14902	call the method self.configurator.convert with an argument value , substitute the result for result .
14903	if value is not contained in result ,
14904	if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
14905	substitute self for result.parent .
14906	return result .
14907	derive the class ConvertingTuple from tuple base class .
14908	define the method __getitem__ with 2 arguments : self and key .
14909	call the method tuple.__getitem__ with 2 arguments : self and key , substitute the result for value .
14910	call the method self.configurator.convert with an argument value , substitute the result for result .
14911	if value is not contained in result ,
14912	if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
14913	substitute self for result.parent .
14914	substitute key for result.key .
14915	return result .
14916	derive the class BaseConfigurator from object base class .
14917	compile a regex from raw string STR0 , substitute it for CONVERT_PATTERN .
14918	compile a regex from raw string STR0 , substitute it for WORD_PATTERN .
14919	compile a regex from raw string STR0 , substitute it for DOT_PATTERN .
14920	compile a regex from raw string STR0 , substitute it for INDEX_PATTERN .
14921	compile a regex from raw string STR0 , substitute it for DIGIT_PATTERN .
14922	value_converters is a dictionary with 2 entries : STR0 for STR1 and STR2 for STR3 .
14923	substitute __import__ for importer .
14924	define the method __init__ with 2 arguments : self and config .
14925	self.config is an instance of ConvertingDict , called with an argument config .
14926	substitute self for self.config.configurator .
14927	define the method resolve with 2 arguments : self and s .
14928	split s into parts by STR0 , substitute the result for name .
14929	remove first element from name , substitute the result for used .
14930	try ,
14931	call the method self.importer with an argument used , substitute the result for found .
14932	for every frag in name .
14933	append STR0 to frag , append the result to used .
14934	try ,
14935	get frag attribute from found object , substitute it for found .
14936	if AttributeError exception is caught ,
14937	call the method self.importer with an argument used .
14938	get frag attribute from found object , substitute it for found .
14939	return found .
14940	if ImportError exception is caught ,
14941	call the method sys.exc_info , substitute the result without the first element for e and tb .
14942	raise an ValueError exception with an argument string STR0 , formated with s and e .
14943	substitute e and tb for v.__cause__ and v.__traceback__ .
14944	raise an v exception .
14945	define the method ext_convert with 2 arguments : self and value .
14946	call the method self.resolve with an argument value , return the result .
14947	define the method cfg_convert with 2 arguments : self and value .
14948	substitute value for rest .
14949	match rest string with self.WORD_PATTERN regex , substitute the result for m .
14950	if m is None ,
14951	raise an ValueError exception with an argument string STR0 formated with value .
14952	if not ,
14953	call the method m.end , slice list rest from previous result as starting index to the end , substitute the result for rest .
14954	call the method m.groups , use the first element of the result as key for obtaining value from self.config dictionary , substitute it for d .
14955	while rest is true ,
14956	match rest string with self.DOT_PATTERN regex , substitute the result for m .
14957	if m is true ,
14958	call the method m.groups , use the first element of the result as key for obtaining value from d dictionary ,
14959	if not ,
14960	match rest string with self.INDEX_PATTERN regex , substitute the result for m .
14961	if m is true ,
14962	call the method m.groups , substitute the first element of the result for idx .
14963	match rest string with self.DIGIT_PATTERN regex , if it evaluates to false ,
14964	substitute value under idx key of dictionary d for d .
14965	if not ,
14966	try ,
14967	convert idx to an integer , substitute it or n .
14968	substitute value under n key of dictionary d for d .
14969	if TypeError exception is caught ,
14970	substitute value under idx key of dictionary d for d .
14971	if m is true ,
14972	call the method m.end , slice list rest from previous result as starting index to the end , substitute the result for rest .
14973	if not ,
14974	raise an ValueError exception with an argument string STR0 formated with value and rest .
14975	return d .
14976	define the method convert with 2 arguments : self and value .
14977	if vale is not an instance of ConvertingDict and value is an instance of dict type ,
14978	value is an instance of ConvertingDict class , created with an argument value .
14979	substitute self for value.configurator .
14980	otherwise if vale is not an instance of ConvertingList and value is an instance of list type ,
14981	value is an instance of ConvertingList class , created with an argument value .
14982	substitute self for value.configurator .
14983	otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type ,
14984	value is an instance of ConvertingTuple class , created with an argument value .
14985	substitute self for value.configurator .
14986	otherwise if vale is an instance of value ,
14987	match value string with regex self.CONVERT_PATTERN , substitute the result for m .
14988	if m is true ,
14989	call the method m.groupdict , substitute the result for d .
14990	substitute value under the STR0 key of dictionary d , substitute it for prefix .
14991	remove self.value_converters dictionary element under prefix key , if it exists substitute it for converter , if not , converter is None .
14992	if converter is true ,
14993	substitute value under the STR0 key of dictionary d , substitute it for suffix .
14994	get converter attribute from self object , substitute it for converter .
14995	call the function converter with an argument suffix , substitute the result for value .
14996	return value .
14997	define the method configure_custom with 2 arguments : self and config .
14998	remove config dictionary element under STR0 key , substitute it for c .
14999	if c doesnt have an attribute STR0 and types has an STR1 attribute and type of c is not equal to types.ClassType ,
15000	call the method self.resolve with an argument c , substitute the result for c .
15001	remove config dictionary element under STR0 key , if it exists substitute it for props , if not , props is None .
15002	kwargs is a dictionary with elements : config dictionary element under k key for k , for every k in result of function valid_ident , called with an argument k .
15003	call the function c with an argument unpacked dictionary kwargs , substitute the result for result .
15004	if props is true ,
15005	for every name and value in items of props dictionary ,
15006	set result attribute name to value value .
15007	return result .
15008	define the method as_tuple with 2 arguments : self and value .
15009	if valu is an instance of list type ,
15010	convery value into a tuple , substitute it for value .
15011	return value .
15012	derive the class DictConfigurator from the BaseConfigurator base class .
15013	define the method configure with an argument self .
15014	substitute self.config for config .
15015	if string STR0 is not contained in config ,
15016	raise an ValueError exception with an argument string STR0 .
15017	if config dictionary value under STR0 key is not equal to integer 1 ,
15018	raise an ValueError exception with an argument string STR0 formated with value under STR1 key of config dictionary .
15019	get config dictionary element under STR0 key , if it exists substitute it for incremental , if not , incremental is boolean False .
15020	EMPTY_DICT is an empty dictionary .
15021	call the method logging._acquireLock .
15022	try ,
15023	if incremental is true ,
15024	get config dictionary element under STR0 key , if it exists substitute it for handlers , if not , handlers is EMPTY_DICT .
15025	if first two elements of sys.version_info equal to integers 2 ant 7 , respectively ,
15026	for every name in handlers ,
15027	if name is not contained in logging._handlers ,
15028	raise an ValueError exception with an argument string STR0 formated with name .
15029	if not ,
15030	try ,
15031	substitute value under name key of logging._handlers dictionary for handler .
15032	substitute value under name key of handlers dictionary for handler_config .
15033	get handler_config dictionary element under STR0 key , if it exists substitute it for level , if not , level is None .
15034	if level is true ,
15035	call the function _checkLevel with an argument level , use the result as an argument for the call to the function handler.setLevel .
15036	if StandardError , renamed to e , exception is caught ,
15037	raise an ValueError exception with an argument string STR0 formated with name and e .
15038	get config dictionary element under STR0 key , if it exists substitute it for loggers , if not , loggers is EMPTY_DICT .
15039	for every name in loggers ,
15040	try ,
15041	call the method self.configure_logger with 3 arguments : name , value under name key of loggers dictionary and boolean True .
15042	if StandardError , renamed to e , exception is caught ,
15043	raise an ValueError exception with an argument string STR0 formated with name and e .
15044	get config dictionary element under STR0 key , if it exists substitute it for root , if not , root is None .
15045	if root is true ,
15046	try ,
15047	call the method self.configure_root with 2 arguments : root and boolean True .
15048	if StandardError , renamed to e , exception is caught ,
15049	raise an ValueError exception with an argument string STR0 formated with e .
15050	if not ,
15051	remove config dictionary element under STR0 key , if it exists substitute it for disable_existing , if not , disable_existing is boolean True .
15052	call the method logging._handler.clear .
15053	delete logging._handlerList list .
15054	get config dictionary element under STR0 key , if it exists substitute it for formatters , if not , formatters is EMPTY_DICT .
15055	for every name in formatters ,
15056	try ,
15057	call the method self.configure_filter with an argument value under name key of formatters dictionary , substitute the result for formatters dictionary value under name key .
15058	if StandardError , renamed to e , exception is caught ,
15059	raise an ValueError exception with an argument string STR0 formated with name and e .
15060	get config dictionary element under STR0 key , if it exists substitute it for filters , if not , filters is EMPTY_DICT .
15061	for every name in filters ,
15062	try ,
15063	call the method self.configure_filter with an argument value under name key of filters dictionary , substitute the result for filters dictionary value under name key .
15064	if StandardError , renamed to e , exception is caught ,
15065	raise an ValueError exception with an argument string STR0 formated with name and e .
15066	get config dictionary element under STR0 key , if it exists substitute it for handlers , if not , handlers is EMPTY_DICT .
15067	sort elements of handlers , for every name in result ,
15068	try ,
15069	call the method self.configure_handler with an argument value under name key of handlers dictionary , substitute the result for handler .
15070	substitute name for handler.name .
15071	substitute handler for value under name key of handlers dictionary .
15072	if StandardError , renamed to e , exception is caught ,
15073	raise an ValueError exception with an argument string STR0 formated with name and e .
15074	substitute logging.root for root .
15075	convert root.manager.loggerDict into a list , substitute it for existing .
15076	sort elements of list existing .
15077	child_loggers is an empty list .
15078	get config dictionary element under STR0 key , if it exists substitute it for loggers , if not , loggers is EMPTY_DICT .
15079	for every name in loggers ,
15080	if name is contained in existing ,
15081	get the index of first occurrence of name in existing , substitute it for i .
15082	append STR0 to name , substitute the result for prefixed .
15083	substitute length of prefixed for pflen .
15084	substitute length of existing for num_existing .
15085	increment i by integer 1 , substitute the result for i .
15086	while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed ,
15087	append i-th element of existing to child_loggers .
15088	increment i by integer 1 , substitute the result for i .
15089	remove name from existing .
15090	try ,
15091	call the method self.configure_logger with 2 arguments : name and value under loggers dictionary key name .
15092	if StandardError , renamed to e , exception is caught ,
15093	raise an ValueError exception with an argument string STR0 formated with name and e .
15094	for every log in existing ,
15095	get the value under log key of root.manager.loggerDict dictionary , substitute it for logger .
15096	if log is contained in child_loggers ,
15097	substitute logging.NOTSET for logger.level .
15098	logger.handlers is an empty list .
15099	logger.propagate is boolean True .
15100	otherwise if disable_existing is true ,
15101	logger.disabled is boolean True .
15102	get config dictionary element under STR0 key , if it exists substitute it for root , if not , root is None .
15103	if root is true ,
15104	try ,
15105	call the method self.configure_root with an argument root .
15106	if StandardError , renamed to e , exception is caught ,
15107	raise an ValueError exception with an argument string STR Unable to configure root logger : % s ' formated with e .
15108	finally perform ,
15109	call the method logging._releaseLock .
15110	define the method configure_formatter with 2 arguments : self and config .
15111	if string STR0 is contained in config ,
15112	substitute config dictionary value under STR0 key for factory .
15113	try ,
15114	call the method self.configure_custom with an argument config , substitute the result for result .
15115	if TypeError , renamed to te , exception is caught ,
15116	if string STR0 is not contained in e converted into a string ,
15117	raise an exception .
15118	remove config dictionary entry under STR0 key , substitute it for value under STR1 key of config dictionary .
15119	substitute factory for value under STR0 key of config dictionary .
15120	call the method self.configure_custom with an argument config , substitute the result for result .
15121	if not ,
15122	get config dictionary element under STR0 key , if it exists substitute it for fmt , if not , fmt is None .
15123	get config dictionary element under STR0 key , if it exists substitute it for dfmt , if not , dfmt is None .
15124	call the method logging.Formatter with 2 arguments : fmt and dfmt , substitute the result for result .
15125	return result .
15126	define the method configure_filter with 2 arguments : self and config .
15127	if string STR0 is contained in config ,
15128	call the method self.configure_custom with an argument config , substitute the result for result .
15129	if not ,
15130	remove config dictionary element under STR0 key , if it exists substitute it for name , if not , name is an empty string .
15131	call the method logging.Filter with an argument name , substitute the result for result .
15132	return result .
15133	define the method add_filters with 3 arguments : self , filterer and filters .
15134	for every f in filters ,
15135	try ,
15136	get the value under f key of dictionary under STR0 key of self.config dictionary , use the result as an argument for the call to the method filterer.addFilter .
15137	if StandardError , renamed to e , exception is caught ,
15138	raise an ValueError exception with an argument string STR0 formated with f and e .
15139	define the method configure_handler with 2 arguments : self and config .
15140	remove config dictionary element under STR0 key , if it exists substitute it for formatter , if not , formatter is None .
15141	if formatter is true ,
15142	try ,
15143	get the value under formatter key of dictionary under STR0 key of self.config dictionary , substitute the result for formatter .
15144	if StandardError , renamed to e , exception is caught ,
15145	raise an ValueError exception with an argument string STR0 formated with formatter and e .
15146	remove config dictionary element under STR0 key , if it exists substitute it for level , if not , level is None .
15147	remove config dictionary element under STR0 key , if it exists substitute it for filters , if not , filters is None .
15148	if string STR0 is contained in config ,
15149	remove config dictionary element under STR0 key , substitute it for c .
15150	if c doesnt have an attribute STR0 , and types has an attribute STR1 , and type of c is not equal to types.ClassType ,
15151	call the method self.resolve with an argument c , substitute the result for c .
15152	substitute c for factory .
15153	if not ,
15154	remove config dictionary element under STR0 key , use it as an argument for the call to the method self.resolve , substitute the result for klass .
15155	if klass is a subclass of logging.handlers.MemoryHandler base class and string STR0 is contained in config ,
15156	try ,
15157	get value under STR0 key of config dictionary , use it as a key to get the value from the dictionary , under the STR1 key of self.config dictionary , substitute the result for value under STR2 key of config dictioanry .
15158	if StandardError , renamed to e , exception is caught ,
15159	raise an ValueError exception with an argument string STR0 , formated with value under STR1 key of config dictionary and e .
15160	otherwise if klass is a subclass of logging.handlers.SMTPHandler and string STR0 is contained in config ,
15161	call the method self.as_tuple with an argument value under STR0 key of config dictionary , substitute the result for value under STR1 key of config dictionary .
15162	otherwise if klass is subclass of logging.handlers.SysLogHandler class , and string STR0 is contained in config ,
15163	call the method self.as_tuple with an argument value under STR0 key of config dictionary , substitute the result for value under STR1 key of config dictionary .
15164	substitute klass for factory .
15165	kwargs is a dictionary created with tuples with 2 elements : k and value under k key of config dictionary , for every k in config , only if result of the function valid_ident called with an argument k evaluates to true .
15166	try ,
15167	call the function factory with an argument unpacked dictionary kwargs , substitute the result for result .
15168	if TypeError , renamed to te , exception is caught ,
15169	if STR0 is not contained in te converted into a string ,
15170	raise an exception .
15171	remove element under STR0 key of kwargs dictionary , substitute the result for value under STR1 key of kwargs dictionary .
15172	call the function factory with an argument unpacked dictionary kwargs , substitute the result for result .
15173	if formatter is true ,
15174	call the method result.setFormatter with an argument formatter .
15175	if level is not None ,
15176	call function _checkLevel with an argument level , use the result as an argument for the method result.setLevel .
15177	if filters is true ,
15178	call the method self.add_filters with 2 arguments : result and filters .
15179	return result .
15180	define the method add_handlers with 3 arguments : self , logger and handlers .
15181	for every h in handlers ,
15182	try ,
15183	call the method logger.addHandler with an argument : h-th element of value under STR0 key of self.config dictionary .
15184	if StandardError , renamed to e , exception is caught ,
15185	raise an ValueError exception with an argument string STR0 formated with h and e .
15186	define the method common_logger_config with 4 arguments : self , logger , config and incremental set to boolean False .
15187	get value under the STR0 key of the config dictioanry , if it exists substitute it for level , if not level is None .
15188	if level is not None ,
15189	call the function _checkLevel with an argument level , use the result as an argument for the call to the method logger.setLevel .
15190	if incremental is true ,
15191	for every h in elements of logger.handlers list ,
15192	call the method logger.removeHandler with an argument h .
15193	get value under the STR0 key of the config dictioanry , if it exists substitute it for handlers , if not handlers is None .
15194	if handlers is true ,
15195	call the method self.add_handlers with 2 arguments : logger and handlers .
15196	get value under the STR0 key of the config dictioanry , if it exists substitute it for filters , if not filters is None .
15197	if filters is true ,
15198	call the method self.add_filters with 2 arguments : logger and filters .
15199	define the method configure_logger with 4 arguments : self , name , config , incremental set to boolean False .
15200	call the method logging.getLogger with an argument name , substitute the result for logger .
15201	call the method self.common_logger_config with 3 arguments : logger , config and incremental .
15202	get value under the STR0 key of the config dictioanry , if it exists substitute it for propagate , if not propagate is None .
15203	if propagate is not None ,
15204	substitute propagate for logger.propagate .
15205	define the method configure_root with 3 arguments : self , config and incremental set to boolean False .
15206	call the method logging.getLogger , substitute the result for root .
15207	call the method self.common_logger_config with 3 arguments : root , config and incremental .
15208	substitute DictConfigurator for dictConfigClass .
15209	define the function dictConfig with an argument config .
15210	call the method dictConfigClass with an argument config , call the method configure on the result .
15211	from __future__ import unicode_literals into default name space .
15212	import module codecs .
15213	import module datetime .
15214	from decimal import Decimal into default name space .
15215	import module locale .
15216	from django.utils.functional import Promise into default name space .
15217	from django.utils import six into default name space .
15218	from django.utils.six.moves.urllib.parse import quote into default name space .
15219	derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError .
15220	define the private method __init__ , with self instance of this class , obj and list of arbitrary length *args as arguments .
15221	assign obj to the obj field of self instance of this class .
15222	call the initialization method UnicodeDecodeError.__init__ , with self instance of this class and *args as arguments .
15223	define the private method __str__ , with self instance of this class as the only argument .
15224	call the method UnicodeDecodeError.__str__ , with self as the argument , substitute the result for original .
15225	in the string STR0 replace every % s with original and type of the object self.obj as strings , respectively , and replace % r with self.obj , return the result .
15226	define function python_2_unicode_compatible , with klass as an argument .
15227	if field PY2 of the module six is boolean True ,
15228	if string STR0 is not contained in __dict__ field of klass ,
15229	raise the exception ValueError , with string as argument , STR0 , STR1 , replace % s with string value of klass.__name__ .
15230	substitute __str__ filed of klass for __unicode__ field of klass .
15231	define lambda function with self class instance as the argument , lambda function body encapsulates the call to the method , str.__unicode__ ( ) .encode ( STR0 ) , call the lambda function and put the result in the __str__ filed of klass .
15232	return klass .
15233	define the function smart_text , with s , encoding set to string STR0 , strings_only set to False , errors set to STR1 as arguments .
15234	if s is instance of a class Promise ,
15235	return s .
15236	return the result of the call to the function force_text , with s , encoding , string_only and errors as arguments .
15237	_PROTECTED_TYPES is a tuple containing next elements , six.integer_types , type of None , type of float , Decimal , detetime.datetime , datetime.date and datetime.time .
15238	define the function is_protected_type with obj as the only argument .
15239	check if obj is instance of the object _PROTECTED_TYPES , return the boolean result .
15240	define the function force_text , with s , encoding set to STR0 , strings_only set to False , errors set to string STR1 as arguments .
15241	if s is the instance of the object six.text_type ,
15242	return s .
15243	if the boolean return vale of the call to the function is_protected_type ( s ) and string_onlys are boolean True ,
15244	return s .
15245	try ,
15246	if s is not an instance of the object six/string_types ,
15247	if PY3 filed of six is boolean True ,
15248	if s is an instance of object bytes ,
15249	call the function six.text_type with s , encoding and errors as the arguments , substitute the result for s .
15250	if not ,
15251	call the function six.text_type with s as an argument , substitute the result for s .
15252	otherwise , if s has an attribute STR0 ,
15253	call the function six.text_type with s as an argument , substitute result for s .
15254	if not ,
15255	call the function six.text_type with return value of the function bytes ( s ) , encoding and errors as the arguments , substitute the result for s .
15256	if not ,
15257	call the method s.decode with encoding and errors as the arguments , substitute the result for s .
15258	if an exception of the type UnicodeDecodeError , renamed to e , is caught ,
15259	if s is not an instance of the object Exception ,
15260	raise an exception DjingoUnicodeDecodeError , with s and list of arguments *args from object e , as the arguments .
15261	if not ,
15262	for every arg in s , call the function force_text with arg , encoding , strings_only and errors as arguments , join the result in a string separated by whitespaces , substitute it for s .
15263	return s .
15264	define function smart_bytes with s , encoding set to string STR0 , strings_only set to False and errors set to string STR1 , as arguments .
15265	if s is an instance of an object Promise .
15266	return s .
15267	evaluate the function force_bytes , with the arguments s , encoding , strings_only and errors , return the result .
15268	define function force_bytes with s , encoding set to STR0 , strings_only set to False and errors set to STR1 as arguments .
15269	if s is an instance of an object bytes .
15270	if encoding equals to string STR0 .
15271	return s .
15272	if not ,
15273	evaluate the method s.decode with string STR0 and errors as the arguments , on the result call the method encode with the arguments encoding and errors , return the result .
15274	if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True ,
15275	return s .
15276	if s is an instance of an object six.memoryview .
15277	evaluate the function bytes with the argument s , and return the result .
15278	if s is an instance of an object Promise .
15279	return six.text_type ( s ) .encode ( encoding , errors ) .
15280	if s is not an instance of the object six.string_types ,
15281	try ,
15282	if PY3 field of six is boolean True ,
15283	evaluate the method six.text_type ( s ) , on the result call the method encode with encoding as an argument , return the result .
15284	if not ,
15285	evaluate the function bytes with the argument s , and return the result .
15286	if the UnicodeEncodeError exception is caught ,
15287	if s is an instance of the subclass Exception ,
15288	for every arg in s , evaluate the function force_bytes for the arguments arg , encoding , strings_only and errors , put the results in a list , join the list elements in a string separated by whitespace separator , return the string as the bytes string .
15289	evaluate the method six.text_type ( s ) , on the result call the method encode with the arguments encoding and errors , return the result .
15290	if not ,
15291	evaluate the member method of s , encode with the encoding and errors as the arguments , return the result .
15292	if PY3 field of module six is boolean True ,
15293	substitute smart_text for smart_str .
15294	substitute force_text for force_str .
15295	if not ,
15296	substitute smart_bytes for smart_str .
15297	substitute force_bytes for force_str .
15298	substitute smart_text for smart_unicode .
15299	substitute force_text for force_unicode .
15300	define the function iri_to_uri with iri as an argument .
15301	if iri is not initialized ,
15302	return iri .
15303	call the function quote with return value of the evaluated function force_bytes ( iri ) , and with safe set to bytes string STR0 , return the result .
15304	define function filepath_to_uri with path as the argument .
15305	if path is not initialized ,
15306	return path .
15307	evaluate function force_bytes with path as the argument , replace all of the occurancies of the STR0 with STR1 in the resulting string , call the function quote with the result and with the safe set to bytes string STR2 , return the function result .
15308	define the function get_system_encoding without the input arguments .
15309	try ,
15310	evaluate the function getdefaultlocale from the module locale , if second element of return value exists assign it to encoding , otherwise assign string STR0 to encoding .
15311	call the method lookup with the encoding as the argument .
15312	if the Exception exception is caught ,
15313	substitute string STR0 for encoding .
15314	return encoding .
15315	evaluate the function get_system_encoding ( ) , substitute the return vale for DEFAULT_LOCALE_ENCODING .
15316	from __future__ import unicode_literals into default name space .
15317	import module datetime .
15318	from django.utils.xmlutils import SimplerXMLGenerator into default name space .
15319	from django.utils.encoding import force_text and iri_to_uri into default name space .
15320	from django.utils import datetime_safe into default name space .
15321	from django.utils import six into default name space .
15322	from django.utils.six import StringIO into default name space .
15323	from django.utils.six.moves.urllib.parse import urlparse into default name space .
15324	from django.utils.timezone import is_aware into default name space .
15325	define the function rfc2822_date with an argument date .
15326	months is a tuple with 12 elements : strings STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 and STR11 .
15327	days is a tuple with 7 elements : strings STR0 , STR1 , STR2 , STR3 , STR4 , STR5 and STR6 .
15328	call the method datetime_safe.new_datetime with an argument date , substitute the result for date .
15329	call the method date.weekday , use the result as an key to obtain the value from the days dictionary , substitute it for dow .
15330	decrement date.month by integer 1 , use the result as an key to obtain the value from the months dictionary , substitute it for month .
15331	call the function date.strftime with an argument string STR0 formated with dow and month , substitute the result for time_str .
15332	if six.PY2 is true ,
15333	call the method time_str.decode with an argument string STR0 , substitute the result for time_str .
15334	call the function is_aware with an argument date , if it evaluates to true ,
15335	call the method date.tzinfo.utcoffset with an argument date , substitute the result for offset .
15336	multiply offset.days , integer 24 and integer 60 , sum the result with floored result of dividing offset.seconds by integer 60 , substitute the result for timezone .
15337	divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute .
15338	format string STR0 with hour and minute , append it to time_str , return the result .
15339	if not ,
15340	append string STR0 to time_str , return the result .
15341	define the function rfc3339_date with an argument date .
15342	call the function datetime_safe.new_datetime with an argument date , substitute the result for date .
15343	call the function date.strftime with an argument string STR0 , substitute the result for time_str .
15344	if six.PY2 ,
15345	call the method time_str.decode with an argument string STR0 , substitute the result for time_str .
15346	call the function is_aware with an argument date , if it evaluates to true ,
15347	call the method date.tzinfo.utcoffset with an argument date , substitute the result for offset .
15348	multiply offset.days , integer 24 and integer 60 , sum the result with floored result of division of offset.seconds , and integer 60 , substitute the result for timezone .
15349	divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute .
15350	format string STR0 with hour and minute , append it to time_str , return the result .
15351	if not ,
15352	append STR0 to time_str , return the result .
15353	define the function get_tag_uri with 2 arguments : url and date .
15354	call the method urlparse with an argument url , substitute the result for bits .
15355	d is an empty string .
15356	if date is not None ,
15357	call the function datetime_safe.new_datetime with an argument date , on the result call the method strftime with an argument , string STR0 , convert the result into a string and append it to STR1 , substitute the result for d .
15358	format string STR0 with bits.hostname , d , bits.path and bits.fragment , return it .
15359	derive the class SyndicationFeed from the object base class .
15360	define the method __init__ with 15 elements : self , title , link , description , language set to None , author_email set to None , author_name set to None , author_link set to None , subtitle set to None , categories set to None , feed_url set to None , feed_copyright set to None , feed_guid set to None , ttl set to None and unpacked dictionary kwargs .
15361	to_unicode is an lambda function with an argument s , result is the result of the function force_text , called with 2 arguments : s and string_only as boolean True .
15362	if categories is true ,
15363	categories is a list containing the results of the function force_text , called with an argument c , for every c in categories .
15364	if ttl is not None ,
15365	call the function force_text with an argument ttl , substitute the result for ttl .
15366	self.feed is an dictionary with 13 initial entries , result of the function to_unicode called with an argument title for STR0 , result of the function iri_to_uri called with an argument link for STR1 , result of the function to_unicode called with an argument description for STR2 , result of the function to_unicode called with an argument language for STR3 , result of the function to_unicode called with an author_email description for STR4 , result of the function to_unicode called with an argument author_name for STR5 , result of the function iri_to_uri called with an argument author_link for STR6 , result of the function to_unicode called with an argument subtitle for STR7 , if true , categories is value for STR8 key , if not , empty tuple is value for STR9 key , result of the function iri_to_uri called with an argument feed_url for STR10 , result of the function to_unicode called with an argument feed_copyright for STR11 , if true , feed_guid is value for STR12 key , if not , lik is value for STR13 key and ttl for STR14 . update self.feed dictionary with kwargs .
15367	self.items is an empty list .
15368	define the method add_item with 17 arguments : self , title , link , description , author_email set to None , author_name set to None ,
15369	to_unicode is an lambda function with an argument s , result is the result of the function force_text ,
15370	called with 2 arguments : s and string_only as boolean True . if categories is true ,
15371	categories is a list containing the results of the function to_unicode , called with an argument c , for every c in categories .
15372	if ttl is not None ,
15373	call the function force_text with an argument ttl , substitute the result for ttl .
15374	item is a dictionary with 15 initial entries : result of the function to_unicode called with an argument title for STR0 ,
15375	result of the function iri_to_uri called with an argument link for STR0 , result of the function to_unicode called with an argument description for STR1 , result of the function to_unicode called with an argument author_email for STR2 , result of the function to_unicode called with an argument author_name for STR3 , result of the function iri_to_uri called with an author_link link for STR4 , pubdate for STR5 , updateddate for STR6 , result of the function to_unicode called with an comments author_name for STR7 , result of the function to_unicode called with an argument unique_id ) for STR8 , unique_id_is_permalink for STR9 , enclosure for STR10 , if true , categories is value for STR11 key , if not , empty tuple is value for STR12 key , result of the function to_unicode called with an argument item_copyright for STR13 , ttl for STR14 .
15376	update dictionary item with an argument kwargs .
15377	append item to self.items .
15378	define the method num_items with an argument self .
15379	return length of self.items .
15380	define the method root_attributes with an argument self .
15381	return an empty dictionary .
15382	define the method add_root_elements with 2 arguments self and handler .
15383	do nothing .
15384	define the method item_attributes with 2 arguments self and item .
15385	return an empty dictionary .
15386	define the method add_item_elements with 2 arguments , handler self and item .
15387	do nothing .
15388	define the method write with 3 arguments self , outfile and encoding .
15389	raise an NotImplementedError with an argument string STR0 .
15390	define the method writeString with 2 arguments self and encoding .
15391	s is an instance of StringIO class .
15392	call the method self.write with 2 arguments : s and encoding .
15393	call the method s.getvalue , return the result .
15394	define the method latest_post_date with an argument self .
15395	latest_date is None .
15396	date_keys is a tuple with 2 arguments : strings STR0 and STR1 .
15397	for every item in self.items ,
15398	for every date_key in date_keys ,
15399	get the value under the date_key key of the item dictionary , substitute it for item_date .
15400	if item_date is true ,
15401	if latest_date is None or item_date is greater than latest_date ,
15402	substitute item_date for latest_date .
15403	if latest_date is true , return it , if not , call the method datetime.datetime.now and return the result .
15404	derive the class Enclosure from the object base class .
15405	define the method __init__ with 4 arguments : self , url , length and mime_type .
15406	substitute length and mime_type for self.length and self.mime_type .
15407	call the function iri_to_uri with an argument url , substitute the result for self.url .
15408	derive the class RssFeed from the SyndicationFeed base class .
15409	mime_type is a string STR0 .
15410	define the method write with 3 arguments : self , outfile and encoding .
15411	handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding .
15412	call the method handler.startDocument .
15413	call the method handler.startElement with 2 arguments : string STR0 and result of the method self.rss_attributes .
15414	call the method handler.startElement with 2 arguments : string STR0 and result of the method self.root_attributes .
15415	call the method self.add_root_elements with an argument handler .
15416	call the method self.write_items with an argument handler .
15417	call the method self.endChannelElement with an argument handler .
15418	call the method handler.endElement with an argument string STR0 .
15419	define the method rss_attributes with an argument self .
15420	return a dictionary with 2 elements : self._version for STR0 and STR1 for STR2 .
15421	define the method write_items with 2 arguments : self and handler .
15422	for every item in self.items ,
15423	call the method handler.startElement with 2 arguments : string STR0 and result of the method self.item_attributes with an argument item .
15424	call the method self.add_item_elements with 2 arguments : handler and item .
15425	call the method handler.endElement with an argument string STR0 .
15426	define the method add_root_elements with 2 arguments : self and handler .
15427	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15428	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15429	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15430	if value under the STR0 key of the self.feed dictionary is not None ,
15431	call the method handler.addQuickElement with 3 arguments : string STR0 , None and dictionary with 2 entries : STR1 for STR2 , value under the STR3 key of the self.feed dictionary for STR4 .
15432	if value under the STR0 key of the self.feed dictionary is not None ,
15433	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15434	for every cat in value under the STR0 key of the self.feed dictionary .
15435	call the method handler.addQuickElement with 2 arguments : string STR0 and cat .
15436	if value under the STR0 key of the self.feed dictionary is not None ,
15437	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15438	call the method handler.addQuickElement with 2 arguments : string STR0 and result of the function rfc2822_date , called with an argument result of the method self.latest_post_date .
15439	if value under the STR0 key of the self.feed dictionary is not None ,
15440	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15441	define the method endChannelElement with 2 arguments : self and handler .
15442	call the method handler.endElement with an argument string STR0 .
15443	derive the class RssUserland091Feed from the RssFeed base class .
15444	_version is a string STR0 .
15445	define the method add_item_elements with 3 arguments : self , handler and item .
15446	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15447	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15448	if value under the STR0 key of the item dictionary is not None ,
15449	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of item dictionary .
15450	derive the class Rss201rev2Feed from the RssFeed base class .
15451	_version is a string STR0 .
15452	define the method add_item_elements with 3 arguments : self , handler and item .
15453	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15454	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15455	if value under the STR0 key of the item dictionary is not None ,
15456	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15457	if values under STR0 and STR1 keys of the item dictionary are both true ,
15458	call the method handler.addQuickElement with an argument string STR0 , STR1 , formated with values under the STR2 and STR3 keys of item dictionary .
15459	otherwise if value under the STR0 key of the item dictionary is true ,
15460	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15461	otherwise if value under the STR0 key of the item dictionary is true ,
15462	call the method handler.addQuickElement with 3 arguments : string STR2 , value under the STR3 key of the item dictionary and dictionary with an entry : STR0 for STR1 .
15463	if value under the STR0 key of the item dictionary is not None ,
15464	call the method handler.addQuickElement with 2 arguments : string STR0 and result of the function rfc2822_date , called with value under the STR1 key of the item dictionary .
15465	if value under the STR0 key of the item dictionary is not None ,
15466	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15467	if value under the STR0 key of the item dictionary is not None ,
15468	guid_attrs is an empty dictionary .
15469	if value object the STR0 key of the item dictionary is an instance of bool type ,
15470	covert to string value under the STR0 key of the item dictionary , convert it to lowercase , substitute the result for value under the STR1 key of the guid_attrs dictionary .
15471	call the method handler.addQuickElement with 3 arguments : string STR0 , value under the STR1 key of the item dictionary , and guid_attrs .
15472	if value under the STR0 key of the item dictionary is not None ,
15473	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15474	if value under the STR0 key of the item dictionary is not None ,
15475	call the method handler.addQuickElement with 3 arguments : string STR0 , an empty string and a dictionary with 3 entries : field url of the value under the STR1 key of the item dictionary for STR2 , field length of the value under the STR3 key of the item dictionary for STR4 , and field mime_type of the value under the STR5 key of the item dictionary for STR6 .
15476	for every cat in value under the STR0 key of the item dictionary ,
15477	call the method handler.addQuickElement with 2 arguments : string STR0 and cat .
15478	derive the class Atom1Feed from the SyndicationFeed base class .
15479	mime_type is a string STR0 .
15480	ns is a string STR0 .
15481	define the method write with 3 arguments : self , outfile and encoding .
15482	handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding .
15483	call the method handler.startDocument .
15484	call the method handler.startElement with 2 arguments : string STR0 and result of the method self.root_attributes .
15485	call the method self.add_root_elements with an argument handler .
15486	call the method self.write_items with an argument handler .
15487	call the method handler.endElement with an argument string STR0 .
15488	define the method root_attributes with an argument self .
15489	if value under the STR0 key of the self.feed dictionary is not None ,
15490	return a dictionary with 2 entries : value under the STR2 key of the self.feed dictionary for STR0 , and self.ns for STR1 .
15491	if not ,
15492	return a dictionary with an entry : self.ns for STR0 .
15493	define the method add_root_elements with 2 arguments : self and handler .
15494	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15495	call the method handler.addQuickElement with 3 arguments : string STR0 , an empty string and a dictionary with 2 entries : STR1 for STR2 and value under the STR3 key of self.feed dictionary for STR4 .
15496	if value under the STR0 key of the self.feed dictionary is not None ,
15497	call the method handler.addQuickElement with 3 arguments : string STR0 , an empty string and a dictionary with 2 entries : STR1 for STR2 and value under the STR3 key of self.feed dictionary for STR4 .
15498	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15499	call the method handler.addQuickElement with 2 arguments : string STR0 and result of the function rfc3339_date , called with an argument result of the method self.latest_post_date .
15500	if value under the STR0 key of the self.feed dictionary is not None ,
15501	call the method handler.startElement with 2 arguments : string STR0 and an empty dictionary .
15502	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15503	if value under the STR0 key of the self.feed dictionary is not None ,
15504	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15505	if value under the STR0 key of the self.feed dictionary is not None ,
15506	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15507	call the method handler.endElement with an argument string STR0 .
15508	if value under the STR0 key of the self.feed dictionary is not None ,
15509	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15510	for every cat in value under the STR0 key of the self.feed dictionary .
15511	call the method handler.addQuickElement with 3 arguments : string STR0 , an empty string and a dictionary with an entry : cat for STR1 .
15512	if value under the STR0 key of the self.feed dictionary is not None ,
15513	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the self.feed dictionary .
15514	define the method write_items with 2 arguments : self and handler .
15515	for every item in self.items ,
15516	call the method handler.startElement with 2 arguments : string STR0 and result of the function self.item_attributes , called with an argument item .
15517	call the method self.add_item_elements with 2 arguments : handler and item .
15518	call the method handler.endElement with an argument string STR0 .
15519	define the method add_item_elements with 3 arguments : self , handler and item .
15520	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15521	call the method handler.addQuickElement with 3 arguments : string STR2 , an empty string and a dictionary with 2 entries : value under the STR3 key of item dictionary for STR4 and STR0 for STR1 .
15522	if value under the STR0 key of the item dictionary is not None ,
15523	call the method handler.addQuickElement with 2 arguments : string STR0 and result of the function rfc3339_date , called with an argument value under the STR1 key of the item dictionary .
15524	if value under the STR0 key of the item dictionary is not None ,
15525	call the method handler.addQuickElement with 2 arguments : string STR0 and result of the function rfc3339_date , called with an argument value under the STR1 key of the item dictionary .
15526	if value under the STR0 key of the item dictionary is not None ,
15527	call the method handler.endElement with 2 arguments : string STR0 and an empty dictionary .
15528	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15529	if value under the STR0 key of the item dictionary is not None ,
15530	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15531	if value under the STR0 key of the item dictionary is not None ,
15532	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15533	call the method handler.endElement with an argument string STR0 .
15534	if value under the STR0 key of the item dictionary is not None ,
15535	substitute value under STR0 key of item dictionary for unique_id .
15536	if not ,
15537	call the function get_tag_uri with 2 arguments : values under STR0 and STR1 keys of item dictionary , substitute the result for unique_id .
15538	call the method handler.addQuickElement with 2 arguments : string STR0 and unique_id .
15539	if value under the STR0 key of the item dictionary is not None ,
15540	call the method handler.addQuickElement with 3 arguments : string STR0 , value under the STR1 key of item dictionary , and dictionary with an entry : STR2 for STR3 .
15541	if value under the STR0 key of the item dictionary is not None ,
15542	call the method handler.addQuickElement with 3 arguments : string STR4 , an empty string and a dictionary with 4 entries : STR0 for STR5 , field url of value under the STR1 key of item dictionary for STR6 , field length of value under the STR2 key of item dictionary for STR7 , and field mime_type of value under the STR3 key of item dictionary for STR8 .
15543	for every cat in value under STR0 key of item dictionary ,
15544	call the method handler.addQuickElement with 3 arguments : string STR0 , an empty string and a dictionary with an entry : cat for STR1 .
15545	if value under the STR0 key of the item dictionary is not None ,
15546	call the method handler.addQuickElement with 2 arguments : string STR0 and value under the STR1 key of the item dictionary .
15547	substitute Rss201rev2Feed for DefaultFeed .
15548	from __future__ import absolute_ into default name space .
15549	import module decimal .
15550	import module datetime .
15551	from importlib import import_module into default name space .
15552	import module unicodedata .
15553	from django.conf import settings into default name space .
15554	from django.utils import dateformat , numberformat and datetime_safe into default name space .
15555	from django.utils.encoding import force_str into default name space .
15556	from django.utils.functional import lazy into default name space .
15557	from django.utils.safestring import mark_safe into default name space .
15558	from django.utils import six into default name space .
15559	from django.utils.translation import get_language , to_locale and check_for_language into default name space .
15560	_format_cache is an empty dictionary .
15561	_format_modules_cache is an empty dictionary .
15562	ISO_INPUT_FORMATS is a dictionary with 3 entries : tuple with an element string STR0 for STR1 , tuple with 3 elements : strings STR2 , STR3 and STR4 for STR5 , tuple with 4 elements : strings STR6 , STR7 , STR8 and STR9 for STR10 .
15563	define the function reset_format_cache .
15564	use global variables _format_cache and _format_modules_cache .
15565	_format_cache is an empty dictionary .
15566	_format_modules_cache is an empty dictionary .
15567	define the function iter_format_modules with 2 arguments : lang and format_module_path set to None .
15568	call the function check_for_language with an argument lang , if it evaluates to false ,
15569	return nothing .
15570	if format_module_path is None .
15571	substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH .
15572	format_locations is an empty list .
15573	if format_module_path is true ,
15574	if format_module_path is an instance of six.string_types ,
15575	format_module_path is a list containing an element format_module_path .
15576	for every path in format_module_path ,
15577	concatenate path and string STR0 , append the result to format_module_path .
15578	append string STR0 to format_locations .
15579	call the function to_locale with an argument lang , substitute the result for locale .
15580	locales is a list with an element locale .
15581	if STR0 is contained in locale ,
15582	split locale by STR0 , append the first element of the result to locales .
15583	for every location in format_locations ,
15584	for every loc in locales ,
15585	try ,
15586	call the function import_module with an argument string STR0 formated with location , which is formated with loc , yield the result .
15587	if ImportError exception is caught ,
15588	do nothing .
15589	define the function get_format_modules with 2 arguments : lang set to None and reverse set to boolean False .
15590	if lang is None ,
15591	call the function get_language , substitute the result for lang .
15592	call the method _format_modules_cache.setdefault with 2 arguments : lang and list created out of the results of the function , iter_format_modules called with 2 arguments : lang and settings.FORMAT_MODULE_PATH , substitute the result for modules .
15593	if reverse is true ,
15594	reverse the order of modules elements , put them into a list , return it .
15595	return modules.s
15596	define the function get_format with 3 arguments : format_type , lang set to None and use_l10n set to None .
15597	call the function force_str with an argument format_type , substitute the result for format_type .
15598	if use_l10n is true , or if use_l10n is None and settings.USE_L10N is true ,
15599	if lang is None ,
15600	call the function get_language , substitute the result for lang .
15601	cache_key is a tuple with 2 argumetns : format_type and lang .
15602	try ,
15603	substitute value under the cache_key key of the _format_cache dictionary for cached .
15604	if cached is not None ,
15605	return cached .
15606	if not ,
15607	get format_type attribute of the settings object , return it .
15608	if KeyError exception is caught ,
15609	call the function get_format_modules with an argument lang , for every module in the result ,
15610	try ,
15611	get format_type attribute of module object , substitute the result for val .
15612	get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary , if it doesnt exists return an empty tuple ,
15613	for every iso_input in the result , if iso_input is not contained in val ,
15614	if val is an instance of tuple ,
15615	convert val to an list , substitute it for val .
15616	append iso_input to val .
15617	substitute val for the value under the cache_key key of the _format_cache dictionary .
15618	return val .
15619	if AttributeError exception is caught ,
15620	do nothing .
15621	value under the cache_key key of the _format_cache dictionary is None .
15622	get format_type attribute of the settings object , return it .
15623	call the function lazy with 4 arguments : get_format , six.text_type , list and tuple , substitute the result for get_format_lazy .
15624	define the function date_format with 3 arguments : value , format set to None and use_l10n set to None .
15625	call the function dateformat.format with 2 arguments : value and result of the function get_format called with 2 arguments : format , if its true , otherwise string STR0 and use_l10n as use_l10n , return the result .
15626	define the function time_format with 3 arguments : value , format set to None and use_l10n set to None .
15627	call the function dateformat.time_format with 2 arguments : value and result of the function get_format called with 2 arguments : format , if its true , otherwise string STR0 and use_l10n as use_l10n , return the result .
15628	define the function number_format with 4 arguments : value , decimal_pos set to None , use_l10n set to None ,
15629	if use_l10n is true , or use_l10n is None and settings.USE_L10N is true ,
15630	call the function get_language , substitute the result for lang .
15631	if not ,
15632	lang is None .
15633	call the method numberformat.format with 6 arguments : value , result of the function get_format called with 3 arguments : string STR0 , lang and use_l10n set to use_l10n , decimal_pos , result of the function get_format called with 3 arguments : string STR1 , lang and use_l10n as use_l10n , result of the function get_format called with an argument : string STR2 , lang and use_l10n as use_l10n and force_grouping as force_grouping , return the result .
15634	define the function localize with 2 arguments value and use_l10n set to None .
15635	if value is an instance of bool .
15636	call the function six.text_type with an argument value , use the result as an argument for the call to the function mark_safe , return the result .
15637	otherwise if value is an instance of decimal.Decimal , float or six.integer_types ,
15638	call the function number_format with 2 arguments : value and use_l10 as use_l10n , return the result .
15639	otherwise if value is an instance of datetime.datetime ,
15640	call the function date_format with 2 arguments : value , string STR0 and use_l10n as use_l10n , return the result .
15641	otherwise if value is an instance of datetime.date ,
15642	call the function date_format with 2 arguments : value and use_l10n as use_l10n , return the result .
15643	otherwise if value is an instance of datetime.time ,
15644	call the function time_format with 3 arguments : value , string STR0 and use_l10n as use_l10n , return the result .
15645	if not ,
15646	return value .
15647	define the function localize_input with 2 arguments value and default set to None .
15648	otherwise if value is an instance of decimal.Decimal , float or six.integer_types ,
15649	call the function number_format with an argument value , return the result .
15650	otherwise if value is an instance of datetime.datetime ,
15651	call the method datetime_safe.new_datetime with an argument value , substitute the result for value .
15652	call the function force_str with an argument : default if it is true , or if not , first element of the result of the function , get_format called with an argument string STR0 , substitute the result for format .
15653	call the method value.strftime with an argument format , return the result .
15654	otherwise if value is an instance of datetime.date ,
15655	call the method datetime_safe.new_date with an argument value , substitute the result for value .
15656	call the function force_str with an argument : default if it is true , or if not , first element of the result of the function , get_format called with an argument string STR0 , substitute the result for format .
15657	call the method value.strftime with an argument format , return the result .
15658	otherwise if value is an instance of datetime.time ,
15659	call the function force_str with an argument : default if it is true , or if not , first element of the result of the function , get_format called with an argument string STR0 , substitute the result for format .
15660	call the method value.strftime with an argument format , return the result .
15661	return value .
15662	define the function sanitize_separators with an argument value .
15663	if settings.USE_L10N is true and value is an instance of six.string_types ,
15664	parts is an empty list .
15665	call the function get_format with an argument string STR0 , substitute the result for decimal_separator .
15666	if decimal_separator is contained in value ,
15667	split value into two parts by decimal_separator , assign the result to value and decimals .
15668	append decimals to parts .
15669	if settings.USE_THOUSAND_SEPARATOR is true ,
15670	call the function get_format with an argument string STR0 , substitute the result for thousand_sep .
15671	call the function unicodedata.normalize with 2 arguments : string STR0 and thousand_sep , put the result and thousand_sep into a set ,
15672	for every replacement in the resulting set , replace every occurrence of replacement in value for an empty string , substitute the result for value .
15673	append value to parts .
15674	reverse order of parts , join them into a string , separated with STR0 , substitute the result for value .
15675	return value .
15676	import module copy .
15677	import module opera .
15678	from functools import wraps into default name space .
15679	import module sys .
15680	import module warnings .
15681	from django.utils import six into default name space .
15682	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
15683	from django.utils.six.moves import copyreg into default name space .
15684	define the function curry with 3 arguments : _curried_func , unpacked list args and unpacked dictionary kwargs .
15685	define the function _curried with 2 arguments : unpacked list moreargs and unpacked dictionary morekwargs .
15686	call the function _curried_func with 2 arguments : list moreargs appended to args and unpacked , unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping , return the result .
15687	return _curried .
15688	define the function memoize with 3 arguments : func , cache and num_args .
15689	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to integer 2 .
15690	decorator function wraps with an argument func .
15691	define the function wrapper with an argument unpacked list args .
15692	mem_args is a list containing of first num_args elements of args list .
15693	if mem_args is contained in cache ,
15694	get the value under the mem_args key of the cache dictionary , return it .
15695	call the function func with an argument unpacked list args , substitute the result for result .
15696	substitute result for value under the mem_args key of the cache dictionary .
15697	return result .
15698	return wrapper .
15699	derive the class cached_property from the object base class .
15700	define the method __init__ with 3 arguments : self , func and name set to None .
15701	substitute func for self.func .
15702	if name is true , substitute it for self.name , otherwise substitute func.__name__ for self.name .
15703	define the method __get__ with 3 arguments : self , instance and name type to None .
15704	if instance is None ,
15705	return self .
15706	call the function self.func with an argument instance , substitute the result for res and value under the self.name key of the instance.__dict__ dictionary .
15707	return res .
15708	derive the class Promise from the object base class .
15709	do nothing .
15710	define the function lazy with 2 arguments : func and unpacked list resultclasses .
15711	decorator total_ordering ,
15712	derive the class __proxy__ from the Promise base class .
15713	__dispatch is None .
15714	define the method __init__ with 3 arguments : self , args and kw .
15715	substitute args for self.__args .
15716	substitute kw for self.__kw .
15717	if self.__dispatch is None .
15718	call the method self.__prepare_class__ .
15719	define the method __reduce__ with an argument self .
15720	return a tuple wit 2 elements : _lazy_proxy_unpickle and tuple with 3 elements : func , self.__args , self.__kw and resultclasses .
15721	classmethod decorator ,
15722	define the method __prepare_class__ with an argument self .
15723	cls.__dispatch is an empty dictionary .
15724	for every resultclass in resultclasses ,
15725	value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary .
15726	call the method resultclass.mro , reverse the order of elements , for every type_ in the result .
15727	for every k and v in result of the call to the method type_.__dict__.items ,
15728	call the method cls.__promise__ with 3 arguments : resultclass , k and v , substitute the result for meth .
15729	if cls has an attribute k ,
15730	skip this loop iteration ,
15731	set k attribute of cls object to meth .
15732	if bytes is contained in resultclasses , cls._delegate_bytes is boolean True , otherwise it is boolean False .
15733	if six.text_type is contained in resultclasses , cls._delegate_text is boolean True , otherwise it is boolean False .
15734	if cls._delegate_bytes and cls._delegate_text are both false , raise an error , with an argument string STR0 .
15735	if cls._delegate_text is true ,
15736	if six.PY3 is true ,
15737	substitute cls.__text_cast for cls.__str__ .
15738	if not ,
15739	substitute cls.__text_cast for cls.__text_cast .
15740	otherwise if cls._delegate_bytes is true ,
15741	if six.PY3 is true ,
15742	substitute cls.__bytes_cast for cls.__bytes__ .
15743	if not ,
15744	substitute cls.__bytes_cast for cls.__str__ .
15745	class method decorator ,
15746	define the method __promise__ with 4 arguments : cls , klass , funcname and method .
15747	define the method __wrapper__ with 3 arguments : self , unpacked list args and unpacked dictionary kw .
15748	call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw , substitute the result for res .
15749	get the type of res , call the method mro on the result , for every t in the result ,
15750	if t is contained in self.__dispatch ,
15751	get the value under the funcname key of the t-th elment of self.__dispatch dictionary , call the result with 3 arguments : res , unpacked list args and unpacked dictionary kw , return the result .
15752	raise an TypeError exception with an argument sting STR0 .
15753	if klass is not contained in cls.__dispatch ,
15754	value under the klass key of the cls.__dispatch dictionary is an empty dictionary .
15755	substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary .
15756	return __wrapper__ .
15757	define the method __text_cast with an argument self .
15758	call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw , return the result .
15759	define the method __bytes_cast with an argument self .
15760	call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw , use the result as an argument for the call to the function bytes , return the result .
15761	define the method __cast with an argument self .
15762	if self._delegate_bytes is true ,
15763	call the method self.__bytes_cast , return the result .
15764	otherwise if self._delegate_text is true ,
15765	call the method self.__text_cast , return the result .
15766	if not ,
15767	call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw , return the result .
15768	define the method __ne__ with 2 arguments : self and other .
15769	if other is an instance of Promise class ,
15770	call the method other.__cast , substitute the result for other .
15771	call the method self.__cast , if the result doesnt equal to other , return boolean True , otherwise return boolean False .
15772	define the method __ne__ with 2 arguments : self and other .
15773	if other is an instance of Promise class ,
15774	call the method other.__cast , substitute the result for other .
15775	call the method self.__cast , if the result equals other , return boolean True , otherwise return boolean False .
15776	define the method __lt__ with 2 arguments : self and other .
15777	if other is an instance of Promise ,
15778	call the method other.__cast , substitute the result for other .
15779	call the method self.__cast , if the result is lesser than other , return boolean True , otherwise return boolean False .
15780	define the method __hash__ with an argument self .
15781	call the method self.__cast , return the hash value of the result .
15782	define the method __mod__ with 2 arguments : self and rhs .
15783	if self._delegate_bytes and six.PY2 are both true ,
15784	call the function bytes with an argument self , divide the result with rhs and return the reminder of the division .
15785	otherwise if self._delegate_text is true ,
15786	call the function six.text_type with an argument self , divide the result with rhs and return the reminder of the division .
15787	call the function sself.__cast with an argument self , divide the result with rhs and return the reminder of the division .
15788	define the method __deepcopy__ with 2 arguments : self and memo .
15789	get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
15790	return self .
15791	decorator function wraps with an argument func .
15792	define the function __wrapper__ with 2 arguments : unpacked list args and unpacked dictionary kw .
15793	call the function __proxy__ with 2 arguments : args and kw , return the result .
15794	return __wrapper__ .
15795	define the function _lazy_proxy_unpickle with 4 arguments : func , args , kwargs and unpacked list resultclasses .
15796	call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
15797	define the function allow_lazy with 2 arguments : func and unpacked list resultclasses .
15798	decorator function wraps with an argument func .
15799	define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwargs .
15800	call the function six.itervalues with an argument kwargs , convert the result to a list and append it to a list containing args ,
15801	for every arg in the result , if arg is an instance of Promise class ,
15802	break from the loop execution ,
15803	if not ,
15804	call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs .
15805	call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args , and unpacked dictionary kwargs , return the result .
15806	return wrapper .
15807	empty is an instance of object class .
15808	define the function new_method_proxy with an argument func .
15809	define the method inner with 2 arguments : self and unpacked list args .
15810	if self._wrapped is contained in empty ,
15811	call the method self._setup .
15812	call the function func with 2 arguments : self._wrapped and unpacked list args .
15813	self._wrapped .
15814	derive the class LazyObject from the object base class .
15815	_wrapped is None .
15816	define the method __init__ with an argument self .
15817	substitute empty for self._wrapped .
15818	call the function new_method_proxy with an argument getattr , substitute the result for __getattr__ .
15819	define the method __setattr__ with 3 arguments : self , name and value .
15820	if name equals string STR0 ,
15821	substitute value under the STR0 key of the self.__dict__ dictionary .
15822	if not ,
15823	if self._wrapped is empty ,
15824	call the method self._setup .
15825	set name attribute of self._wrapped object to value .
15826	define the method __delattr__ with 2 arguments self and name .
15827	if name equals string STR0 ,
15828	raise an TypeError exception with an argument sting STR0 .
15829	if self._wrapped is empty ,
15830	call the method self._setup .
15831	delete name attribute from self._wrapped object .
15832	define the method _setup with an argument self .
15833	raise an NotImplementedError exception with an argument sting STR0 .
15834	define the method __getstate__ with an argument self .
15835	if self._wrapped is empty ,
15836	call the method self._setup .
15837	return self._wrapped.__dict__ .
15838	classmethod decorator ,
15839	define the method __newobj__ with 2 arguments cls and unpacked list args .
15840	call the method cls.__new__ with 2 arguments : cls and unpacked list args .
15841	define the method __reduce_ex__ with 2 arguments self and proto .
15842	if proto is greater than or equal to integer 2 ,
15843	return a tuple with 3 elements : self.__newobj__ , tuple with an element self.__class__ and result of the method self.__getstate__ .
15844	if not ,
15845	return a tuple with 3 elements : copyreg._reconstructor , tuple with 3 elements : self.__class__ , object and None , and result of the method self.__getstate__ .
15846	define the method __deepcopy__ with 2 arguments self and memo .
15847	if self._wrapped is empty ,
15848	get type of self , call it and substitute the result for result .
15849	get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
15850	return result .
15851	call the method copy.deepcopy with 2 arguments : self._wrapped and memo , return the result .
15852	if six.PY3 is true ,
15853	call the function new_method_proxy with an argument bytes , substitute the result for __bytes__ .
15854	call the function new_method_proxy with an argument str , substitute the result for __str__ .
15855	call the function new_method_proxy with an argument bool , substitute the result for __bool__ .
15856	if not ,
15857	call the function new_method_proxy with an argument str , substitute the result for __str__ .
15858	call the function new_method_proxy with an argument unicode , substitute the result for __unicode__ .
15859	call the function new_method_proxy with an argument bool , substitute the result for __nonzero__ .
15860	call the function new_method_proxy with an argument dir , substitute the result for __dir__ .
15861	cal the method operator.attrgetter with an argument string STR0 , use the result as an argument for the call to the function , new_method_proxy , __class__ is an property object created with previous result as an argument .
15862	call the function new_method_proxy with an argument operator.eq , substitute the result for __eq__ .
15863	call the function new_method_proxy with an argument operator.ne , substitute the result for __ne__ .
15864	call the function new_method_proxy with an argument hash , substitute the result for __hash__ .
15865	call the function new_method_proxy with an argument operator.getitem , substitute the result for __getitem__ .
15866	call the function new_method_proxy with an argument operator.setitem , substitute the result for __setitem__ .
15867	call the function new_method_proxy with an argument operator.delitem , substitute the result for __delitem__ .
15868	call the function new_method_proxy with an argument len , substitute the result for __len__ .
15869	call the function new_method_proxy with an argument operator.contains , substitute the result for __contains__ .
15870	substitute super for _super .
15871	derive the class SimpleLazyObject from the LazyObject base class .
15872	define the method __init__ with 2 arguments self and func .
15873	substitute func for value under the STR0 key of the self.__dict__ dictionary .
15874	call the function _super with 2 arguments : class SimpleLazyObject and self , call the method __init__ on the result .
15875	define the method _setup with an argument self .
15876	call the method self._setupfunc , substitute the result for self._wrapped .
15877	define the method __repr__ with an argument self .
15878	if self._wrapped is empty ,
15879	substitute self._setupfunc for repr_attr .
15880	if not ,
15881	substitute self._wrapped for repr_attr .
15882	return a string STR0 , format it with __name__ field of the self class and repr_attr .
15883	define the method __deepcopy__ with 2 arguments self and memo .
15884	if self._wrapped is empty ,
15885	result is an instance of SimpleLazyObject class , created with an argument self._setupfunc .
15886	get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
15887	return result .
15888	call the method copy.deepcopy with 2 arguments : self._wrapped and memo , return the result .
15889	derive the class lazy_property from the property base class .
15890	define the method __new__ with 5 arguments : cls , fget set to None , fset set to None , fdel set to None and doc set to None .
15891	if fget is not None ,
15892	decorator function wraps with an argument fget .
15893	define the function fget with 3 arguments : instance , instance_type set to None and name set to fget.__name__ .
15894	get name attribute from the instance object , call it and return the result .
15895	if fset is not None ,
15896	decorator function wraps with an argument fset .
15897	define the function fset with 3 arguments : instance , valse to None and name set to fset.__name__ .
15898	get name attribute from the instance object , call it with an argument value and return the result .
15899	if fdel is not None ,
15900	decorator function wraps with an argument fdel .
15901	define the function fdel with 2 arguments : instance and name set to fdel.__name__ .
15902	get name attribute from the instance object , call it and return the result .
15903	return an property object with getter function fget , setter function fset , destructor fdel and documentation string doc .
15904	define the function partition with 2 arguments : predicate and values .
15905	results is a tuple with 2 elements , 2 empty lists .
15906	for every item in values ,
15907	call the function predicate with an argument item , use it as a key to get results dictionary value , append item to it .
15908	return results .
15909	if sys.version_info is greater than or equal to a tuple with 3 elements : integers 2 , 7 and 2 , respectively ,
15910	from functools import total_ordering .
15911	if not ,
15912	define the function total_ordering with an argument cls .
15913	convert is a dictionary with 4 initial entries : list with 3 tuples : tuple with 2 elements : string STR0 , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other or self is equal to other , tuple with 2 elements : string STR1 , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than other or self is equal to other , tuple with 2 elements : string STR2 , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other , for STR3 , list with 3 tuples : tuple with 2 elements : string STR4 , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , or self is equal to other , tuple with 2 elements : string STR5 , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than or equal to other , or self is not equal to other , tuple with 2 elements : string STR6 , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , for STR7 , list with 3 tuples : tuple with 2 elements : string STR8 , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other or self is equal to other , tuple with 2 elements : string STR9 , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than other or self is equal to other , tuple with 2 elements : string STR10 , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other , for STR11 , and list with 3 tuples : tuple with 2 elements : string STR12 , and lambda function with 2 arguments : self and other , resulting boolean True if self is not greater than or is not equal to other , or self is equal to other , tuple with 2 elements : string STR13 , and lambda function with 2 arguments : self and other , resulting boolean True if self is great15914	er than or not equal to other , or self is not equal to other , tuple with 2 elements : string STR14 , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than or equal to other , for STR15 ,
15915	convert cls to a dictionary , convert the result into a set and convert convert into a set , roots is a set of differences of the two previous sets .
15916	if roots is false ,
15917	raise an ValueError exception with an argument string STR0 .
15918	get maximal element from roots and substitute it for root .
15919	get the value under the root key of the convert dictionary , for every opname and opfunc in the result ,
15920	if opname is not contained in roots ,
15921	substitute opname for opfunc.__name__ .
15922	get opname attribute from int object , substitute its field __doc__ for opfunc.__doc__ .
15923	set opname attribute of cls object to opfunc .
15924	return cls .
15925	from __future__ import unicode_literals into default name space .
15926	import module re .
15927	import module sys .
15928	from django.utils.encoding import force_text and force_str into default name space .
15929	from django.utils.functional import allow_lazy into default name space .
15930	from django.utils.safestring import SafeData and mark_safe into default name space .
15931	from django.utils import six into default name space .
15932	from django.utils.six.moves.urllib.parse import quote , unquote , urlsplit and urlunsplit into default name space .
15933	from django.utils.text import normalize_newlines into default name space .
15934	from .html_parser import HTMLParser and HTMLParseError into default name space .
15935	TRAILING_PUNCTUATION is a list with 7 elements : STR0 , STR1 , STR2 , STR3 , STR4 , STR and 'STR ' .
15936	WRAPPING_PUNCTUATION is a list with 6 elements : tuple with 2 elements : STR0 and STR1 , tuple with 2 elements : STR2 and STR3 , tuple with 2 elements : STR4 and STR5 , tuple with 2 elements : STR6 and STR7 , tuple with 2 elements : STR and STR , and tuple with 2 elements : 'STR STR8STR ' .
15937	DOTS is a list with 6 elements : strings STR0 , STR1 , STR2 , STR3 , STR4 and STR5 .
15938	call the function re.compile with raw string STR0 , substitute the result for unencoded_ampersands_re .
15939	call the function re.compile with raw string STR0 , substitute the result for word_split_re .
15940	call the function re.compile with 2 arguments : raw string STR0 and re.IGNORECASE , substitute the result for simple_url_re .
15941	call the function re.compile with 2 arguments : raw string STR0 , and re.IGNORECASE , substitute the result for simple_url_re .
15942	call the function re.compile with raw string STR0 , substitute the result for simple_email_re .
15943	call the function re.compile with raw string STR0 , substitute the result for link_target_attribute_re .
15944	call the function re.compile with 2 arguments : raw string STR1 and re.IGNORECASE , substitute the result for html_gunk_re .
15945	call the function re.compile with 2 arguments : raw string STR0 , formated with string created by joining elements of result of the function re.escape with an argument x , with separator STR1 , for every x in DOTS , and re.DOTALL , substitute the result for hard_coded_bullets_re .
15946	call the function re.compile with raw string STR0 , substitute the result for trailing_empty_content_re .
15947	define the function escape with an argument text .
15948	call the function force_text with an argument text , replace every occurrence of STR0 in the result with STR1 , every occurrence of STR2 with STR3 , every occurrence of STR4 with STR5 , every occurrence of STR with STR6 , and every occurrence of STR with STR7 , call the function mark_safe with the previous result as an argument , return the result .
15949	call the function allow_lazy with 2 arguments : escape , six.text_type , substitute the result for escape .
15950	_js_escapes is a dictionary with 11 initial entries : STR0 for integer representation of string STR1\\u0027 STR2STR , STR3 for integer representation of string STR , STR4 for integer representation of string STR5 , STR6 for integer representation of string STR7 , STR8 for integer representation of string STR9 , STR10 for integer representation of string STR11 , STR12 for integer representation of string STR13 , STR14 for integer representation of string STR15 , STR16 for integer representation of string STR17 and STR18 for integer representation of string STR19 .
15951	for every z in range of integers from 0 to 31 , update _js_escapes dictionary with STR0 formated with z , or integer representation of z converted into a string .
15952	define the function escapejs with an argument value .
15953	call the function force_text with an argument value , call the method translate on the result , with an argument _js_escapes , use the result as an argument for the call to the mark_safe function , return the result .
15954	call the function allow_lazy with 2 arguments : escapejs , six.text_type , substitute the result for escapejs .
15955	define the function conditional_escape with an argument text .
15956	if text has an STR0 attribute ,
15957	call the method text.__html__ , return the result .
15958	if not ,
15959	call the function escape with an argument text , return the result .
15960	define the function format_html with 3 arguments : format_string , unpacked list args and unpacked dictionary kwargs .
15961	map elements from args through the function conditional_escape , substitute the result for args_safe .
15962	kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs , with value result of the conditional_escape function called with an argument v for key k .
15963	call the method format_string.format with 2 arguments : unpacked list args_safe and unpacked dictionary kwargs_safe , use the result as an argument for the call to the function mark_safe , return the result .
15964	define the function format_html_join with 3 arguments : sep , format_string and args_generator .
15965	join results of format_html called with 2 arguments : format_string and tuple with an element args , into a string , separated with result of the function conditional_escape with an argument sep , for every args in args_generator , use the result as an argument for the call to the function mark_safe , return the result .
15966	define the function linebreaks with 2 arguments : value and autoescape set to boolean False .
15967	call the function normalize_newlines with an argument value , substitute the result for value .
15968	call the method re.split with 2 arguments : string STR0 and value , substitute the result for paras .
15969	if autoescape is true ,
15970	call the function escape with an argument p , replace every occurrence of STR0 in the result for STR1 , format the string STR2 with the result , for every p in paras , substitute list of results for paras .
15971	if not ,
15972	replace every occurrence of STR0 in p for STR1 , format the string STR2 with the result , for every p in paras , substitute list of results for paras .
15973	join elements of paras into a string separated with STR0 , return the result .
15974	call the function allow_lazy with 2 arguments : linebreaks , six.text_type , substitute the result for linebreaks .
15975	derive the class MLStripper from the HTMLParser base class .
15976	define the method __init__ with an argument self .
15977	if fist and second element of sys.version_info equals to integer 3 and 2 , respectively ,
15978	call the method HTMLParser.__init__ with 2 arguments : self and strict set to boolean False .
15979	if not ,
15980	call the method HTMLParser.__init__ with an argument self .
15981	call the method self.reset .
15982	self.fed is an empty list .
15983	define the method handle_data with 2 arguments self and d .
15984	append d to self.fed .
15985	define the method handle_entityref with 2 arguments self and name .
15986	format string STR0 with name , append it to self.fed .
15987	define the method handle_charref with 2 arguments self and name .
15988	format string STR0 with name , append it to self.fed .
15989	define the method get_data with an argument self .
15990	join elements of self.fed into a string , return the result .
15991	define the function _strip_once with an argument value .
15992	s is an instance of MLStripper class .
15993	try ,
15994	call the method s.feed with an argument value .
15995	if HTMLParseError exception is caught ,
15996	return value .
15997	try ,
15998	close file descriptor s .
15999	if HTMLParseError or UnboundLocalError exceptions are caught ,
16000	sum the result of the method s.get_data and s.rawdata , return the result .
16001	if not ,
16002	call the method s.get_data , return the result .
16003	define the function strip_tags with an argument value .
16004	while STR0 is contained in value and STR1 is contained in value ,
16005	call the function _strip_once with an argument value , substitute the result for new_value .
16006	if new_value equals value ,
16007	break from the loop execution .
16008	substitute new_value for value .
16009	return value .
16010	call the function allow_lazy with an argument strip_tags , substitute the result for strip_tags .
16011	define the function remove_tags with 2 arguments : html and tags .
16012	tags is a list containing results of the function re.escape with an argument tag , for every tag in tags split into words .
16013	join elements of tags into a string , separated with STR0 , format string STR1 with it , substitute the result for tags_re .
16014	call the function re.compile with 2 arguments : raw string STR0 formated with tags_re and re.U , substitute the result for starttag_re .
16015	call the function re.compile with an argument string STR0 formated with tags_re , substitute the result for endtag_re .
16016	call the function starttag_re.sub with 2 arguments : an empty string and html , substitute the result for html .
16017	call the function endtag_re.sub with 2 arguments : an empty string and html , substitute the result for html .
16018	return html .
16019	call the function allow_lazy with 2 arguments : remove_tags , six.text_type , substitute the result for remove_tags .
16020	define the function strip_spaces_between_tags with an argument value .
16021	call the method re.sub with 3 arguments : raw string STR0 , string STR1 and result of the function force_text , called with an argument value , return the result .
16022	call the function allow_lazy with 2 arguments : strip_spaces_between_tags , six.text_type , substitute the result for strip_spaces_between_tags .
16023	define the function strip_entities with an argument value .
16024	call the method re.sub with 3 arguments : raw string STR0 , empty string and result of the function force_text , called with an argument value , return the result .
16025	call the function allow_lazy with 2 arguments : strip_entities , six.text_type , substitute the result for strip_entities .
16026	define the function smart_urlquote with an argument url .
16027	try ,
16028	call the function urlsplit with an argument url , assign the result to scheme , netloc , path , query and fragment , respectively .
16029	try ,
16030	call the method netloc.encode with an argument string STR0 , call the method decode on the result with an argument STR1 , substitute the result for netloc .
16031	if UnicodeError exception is caught ,
16032	do nothing .
16033	if not ,
16034	call the function urlunsplit with an argument tuple with 4 elements : scheme , netloc , path , query and fragment , substitute the result for url .
16035	if ValueError exception is caught ,
16036	do nothing .
16037	call the function force_str with an argument url , use the result as an argument for the call to the function unquote , substitute the result for url .
16038	call the function quote with 2 arguments : url and safe as bytes string STR0 , substitute the result for url .
16039	call the function force_text with an argument url , return the result .
16040	define the function urlize with 4 arguments : text , trim_url_limit set to None , nofollow set to boolean False ,
16041	define the function trim_url with 2 arguments : x and limit set to trim_url_limit .
16042	if limit is None or length of x is lesser than or equal to limit ,
16043	return x .
16044	return a string STR0 formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit .
16045	if text is an instance of SafeData , safe_input is boolean True , otherwise is boolean False .
16046	call the function force_text with an argument text , split by it word_split_re , substitute it for words .
16047	for every i and word in enumerated iterable words ,
16048	if STR0 is contained in words or STR1 is contained in word or STR2 is contained in word ,
16049	substitute empty string , word an empty string for lead , middle and trail , respectively .
16050	for every punctuation in TRAILING_PUNCTUATION ,
16051	if middle ends with punctuation ,
16052	substitute elements of middle from the beginning to the negative length of punctuation , for middle .
16053	sum punctuation and trail , substitute the result for trail .
16054	for every opening and closing in WRAPPING_PUNCTUATION ,
16055	if middle starts with opening ,
16056	substitute elements of middle from length of opening index to the end , for middle .
16057	sum lead and opening , substitute the result for lead .
16058	if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one ,
16059	substitute elements of middle from the beginning to the negative length of closing , for middle .
16060	sum trail and closing , substitute the result for lead .
16061	url is None .
16062	if nofollow is true nofollow_attr is a string STR1 , otherwise nofollow_attr is an empty string .
16063	call the method simple_url_re.match with an argument middle , if it evaluates to true ,
16064	call the function smart_urlquote with an argument middle , substitute the result for url .
16065	otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true ,
16066	call the function smart_urlquote with an argument string STR0 formated with an argument middle , substitute the result for url .
16067	otherwise if STR0 is not contained in middle and result of the function simple_email_re.match called with an argument middle ,
16068	evaluates to true , split middle into two parts from the right by STR0 character , assign the resulting parts to local and domain .
16069	try ,
16070	call the method domain.encode with an argument string STR0 , call the method decode on the result with an argument string STR1 , substitute the result for domain .
16071	if UnicodeError exception is caught ,
16072	skip this loop iteration .
16073	url is a string STR0 formated with local and domain .
16074	nofollow_attr is an empty string .
16075	if url is true ,
16076	call the function trim_url with an argument middle , substitute the result for trimmed .
16077	if autoescape is true and safe_input is false ,
16078	call the function escape with an argument lead , substitute the result for lead , call the function escape with an argument trail , substitute the result for trail .
16079	call the function escape with an argument url , substitute the result for url , call the function escape with an argument trimmed , substitute the result for trimmed .
16080	middle is a string STR1 formated with url , nofollow_attr and trimmed .
16081	format string STR1 with lead , middle and trail , use it as an argument for the call to the function mark_safe , substitute the result for i-th element of words .
16082	if not ,
16083	if safe_input is true ,
16084	call the function mark_safe with an argument word , substitute the result for i-th element of words .
16085	otherwise if autoescape is true ,
16086	call the function escape with an argument word , substitute the result for i-th element of words .
16087	otherwise if safe_input is true ,
16088	call the function mark_safe with an argument word , substitute the result for i-th element of words .
16089	otherwise if autoescape is true ,
16090	call the function escape with an argument word , substitute the result for i-th element of words .
16091	join elements of words into a string , return it .
16092	call the function allow_lazy with 2 arguments : urlize , six.text_type , substitute the result for urlize .
16093	define the function avoid_wrapping with an argument value .
16094	replace every occurrence of STR in value for STR0 , return the result .
16095	from django.utils.six.moves import html_parser as _html_parse into default name space .
16096	import module re .
16097	import module sys .
16098	substitute version_info from module sys for surrent_version .
16099	set use_workaround to boolean True if current_version tuple elements are smaller than the tuple ( 2,7,3 ) , respectively , or if current_version is greater than ( 3,0 ) , but smaller than ( 3,2,3 ) , otherwise set use_workaround to boolean False .
16100	substitute HTMLParseError from the module _html_parser for HTMLParseError .
16101	if use_workaround is boolean False ,
16102	if tuple current_version elements are greater or equal to ( 3 , 4 ) , respectively ,
16103	derive the class HTMLParser from the base class HTMLParser located in the module _html_parser .
16104	define the initialization method __init__ , with self instance of this class , convert_charrefs set to boolean False , and dictionary of arbitrary length **kwargs as arguments .
16105	call the initialization method for the base class , _html_parser.HTMLParser.__init__ with self , convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments .
16106	if not ,
16107	substitute HTMLParser from the module _html_parser for HTMLParser .
16108	if not ,
16109	compile a regular expression pattern string STR0 into a regular expression object and assign it to tagfind .
16110	derive the class HTMLParser from the base class HTMLParser located in the module _html_parser .
16111	define initialization method __init__ with self instance of the class as an argument .
16112	call the initialization method _html_parser.HTMLParser.__init__ ( self ) for the base class .
16113	set field cdata_tag for this class instance to None .
16114	define method set_cdata_mode , with self class instance and tag as the arguments .
16115	try ,
16116	set field interesting for this class instance to interesting_cdata from module _html_parser .
16117	if AttributeError exception is caught ,
16118	replace STR0 in the string STR1 with the result of the function call tag.lower ( ) , use it and the re.I as the input arguments for function re.compile , put the result in the self.interesting .
16119	evaluate function tag.lower , without the arguments , put the result in the self.cdata_tag .
16120	define method clear_cdata_mode , with self class instance as an argument .
16121	substitute _html_parser.interesting_normal for self.interesting .
16122	set self.cdata_tag to None .
16123	define method parse_starttag with self class instance and i as the arguments .
16124	set self.__starttag_text to None .
16125	call the method self.check_for_whole_start_tag with i as an argument , substitute result for the endpos .
16126	if endpos is lesser than zero ,
16127	return endpos .
16128	substitute self.rawdata for rawdata .
16129	slice the list from the i-th to the endpos-th element , substitute it for self.__starttag_text .
16130	attrs is a empty list .
16131	match the rawdata from the position i+1 , with tagfind pattern , assign the result to the match .
16132	if match evaluates to False throw an exception with the string message STR0 .
16133	find the ending position of the regular expression match of the object match , substitute the result for k .
16134	find the first subgroup of the matched string from the match object , convert it to lowercase , substitute it for tag and self.lasttag .
16135	as long k is smaller than endpos ,
16136	match the rawdata from the position k , with attrfind pattern , assign the result to the m .
16137	if m is not False , None is considered False ,
16138	breaks from the smallest enclosing loop .
16139	find the first , second and third subgroup of the m regular expression match , assign the result to the attrname , rest and attrvalue , respectively .
16140	if rest is not False , None is considered False ,
16141	set attrvalue to None .
16142	otherwise , if first and the last character of attrvalue are STRspecial charter or first and last character of attrvalue are STR character ,
16143	remove first and last character from the attrvalue , substitute it for attrvalue .
16144	if attrvalue is not an empty string ,
16145	call the method unescape with attrvalue as the argument on the self class instance , substitute the result for attrvalue .
16146	form the tuple from the attrname converted to lowercase and attrvalue , append it to the end of attrs .
16147	find the ending position of the regular expression match of the object match , substitute the result for k .
16148	slice the rawdata string from the k-th to the endpos-th index , remove the whitespaces from the start and the end of the string , substitute it for end .
16149	if end is not a STR0 or STR1 character ,
16150	evaluate the self.getpos ( ) and assign the result to the lineno and offset respectfully .
16151	if self.__stattag_text contains newline character ,
16152	increment the lineno by the count of the newlines in self.__starttag_text .
16153	find the last index of newline occurrence in self.__starttag_text , subtract it from total length of self.__starttag_text , substitute the result for offset .
16154	if not ,
16155	increment the offset by the length of self.__starttag_text .
16156	slice the rawdata from k to endpos , then take the first 20 elements of the previous slice , with it replace % r in the string STR0 , call the method self.error with the resulting string as an argument .
16157	if string end ends with string STR0 ,
16158	call the method self.handle_startendtag with tag and attrs as the arguments .
16159	if not ,
16160	call the method self.handle_starttag , with tag and attrs as the arguments .
16161	if tag is contained in self.CDATA_CONTENT_ELEMENTS ,
16162	call the method self.set_cdata_mode with tag as the argument .
16163	return endpos .
16164	define the method parse_endtag with self class instance and i as the arguments .
16165	substitute self.rawdata for rawdata .
16166	take two characters from the i-th element of rawdata , if they are not equal to the string STR1 , throw an exception with string STR0 as the message .
16167	search anywhere in the rawdata string starting from the ( i+1 ) -th element for the _html_parser.endendeag , replace the result for match .
16168	if there is no match ,
16169	return integer -1 .
16170	find the ending position of the regular expression match of the object match , substitute the result for j .
16171	match the rawdata from the position i , with _html_parser.endtagfind pattern , assign the result to the match .
16172	if there is no match ,
16173	if self.cdata_tag is not None ,
16174	slice the rawdata to obtain substring from i-th to j-th element , use it as the argument for the method call to the self.handle_data .
16175	return j .
16176	slice the rawdata from i-th to the j-th element , replace with it STR1 in the string STR0 , use it to call the method self.error .
16177	find the first subgroup of the matched string from the match object , strip the whitespaces from the begging and end , replace it for tag .
16178	if self.cdata_tag is not None ,
16179	convert tag to lowercase if it is not equal to self.cdata_tag ,
16180	slice the rawdata to obtain substring from i-th to j-th element , use it as the argument for the method call to the self.handle_data .
16181	return j .
16182	convert tag to lowercase , use it as the argument for the call to the method self.handle_endtag .
16183	call the method self.clear_cdata_mode .
16184	return j .
16185	from __future__ import unicode_literals into default name space .
16186	import module base64 .
16187	import module calendar .
16188	import module datetime .
16189	import module re .
16190	import module sys .
16191	from binascii import Error as BinasciiError into default name space .
16192	from email.utils import formatdate into default name space .
16193	from django.utils.datastructures import MultiValueDict into default name space .
16194	from django.utils.encoding import force_str and force_text into default name space .
16195	from django.utils.functional import allow_lazy into default name space .
16196	from django.utils import six into default name space .
16197	from django.utils.six.moves.urllib.parse import quote , quote_plus , unquote , unquote_plus , urlparse , urlencode as original_urlencode .
16198	call the function re.compile with an argument raw string STR1 , substitute the result for ETAG_MATCH .
16199	MONTHS is a list with 12 elements : strings STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , and STR11 .
16200	__D is a raw string STR0 .
16201	__D2 is a raw string STR0 .
16202	__M is a raw string STR0 .
16203	__Y is a raw string STR0 .
16204	__Y2 is a raw string STR0 .
16205	__T is a raw string STR0 .
16206	call the function re.compile with an argument raw string STR0 formated with __D , __M , __Y and __T , substitute the result for RFC1123_DATE .
16207	call the function re.compile with an argument raw string STR0 formated with __D , __M , __Y2 and __T , substitute the result for RFC850_DATE .
16208	call the function re.compile with an argument raw string STR0 formated with __M , __D2 , __T and __Y , substitute the result for ASCTIME_DATE .
16209	define the function urlquote with 2 arguments : url and safe set to STR0 .
16210	call the function quote with 2 arguments : result of the function force_str called with an argument url , and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result .
16211	call the function allow_lazy with 2 arguments : urlquote and six.text_type , substitute the result for urlquote .
16212	define the function urlquote_plus with 2 arguments : url and safe set to an empty string .
16213	call the function quote_plus with 2 arguments : result of the function force_str called with an argument url , and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result .
16214	call the function allow_lazy with 2 arguments : urlquote_plus and six.text_type , substitute the result for urlquote_plus .
16215	define the function urlunquote with an argument quoted_url .
16216	call the function force_str with an argument quoted_url , use the result as an argument for the call to the function unquote , use the result as an argument for the call to the function force_text , return the result .
16217	call the function allow_lazy with 2 arguments : urlunquote and six.text_type , substitute the result for urlunquote .
16218	define the function urlunquote with an argument quoted_url .
16219	call the function force_str with an argument quoted_url , use the result as an argument for the call to the function unquote_plus , use the result as an argument for the call to the function force_text , return the result .
16220	call the function allow_lazy with 2 arguments : urlunquote_plus and six.text_type , substitute the result for urlunquote_plus .
16221	define the function urlencode with 2 arguments query and doseq set to integer 0 .
16222	if query is an instance of MultiValueDict class ,
16223	call the method query.lists , substitute the result for query .
16224	otherwise if query has an attribute STR0 ,
16225	call the method query.items , substitute the result for query .
16226	call the function original_urlencode with 2 arguments : list with 2 elements : result of the function force_str with an argument k , and list with results of the function force_str with an argument i , for every i in v , only if v is a list or a tuple , otherwise second element is result of the function force_str with an argument v , for every k and v in query , and doseq , return the result .
16227	define the function cookie_date with an argument epoch_seconds set to None .
16228	call the function formatdate with an argument epoch_seconds , substitute the result for rfcdate .
16229	return a string STR0 , formated with : first 7 elements of rfcdate , elements of rfcdate from 8-th to the 11-th index , and elements of rfcdate from 12-th to the 25-th index .
16230	define the function http_date with an argument epoch_seconds set to None .
16231	call the function formatdate with 2 arguments : epoch_seconds and usegmt set to boolean True , return the result .
16232	define the function parse_http_date with an argument date .
16233	for every regex in tuple with 3 elements : RFC1123_DATE , RFC850_DATE and ASCTIME_DATE ,
16234	call the method regex.match with an argument date , substitute the result for m .
16235	if m is not None ,
16236	break from the loop execution .
16237	if not ,
16238	raise an ValueError exception with an argument string STR0 formated with date .
16239	try ,
16240	call the method m.group with an argument string STR0 , convert the result into a string , substitute it for year .
16241	if year is lesser than integer 100 ,
16242	if year is lesser than integer 70 ,
16243	increment year by integer 2000 .
16244	if not ,
16245	increment year by integer 1900 .
16246	call the method m.group with an argument string STR0 , convert the result to lowercase , use it as an argument for the call to the , method MONTHS.index , increment the result by integer 1 , substitute it for month .
16247	call the method m.group with an argument string STR0 , convert the result into a string , substitute it for day .
16248	call the method m.group with an argument string STR0 , convert the result into a string , substitute it for hour .
16249	call the method m.group with an argument string STR0 , convert the result into a string , substitute it for min .
16250	call the method m.group with an argument string STR0 , convert the result into a string , substitute it for sec .
16251	call the method MONTHS.index with 6 arguments : year , month , day , hour , min and sec , substitute the result for result .
16252	call the method result.utctimetuple , use the result as an argument for the call to the method calendar.timegm , return the result .
16253	if Exception exception is caught .
16254	call the function six.reraise with 3 arguments : ValueError , instance of a class ValueError , created with an argument string , STR0 formated with date and third element of the result of the function sys.exc_info .
16255	define the function parse_http_date_safe an argument date .
16256	try ,
16257	call the function parse_http_date with an argument date , return the result .
16258	if Exception exception is caught .
16259	do nothing .
16260	define the functionbase36_to_int with an argument s .
16261	if length of s is greater than integer 13 ,
16262	raise an ValueError exception with an argument string STR0 .
16263	convert s to integer of base 36 , substitute it for value .
16264	if six.PY2 is true and value is greater than sys.maxint ,
16265	raise an ValueError exception with an argument string STR0 .
16266	return value .
16267	define the function int_to_base36 with an argument i .
16268	digits is a string STR0 .
16269	factor is integer 0 .
16270	if i is smaller than integer 0 ,
16271	raise an ValueError exception with an argument string STR0 .
16272	if six.PY2 is true ,
16273	if i is not an instance of six.integer_types class ,
16274	raise an TypeError exception with an argument string STR0 .
16275	if i is greater than sys.maxint ,
16276	raise an ValueError exception with an argument string STR0 .
16277	endless loop ,
16278	increment factor by one .
16279	bring integer 36 to the power of factor , if i is smaller than the result ,
16280	decrement factor by one .
16281	break from the loop execution .
16282	base36 is an empty list .
16283	while factor is greater or equal to integer 0 ,
16284	bring integer 36 to the power of factor , substitute the result for j .
16285	floor the division of i by j , use it an an index to get the element of the digits list , append the result for base36 .
16286	i is the reminder of the division of i by j .
16287	decrement factor by one .
16288	join elements of base36 into a string , return it .
16289	define the function urlsafe_base64_encode with an argument s .
16290	call the method base64.urlsafe_b64encode with an argument s , strip the result of the bytes string STR0 from the right , return it .
16291	define the function urlsafe_base64_decode with an argument s .
16292	call the method s.encode with an argument string STR0 , substitute the result for s .
16293	try ,
16294	left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4 , pad the rest of the field with bytes string STR0 , use the result as an argument for the call to the method base64.urlsafe_b64decode , return the result .
16295	if LookupError or BinasciiError , renamed to e , exceptions are caught .
16296	raise an ValueError exception with an argument e .
16297	define the function parse_etags with an argument etag_str .
16298	call the method ETAG_MATCH.findall with an argument etag_str , substitute the result for etags .
16299	if etags is false ,
16300	return a list with an element etag_str .
16301	for every e in etags call the method e.encode with an argument string STR0 , call the method decode on the result with an argument , string STR1 , substitute the list of results for etags .
16302	return etags .
16303	define the function quote_etag with an argument etag .
16304	return a string STR1 formated with etag , in which every occurrence of STRspecial is replaced with STR2 and every occurrence of STR , is replaced with STR3 .
16305	define the function same_origin with 2 arguments url1 and url2 .
16306	substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2 .
16307	try ,
16308	if p2.scheme , p2.hostname and p2.port equals p1.scheme , p1.hostname and p1.port , respectively , return boolean True , otherwise return boolean False .
16309	if ValueError exception is caught .
16310	return boolean False .
16311	define the function is_safe_url with 2 arguments url and host set to None .
16312	if url is false ,
16313	return boolean False .
16314	replace every occurrence of STRspecial in url with STR0 .
16315	if url starts with STR0 ,
16316	return boolean False .
16317	call the function urlparse with an argument url , substitute the result for url_info .
16318	if url_info.netloc is false and url_info.scheme is true ,
16319	return boolean False .
16320	if url_info.netloc is false or url_info.netloc equals host , and if url_info.scheme is false or url_info.scheme equals ,
16321	import module warnings .
16322	import module sys .
16323	from django.utils import six into default name space .
16324	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
16325	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to integer 2 .
16326	define the function _resolve_name with 3 arguments : name , package and level .
16327	if package doesnt have an STR0 attribute ,
16328	raise an ValueError with an argument string STR0 .
16329	substitute length of package for dot .
16330	for every x is the range of integers from level to the integer 2 , in the reversed order ,
16331	try ,
16332	call the method package.rindex with 3 arguments : string STR0 , integer 0 and dot , substitute the result for dot .
16333	if ValueError exception is caught ,
16334	raise an ValueError with an argument string STR0 .
16335	return a string STR0 formated with first dot package elements and name .
16336	if six.PY3 is true ,
16337	from importlib import import_module .
16338	if not ,
16339	define the function import_module with 3 arguments : name and package set to None .
16340	if name starts with an string STR0 ,
16341	if package is false ,
16342	raise an TypeError with an argument string STR0 .
16343	level is an integer 0 .
16344	for every character in name ,
16345	if character is not equal to a string STR0 ,
16346	break from the loop execution .
16347	increment level by one .
16348	call the function _resolve_name with 3 arguments : name list elements from the level index to the end , package and level , substitute the result for name .
16349	call the function __import__ with an argument name .
16350	return sys.modules dictionary value under the name key .
16351	from django.core.exceptions import ValidationError into default name space .
16352	from django.utils.translation import ugettext_lazy as _ into default name space .
16353	from django.utils.six.moves import xrange into default name space .
16354	define the function clean_ipv6_address with 3 arguments : ip_str , unpack_ipv4 set to boolean False and error_message ,
16355	best_doublecolon_start is an integer -1 .
16356	best_doublecolon_len is an integer 0 .
16357	doublecolon_start is an integer -1 .
16358	doublecolon_len is an integer 0 .
16359	call he function is_valid_ipv6_address with an argument ip_str , if it evaluates to false ,
16360	raise an ValidationError exception with 2 arguments : error_message and code as a string STR0 .
16361	call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str .
16362	call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str .
16363	if unpack_ipv4 is true ,
16364	call the function _unpack_ipv4 with an argument ip_str , substitute the result for ipv4_unpacked .
16365	if ipv4_unpacked is true ,
16366	return ipv4_unpacked .
16367	split ip_str by STR0 , substitute the result for hextets .
16368	for every index in range of integers from 0 to length of hextets , not included ,
16369	get the value under the index key of the hextets dictionary , remove the leading STR0 characters , substitute the result for value under the index key of the hextets dictionary .
16370	get the value under the index key of the hextets dictionary , if it is false ,
16371	value under the index key of the hextets dictionary is a string STR0 .
16372	if value under the index key of the hextets dictionary equals to string STR0 ,
16373	increment doublecolon_len by integer 1 ,
16374	if doublecolon_start equals integer -1 ,
16375	substitute index for doublecolon_start .
16376	if doublecolon_len is greater than best_doublecolon_len ,
16377	substitute doublecolon_len for best_doublecolon_len .
16378	substitute doublecolon_start for best_doublecolon_start .
16379	if not ,
16380	doublecolon_len is integer 0 .
16381	doublecolon_start is integer -1 .
16382	if best_doublecolon_len is greater than integer 1 ,
16383	sum best_doublecolon_start and best_doublecolon_len , substitute the result for best_doublecolon_end ,
16384	if best_doublecolon_end equals length of hextets ,
16385	append an empty string to list hextets .
16386	replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string .
16387	if best_doublecolon_start equals integer 0 ,
16388	prepend an empty string to hextets list .
16389	join elements of hextets into a string , separated with STR0 , substitute it for result .
16390	convert result to lowercase and return it .
16391	define the function _sanitize_ipv4_mapping with an argument ip_str .
16392	convert ip_str to lowercase , if it doesnt start with a string STR0 ,
16393	return ip_str .
16394	split ip_str into parts by STR0 , substitute the result for hextets .
16395	if STR0 is contained in last elements of hextets ,
16396	return ip_str .
16397	ipv4_address is a string STR0 formated with first 2 elements of seventh element of hextets converted into hexadecimal number , second 2 elements of seventh element of hextets converted into hexadecimal number , first 2 elements of eight element of hextets converted into hexadecimal number , second 2 elements of eight element of hextets converted into hexadecimal number .
16398	join first 5 elements of hextets into a string , separated by STR0 , substitute the result for result .
16399	append STR0 and ipv4_address to result .
16400	return result .
16401	define the function _unpack_ipv4 with an argument ip_str .
16402	convert ip_str to lowercase , if it doesnt start with a string STR0 ,
16403	return None .
16404	split ip_str into 2 parts from right , return second element of the result .
16405	define the function is_valid_ipv6_address with an argument ip_str .
16406	from django.core.validators import validate_ipv4_address .
16407	if STR0 is not contained in ip_str .
16408	return boolean False .
16409	if count of occurrence of STR0 in ip_str is greater than integer 1 ,
16410	return boolean False .
16411	if string STR0 is contained in ip_str ,
16412	return boolean False .
16413	if ip_str starts with STR0 : : STR1 : , but it doesnt ends with STR2 ,
16414	return boolean False .
16415	if count of occurrence of STR0 in ip_str is greater than integer 7 ,
16416	return boolean False .
16417	if STR0 is not contained in ip_str and number of occurrences of STR1 in ip_str is not equal to integer 7 ,
16418	if count of occurrence of STR0 in ip_str is not equal to integer 3 ,
16419	return boolean False .
16420	call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str .
16421	split ip_str into parts by STR0 , for every hextet in the result ,
16422	if count of occurrence of STR0 in ip_str is equal to integer 3 ,
16423	split ip_str by STR0 , if last element of the result is not equal to hextet .
16424	return boolean False .
16425	try ,
16426	call the function validate_ipv4_address with an argument hextet .
16427	if ValidationError exception is caught ,
16428	return boolean False .
16429	if not ,
16430	try ,
16431	if hextet converted to hexadecimal number is smaller than hexadecimal 0 , or hextet converted to hexadecimal number is smaller than hexadecimal FFFF ,
16432	return boolean False .
16433	if ValueError exception is caught .
16434	return boolean False .
16435	return boolean True .
16436	define the function _explode_shorthand_ip_string with an argument ip_str .
16437	call the function _is_shorthand_ip with an argument ip_str , if it evaluates to false ,
16438	return ip_str .
16439	new_ip is an empty list ,
16440	split ip_str by STR0 , substitute it for hextet .
16441	split ip_str into parts by STR0 , if STR1 is contained in the last element of the result ,
16442	fill_to is an integer 7 .
16443	if not ,
16444	fill_to is an integer 8 .
16445	if length of hextet is greater than integer 1 ,
16446	split first and second element of hextet into parts by STR0 , sum their lengths , substitute the result for sep .
16447	split first element of hextet into parts by STR0 , append them to new_ip .
16448	for every __ in range of integers from 0 up to sep subtracted from fill_to ,
16449	append string STR0 to new_ip .
16450	split second element of hextet into parts by STR0 , append them to new_ip .
16451	if not ,
16452	split ip_str into parts by STR0 , substitute the result for new_ip .
16453	ret_ip is an empty list .
16454	for every hextet in new_ip ,
16455	subtract length of hextet from 4 , create a string with previous result number of character STR0 , append hextet to it , convert the result into a lowercase , append it to ret_ip .
16456	join elements of ret_ip into a string separated with STR0 , return it .
16457	define the function _is_shorthand_ip with an argument ip_str .
16458	if count of occurrence of STR0 in ip_str equals integer 1 ,
16459	return boolean True .
16460	split ip_str into parts by STR0 , for every x in the result , calculate length of x , if any is smaller than integer 4 ,
16461	return boolean True .
16462	return boolean False .
16463	define the function is_iterable with an argument x .
16464	try ,
16465	create an iterator out of x .
16466	if TypeError exception is caught ,
16467	return boolean False .
16468	if not ,
16469	return boolean True .
16470	import module re .
16471	derive the class Tok from the object base class .
16472	num is an integer 0 .
16473	define the method __init__ with 4 arguments : self , name , regex and next set to None .
16474	substitute Tok.num for self.id .
16475	increment Tok.num with an integer 1 .
16476	substitute name for self.name .
16477	substitute regex for self.regex .
16478	substitute next for self.next .
16479	define the function literals with 3 arguments : choices , prefix set to an empty string and suffix set to an empty string .
16480	for every c in choices split into words , concatenate prefix , result of the function re.escape with an argument c and suffix , and join the results into a string , separated with STR0 character , return the result .
16481	derive the class Lexer from the object base class .
16482	define the method __init__ with 3 arguments self , states and first .
16483	self.regexes is an empty dictionary .
16484	self.tokens is an empty dictionary .
16485	call the method states.items , for every state and rules in the result ,
16486	parts is an empty list .
16487	for every tok in rules ,
16488	groupid is a string STR0 formated with tok.id .
16489	substitute tok for value under the groupid key of the self.toks dictionary .
16490	format a string STR0 with groupid and tok.regex , append it to the parts .
16491	call the function re.compile with 2 arguments : elements of parts joined into a string , separated with STR0 , and result of bitwise OR performed on 2 operands : re.MULTILINE and re.VERBOSE , substitute the result for value under the state key of the self.regexes dictionary .
16492	substitute first for self.state .
16493	define the method lex with 2 arguments self and text .
16494	substitute length of text for end .
16495	substitute self.state for state .
16496	substitute self.regexes for regexes .
16497	substitute self.toks for toks .
16498	start is an integer 0 .
16499	while start is lesser than end .
16500	get the value under the state key of the regexes dictionary , call the method finditer on the result with 2 arguments : text and start ,
16501	for every match in the result , substitute match.lastgroup for name .
16502	substitute value under the name key of the toks dictionary for tok .
16503	call the method match.group with an arugument name , substitute the result for toktext .
16504	increment start by length of toktext .
16505	yield a tuple with 2 elements : tok.name and toktext .
16506	if tok.next is true ,
16507	substitute tok.next for state .
16508	break from the loop execution .
16509	substitute state for self.state .
16510	derive the class JsLexer from the Lexer base class .
16511	both_before is a list containing 14 elements , all of them are instances of Tok class , created with 2 arguments , a string and a raw string .
16512	both_after is an list with an element instance of Tok class , created with 2 arguments : string STR0 and raw string STR1 .
16513	states is a dictionary with 2 arguments : appended list with an element instance of a class Tok , created with 3 arguments : STR0 , result of the function literals called with an argument string STR1 and next as a string STR3 , to the both_before , appended both_after to the previous result , for STR4 and appended list with an element instance of a class Tok , created with 3 arguments : string STR2 , raw string STR5 , and next as a string STR6 , to the both_before , appended both_after to the previous result for STR7 .
16514	define the method __init__ with an argument self .
16515	call the method __init__ with 2 arguments : self.states and string STR0 from the base class of the class JsLexer .
16516	define the function prepare_js_for_gettext with an argument js .
16517	define the function escape_quotes with an argument m .
16518	call the method m.group with an argument integer 0 , substitute the result for s .
16519	if s equals a string STR ,
16520	return an raw string 'STR ' .
16521	if not ,
16522	return s .
16523	lexer is an instance of JsLexer class .
16524	c is an empty list .
16525	call the method lexer.lex with an arguments js , for every name and tok in the result ,
16526	if name equals a string STR0 ,
16527	tok is a string STR1 ,
16528	otherwise if name starts with a string STR0 ,
16529	if tok starts with STR ,
16530	call the function re.sub with 3 arguments : raw string STR0 , escape_quotes and tok without the first and last element , substitute the result for guts .
16531	concatenate string STR , guts and string STR , substitute the result for tok .
16532	otherwise if name equals a string STR0 .
16533	replace every occurrence of STRspecial in tok with STR0 , substitute the result for tok .
16534	append tok to c .
16535	join elements of c into a string , return it .
16536	import module logging .
16537	import module sys .
16538	import module warnings .
16539	from django.conf import settings into default name space .
16540	from django.core import mail into default name space .
16541	from django.core.mail import get_connection into default name space .
16542	from django.utils.deprecation import RemovedInNextVersionWarning into default name space .
16543	from django.utils.module_loading import import_string into default name space .
16544	from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space .
16545	from logging import NullHandler .
16546	from logging.config import dictConfig .
16547	substitute logging.getLogger for getLogger .
16548	DEFAULT_LOGGING is a dictionary with 5 initial entries : 1 for STR0 , False for STR1 , and 3 additional pairs of dictionaries for string .
16549	define the function configure_logging with 2 arguments : logging_config and logging_settings .
16550	if sys.warnoptions is false ,
16551	call the method logging.captureWarnings with an argument boolean True .
16552	call the function warnings.simplefilter with 2 arguments : string STR0 and RemovedInNextVersionWarning .
16553	if logging_config is true ,
16554	call the function import_string with an argument logging_config , substitute the result for logging_config_func .
16555	call the function logging_config_func with an argument DEFAULT_LOGGING .
16556	if logging_settings is true ,
16557	call the function logging_config_func with an argument logging_settings .
16558	derive the class AdminEmailHandler from logging.Handler base class .
16559	define the method __init__ with 3 arguments : self , include_html set to boolean False and email_backend set to None .
16560	call the method logging.Handler.__init__ with an argument self .
16561	substitute include_html for self.include_html .
16562	substitute email_backend for self.email_backend .
16563	define the method emit with 2 arguments : self and record .
16564	try ,
16565	substitute record.request for request .
16566	subject is an string STR0 , formated with record.levelname , string STR1 if value under the STR2 key , of the request.META dictionary is contained in settings.INTERNAL_IPS , otherwise use string STR3 , and result of the method record.getMessage .
16567	call the function get_exception_reporter_filter with an argument request , substitute the result for filter .
16568	call the method filter.get_request_repr with an argument request , format string STR0 with the result , substitute the result for request_repr .
16569	if Exception exception is caught ,
16570	subject is an string STR0 formated with record.levelname and result of the method record.getMessage , respectively .
16571	request is None .
16572	request_repr is a string STR0 .
16573	call the function self.format_subject with an argument subject , substitute the result for subject .
16574	if record.exc_info is true ,
16575	substitute record.exc_info for exc_info .
16576	if not ,
16577	exc_info is an tuple with 3 elements : None , result of method record.getMessage and None .
16578	message is an string STR0 formated with the result of the metod self.format with an argument record , and request_repr , respectively .
16579	reporter is an instance of ExceptionReporter class , created with 3 arguments : request , is_email as boolean True , unpacked list exc_info .
16580	if self.include_html is true , call the method reporter.get_traceback_html and substitute the result for html_message , otherwise html_message is None .
16581	call the method mail.mail_admins with 5 arguments : subject , message , fail_silently as boolean True , tml_message as html_message , and connection as the result of the method self.connection .
16582	define the connection with an argument self .
16583	call the function get_connection with 2 arguments : backend set to self.email_backend and fail_silently set to boolean True .
16584	define the method format_subject with 2 arguments : self and subject .
16585	replace every occurrence of STR0 in subject with STR1 and replace every occurrence of STRspecial in subject with STR2 , substitute the result for formatted_subject .
16586	return first 989 elements of formatted_subject .
16587	derive the class CallbackFilter from logging.Filter base class .
16588	define the method __init__ with 2 arguments : self and callback .
16589	substitute callback for self.callback .
16590	define the method filter with 2 arguments : self and record .
16591	call the method self.callback with an argument record , if the result evaluates to true ,
16592	return integer 1 .
16593	return integer 0 .
16594	derive the class RequireDebugFalse from logging.Filter base class .
16595	define the method filter with 2 arguments : self and record .
16596	if settings.DEBUG is true , return boolean False , otherwise return boolean True .
16597	derive the class RequireDebugTrue from logging.Filter base class .
16598	define the method filter with 2 arguments : self and record .
16599	return settings.DEBUG .
16600	try ,
16601	from functools import lru_cache .
16602	if ImportError exception is caught .
16603	from collections import namedtuple .
16604	from functools import update_wrapper .
16605	from threading import RLock .
16606	_CacheInfo is an instance of namedtuple class created with 2 arguments : string STR0 and a list with 4 elements : string STR4 , STR1 , STR2 and STR3 .
16607	derive class _HashedSeq from list base class .
16608	__slots__ is a string STR0 .
16609	define the method __init__ with 3 arguments : self , tup and hash set to hash .
16610	substitute tup for elements of self .
16611	get the hash value of the tup , substitute it for self.hashvalue .
16612	define the method __hash__ with an argument self .
16613	return self.hashvalue .
16614	define the function _make_key with 9 arguments : args , kwds , typed , kwd_mark as a tuple with an element result of the function object ,
16615	substitute args for key .
16616	if kwds is true ,
16617	sort elements of kwds , substitute the result for sorted_items .
16618	increment key by kwd_mark .
16619	for every item in sorted_items ,
16620	increment key by item .
16621	if typed is true ,
16622	create a tuple out of types of v , for every v in args , extend key tuple with the result .
16623	if kwds is true ,
16624	create a tuple out of types of v , for every k and v in sorted_items , extend key tuple with the result .
16625	otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes ,
16626	return first element of key .
16627	return instance of _HashedSeq class , created with an argument key .
16628	define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False .
16629	define the function decorating_function with an argument user_function .
16630	cache is an empty dictionary .
16631	stats is an list with 2 elements : 2 integers 0 .
16632	HITS and MISSES are integer 0 and 1 , respectively .
16633	substitute _make_key for make_key .
16634	substitute cache.get for cache_get .
16635	substitute len for _len .
16636	lock is an instance of RLock class .
16637	root is an empty list .
16638	root is a list with elements : root , root , None and None .
16639	nonlocal_root is an list with an element root .
16640	substitute integers 0 , 1 , 2 and 3 for PREV , NEXT , KEY and RESULT , respectivley .
16641	if maxsize equals integer 0 ,
16642	define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
16643	call the function user_function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result .
16644	increment stats dictionary value under the MISSES key by integer 1 .
16645	return result .
16646	otherwise if maxsize is None ,
16647	define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
16648	call the function make_key with 3 arguments : args , kwds and typed , substitute the result for key .
16649	call the function cache_get with 2 arguments : key and root , substitute the result for result .
16650	if result is not root ,
16651	increment stats dictionary value under the HITS key by integer 1 .
16652	return result .
16653	call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds , substitute the result for result .
16654	substitute result for cache dictionary value under the key key .
16655	increment stats dictionary value under the MISSES key by integer 1 .
16656	return result .
16657	if not ,
16658	define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
16659	if kwds is true or typed is true , call the function make_key with 3 arguments : args , kwds and typed , substitute the result for key , otherwise substitute args for key .
16660	with lock ,
16661	call the function cache_get with an argument key , substitute the result for link .
16662	if link is not None ,
16663	substitute nonlocal_root for a tuple with an element root .
16664	substitute link for link_prev , link_next , key and result , respectively .
16665	substitute link_next for value under the NEXT key of the link_prev dictionary .
16666	substitute link_prev for value under the PREV key of the link_next dictionary .
16667	substitute value under the PREV key of the root dictionary for last .
16668	substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary .
16669	substitute last for value under the PREV key of the link dictionary .
16670	substitute root for value under the NEXT key of the link dictionary .
16671	increment stats dictionary value under the HITS key by integer 1 .
16672	return result .
16673	call the function user_function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result .
16674	with lock ,
16675	substitute nonlocal_root for tuple root .
16676	if key is contained in cache ,
16677	do nothing .
16678	otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize ,
16679	substitute root for oldroot .
16680	substitute key for value under the KEY key of the oldroot dictionary .
16681	substitute result for value under the RESULT key of the oldroot dictionary .
16682	substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root .
16683	substitute value under the KEY key of the root dictionary for oldkey .
16684	substitute value under the RESULT key of the root dictionary for oldvalue .
16685	root dictionary values under the KEY and RESULT keys are both None .
16686	delete entry under the oldkey key of the cache dictionary .
16687	substitute oldroot for value under the key key of the cache dictionary .
16688	if not ,
16689	substitute value under the PREV key of the root dictionary for last .
16690	link is a list with 4 elements : last , root , key and result .
16691	substitute link for value under the NEXT key of the last dictionary , for value under the PREV key of the root dictionary , for value under the key key of the cache dictionary .
16692	increment stats dictionary value under the MISSES key by integer 1 .
16693	return result .
16694	define the function cache_info .
16695	with lock ,
16696	return an instance of _CacheInfo class , created with 4 arguments : value under the HITS key of the stats dictionary , value under the MISSES key of the stats dictionary , maxsize and length of cache .
16697	define the function cache_clear .
16698	with lock ,
16699	call the method cache.clear .
16700	substitute first element of nonlocal_root for root .
16701	root is an list with 4 elements : root , root , None and None .
16702	stats is a list with 2 elements : 2 integers 0 .
16703	substitute user_function for wrapper.__wrapped__ .
16704	substitute cache_info for wrapper.cache_info .
16705	substitute cache_clear for wrapper.cache_clear .
16706	call the function update_wrapper with 2 arguments : wrapper and user_function , return the result .
16707	return decorating_function .
16708	from __future__ import absolute_import into default name space .
16709	import module copy .
16710	from importlib import import_module into default name space .
16711	import module os .
16712	import module sys .
16713	import module warnings .
16714	from django.core.exceptions import ImproperlyConfigured into default name space .
16715	from django.utils import six into default name space .
16716	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
16717	define the function import_string with an argument dotted_path .
16718	try ,
16719	split dotted_path into two parts from the right at the STR0 character , assign the result to module_path and class_name , respectively .
16720	if ValueError exception is caught ,
16721	msg is a string STR0 formated with dotted_path .
16722	call the function six.reraise with 3 arguments : ImportError , instance of ImportError class created with an argument msg , and third element of result of the function sys.exc_info .
16723	call the function import_module with an argument module_path , substitute the result for module .
16724	try ,
16725	get attribute class_name form the module object , return it .
16726	if AttributeError exception is caught ,
16727	msg is a string STR2 formated with dotted_path and class_name , respectively .
16728	call the function six.reraise with 3 arguments : ImportError , instance of ImportError class created with an argument msg , and third element of result of the function sys.exc_info .
16729	define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
16730	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel as integer 2 .
16731	try ,
16732	call the function import_string with an argument dotted_path , substitute the result for attr .
16733	if ImportError , renamed to e , exception is caught ,
16734	msg is a string STR1 , where STR2 is replaced with error_prefix , dotted_path and e , respectively .
16735	call the function six.reraise with 3 arguments : ImproperlyConfigured , instance of ImproperlyConfigured class created with msg , and third element of the function sys.exc_info result .
16736	return attr .
16737	define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs .
16738	from django.apps import apps .
16739	get value under the STR0 key of the kwargs dictionary , substitute it for register_to .
16740	call the method apps.get_app_configs , for every app_config in the result ,
16741	try ,
16742	if register_to is true ,
16743	call the method copy.copy with an argument register_to._registry , substitute the result for before_import_registry .
16744	for every module_to_search in args ,
16745	call the function import_module with an argument string STR0 , where STR1 is replaced with app_config.name and module_to_search .
16746	is exception is caught ,
16747	if register_to is true ,
16748	substitute before_import_registry for register_to._registry .
16749	if call to the function module_has_submodule with 2 arguments : app_config.module and module_to_search evaluates to true ,
16750	raise an exception ,
16751	if first and second element of sys.version_info are both equal to integer 3 ,
16752	if first and second element of sys.version_info are equal to integers 3 and 4 , respectively ,
16753	from importlib.util import find_spec as importlib_find .
16754	if not ,
16755	from importlib import find_loader as importlib_find .
16756	define the function module_has_submodule with 2 arguments : package and module_name .
16757	try ,
16758	substitute package.__name__ for package_name .
16759	substitute package.__path__ for package_path .
16760	if AttributeError exception is caught ,
16761	return boolean False .
16762	concatenate package_name , string STR0 and module_name , substitute it for full_module_name .
16763	call the function importlib_find with 2 arguments : full_module_name and package_path , if the result is not None , return boolean True , otherwise return boolean False .
16764	if not ,
16765	import imp .
16766	define the function module_has_submodule with 2 arguments : package and module_name .
16767	join package.__name__ and module_name into a string separated with STR0 , substitute it for name .
16768	try ,
16769	if value under the name key of the sys.modules dictionary is not None , return boolean True , otherwise return boolean False .
16770	if KeyError exception is caught ,
16771	do nothing .
16772	try ,
16773	substitute package.__path__ for package_path .
16774	if AttributeError exception is caught ,
16775	return boolean False .
16776	for every finder in sys.meta_path ,
16777	if call to the method finder.find_module with 2 arguments : name and package_path evaluates to true ,
16778	return boolean True .
16779	for every entry in package_path ,
16780	try ,
16781	substitute the value under the entry key of the sys.path_importer_cache dictionary for finder .
16782	if finder is None ,
16783	try ,
16784	call the method imp.find_module with 2 arguments : module_name and list containing element entry , assign the result to file_ , _ , and _ , respectively .
16785	if file_ is true ,
16786	close file_ file descriptor .
16787	return boolean True .
16788	if ImportError exception is caught ,
16789	skip this loop iteration ,
16790	otherwise if call to the method finder.find_module with an argument name evaluates to true ,
16791	return boolean True .
16792	if not ,
16793	skip this loop iteration ,
16794	if KeyError exception is caught ,
16795	for every hook in sys.path_hooks ,
16796	try ,
16797	call the function hook with an argument entry , substitute the result for finder .
16798	if call to the method finder.find_module with an argument name evaluates to true ,
16799	return boolean True .
16800	if not ,
16801	break from the loop execution ,
16802	if ImportError exception is caught ,
16803	skip this loop iteration ,
16804	if not ,
16805	if entry is a directory ,
16806	try ,
16807	call the method imp.find_module with 2 arguments : module_name and list containing element entry , assign the result to file_ , _ , and _ , respectively
16808	if file_ is true ,
16809	close file_ file descriptor .
16810	return boolean True .
16811	if ImportError exception is caught ,
16812	do nothing .
16813	if not ,
16814	return boolean False .
16815	from django.conf import settings into default name space .
16816	from django.utils.safestring import mark_safe into default name space .
16817	from django.utils import six into default name space .
16818	define the function format with 6 arguments : number , decimal_sep , decimal_pos set to None , grouping set to integer 0 ,
16819	if settings.USE_L10N is true , substitute settings.USE_THOUSAND_SEPARATOR for use_grouping , otherwise substitute settings.USE_L10N for use_grouping .
16820	if use_grouping is true substitute it for use_grouping , otherwise substitute force_grouping for use_grouping .
16821	if use_grouping is true and grouping is greater than integer 0 , use_grouping is boolean True , otherwise it is boolean False .
16822	if number is an integer and use_grouping is false and decimal_pos is false ,
16823	call the function six.text_type with an argument number , use the result as an argument for the call to the function mark_safe , return the result .
16824	sign is an empty string .
16825	call the function six.text_type with an argument number , substitute the result for str_number .
16826	if first element of str_number equals a string STR0 .
16827	sign is a string STR0 .
16828	remove the first element from str_number .
16829	if STR0 is not contained in str_number ,
16830	split str_number by STR0 , substitute the result for int_part and dec_part , respectively .
16831	if decimal_pos is not None ,
16832	substitute first decimal_pos elements of dec_part for dec_part .
16833	if not ,
16834	substitute str_number and an empty string for int_part and dec_part .
16835	if decimal_pos is not None
16836	subtract length of dec_part from decimal_pos , multiply the number of character STR0 by the result , append the resulting string to dec_part , substitute it for dec_part .
16837	if dec_part is true ,
16838	add decimal_sep and dec_part , substitute the result for dec_part .
16839	if use_grouping is true ,
16840	int_part_gd is an empty string .
16841	for every cnt and digit in enumerated list int_part with reversed ordering of elements ,
16842	if cnt is true and remained of dividing cnt with grouping is zero ,
16843	increment int_part_gd by thousand_sep .
16844	append digit to int_part_gd .
16845	invert the ordering of elements of int_part_gd , substitute it for int_part .
16846	sum sign , int_part and dec_part , return the result .
16847	from __future__ import unicode_literals into default name space .
16848	from django.utils import six into default name space .
16849	from django.utils.six.moves import zip into default name space .
16850	ESCAPE_MAPPINGS is an dictionary with 10 initial entries : None for STR0 , None for STR , None for STR1 , STR2 for STR3 , STR4 for STR5 , STR for STR6 , STR7 for STR8 , STR9 for STR10 , STR11 for STR12 and None for STR13 .
16851	derive the class Choice from list base class .
16852	derive the class Group from list base class .
16853	derive the class NonCapture from list base class .
16854	define the function normalize with an argument pattern .
16855	result is an empty list .
16856	non_capturing_groups is an empty list .
16857	consume_next is boolean True .
16858	call the function next_char with an argument iterator pattern , substitute the result for pattern_iter .
16859	num_args is an integer 0 .
16860	try ,
16861	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16862	if StopIteration exception ,
16863	return a list with an element tuple with 2 elements : an empty string and an empty list .
16864	try ,
16865	endless loop ,
16866	if escaped is true ,
16867	append ch to result .
16868	otherwise if ch equals a string STR0 ,
16869	append string STR0 to result .
16870	otherwise if ch equals a string STR0 ,
16871	raise an NotImplementedError exception with an argument string STR0 .
16872	otherwise if ch equals a string STR0 ,
16873	do nothing .
16874	otherwise if ch equals a string STR0 ,
16875	skip this loop iteration .
16876	otherwise if ch equals a string STR0 ,
16877	remove first element from non_capturing_groups , substitute it for start .
16878	inner is an instance of NonCapture , created with elements of result from start index to the end .
16879	append list with element inner to list containing first start elements of result , substitute it for result .
16880	otherwise if ch equals a string STR0 ,
16881	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16882	append ch to result .
16883	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16884	while escaped is true or ch is not equal to a string STR0 ,
16885	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16886	otherwise if ch equals a string STR0 ,
16887	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16888	if ch is not equal to a sring STR0 or escaped is true ,
16889	name is a string STR0 formated with num_args .
16890	increment num_args by one .
16891	instantiate a class Group with 2 arguments : string STR0 formated with name , and name , append it to result .
16892	call the function walk_to_end with 2 arguments : ch and pattern_iter .
16893	if not ,
16894	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16895	if ch is contained in string STR0 ,
16896	call the function walk_to_end with 2 arguments : ch and pattern_iter .
16897	otherwise if ch equals a string STR0 ,
16898	append length of result to non_capturing_groups .
16899	otherwise if ch equals a string STR0 ,
16900	raise an ValueError with an argument string STR0 formated with ch .
16901	if not ,
16902	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16903	if ch is not equal to string STR0 or string STR1 ,
16904	raise an ValueError with an argument string STR0 formated with ch .
16905	if ch equals a string STR0 ,
16906	terminal_char is an string STR0 .
16907	if not ,
16908	terminal_char is an string STR0 .
16909	name is an empty list .
16910	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16911	while ch is not equal to terminal_char ,
16912	append ch to result .
16913	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16914	join elements of name into a string , substitute it for param .
16915	if terminal_char is not equal to string STR0 ,
16916	instantiate a class Group with 2 arguments : string STR0 formated with param , and param , append it to result .
16917	call the function walk_to_end with 2 arguments : ch and pattern_iter .
16918	if not ,
16919	instantiate a class Group with 2 arguments : string STR0 formated with param , and None , append it to result .
16920	otherwise if ch is contained in string STR0 ,
16921	call the function get_quantifier with 2 arguments : ch and pattern_iter , substitute the result for count and ch , respectively .
16922	if ch is true ,
16923	consume_next is boolean False .
16924	if count is equal to integer 0 .
16925	if call to the function contains with 2 arguments : last element of result and Group , evaluates to true ,
16926	last element of result is an instance of Choice class , created with an argument list with 2 elements : None and last element of result .
16927	if not ,
16928	remove the first element from result .
16929	otherwise if count is greater than integer 1 ,
16930	create a list with count decremented by 1 number of last element of result elements , extend list result with it .
16931	if not ,
16932	append ch to result .
16933	if consume_next is true ,
16934	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16935	if not ,
16936	consume_next is boolean True .
16937	if StopIteration exception ,
16938	do nothing .
16939	if NotImplementedError exception ,
16940	return a list with an element tuple with 2 elements : an empty string and an empty list .
16941	call the function flatten_result with an argument result , unpack the resulting list and zip it in the list of tuples , return the result .
16942	define the function next_char with an argument input_iter .
16943	for every ch in input_iter ,
16944	if ch is not equal to string '\STR .
16945	yield ch and boolean False .
16946	skip this loop iteration .
16947	get the next element of the iterable pattern_iter , assign the result for ch .
16948	get the value under ch key of the ESCAPE_MAPPINGS dictionary , if it exists substitute it for representative , if not substitute ch for representative .
16949	if representative is None ,
16950	skip this loop iteration .
16951	yield representative and boolean True .
16952	define the function walk_to_end with 2 arguments ch and input_iter .
16953	if ch equal a string STR0 ,
16954	nesting is integer 1 .
16955	if not ,
16956	nesting is integer 0 .
16957	for every ch and escaped in input_iter ,
16958	if escaped is true ,
16959	skip this loop iteration .
16960	otherwise if ch equals a string STR0 ,
16961	increment nesting by one .
16962	otherwise if ch equals a string STR0 ,
16963	if nesting is false ,
16964	return nothing .
16965	decrement nesting by one .
16966	define the function get_quantifier with 2 arguments ch and input_iter .
16967	if ch is contained in string STR0 ,
16968	try ,
16969	get the next element of the iterable pattern_iter , assign the result for ch2 and escaped , respectively .
16970	if StopIteration exception ,
16971	ch2 is None .
16972	if ch2 equals string STR0 ,
16973	ch2 is None .
16974	if ch equals string STR0 ,
16975	return integer 1 and ch2 .
16976	return integer 0 and ch2 .
16977	quant is an empty list .
16978	while ch is not equal to a string STR0 ,
16979	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16980	append ch to quant .
16981	remove last element for quant .
16982	join elements of quant into a string , split it by string STR0 , substitute the result for values .
16983	try ,
16984	get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
16985	if StopIteration exception ,
16986	ch is None .
16987	if ch equals a string STR0 ,
16988	ch is None .
16989	convert first element of values into a integer , return the result and ch .
16990	define the function contains with 2 arguments source and inst .
16991	if source is an instance of inst class ,
16992	return boolean True .
16993	if source is an instance of NonCapture class ,
16994	for every elt in source ,
16995	call the function contains with 2 arguments : elt and inst , if it evaluates to true ,
16996	return boolean True .
16997	return boolean False .
16998	define the function flatten_result with an argument source .
16999	if source is None ,
17000	return a list containing an empty string and a list containing an empty list .
17001	if source is an instance of Group class ,
17002	if second element of source is None ,
17003	params is an empty list ,
17004	if not ,
17005	params is a list with second element of source as a element .
17006	return a list containing first element of source and a list containing params .
17007	result is a list containing an empty string .
17008	result_args is a list containing an empty list .
17009	pos and last are integer 0 .
17010	for every pos and elt in enumerated iterable source ,
17011	if elt is an instance of six.string_types class ,
17012	skip this loop iteration .
17013	join source list elements from last till pos indexes into a string , substitute the result for piece .
17014	if elt is an instance of Group class ,
17015	increment piece by firs element of elt .
17016	substitute second element of elt for param .
17017	if not ,
17018	param is None .
17019	increment pos by one , substitute the result for last .
17020	for every i in range of integers from 0 to length of result , not included ,
17021	increment i-th element of result by piece .
17022	if param is true ,
17023	append param to i-th element of result_args .
17024	if elt is an instance of Choice or NonCapture classes ,
17025	if elt is an instance of NonCapture class ,
17026	elt is an list with an element elt .
17027	inner_result and inner_args are empty lists .
17028	for every item in elt ,
17029	call the function flatten_result with an argument item , assign the result to res and args , respectively .
17030	extend list inner_result with res .
17031	extend list inner_args with args .
17032	new_result is an empty list .
17033	new_args is an empty list .
17034	zip elements of result and result_args into a list of tuples , for every item and args in the result ,
17035	zip elements of inner_result and inner_args into a list of tuples , for every i_item and i_args in the result ,
17036	sum item and i_item together , append the result to new_result .
17037	append i_args to args , append new_args with the result .
17038	substitute new_result for result .
17039	substitute new_args for result_args .
17040	if pos is greater than or equal to last ,
17041	join elements of list source from index last to the end into a string , substitute it for piece .
17042	for every i in range of integers from 0 to length of result , not included ,
17043	increment i-th element of result by piece .
17044	return result and result_args .
17045	from django.utils.functional import curry and Promise into default name space .
17046	from django.utils import six into default name space .
17047	derive the class EscapeData from object base class .
17048	do nothing .
17049	derive the class EscapeBytes from bytes and EscapeData base classes .
17050	do nothing .
17051	derive the class EscapeText from six.text_type and EscapeData base classes .
17052	do nothing .
17053	if six.PY3 is true ,
17054	substitute EscapeText for EscapeString .
17055	if not ,
17056	substitute EscapeBytes for EscapeString .
17057	substitute EscapeText for EscapeUnicode .
17058	derive the class SafeData from object base class .
17059	define the method __html__ with an argument self .
17060	return self .
17061	derive the class SafeBytes from bytes and SafeData base classes .
17062	define the method __add__ with 2 arguments self and rhs .
17063	call the __add__ method with an arguments rhs from the base class of the class SafeBytes , substitute the result for t .
17064	if rhs is an instance of SafeText ,
17065	return an instance of SafeText , created with an argument t .
17066	otherwise if rhs is an instance of SafeBytes ,
17067	return an instance of SafeBytes , created with an argument t .
17068	return t .
17069	define the method _proxy_method with 3 arguments self , unpacked list args and unpacked dictionary kwargs .
17070	remove kwargs dictionary element under the STR0 key , substitute it for method .
17071	call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data .
17072	if data is an instance of bytes ,
17073	return an instance of SafeBytes , created with an argument data .
17074	if not ,
17075	return an instance of SafeText , created with an argument data .
17076	call the function curry with 2 arguments : _proxy_method and method set to bytes.decode , substitute the result for decode .
17077	derive the class SafeText from six.text_type and SafeData base classes .
17078	define the method __add__ with 2 arguments self and rhs .
17079	call the __add__ method with an arguments rhs from the base class of the class SafeText , substitute the result for t .
17080	if rhs is an instance of SafeData .
17081	return an instance of SafeText , created with an argument t .
17082	return t .
17083	define the method _proxy_method with 3 arguments self , unpacked list args and unpacked dictionary kwargs .
17084	remove kwargs dictionary element under the STR0 key , substitute it for method .
17085	call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data .
17086	if data is an instance of bytes .
17087	return an instance of SafeBytes , created with an argument data .
17088	if not ,
17089	return an instance of SafeText , created with an argument data .
17090	call the function curry with 2 arguments : _proxy_method and method set to six.text_type.encode , substitute the result for encode .
17091	if six.PY3 is true ,
17092	substitute SafeText for SafeString .
17093	if not ,
17094	substitute SafeBytes for SafeString .
17095	substitute SafeText for SafeUnicode .
17096	define the function mark_safe with an argument s .
17097	if s is an instance of SafeData .
17098	return s .
17099	if s is an instance of bytes or Promise and s._delegate_bytes is true ,
17100	return an instance of SafeBytes , created with an argument s .
17101	if s is an instance of six.text_type or Promise ,
17102	return an instance of SafeText , created with an argument s .
17103	return an instance of SafeText , created with an argument s converted into a string .
17104	define the function mark_for_escaping with an argument s .
17105	if s is an instance of SafeData or EscapeData ,
17106	return s .
17107	if s is an instance of bytes or Promise and s._delegate_bytes is true ,
17108	return an instance of EscapeBytes , created with an argument s .
17109	if s is an instance of six.text_type or Promise ,
17110	return an instance of EscapeText , created with an argument s .
17111	return an instance of EscapeBytes , created with an argument , reuslt of the call to the function bytes with an argument s .
17112	import module opera .
17113	import module sys .
17114	import module types .
17115	__author__ is a string STR0 .
17116	__version__ is a string STR0 .
17117	if first element of sys.version_info equals integer 2 , PY2 is boolean True , otherwise it is boolean False .
17118	if first element of sys.version_info equals integer 3 , PY3 is boolean True , otherwise it is boolean False .
17119	if PY3 is true ,
17120	substitute str for string_types .
17121	substitute int for integer_types .
17122	substitute type for class_types .
17123	substitute str for text_type .
17124	substitute bytes for binary_type .
17125	substitute sys.maxsize for MAXSIZE .
17126	if not ,
17127	substitute basestring for string_types .
17128	integer_types is a tuple with 2 elements int and long .
17129	class_types is a tuple with 2 elements : type and types.ClassType .
17130	substitute unicode for text_type .
17131	substitute str for binary_type .
17132	if sys.platform starts with string STR0 ,
17133	bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
17134	if not ,
17135	derive class X from the object base class .
17136	define the method __len__ with an argument self .
17137	bitwise shift integer 1 to the left by 31 spaces , return the result .
17138	try
17139	instantiate class X , get its length .
17140	if OverflowError exception is caught ,
17141	bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
17142	if not ,
17143	bitwise shift integer 1 to the left by 63 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
17144	delete X .
17145	define the function _add_doc with 2 arguments : func and doc .
17146	substitute doc for func.__doc__ .
17147	define the function _import_module with an argument name .
17148	call the function __import__ with an argument name .
17149	return value under the name key of the sys.modules dictionary .
17150	derive class _LazyDescr from the object base class .
17151	define the method __init__ with 2 arguments : self and name .
17152	substitute name for self.name .
17153	define the method __get__ with 3 arguments : self , obj and tp .
17154	try ,
17155	call the method self._resolve , substitute the result for result .
17156	if ImportError exception is caught ,
17157	raise an AttributeError with an argument string STR0 , formated with self.name .
17158	set self.name attribute of the obj object to result .
17159	delete self.name attribute from the obj.__class__ object .
17160	return result .
17161	derive class MovedModule from the _LazyDescr base class .
17162	define the method __init__ with 4 arguments : self , name , old and new set to None .
17163	call the __init__ method with an argument name from the base class of the MovedModule class .
17164	if PY3 is true ,
17165	if new is None ,
17166	substitute name for new .
17167	substitute new for self.mod .
17168	if not ,
17169	substitute old for self.mod .
17170	define the method _resolve with an argument self .
17171	call the function _import_module with an argument self.mod , return the result .
17172	define the method __getattr__ with 2 arguments : self and attr set to None .
17173	if attr equals any of the strings STR0 , STR1 or STR2 and self.mod is not contained in sys.modules ,
17174	raise an AttributeError with an argument attr .
17175	try ,
17176	call the method self._resolve , substitute the result for _module .
17177	if ImportError exception is caught ,
17178	raise an AttributeError with an argument attr .
17179	get attr attribute from the _module object , substitute it for value .
17180	set attr attribute of the self object to value .
17181	return value .
17182	derive class _LazyModule from the types.ModuleType base class .
17183	define the method __init__ with 2 arguments : self and name .
17184	call the method __init__ with an argument name form the base class of the class _LazyModule .
17185	substitute self.__class__.__doc__ for self.__doc__ .
17186	define the method __dir__ with an argument self .
17187	attrs is a list with 2 elements : strings STR0 and STR1 .
17188	append attr.name to attrs for every attr in self._moved_attributes .
17189	return attrs .
17190	_moved_attributes is an empty list .
17191	derive class MovedAttribute from the _LazyDescr base class .
17192	define the method __init__ with 6 arguments : self , name , old_mod , new_mod , old_attr set to None , new_attr set to None .
17193	call the method __init__ with an argument name form the base class of the class MovedAttribute .
17194	if PY3 is true ,
17195	if new_mod is None ,
17196	substitute name for new_mod .
17197	substitute new_mod for self.mod .
17198	if new_attr is None ,
17199	if old_attr is None ,
17200	substitute name for new_attr .
17201	if not ,
17202	substitute old_attr for new_attr .
17203	substitute new_attr for self.attr .
17204	if not ,
17205	substitute old_mod for self.mod .
17206	if old_attr is None ,
17207	substitute name for old_attr .
17208	substitute old_attr for self.attr .
17209	define the method _resolve with an argument self .
17210	call the function _import_module with an argument self.mod , substitute the result for module .
17211	gett self.attr from the module object , return it .
17212	derive class _MovedItems from the _LazyModule base class .
17213	_moved_attributes is a list with 55 initial elements , 13 of them are the results of the call to the function MovedAttribute , with different 3 string arguments , the others are results of the call to the function MovedModule called with 3 string arguments .
17214	for every attr in _moved_attributes ,
17215	set attr.name attribute of the _MovedItemst object to attr .
17216	if attr is an instance of MovedModule .
17217	concatenate __name__ , string STR0 and attr.name together , use it as an key to get the value from the sys.modules dictionary , substitute attr for the obtained value .
17218	delete attr .
17219	substitute _moved_attributes for _MovedItems._moved_attributes .
17220	append string STR0 to __name__ , use it as an argument to instantiate _MovedItems class , assign it to moves , and to value under the STR1 appended to __name__ key of the sys.modules dictionary .
17221	derive class Module_six_moves_urllib_parse from the _LazyModule base class .
17222	_urllib_parse_moved_attributes is a list with 16 elemetns , all of them are the results of the call to the function MovedAttribute with different 3 string arguments .
17223	for every attr in _urllib_parse_moved_attributes ,
17224	set attr.name attribute of the Module_six_moves_urllib_parse object to attr .
17225	delete attr .
17226	substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes .
17227	call the method Module_six_moves_urllib_request with an argument : string STR0 appended to __name__ , assign the result to the value under the string STR1 appended to __name__ key of the sys.modules dictionary , and to the value under the string STR2 appended to __name__ key of the sys.modules dictionary .
17228	derive class Module_six_moves_urllib_error from the _LazyModule base class .
17229	_urllib_error_moved_attributes is a list with 3 elements : result of the call to the function MovedAttribute with 3 arguments : strings STR0 , STR1 , STR2 , result of the call to the function MovedAttribute with 3 arguments : strings STR3 , STR4 , STR5 and result of the call to the function MovedAttribute with 3 arguments : strings STR6 , STR7 , STR8 .
17230	for every attr in _urllib_error_moved_attributes ,
17231	set attr.name attribute of the Module_six_moves_urllib_error object to attr .
17232	delete attr .
17233	substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes .
17234	call the method Module_six_moves_urllib_request with an argument : string STR0 appended to __name__ , assign the result to the value under the string STR1 appended to __name__ key of the sys.modules dictionary , and to the value under the string STR2 appended to __name__ key of the sys.modules dictionary .
17235	derive class Module_six_moves_urllib_request from the _LazyModule base class .
17236	_urllib_request_moved_attributes is an list with 33 elements , all of them are the results of the call to the function MovedAttribute with 3 different string arguments .
17237	for every attr in _urllib_request_moved_attributes ,
17238	set attr.name attribute of the Module_six_moves_urllib_request object to attr .
17239	delete attr .
17240	substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes .
17241	call the method Module_six_moves_urllib_request with an argument : string STR0 appended to __name__ , assign the result to the value under the string STR1 appended to __name__ key of the sys.modules dictionary , and to the value under the string STR2 appended to __name__ key of the sys.modules dictionary .
17242	derive class Module_six_moves_urllib_response from the _LazyModule base class .
17243	_urllib_response_moved_attributes is a list with 4 elements : result of the function MovedAttribute , called with 3 arguments : strings STR0 , STR1 and STR2 , result of the function MovedAttribute , called with 3 arguments : strings STR3 , STR4 , STR5 , result of the function MovedAttribute , called with 3 arguments : strings STR6 , STR7 , STR8 and result of the function MovedAttribute , called with 3 arguments : strings STR9 , STR10 , STR11 .
17244	for every attr in _urllib_response_moved_attributes ,
17245	set attr.name attribute of Module_six_moves_urllib_response object to attr .
17246	delete attr .
17247	substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes .
17248	instantiate class Module_six_moves_urllib_response with an argument , string STR0 appended to __name__ , assign it to value under the string STR1 appended to __name__ key of the sys.modules dictionary , and to value under the string STR2 appended to __name__ key of the sys.modules dictionary .
17249	derive class Module_six_moves_urllib_robotparser from the _LazyModule base class .
17250	_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class , created with 3 argument : strings , STR0 , STR1 , STR2 .
17251	for every attr in _urllib_robotparser_moved_attributes ,
17252	set attr.name attribute of Module_six_moves_urllib_robotparser object to attr .
17253	delete attr .
17254	substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes .
17255	instantiate class Module_six_moves_urllib_robotparser with an argument , string STR0 appended to __name__ , assign it to value under the string STR1 appended to __name__ key of the sys.modules dictionary , and to value under the string STR2 appended to __name__ key of the sys.modules dictionary .
17256	derive class Module_six_moves_urllib from the types.ModuleType base class .
17257	append string STR0 to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for parse .
17258	append string STR0 to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for error .
17259	append string STR0 to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for request .
17260	append string STR0 to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for response .
17261	append string STR0 to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for robotparser .
17262	define the method __dir__ with an argument self .
17263	return a list with 5 elements : strings STR0 , STR1 , STR2 , STR3 and STR4 .
17264	instantiate class Module_six_moves_urllib with an argument , string STR0 appended to __name__ , substitute it for value under the string STR1 appended to __name__ key of the sys.modules dictionary .
17265	define the function add_move with an argument move .
17266	set move.name attribute of the _MovedItems to move .
17267	define the function remove_move with an argument name .
17268	try ,
17269	delete name attribute of the _MovedItems object .
17270	if AttributeError exception is caught ,
17271	try ,
17272	delete entry under the name key of the moves.__dict__ dictionary .
17273	if NameError exception is caught ,
17274	raise an AttributeError with an argument string STR0 , formated with a tuple with an element name .
17275	if PY3 is true ,
17276	_meth_func is a string STR0 .
17277	_meth_self is a string STR0 .
17278	_func_closure is a string STR0 .
17279	_func_code is a string STR0 .
17280	_func_defaults is a string STR0 .
17281	_func_globals is a string STR0 .
17282	_iterkeys is a string STR0 .
17283	_itervalues is a string STR0 .
17284	_iteritems is a string STR0 .
17285	_iterlists is a string STR0 .
17286	if not ,
17287	_meth_func is a string STR0 .
17288	_meth_self is a string STR0 .
17289	_func_closure is a string STR0 .
17290	_func_code is a string STR0 .
17291	_func_defaults is a string STR0 .
17292	_func_globals is a string STR0 .
17293	_iterkeys is a string STR0 .
17294	_iterkeys is a string STR0 .
17295	_iteritems is a string STR0 .
17296	_iterlists is a string STR0 .
17297	try ,
17298	substitute next for advance_iterator .
17299	if NameError exception is caught ,
17300	define the function advance_iterator with an argument it .
17301	return next element of the iterable it .
17302	substitute klass.__dict__ for next .
17303	try ,
17304	substitute callable for callable .
17305	if NameError exception is caught ,
17306	define the function callable with an argument obj .
17307	if STR0 is contained in klass.__dict__ for any klass in __mro__ field of the obj class , return boolean True , otherwise return False .
17308	if PY3 is true ,
17309	define the function get_unbound_function with an argument unbound .
17310	return unbound .
17311	substitute Iterator for create_bound_method .
17312	substitute object for Iterator .
17313	if not ,
17314	define the function get_unbound_function with an argument unbound .
17315	return unbound.im_func .
17316	define the function create_bound_function with 2 arguments : func and obj .
17317	call the method types.MethodType with 3 arguments : func , obj and obj.__class__ , return the result .
17318	derive the class Iterator from the base class object .
17319	define the method next with an argument self .
17320	call the function type with an argument self , on the result call the method __next__ with an argument self , return the result .
17321	substitute callable for callable .
17322	call the function _add_doc with 2 arguments : get_unbound_function and string STR0 .
17323	call the method operator.attrgetter with an argument _meth_func , substitute the result for get_method_function .
17324	call the method operator.attrgetter with an argument _meth_self , substitute the result for get_method_self .
17325	call the method operator.attrgetter with an argument _func_closure , substitute the result for get_method_closure .
17326	call the method operator.attrgetter with an argument _func_code , substitute the result for get_method_code .
17327	call the method operator.attrgetter with an argument _func_defaults , substitute the result for get_method_defaults .
17328	call the method operator.attrgetter with an argument _func_globals , substitute the result for get_method_globals .
17329	define the function iterkeys with 2 arguments : d and unpacked dictionary kw .
17330	get _iterkeys attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable , return it .
17331	define the function itervalues with 2 arguments : d and unpacked dictionary kw .
17332	get _itervalues attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable , return it .
17333	define the function iteritems with 2 arguments : d and unpacked dictionary kw .
17334	get _iteritems attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable , return it .
17335	define the function iterlists with 2 arguments : d and unpacked dictionary kw .
17336	get _iterlists attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable , return it .
17337	if PY3 is true ,
17338	define the function b with an argument s .
17339	call the method e.encode with an argument string STR0 .
17340	define the function u with an argument s .
17341	return s .
17342	substitute chr for unichr .
17343	if second element of sys.version_info is smaller than or equal to integer 1 ,
17344	define the function int2byte with an argument i .
17345	call the function bytes with an argument tuple with an element i , return the result .
17346	if not ,
17347	call the method operator.methodcaller with 3 arguments : string STR0 , integer 1 and string STR1 , substitute the result for int2byte .
17348	call te method operator.itemgetter with an argument integer 0 , substitute the result for byte2int .
17349	substitute operator.getitem for indexbytes .
17350	substitute iter for iterbytes .
17351	import io .
17352	substitute io.StringIO for StringIO .
17353	substitute io.BytesIO for BytesIO .
17354	if not ,
17355	define the function b with an argument s .
17356	return s .
17357	define the function u with an argument s .
17358	replace every occurrence of raw string STRspecial in s with a raw string '\\\STR , use the result and string STR0 , as arguments for the call to the unicode function , return the result .
17359	substitute unichr for unichr .
17360	substitute chr for int2byte .
17361	define the function byte2int with an argument bs .
17362	get the integer representation of the first element of bs , return it .
17363	define the function indexbytes with 2 arguments buf and i .
17364	get the integer representation of the i-th element of buf , return it .
17365	define the function iterbytes with an argument buf .
17366	convert byte to its integer representation , return all of the results for every byte in buf .
17367	import StringIO .
17368	assign StringIO.StringIO to StringIO and BytesIO .
17369	call the function _add_doc with 2 arguments : b and string STR0 .
17370	call the function _add_doc with 2 arguments : u and string STR0 .
17371	if PY3 is true ,
17372	get STR0 attribute from the moves.builtins object , substitute it for exec_ .
17373	define the function reraise with 3 arguments : tp , value and tb set to None .
17374	if value.__traceback__ is not tb ,
17375	raise an value.with_traceback exception with an argument tb .
17376	raise an exception value .
17377	if not ,
17378	define the function exec with 3 arguments : _code_ , _globs_ set to None and _locs_ set to None .
17379	if _globs_ is None ,
17380	call the method sys._getframe with an argument 1 , substitute the result for frame .
17381	substitute frame.f_globals for _globs_ .
17382	if _locs_ is None ,
17383	substitute if _locs_ is None for _locs_ .
17384	delete frame .
17385	otherwise if _locs_ is None ,
17386	substitute _globs_ with an argument _locs_ .
17387	execute code statement STR0 .
17388	call the function exec_ with an argument string STR0 .
17389	get attribute STR0 from the moves.builtins object , if it exists substitute it for print_ , if not print_ is None .
17390	if print_ is None ,
17391	define the function print_ with 2 arguments : unpacked list args and unpacked dictionary kwargs .
17392	remover STR0 key from the kwargs dictionary , if it exists substitute it for fp , if not substitute sys.stdout for fp .
17393	if fp is None ,
17394	return nothing .
17395	define the function write with an argument data .
17396	if data is not an instance of basestring ,
17397	convert data to string , substitute it for data .
17398	if fp is an instance of file and data is an instance of unicode and fp.encoding is not None ,
17399	get STR0 attribute from fp object , substitute it for errors if it exists , if not errors is None .
17400	if errors is None ,
17401	errors is a string STR0 .
17402	call the method data.encode with 2 arguments : fp.encoding and errors , substitute the result for data .
17403	write data to fp .
17404	want_unicode is boolean False .
17405	remove STR0 key from the kwargs dictionary , if it exists substitute it for sep , if not sep is None .
17406	if sep is not None ,
17407	if sep is an instance of unicode ,
17408	want_unicode is boolean True .
17409	otherwise if sep is not an instance of string type ,
17410	raise an TypeError exception with an argument string STR0 .
17411	remove STR0 key from the kwargs dictionary , if it exists substitute it for end , if not end is None .
17412	if end is not None ,
17413	if end is an instance of unicode ,
17414	want_unicode is boolean True .
17415	otherwise if end is not an instance of string type ,
17416	raise an TypeError exception with an argument string STR0 .
17417	if kwargs is true ,
17418	raise an TypeError exception with an argument string STR0 .
17419	if want_unicode is false ,
17420	for every arg in args ,
17421	if arg is an instance of unicode ,
17422	want_unicode is boolean True .
17423	break from the loop execution .
17424	if want_unicode is true ,
17425	convert newline character to unicode and substitute the result for newline .
17426	convert whitespace character to unicode and substitute the result for space .
17427	if not ,
17428	substitute newline character for newline .
17429	substitute string STR for space .
17430	if sep is None ,
17431	substitute space for sep .
17432	if end is None
17433	substitute space for end .
17434	for every i and arg in enumerated iterable args ,
17435	if i is true ,
17436	call the function write with an argument sep .
17437	call the function write with an argument arg .
17438	call the function write with an argument end .
17439	call the function _add_doc with 2 arguments : reraise and string STR0 .
17440	define the function with_metaclass with 2 arguments meta and unpacked list bases .
17441	derive the class metaclass form the meta base class .
17442	substitute type.__call__ for __call__ .
17443	substitute type.__init__ for __init__ .
17444	define the method __new__ with 4 arguments : cls , name , this_bases and d .
17445	if this_bases is None ,
17446	call the method type.__new__ with 4 arguments : cls , name , empty tuple and d , return the result .
17447	call the function meta with 3 arguments : name , base and d .
17448	return an instance of metaclass class , created with 3 arguments : string STR0 , None and an empty dictionary .
17449	define the function add_metaclass with an argument metaclass .
17450	define the function wrapper with an argument cls .
17451	call the method cls.__dict__.copy substitute the result for orig_vars .
17452	remove STR0 key from the orig_vars dictionary .
17453	remove STR0 key from the orig_vars dictionary .
17454	get the value under the STR0 key of the orig_vars dictionary , substitute it for slots .
17455	if slots is not None ,
17456	if slots is an instance of str ,
17457	slots is a list with an element , slots .
17458	for every slots_var in slots ,
17459	remove slots_var key from the orig_vars dictionary .
17460	return an instance of metaclass class , created with 3 arguments : cls.__name__ , cls.__bases__ and orig_vars .
17461	return wrapper .
17462	if PY3 is true ,
17463	_assertCountEqual is a strnig STR0 .
17464	_assertRaisesRegex is a strnig STR0 .
17465	_assertRegex is a strnig STR0 .
17466	substitute memoryview for memoryview .
17467	buffer_types is a tuple with 3 elements : bytes , bytearray and memoryview .
17468	if not ,
17469	_assertCountEqual is a strnig STR0 .
17470	_assertRaisesRegex is a strnig STR0 .
17471	_assertRegex is a strnig STR0 .
17472	if sys.platform starts with a string STR0 ,
17473	substitute memoryview for memoryview .
17474	if not ,
17475	substitute buffer for memoryview .
17476	buffer_types is a tuple with 2 elements bytearray and memoryview .
17477	define the function assertCountEqual with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
17478	get _assertCountEqual attribute of the self object , call the result with 2 arguments : unpacked list args , and unpacked dictionary kwargs , return the result .
17479	define the function assertRaisesRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
17480	get _assertRaisesRegex attribute of the self object , call the result with 2 arguments : unpacked list args , and unpacked dictionary kwargs , return the result .
17481	define the function assertRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
17482	get _assertRegex attribute of the self object , call the result with 2 arguments : unpacked list args , and unpacked dictionary kwargs , return the result .
17483	call the function MovedModule with 2 arguments : strings STR0 and STR1 , use the result as an argument for the call to the add_move function .
17484	call the function MovedModule with 2 arguments : strings STR0 and STR1 ,
17485	import module contextlib .
17486	try ,
17487	import threading .
17488	except ImportError .
17489	import dummy_threading as threading .
17490	derive the class RWLock from the object base class .
17491	define the method __init__ with an argument self .
17492	call the method threading.RLock , substitute the result for self.mutex .
17493	call the method threading.Semaphore with an argument integer 0 , substitute the result for self.can_read .
17494	call the method threading.Semaphore with an argument integer 0 , substitute the result for self.can_write .
17495	self.active_readers is an integer 0 .
17496	self.active_writers is an integer 0 .
17497	self.waiting_readers is an integer 0 .
17498	self.waiting_writers is an integer 0 .
17499	define the method reader_enters with an argument self .
17500	with self.mutex perform ,
17501	if self.active_writers and self.waiting_writers both equal to integer 0 ,
17502	increment self.active_readers by 1 .
17503	call the method self.can_read.release .
17504	if not ,
17505	increment self.waiting_readers by 1 .
17506	call the method self.can_read.acquire .
17507	define the method reader_leaves with an argument self .
17508	with self.mutex perform ,
17509	decrement self.active_readers by integer 1 ,
17510	if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0 ,
17511	increment self.active_writers by 1 .
17512	decrement self.waiting_writers by integer 1 ,
17513	call the method self.can_write.release .
17514	contextlib.contextmanager decorator ,
17515	define the method reader with an argument self .
17516	call the method self.reader_enters .
17517	try ,
17518	yield nothing .
17519	finally perform ,
17520	call the method self.reader_leaves .
17521	define the method writer_enters with an argument self .
17522	with self.mutex perform ,
17523	if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0 ,
17524	increment self.active_writers by integer 1 ,
17525	call the method self.can_write.release .
17526	if not ,
17527	increment self.waiting_writers by integer 1 ,
17528	call the method self.can_write.acquire .
17529	define the method writer_leaves with an argument self .
17530	with self.mutex perform ,
17531	decrement self.active_writers by integer 1 ,
17532	if self.waiting_writers is not equal to integer 0 ,
17533	increment self.active_writers by integer 1 ,
17534	decrement self.waiting_writers by integer 1 ,
17535	call the method self.can_write.release .
17536	otherwise if self.waiting_readers is not equal to integer 0 ,
17537	substitute self.waiting_readers for t .
17538	self.waiting_readers is integer 0 .
17539	increment self.active_readers by t .
17540	while t is greater than integer 0 ,
17541	call the method self.can_read.release .
17542	decrement t by integer 1 ,
17543	contextlib.contextmanager decorator ,
17544	define the method writer with an argument self .
17545	call the method self.writer_enters .
17546	try ,
17547	yield nothing .
17548	finally perform ,
17549	call the method self.writer_leaves .
17550	from django.utils import six into default name space .
17551	color_names is a tuple with 8 elements : strings STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 and STR7 .
17552	foreground is a dictionary created with elements : x appended to a string STR0 for value under the key x of color_names dictionary , for every x in sequence of integers from 0 to 7 .
17553	background is a dictionary created with elements : x appended to a string STR0 for value under the key x of color_names dictionary , for every x in sequence of integers from 0 to 7 .
17554	RESET is a string STR0 .
17555	opt_dict is an dictionary with 5 elements : STR0 for STR1 , STR2 for STR3 , STR4 for STR5 , STR6 for STR7 , and STR8 for STR9 .
17556	define the method colorize with 3 arguments : text set to an empty string , opts set to an empty tuple and unpacked dictionary kwargs .
17557	code_list is an empty list .
17558	if text is an empty string and length of opts equals integer 1 and first element of opts equals string STR0 ,
17559	format string STR0 with RESET , return the result .
17560	call the function six.iteritems with an argument kwargs , for every k and v in the result ,
17561	if k equals a string STR0 ,
17562	append value under the key v of foreground dictionary to code_list .
17563	otherwise if k equals a string STR0 ,
17564	append value under the key v of background dictionary to code_list .
17565	for every o in opts ,
17566	if o is contained in opt_dict ,
17567	append value under the 0 key of the opt_dict dictionary to code_list .
17568	if string STR0 is not contained in opts ,
17569	if text is true format with it and RESET a string STR0 , if not format it with an empty string and RESET , substitute the result for text .
17570	join elements of code_list in a string , separated by STR0 , format string STR1 with it , append text to the result if exists , return the string .
17571	define the function make_style with 2 arguments : opts set to an empty tuple and unpacked dictionary kwargs .
17572	return lambda function with text as argument and return value being result of the function colorize , called with 3 arguments : text , opts and unpacked dictionary kwargs .
17573	NOCOLOR_PALETTE is a string STR0 .
17574	DARK_PALETTE is a string STR0 .
17575	LIGHT_PALETTE is a string STR0 .
17576	PALETTES is a dictionary containing 3 elements , a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE ,
17577	a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE , and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE . substitute DARK_PALETTE for DEFAULT_PALETTE .
17578	define the function parse_color_setting with an argument config_string .
17579	if config_string is false ,
17580	return value under the DEFAULT_PALETTE key of the PALETTES dictionary .
17581	convert config_string to lowercase and split it by STR0 character , substitute the result for parts .
17582	get value under the config_string key of the PALETTES dictionary , call the copy method on the result and substitute it for palette .
17583	for every part in parts ,
17584	if part is contained in PALETTES ,
17585	get the value under the part key of the PALETTES dictionary , update with it palette dictionary .
17586	otherwise if STR0 is contained in part ,
17587	definition is an empty dictionary ,
17588	split part by STR0 character , substitute the result for role and instructions , respectively .
17589	convert role to uppercase .
17590	split instructions by STR0 character , substitute the result for styles .
17591	reverse the order of elements of styles .
17592	remove first element from styles , split it by the STR0 character , substitute the result for colors .
17593	reverse the order of colors elements ,
17594	remove the first element from colors , substitute it for fg .
17595	if fg is contained in color_names ,
17596	substitute fg for value under the STR0 key of definition dictionary .
17597	if colors is true and last element of colors is contained in color_names ,
17598	substitute last element of colors for value under the STR0 key of definition dictionary .
17599	opts is a tuple created out of elements s , for every s in styles is s is in the keys of the opt_dict dictionary .
17600	if opts is true ,
17601	substitute opts for value under the STR0 key of definition dictionary .
17602	if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true ,
17603	substitute definition for value under the role key of palette dictionary .
17604	if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary ,
17605	return None .
17606	return palette .
17607	from __future__ import unicode_literals into default name space .
17608	import module re .
17609	import module unicodedata .
17610	from gzip import GzipFile into default name space .
17611	from io import BytesIO into default name space .
17612	import module warnings .
17613	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
17614	from django.utils.encoding import force_text into default name space .
17615	from django.utils.functional import allow_lazy and SimpleLazyObject into default name space .
17616	from django.utils import six into default name space .
17617	from django.utils.six.moves import html_entities into default name space .
17618	from django.utils.translation import ugettext_lazy , ugettext as _ and pgettext into default name space .
17619	from django.utils.safestring import mark_safe into default name space .
17620	if six.PY2 is true ,
17621	from django.utils.encoding import force_unicode .
17622	if identity lambda function returns false , substitute the x for capfirst , if not call the function force_text with an argument x , convert the first element of the result to uppercase , append to it the rest of the result , substitute it for capfirst .
17623	call the function allow_lazy with 3 arguments : capfirst and six.text_type .
17624	call the function re.compile with 2 arguments : raw string STR0 and bitwise OR performed with 2 operands , re.U and re.S , substitute the result for re_words .
17625	call the function re.compile with 2 arguments : raw string STR0 and bitwise OR performed with 2 operands , re.U and re.S , substitute the result for re_chars .
17626	call the function re.compile with 2 arguments : raw string STR0 and bitwise OR performed with 2 operands , re.U and re.S , substitute the result for re_chars .
17627	call the function re.compile with an argument raw string STR0 , substitute the result for re_newlines .
17628	call the function re.compile with an argument raw string STR0 , substitute the result for re_camel_case .
17629	define the function wrap with 2 arguments text and width .
17630	call the function force_text with an argument text , substitute the result for text .
17631	define the function _generator .
17632	call the method text.splitlines with an argument boolean True , for every line in the result ,
17633	if line ends with a new line character substitute width incremented by integer 1 for max_width , if not substitute width for max_width .
17634	while length of line is grater than max_width ,
17635	get fist max_width incremented by 1 elements from line , find index of the first occurrenece of whitespace from the right side , add integer 1 to it , substitute the result for space .
17636	if space equals integer 0 ,
17637	find first index of whitespace occurrence in line , add integer 1 to it , substitute the result for space .
17638	if space equals integer 0 ,
17639	yield line .
17640	line is an empty string .
17641	break from the loop execution
17642	get the first space decremented with integer 1 elements from string line , append newline character to it , and yield the result .
17643	remove all the elements from space index of line .
17644	if line ends with a new line character substitute width incremented by integer 1 for max_width , if not substitute width for max_width .
17645	if line is true ,
17646	yield line .
17647	call the function _generator , join the result into a string , return the result .
17648	call the function allow_lazy with 2 arguments : wrap and six.text_type , substitute the result for wrap .
17649	derive the class Truncator form the SimpleLazyObject class .
17650	define the method __init__ with 2 arguments : self and text .
17651	call the method __init__ from the base class of the class Truncator , called with with an argument lambda function which returns result of the force_text function called with an argument text .
17652	define the method add_truncation_text with 3 arguments : self , text and truncate set to None .
17653	if truncate is None ,
17654	call the function pgettext with an argument STR0 , STR1 , substitute the result for truncate .
17655	call the function force_text with an argument truncate , substitute the result for truncate .
17656	if string STR0 is contained in truncate ,
17657	format truncate with a dictionary with an element : text for STR0 , return the result .
17658	if text ends with truncate ,
17659	return text .
17660	append truncate to text , return the result .
17661	define the method chars with 4 arguments : self , num , truncate set to None , html set to boolean False .
17662	convert num to an integer , substitute it for length .
17663	call the function unicodedata.normalize with 2 arguments : string STR0 and self._wrapped , substitute the result for text .
17664	substitute length for truncate_len .
17665	for every char in result of the self.add_truncation_text , called with 2 arguments : an empty string and truncate .
17666	call the method unicodedata.combining with an argument char , if it evaluates to false ,
17667	decrement truncate_len by integer 1 .
17668	if truncate_len equals integer 0 .
17669	break from the loop execution .
17670	if html is true ,
17671	call the function self._truncate_html with 5 arguments : length , truncate , text , truncate_len and boolean False , return the result .
17672	call the method self._text_chars with 4 arguments : length , truncate , text and truncate_len , return the result .
17673	call the function allow_lazy with an argument chars , substitute the result for chars .
17674	define the method _text_chars with 5 arguments : self , length , truncate , text and truncate_len .
17675	s_len is integer 0 .
17676	end_index is None .
17677	for every i and char in enumerated text ,
17678	call the function unicodedata.combining with an argument char , if it evaluates to true ,
17679	skip this loop iteration , s
17680	increment s_len by integer 1 ,
17681	if end_index is None and s_len is greater than truncate_len ,
17682	substitute i for end_index .
17683	if s_len is greater than length ,
17684	call the method self.add_truncation_text with 2 arguments : if end_index is greater than zero , first end_index elements of text , if not an empty string , and truncate , return the result .
17685	return text .
17686	define the method words with 4 arguments : self , num , truncate set to None , html set to boolean False .
17687	convert num to an integer , substitute the result for length .
17688	if html is true ,
17689	call the method self._truncate_html with 5 arguments : length , truncate , self._wrapped , length and boolean True , return the result .
17690	call the method self._text_words with 2 arguments length and truncate , return the result .
17691	call the function allow_lazy with an argument words , substitute the result for words .
17692	define the method _text_words with 3 arguments : self , length and truncate .
17693	split self._wrapped into words , substitute the result for words .
17694	if length of words is greater than length ,
17695	substitute first length elements of words for words .
17696	call the method self.add_truncation_text with 2 arguments : elements of words joined in a string , separated with whitespaces , and truncate , return the result .
17697	return elements of words joined in a string , separated with whitespaces .
17698	define the method _truncate_html with 6 arguments : self , length , truncate , text , truncate_len and words .
17699	if words is not empty and length is smaller than or equal to integer 0 ,
17700	return an empty string .
17701	html4_singlets is a tuple with 9 elements : strings STR , STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 and STR7 .
17702	pos is equal to integer 0 .
17703	end_text_pos is equal to integer 0 .
17704	current_len is equal to integer 0 .
17705	open_tags is an empty list .
17706	if words is true , substitute re_words for regex , if not substitute re_chars for regex .
17707	while current_len is smaller than or equal to length ,
17708	call the method regex.search with 2 arguments : text and pos .
17709	if m is false ,
17710	break from the loop execution ,
17711	call the method m.end with an argument integer 0 , substitute the result for pos .
17712	call the function m.group , if the result evaluates to true ,
17713	increment current_len by integer 1 ,
17714	if current_len equals truncate_len ,
17715	substitute pos for end_text_pos .
17716	skip this loop iteration .
17717	call the method m.group with an argument integer 0 , use it as an argument for the call to the re_tag.match function , substitute the result for tag .
17718	if tag is false or current_len is greater or equal to truncate_len ,
17719	skip this loop iteration .
17720	call the method tag.groups , substitute the result for closing_tag , tagname and self_closing , respectively .
17721	convert tagname to lowercase , substitute it for tagname .
17722	if self_closing is true or tagname is contained in html4_singlets ,
17723	do nothing .
17724	otherwise if closing_tag is true ,
17725	try ,
17726	get the index of the first occurrence of tagname , substitute it for i .
17727	if ValueError exception is caught ,
17728	do nothing .
17729	if not ,
17730	create a list out of open_tags elements form ( i+1 ) -th index to the end , substitute it for open_tags .
17731	if not ,
17732	insert tagname at the beginning of open_tags .
17733	if current_len is smaller than or equal to length ,
17734	return text .
17735	create a list out of fist end_text_pos text elemnts , substitue it for out .
17736	call the method self.add_truncation_text with 2 arguments : an empty string and truncate , substitute it for truncate_text .
17737	if truncate_text is true ,
17738	append truncate_text to out .
17739	for every tag in open_tags ,
17740	replace STR0 in string STR1 with tag , append the result to out .
17741	return out .
17742	define the function get_valid_filename with an argument s .
17743	call the function force_text with an argument s , strip the result of whitespaces from both ends , replace every occurrence of whitespaces in the previous result for STR0 , substitute the result for s .
17744	call the function re.sub with 3 arguments : raw string STR0 , an empty string and s , return the result .
17745	call the function allow_lazy with 2 arguments : get_valid_filename and six.text_type , substitute the result for get_valid_filename .
17746	define the function get_text_list with 2 arguments : list_ and last_word set to result of the function ugettext_lazy called with an argument string STR0 .
17747	is length of list_ equals integer 0 ,
17748	return an empty string .
17749	if length of list_ equals integer 1 ,
17750	call the function force_text with first element of list_ as an argument , return the result .
17751	return a string STR0 formated with 3 elements : result of the function force_text called with an argument i , separated by result of the function _ called with an argument string STR1 , for every i in list_ without last element , result of the function force_text called with an argument last_word , result of the function force_text called with an argument : last element of list_ .
17752	call the function allow_lazy with 2 arguments : get_text_list and six.text_type , substitute the result for get_text_list .
17753	define the function normalize_newlines with an argument text .
17754	call the function force_text with an argument text , substitute the result for text .
17755	call the method re_newlines.sub with 2 arguments : STR0 and text , return the result .
17756	call the function allow_lazy with 2 arguments : normalize_newlines and six.text_type , substitute the result for normalize_newlines .
17757	define the function phone2numeric with an argument phone .
17758	char2number is an dictionary , with 26 elements : 2 for STR0 , 2 for STR , 2 for STR1 , 3 for STR2 , 3 for STR3 , 3 for STR4 , 4 for STR5 , 4 for STR6 , 4 for STR7 , 4 for STR8 , 5 for STR9 , 5 for STR10 , 5 for STR11 , 6 for STR12 , 6 for STR13 , 6 for STR14 , 7 for STR15 , 7 for STR , 7 for STR , 7 for STR16 , 7 for STR17 , 8 for STR18 , 8 for STR19 , 8 for STR20 , 9 for STR21 , 9 for STR22 , 9 for STR23 and 9 for STR24 .
17759	for every c in phone converted to lowercase , join the value under the c key of the char2number dictionary into a string , return it .
17760	call the function allow_lazy with an argument phone2numeric , substitute the result for phone2numeric .
17761	define the function compress_string with an argument s .
17762	zbuf is an instance of BytesIO class .
17763	zfile is an instance of GzipFile class , created with 3 arguments : mode set to string STR0 , compresslevel set to integer 6 , and fileobj set to zbuf .
17764	call the method zfile.write with an argument s .
17765	call the method zfile.close .
17766	call the method zbuf.getvalue , return the result .
17767	derive the class StreamingBuffer from the object base class .
17768	define the method __init__ with an argument self .
17769	self.vals is an empty list .
17770	define the method write with 2 arguments : self and val .
17771	append val to self.vals .
17772	define the method read with an argument self .
17773	join elements of self.vals into a bytes string , substitute the result for ret .
17774	self.vals is an empty list .
17775	return ret .
17776	define the method flush with an argument self .
17777	return nothing .
17778	define the method close with an argument self .
17779	return nothing .
17780	define the function compress_sequence with an argument sequence .
17781	buf is an instance of StreamingBuffer class .
17782	zfile is an instance of GzipFile class , created with 3 arguments : mode set to string STR0 , compresslevel set to integer 6 , and fileobj set to buf .
17783	read data from buf file stream , yield the result .
17784	for every item in sequence ,
17785	write item to zfile stream .
17786	flush zfile stream buffer .
17787	read data from buf , yield the result .
17788	close zfile stream .
17789	read data from buf , yield the result .
17790	call the function re.compile with an argument string STR0 , substitute the result for ustring_re .
17791	define the function javascript_quote with 2 arguments : s and quote_double_quotes set to boolean False .
17792	msg is an string STR0 .
17793	call the function warnings.warn with 3 arguments : msg , RemovedInDjango19Warning and stacklevel as integer 2 .
17794	define the function fix with an argument match .
17795	get the unicode representation of result of the method match.group called with an integer 1 , format with in a string STR0 , return the result .
17796	if type of s equals bytes ,
17797	call the method s.decode with an argument string STR0 , substitute the result for s .
17798	otherwise if , type of s doesnt equal to six.text_type ,
17799	raise an TypeError with an argument s .
17800	replace every occurrence of STRspecial in s with '\\\STR .
17801	replace every occurrence of STRspecial in s with STR0 .
17802	replace every occurrence of STR0 in s with STR1 .
17803	replace every occurrence of STR0 in s with STR1 .
17804	replace every occurrence of STR in s with STR0 .
17805	replace every occurrence of STR0 in s with STR1 .
17806	if quote_double_quotes is true ,
17807	replace every occurrence of STR in s with STR0 .
17808	call the method ustring_re.sub with 2 arguments : fix and s , return the result .
17809	call the function allow_lazy with 2 arguments : javascript_quote and six.text_type , substitute the result for javascript_quote .
17810	call the function re.compile with 2 arguments : raw string STR0 ] * ( ? : ( ? : STR1\\ ] |\\ . ) * STR2 ] * ) + ) | \+ ) '' , and re.VERBOSE , substitute the result for smart_split_re .
17811	define the function smart_split with an argument text .
17812	call the function force_text with an argument text , substitute the result for text .
17813	call the method smart_split_re.finditer with an argument text , for every bit in result ,
17814	call the method bit.group with an argument integer 0 , yield the result .
17815	define the function _replace_entity with an argument match .
17816	call the method match.group with an argument integer 1 , substitute the result for text .
17817	if first element of text equals STR0 ,
17818	remove first element of text .
17819	try ,
17820	if first element of text is contained in STR0 .
17821	convert text without first element to hexadecimal integer , substitute it for c .
17822	if nor ,
17823	convert text to an integer , substitute it for c .
17824	call the method six.unichr with an argument c , return the result .
17825	if ValueError exception is caught ,
17826	call the method match.group with an argument integer 0 , return the result .
17827	if not ,
17828	try ,
17829	call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary , return the result .
17830	if OverflowError or ValueError exceptions are caught ,
17831	call the method match.group with an argument integer 0 , return the result .
17832	call the method re.compile with an argument raw string STR0 , substitute the result for _entity_re .
17833	define the function unescape_entities with an argument text .
17834	call the method _entity_re.sub with 2 arguments : _replace_entity and text , return the result .
17835	call the function allow_lazy with 2 arguments : unescape_entities and six.text_type , substitute the result for unescape_entities .
17836	define the function unescape_string_literal with an argument s .
17837	if first element of s is not contained in `` STR '' or last element of s is not equal to first element of s ,
17838	raise an ValueError exception wit an argument string STR0 , where STR1 is replaced with s .
17839	substitute first element of s for quote .
17840	remove first and last elements of s , replace every occurrence of string STR0 formated with quote with quote , replace every occurrence of raw string STRspecial in the result with string '\STR , return the result .
17841	call the function allow_lazy with an argument unescape_string_literal , substitute the result for unescape_string_literal .
17842	define the function slugify with an argument value .
17843	call the method unicodedata.normalize with 2 arguments : string STR0 and value , encode the result with 2 arguments : string STR1 , and string STR2 , call the method decode on the result with an argument string STR3 , substitute the result for value .
17844	call the method re.sub with 3 arguments : string STR0 , empty string and value , strip the result of whitespaces from both ends , and convert it to lowercase , substitute the result for value .
17845	call the function re.sub with 3 arguments : string STR0 , string STR1 and value , use the result as an argument for the call to the , mark_safe function , return the result .
17846	call the function allow_lazy with 2 arguments : slugify and six.text_type , substitute the result slugify .
17847	define the function camel_case_to_spaces with an argument value .
17848	call the method re_camel_case.sub with 2 arguments : raw string STR0 and value , strip the result of whitespaces from both ends ,
17849	from __future__ import unicode_literals into default name space .
17850	import module datetime .
17851	from django.utils.html import avoid_wrapping into default name space .
17852	from django.utils.timezone import is_aware and utc into default name space .
17853	from django.utils.translation import ugettext and ungettext_lazy into default name space .
17854	define the function timesince with d , now defaulting to None , reversed defaulting to False as arguments .
17855	chunks is a tuple containing 6 initial tuples :
17856	result of multiplication of integers : 60,60,24,365 , and return value of ungettext_lazy with 2 arguments : STR0 , STR1 , result of multiplication of integers : 60,60,24,30 , and return value of ungettext_lazy with 2 arguments : STR2 , STR3 , result of multiplication of integers : 60,60,24,7 , and return value of ungettext_lazy with 2 arguments : STR4 , STR5 , result of multiplication of integers : 60,60,24 , and return value of ungettext_lazy with 2 arguments : STR6 , STR7 , result of multiplication of integers : 60,60 , and return value of ungettext_lazy with 2 arguments : STR8 , STR9 , result of multiplication of integers : 60 , and return value of ungettext_lazy with 2 arguments : STR10 , STR11 , if d is not an instance of datetime.datetime ,
17857	call the function datetime.datetime with 3 arguments , d.year , d.month and d.day , substitute the result for d .
17858	if now equals to boolean True and now is not an instance of datetime.datetime ,
17859	call the function datetime.datetime with 3 arguments , now.year , now.month and now.day , substitute the result for now .
17860	if now is false ,
17861	call the function datetime.datetime with utc as argument if call to the is_aware ( d ) returns True , if not None is the argument , store the result in now .
17862	if reversed is True substitute difference of d and now for delta , if not substitute the difference of now and d for delta .
17863	multiply delta.days , integer 24 , integer 60 and integer 60 add delta.seconds to it , substitute the result for since .
17864	if since is lesser or equal to integer 0 ,
17865	call the function ugettext with STR0 as argument , use the result as the argument for the call to the avoid_wrapping function , return the result .
17866	for every i and tuple containing 2 elements : seconds and name , in enumerated chunks ,
17867	divide since by seconds , store the floored result in count .
17868	if count does not equals to integer 0 ,
17869	break the execution of the smallest enclosing loop .
17870	use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function , store the result in result .
17871	if i incremented by 1 is lesser than length of chunks ,
17872	get the element of chunks at the ( i+1 ) -the index , assign it to the seconds2 and name2 , respectively .
17873	multiply seconds by count , subtract it from since , divide the result by seconds2 , store the floored result in count2 .
17874	if count2 does not equals to integer 0 ,
17875	call avoid_wrapping function with name2 modulus count2 as argument , call the ugettext with STR0 as argument , add previous 2 results , increment variable result by it .
17876	return result .
17877	define the function timeuntil with 2 arguments , d and now defaulting to none .
17878	evaluate the function timesince with d , now and reversed set to boolean true as arguments , return the result .
17879	from datetime import datetime , timedelta and tzinfo into default name space .
17880	from threading import local into default name space .
17881	import module sys .
17882	import module time as _time .
17883	try ,
17884	import pytz .
17885	if ImportError exception is caught ,
17886	pytz is None .
17887	from django.conf import settings into default name space .
17888	from django.utils import six into default name space .
17889	__all__ is a list with 15 elements : strings STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , STR11 , STR12 , STR13 and STR14 .
17890	call the function timedelta with an argument integer 0 , substitute the result for ZERO .
17891	derive the class UTC from the tzinfo base class .
17892	define the method __repr__ with an argument self .
17893	return a string STR0 .
17894	define the method utcoffset with 2 arguments self and dt .
17895	return ZERO .
17896	define the method tzname with 2 arguments self and dt .
17897	return a string STR0 .
17898	define the method dst with 2 arguments self and dt .
17899	return ZERO .
17900	derive the class FixedOffset from the tzinfo base class .
17901	define the method __init__ with 3 arguments : self , offset set to None , name set to None .
17902	if offset is not None ,
17903	call the function timedelta with an argument minutes set to offset , substitute the result for self.__offset .
17904	if name is not None ,
17905	substitute name for self.__name .
17906	define the method utcoffset with 2 arguments : self and dt .
17907	return self.__offset .
17908	define the method tzname with 2 arguments : self and dt .
17909	return self.__name__ .
17910	define the method dst with 2 arguments : self and dt .
17911	return ZERO .
17912	derive the class ReferenceLocalTimezone from the tzinfo base class .
17913	define the method __init__ with an argument self .
17914	call the function timedelta with an argument seconds set to negative _time.timezone , substitute the result for self.STDOFFSET .
17915	if _time.daylight is true ,
17916	call the function timedelta with an argument seconds set to negative _time.altzone , substitute the result for self.DSTOFFSET .
17917	if not ,
17918	substitute self.STDOFFSET for self.DSTOFFSET .
17919	subtract self.STDOFFSET with self.DSTOFFSET , substitute the result for self.DSTDIFF .
17920	call the method tzinfo.__init__ with an argument self .
17921	define the method utcoffset with 2 arguments : self and dt .
17922	call the method self._isdst with an argument dt , if it evaluates to true ,
17923	return self.DSTOFFSET .
17924	if not ,
17925	return self.STDOFFSET .
17926	define the method utcoffset with 2 arguments : self and dt .
17927	call the method self._isdst with an argument dt , if it evaluates to true ,
17928	return self.DSTDIFF .
17929	if not ,
17930	return ZERO .
17931	define the method tzname with 2 arguments : self and dt .
17932	call the method self._isdst with an argument dt , use it as an key to get the value from the _time.tzname dictionary , return it .
17933	define the method _isdst with 2 arguments : self and dt .
17934	tt is a tuple with 9 elements : dt.year , dt.month , dt.day , dt.hour , dt.minute , dt.second , result of the method dt.weekday , ingeter 0 and integer 0 .
17935	call the method _time.mktime with an argument tt , substitute the result for stamp .
17936	call the method _time.localtime with an argument stamp , substitute the result for tt .
17937	if tt.tm_isdst is greater than integer 0 , return the result .
17938	derive the class LocalTimezone from the ReferenceLocalTimezone base class .
17939	define the method tzname with 2 arguments : self and dt .
17940	if dt is None , is_dst is boolean False , otherwise call the method _isdst with an argument dt , substitute the result for is_dst .
17941	return the value under the is_dst key of the _time.tzname dictionary .
17942	define the method _isdst with 2 arguments : self and dt .
17943	try ,
17944	call the method _isdst with an argument dt from the base class of the class LocalTimezone , return the result .
17945	if OverflowError or ValueError , renamed to exc , exceptions are caught ,
17946	get the type of the exc object , substitute it for exc_type .
17947	call the function exc_type with an argument string STR0 , replace STR1 with dt , substitute the result for exc_value .
17948	substitute exc for exc_value.__cause__ .
17949	call the function six.reraise with 3 arguments : exc_type , exc_value and third element of the result of the method sys.exc_info .
17950	if pytz is true , substitute pytz.utc for utc , otherwise substitute result of the function UTC for utc .
17951	define the function get_fixed_timezone with an argument offset .
17952	if offset is an instance of timedelta class ,
17953	substitute offset.seconds for offset .
17954	if offset is smaller than integer 0 , sign is STR0 , otherwise sign is STR1 .
17955	divide absolute offset by module 60 , use the result to format string STR0 , substitute it for hhmm .
17956	sum sign and hhmm , substitute the result for name .
17957	return an instance of FixedOffset class , created with 2 arguments : offset and name .
17958	_localtime is None .
17959	define the function get_default_timezone .
17960	use global variable _localtime .
17961	if _localtime is None ,
17962	if settings.TIME_ZONE is an instance of six.string_types and pytz is not None ,
17963	call the method pytz.timezone with an argument settings.TIME_ZONE , substitute the result for _localtime .
17964	if not ,
17965	_localtime is an instance of LocalTimezone class .
17966	return _localtime .
17967	define the function get_default_timezone_name .
17968	call the function get_default_timezone , use the result as an argument for the call to the function _get_timezone_name , return the result .
17969	call the method local , substitute the result for _active .
17970	define the function get_current_timezone .
17971	get STR0 attribute of the _active object , if it exists return it , if not , call the function get_default_timezone and return the result .
17972	define the function get_current_timezone_name .
17973	call the function get_current_timezone , use the result as an argument for the call to the function _get_timezone_name , return the result .
17974	define the function _get_timezone_name with an argument timezone .
17975	try ,
17976	return timezone.zone .
17977	if AttributeError exception is caught ,
17978	call the method timezone.tzname with an argument None , return the result .
17979	define the function activate with an argument timezone .
17980	if timezone is an instance of tzinfo ,
17981	substitute timezone for _active.value .
17982	otherwise if timezone is an instance of six.string_types and pytz is not None ,
17983	call the method pytz.timezone with an argument timezone , substitute the result for _active.value .
17984	if not ,
17985	raise an ValueError with an argument string STR0 , substitute STR1 with timezone .
17986	define the function deactivate .
17987	if active has an attribute STR0 ,
17988	delete _active.value .
17989	derive the class override from the object base class .
17990	define the method __init__ with 2 arguments : self and timezone .
17991	substitute timezone for self.timezone .
17992	get STR0 attribute of the _active object
17993	define the method __enter__ with an argument self .
17994	if self.timezone is None ,
17995	call the method deactivate .
17996	if not ,
17997	call the method activate with an argument self.timezone .
17998	define the method __exit__ with 4 arguments self , exc_type , exc_value and traceback .
17999	if self.old_timezone is None ,
18000	call the method deactivate .
18001	if not ,
18002	substitute self.old_timezone for _active.value .
18003	define the function template_localtime with 2 arguments : value and use_tz set to None .
18004	if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive , with an argument value evaluates to false , and if STR0 attribute of value object doesnt exists , or is it does is boolean True , should_convert is boolean True , otherwise is boolean False .
18005	if should_convert is true , call the function localtime with an argument value and return the result , otherwise return value .
18006	define the function localtime with 2 arguments : value and timezone set to None .
18007	if timezone is None ,
18008	call the function get_current_timezone , substitute the result for timezone .
18009	call the method value.astimezone with an argument timezone , substitute the result for value .
18010	if timezone has an attribute STR0 ,
18011	call the method timezone.normalize with an argument value , substitute the result for value .
18012	return value .
18013	define the function now .
18014	if settings.USE_TZ is true ,
18015	call the method datetime.utcnow , on the result call the method replace with an argument tzinfo set to utc , return the result .
18016	if not ,
18017	call the method datetime.now , return the result .
18018	define the function is_aware with an argument value .
18019	if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None , return boolean True , otherwise return boolean False .
18020	define the function is_naive with an argument value .
18021	if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None , return boolean True , otherwise return boolean False .
18022	define the function make_aware with 2 arguments : value and timezone .
18023	if timezone has an attribute STR0 ,
18024	call the method timezone.localize with 2 arguments : value and is_dst as None , return the result .
18025	if not ,
18026	call the function is_aware with an argument value , if it evaluates to true ,
18027	raise an ValueError exception with an argument string STR0 , where STR1 is replaced with value .
18028	call the method value.replace with an argument tzinfo as timezone , return the result .
18029	define the function make_naive with 2 arguments : value and timezone .
18030	call the method value.astimezone with an argument timezone , substitute the result for value .
18031	if timezone has an attribute STR0 ,
18032	call the method timezone.normalize with an argument value , substitute the result for value .
18033	call the method value.replace with an arugment tzinfo set to None , return the result .
18034	from __future__ import unicode_literals into default name space .
18035	import module re .
18036	from django.utils.encoding import force_text into default name space .
18037	from django.utils.functional import lazy into default name space .
18038	from django.utils import six into default name space .
18039	__all__ is an list containing strings : STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , STR11 , STR12 , STR13 , STR14 , STR15 , STR16 , STR17 , STR18 , STR19 , STR20 , STR21 , STR22 , STR23 , STR24 , STR25 and STR26 .
18040	LANGUAGE_SESSION_KEY is an string STR0 .
18041	derive the class TranslatorCommentWarning from the SyntaxWarning base class .
18042	do nothing .
18043	derive the class Trans from the object base class .
18044	define the method __getattr__ with 2 arguments : self and real_name .
18045	from django.conf import settings .
18046	if settings.USE_I18N is true ,
18047	from django.utils.translation import trans_real as trans .
18048	if not ,
18049	from django.utils.translation import trans_null as trans .
18050	set real_name attribute of the self object to value of real_name attribute of trans object .
18051	get attribute real_name from the trans object , return it .
18052	_trans is an instance of Trans class .
18053	delete Trans .
18054	define the function gettext_noop with an argument message .
18055	call the method _trans.gettext_noop with an argument message .
18056	substitute gettext_noop for ugettext_noop .
18057	define the function gettext_noop with an argument message .
18058	call the method _trans.gettext with an argument message .
18059	define the function ngettext with 3 arguments : singular , plural and number .
18060	call the method _trans.ngettext with 3 arguments singular , plural and number .
18061	define the method ugettext with an argument message .
18062	call the method _trans.gettext_noop with an argument message .
18063	define the function ungettext with 3 arguments : singular , plural and number .
18064	call the method _trans.ungettext with 3 arguments singular , plural and number .
18065	define the function pgettext with 2 arguments : context and message .
18066	call the method _trans.pgettext with 2 arguments context and message .
18067	define the function npgettext with 4 arguments : context , singular , plural and number .
18068	call the method _trans.npgettext with 4 arguments context , singular , plural and number .
18069	call the function lazy with 2 arguments : gettext and str , substitute gettext_lazy .
18070	call the function lazy with 2 arguments : ugettext and six.text_type , substitute ugettext_lazy .
18071	call the function lazy with 2 arguments : pgettext and six.text_type , substitute pgettext_lazy .
18072	define the function lazy_number with 4 arguments : func , resultclass , number set to None and unpacked dictionary kwargs .
18073	if number is an instance of int type .
18074	substitute number for value under the STR0 key of the kwargs dictionary .
18075	call the function lazy with 2 arguments : func and resultclass , call the result with an argument , unpacked dictionary kwargs , substitute the result for proxy .
18076	if not ,
18077	derive the class NumberAwareString from the resultclass base class .
18078	define the method __mod__ with 2 arguments : self and rhs .
18079	if rhs is an instance of dict type and number is true ,
18080	try ,
18081	substitute value under the number key of the rhs dictionary for number_value .
18082	if KeyError exception is caught ,
18083	raise an KeyError with an argument string STR0 , where STR1 is replaced with number .
18084	if not ,
18085	substitute rhs for number_value .
18086	substitute number_value for kwargs dictionary value under the STR0 key .
18087	call the function func with unpacked dictionary kwargs as an argument , substitute the result for translated .
18088	try ,
18089	format translated with rhs , substitute the result for translated .
18090	if TypeError exception is caught ,
18091	do nothing .
18092	return translated .
18093	call the function lazy with 2 arguments : lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString , call the result with an argument unpacked dictionary kwargs , substitute the result for proxy .
18094	return proxy .
18095	define the function ngettext_lazy with 3 arguments : singular , plural and number set to None .
18096	call the function lazy_number with 5 arguments : ngettext , str , singular set to singular , plural set to plural , and number set to number , return the result .
18097	define the function ungettext_lazy with 3 arguments : singular , plural and number set to None .
18098	call the function lazy_number with 5 arguments : ungettext , six.text_type , singular set to singular , plural set to plural , and number set to number , return the result .
18099	define the function npgettext_lazy with 4 arguments : context , singular , plural and number set to None .
18100	call the function lazy_number with 6 arguments : npgettext , six.text_type , context set to context , singular set to singular , plural set to plural and number set to number , return the result .
18101	define the function activate with an argument language .
18102	call the function _trans.activate with an argument language , return the result .
18103	define the function deactivate .
18104	call the function _trans.deactivate , return the result .
18105	derive the class override from the object base class .
18106	define the method __init__ with 3 arguments : self , language and deactivate set to boolean False .
18107	substitute language for self.language .
18108	substitute deactivate for self.deactivate .
18109	call the function get_language , substitute the result for self.old_language .
18110	define the method __enter__ with an argument self .
18111	if self.language is not None ,
18112	call the function activate with an argument self.language .
18113	if not ,
18114	call the function deactivate_all .
18115	define the method __exit__ with 4 arguments : self , exc_type , exc_value and traceback .
18116	if self.deactivate is true ,
18117	call the method deactivate .
18118	if not ,
18119	call the method activate with an argument self.old_language .
18120	define the function get_language .
18121	call the function _trans.get_language , return the result .
18122	define the function get_language_bidi .
18123	call the function _trans.get_language_bidi , return the result .
18124	define the function check_for_language with an argument lang_code .
18125	call the function _trans.check_for_language with an argument lang_code , return the result .
18126	define the function to_locale with an argument language .
18127	call the function _trans.to_locale with an argument language , return the result .
18128	define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
18129	call the function _trans.get_language_from_request with 2 arguments : request and check_path , return the result .
18130	define the function get_language_from_path with an argument path .
18131	call the function _trans.get_language_from_path with an argument path , return the result .
18132	define the function templatize with 2 arguments : src and origin set to None .
18133	call the function _trans.templatize with 2 arguments : src and origin , return the result .
18134	define the function deactivate_all .
18135	call the function _trans.deactivate_all , return the result .
18136	define the function _string_concat with an argument unpacked list strings .
18137	for every s in strings , call the function force_text with an argument s , join the results in a string , return the result .
18138	call the function lazy with 2 arguments : _string_concat and six.text_type , substitute the result for string_concat .
18139	define the function get_language_info with an argument lang_code .
18140	from django.conf.locale import LANG_INFO .
18141	try ,
18142	get the value under the lang_code key of the LANG_INFO dictionary , return it .
18143	if KeyError exception is caught ,
18144	if character STR0 is not contained in lang_code ,
18145	raise an KeyError with an argument STR0 , where STR1 is replaced with lang_code .
18146	split lang_code by character STR0 , substitute the first element of the result for generic_lang_code .
18147	try ,
18148	get the LANG_INFO dictionary value under the generic_lang_code key , return the result .
18149	if KeyError exception is caught ,
18150	raise an KeyError with an argument string STR0 , where STR1 is replaced with lang_code , and generic_lang_code .
18151	call the function re.compile with an argument string STR0 , substitute the result for trim_whitespace_re .
18152	define the function trim_whitespace with an argument s .
18153	call strip s of the surrounding whitespaces , substitute every occurrence of the whitespace in the trim_whitespace_re with previous result , return the result .
18154	from django.conf import settings into default name space .
18155	from django.utils.encoding import force_text into default name space .
18156	from django.utils.safestring import mark_safe and SafeData into default name space .
18157	define the function ngettext with 3 arguments : singular , plural and number .
18158	if number equals integer 1 ,
18159	return singular .
18160	return plural .
18161	substitute ngettext for ngettext_lazy .
18162	define the function ungettext with 3 arguments : singular , plural and number .
18163	call the function ngettext with 3 arguments : singular , plural and number , use the result as an argument for the call to the force_text , return the result .
18164	define the function pgettext with 2 arguments : context and message .
18165	call the function ugettext with an argument message .
18166	define the function ngettext with 4 arguments : context , singular , plural and number .
18167	call the function ungettext with 3 arguments : singular , plural and number , return the result .
18168	activate is a lambda function which returns None for any argument x .
18169	deactivate and deactivate_all are lambda functions returning None .
18170	get_language is a lambda function returning settings.LANGUAGE_CODE .
18171	get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI .
18172	check_for_language is lambda function that returns boolean True for every argument x .
18173	define the function gettext with an argument message .
18174	if message is an instance of SafeData .
18175	call the function mark_safe with an argument message , return the result .
18176	return message .
18177	define the function ugettext with an argument message .
18178	call the function gettext with an argument message , use the result as an argument for the call to the force_text function , return the result .
18179	substitute gettext for gettext_noop , gettext_lazy and _ .
18180	define the function to_locale with an argument language .
18181	find position of STR0 in the index of the language , substitute the result for p .
18182	if p is greater or equal to integer 0 ,
18183	append STR0 to string created from first p elements of languages converted to lowercase , convert slice of language string from ( p+1 ) -th index to the end to uppercase , append it to the previous result , return the resulting string .
18184	if not ,
18185	convert language to lowercase and return it .
18186	define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
18187	return settings.LANGUAGE_CODE .
18188	define the function get_language_from_path with an argument request .
18189	return None .
18190	from __future__ import unicode_literals into default name space .
18191	from collections import OrderedDict into default name space .
18192	import module os .
18193	import module re .
18194	import module sys .
18195	import module gettext as gettext_module .
18196	from threading import local into default name space .
18197	import module warnings .
18198	from django.apps import apps into default name space .
18199	from django.conf import settings into default name space .
18200	from django.core.exceptions import AppRegistryNotReady into default name space .
18201	from django.dispatch import receiver into default name space .
18202	from django.test.signals import setting_changed into default name space .
18203	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
18204	from django.utils.encoding import force_text into default name space .
18205	from django.utils._os import upath into default name space .
18206	from django.utils.safestring import mark_safe and SafeData into default name space .
18207	from django.utils import six and lru_cache into default name space .
18208	from django.utils.six import StringIO into default name space .
18209	from django.utils.translation import TranslatorCommentWarning , trim_whitespace and LANGUAGE_SESSION_KEY into default name space .
18210	_translations is an empty dictionary .
18211	call the function local , substitute the result for _active .
18212	_default is None .
18213	_supported is None .
18214	CONTEXT_SEPARATOR is a string STR0 .
18215	call the function re.compile with 2 arguments : raw string STR0 , and re.VERBOSE , substitute the result for accept_language_re .
18216	call the function re.compile with 2 arguments : raw string STR0 and re.IGNORECASE , substitute the result for language_code_re .
18217	call the function re.compile with an argument raw string STR0 , substitute the result for language_code_prefix_re .
18218	_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries : STR0 for STR1 and STR2 for STR3 .
18219	substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES .
18220	decorator function receiver with an argument setting_changed ,
18221	define the function reset_cache with an argument unpacked dictionary kwargs .
18222	if value under the STR0 key of the kwargs dictionary is equal to string STR1 or strnig STR2 ,
18223	use global variable _supported .
18224	_supported is None .
18225	call the method check_for_language.cache_clear .
18226	call the method get_supported_language_variant.cache_clear .
18227	define the function to_locale with 2 arguments language and to_lower set to boolean False .
18228	find first index of occurrence of character STR0 in language , substitute it for p .
18229	if p is greater or equal to integer 0 ,
18230	if to_lower is true ,
18231	convert fist p elements of language to lowercase , append STR0 to it , covert to lowercase language elements from ( p+1 ) -th index to the end , append it to the previous result , return it .
18232	if not ,
18233	slice language from ( p+1 ) -th index to the end , calculate the length of the obtained segment , if it is greater than integer 2 ,
18234	convert fist p elements of language to lowercase , append STR0 to it , covert to lowercase language element at ( p+1 ) -th index , append it to the previous result , covert to lowercase language elements from ( p+2 ) -th index to the end , append it to the previous result , return it .
18235	convert fist p elements of language to lowercase , append STR0 to it , covert to uppercase language elements from ( p+1 ) -th index to the end , append it to the previous result , return it .
18236	if not ,
18237	convert language to lowercase , return it .
18238	define the function to_language with an argument locale .
18239	find first index of occurrence of character STR0 in locale , substitute it for p .
18240	if p is greater or equal to integer 0 ,
18241	convert fist p elements of locale to lowercase , append STR0 to it , covert to lowercase locale elements from ( p+1 ) -th index to the end , append it to the previous result , return it .
18242	if not ,
18243	convert locale to lowercase and return it .
18244	derive the class DjangoTranslation from gettext_module.GNUTranslations base class .
18245	define the method __init__ with 2 arguments : self and language .
18246	call the method gettext_module.GNUTranslations.__init__ with an argument self .
18247	substitute language for self.__language .
18248	call the function to_language with an argument language , substitute it for self.__to_language .
18249	call the function to_locale with an argument language , substitute it for self.__locale .
18250	self.plural is an lambda function with an argument n , which returns result of boolean expression n not equal to integer 1 , converted to an integer .
18251	call the method self._init_translation_catalog .
18252	call the method self._add_installed_apps_translations .
18253	call the method self._add_local_translations .
18254	call the method self._add_fallback .
18255	define the method __repr__ with an argument self .
18256	return a string STR0 , where STR1 is replaced with self.__language .
18257	define the method _new_gnu_trans with 3 arguments : self , localedir and use_null_fallback set to boolean True .
18258	call the method gettext_module.translation with 5 arguments : domain set to string STR0 , localedir set to localedir , languages set to a list with an element self.__locale , codeset set to a string STR1 and fallback set to use_null_fallback , substitute the result for translation .
18259	if translation has an attribute STR0 ,
18260	translation._catalog is an empty dictionary .
18261	translation._info is an empty dictionary .
18262	return translation .
18263	define the method _init_translation_catalog with an argument self .
18264	get the value under the settings.__module__ key of the sys.modules dictionary , use its __file__ field as an argument for the call to the function upath , substitute the result for settingsfile .
18265	call the function os.path.dirname with an argument settingsfile , join the result an string STR0 into a file path , substitute it for localedir .
18266	use_null_fallback is boolean True .
18267	if self.__language equals settings.LANGUAGE_CODE ,
18268	use_null_fallback is boolean False .
18269	call the function self._new_gnu_trans with 2 arguments : localedir and use_null_fallback , substitute the result for translation .
18270	call the method translation._info.copy , substitute the result for self._info .
18271	call the method translation._catalog.copy , substitute the result for self._catalog .
18272	define the method _add_installed_apps_translations with an argument self .
18273	try ,
18274	call the method apps.get_app_configs , convert the result in a list , reverse the order of elements , substitute the result for app_configs .
18275	if AppRegistryNotReady exception is caught ,
18276	raise an AppRegistryNotReady exception with an argument string STR0 .
18277	for every app_config in app_configs ,
18278	join app_config.path and string STR0 into a file path , substitute it for localedir .
18279	call the method self._new_gnu_trans with an argument localedir , substitute the result for translation .
18280	call the method self.merge with an argument translation .
18281	define the method _add_local_translations with an argument self .
18282	reverse settings.LOCALE_PATHS element order , for every localedir in the result ,
18283	call the function self._new_gnu_trans with an argument localedir , substitute the result for translation .
18284	call the method self.merge with an argument translation .
18285	define the method _add_fallback with an argument self .
18286	if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string STR0 ,
18287	return .
18288	call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for default_translation .
18289	call the method self.add_fallback with an argument default_translation .
18290	define the method merge with 2 arguments self and other .
18291	update the self._catalog dictionary with other._catalog .
18292	define the method language with an argument self .
18293	return self.__language .
18294	define the method to_language with an argument self .
18295	return self.__to_language .
18296	define the function translation with an argument language .
18297	use global variable _translations .
18298	if language is not contained in _translations ,
18299	_translations dictionary value , under the language key is an instance of DjangoTranslation class , created with an argument language .
18300	return _translations dictionary value , under the language key .
18301	define the function activate with an argument language .
18302	if language is contained in _DJANGO_DEPRECATED_LOCALES ,
18303	msg is a string STR0 .
18304	call the method call the function warnings.warn with 3 arguments : msg formatted with language and value under the language key , of the _DJANGO_DEPRECATED_LOCALES dictionary , RemovedInDjango19Warning and stacklevel set to integer 2 .
18305	call the function translation with an argument language , substitute the result for _active.value .
18306	define the function deactivate .
18307	if _active has an attribute STR0 ,
18308	delete _active.value .
18309	define the function deactivate_all .
18310	call the method gettext_module.NullTranslations , substitute the result for _active.value .
18311	define the function get_language .
18312	get STR0 attribute of the _active object , if it exists substitute it for t , if not t is None .
18313	if t is not None ,
18314	try ,
18315	call the method t.to_language , return the result .
18316	if AttributeError exception is caught ,
18317	do nothing .
18318	return settings.LANGUAGE_CODE .
18319	define the function get_language_bidi .
18320	call the function get_language , split the result by STR0 , substitute the first element of the result for base_lang .
18321	if base_lang is contained in settings.LANGUAGES_BIDI , return boolean True , if not , return boolean False .
18322	define the function catalog .
18323	use global variable _default .
18324	get STR0 attribute of the _active object , if it exists substitute it for t , if not t is None .
18325	if t is not None
18326	return t .
18327	if _default is None
18328	call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for _default .
18329	return _default .
18330	define the function do_translate with 2 arguments : message and translation_function .
18331	use global variable _default .
18332	replace every occurrence of string STR0 in message with STR1 , replace every occurrence of string STRspecial , in the previous result for with string STR2 , substitute the result for eol_message .
18333	get STR0 attribute of the _active object , if it exists substitute it for t , if not t is None .
18334	if t is not None ,
18335	get translation_function attribute of the object t , call the result with an argument eol_message , substitute the result for result .
18336	if not ,
18337	if _default is None ,
18338	call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for _default .
18339	get translation_function attribute of the object _default , call the result with an argument eol_message , substitute the result for result .
18340	if message is an instance of SafeData ,
18341	call the function mark_safe with an argument result , return it .
18342	return result .
18343	define the function gettext with an argument message .
18344	call the function do_translate with 2 arguments : message and string STR0 , return the result .
18345	if six.PY3 is true ,
18346	substitute gettext for ugettext .
18347	if not ,
18348	define the function ugettext with an argument message .
18349	call the function do_translate with 2 arguments : message and string STR0 , return the result .
18350	define the function pgettext with 2 arguments : context and message .
18351	convert to strings and concatenate context , CONTEXT_SEPARATOR and message , substitute the result for msg_with_ctxt .
18352	call the function ugettext with an argument msg_with_ctxt , substitute the result for result .
18353	if CONTEXT_SEPARATOR is contained in result ,
18354	call the function force_text with an argument message , return the result .
18355	return result .
18356	define the function locale with an argument locale .
18357	return message .
18358	define the function do_ntranslate with 4 arguments : singular , plural , number and translation_function .
18359	use global variable _default .
18360	get STR0 attribute of the _active object , if it exists substitute it for t , if not t is None .
18361	if t is not None ,
18362	get translation_function attribute of the t object , call the result with 3 arguments : singular , plural and number , return the result .
18363	if _default is None ,
18364	call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for _default .
18365	get translation_function attribute of the _default object , call the result with 3 arguments : singular , plural and number , return the result .
18366	define the function ngettext with 3 arguments : singular , plural and number .
18367	call the function do_ntranslate with 3 arguments : singular , plural , number and string STR0 , return the result .
18368	if six.PY3 is true ,
18369	substitute ngettext for ungettext .
18370	if not ,
18371	define the function ungettext with 3 arguments : singular , plural and number .
18372	call the function do_ntranslate with 3 arguments : singular , plural , number and string STR0 , return the result .
18373	define the function npgettext with 4 arguments : context , singular , plural and number .
18374	msgs_with_ctxt is a tuple containing 2 elements : string created by concatenating context , CONTEXT_SEPARATOR and singular , string created by concatenating context , CONTEXT_SEPARATOR and plural and number .
18375	call the function ungettext with unpacked dictionary msgs_with_ctxt , substitute the result for result .
18376	if CONTEXT_SEPARATOR is contained in result ,
18377	call the function ungettext with 3 arguments : singular , plural and number , substitute the result for result .
18378	return result .
18379	define the function all_locale_paths .
18380	get the value under the settings.__module__ key of the sys.modules dictionary , use its __file__ field as an argument , for the call to the function upath , get the directory name of the resulting system path , join the result and string STR0 , into a valid file path , substitute it for globalpath .
18381	append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath , return it .
18382	decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000 .
18383	define the function check_for_language with an argument lang_code .
18384	call the method language_code_re.search with an argument lang_code , if it evaluates to false ,
18385	return boolean False .
18386	call the function all_locale_paths , for every path is the result ,
18387	call the method gettext_module.find with 3 arguments : string STR0 , path and list with an element : result of the function ,
18388	to_locale called with an argument lang_code , if the result is not None , return boolean True .
18389	return boolean False .
18390	decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000 .
18391	define the function get_supported_language_variant with 2 arguments : lang_code and strict set to boolean False .
18392	use global variable _supported .
18393	if _supported is None ,
18394	_supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES .
18395	if lang_code is true ,
18396	get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary , substitute it for replacement .
18397	if lang_code is not contained in _supported and replacement is contained in _supported ,
18398	return replacement .
18399	split lang_code by STR0 , substitute the first element of the result for generic_lang_code .
18400	for every code in tuple with 2 elements : lang_code and generic_lang_code ,
18401	if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true ,
18402	return code .
18403	if strict is false ,
18404	for every supported_code in _supported ,
18405	append STR0 to generic_lang_code , if supported_code starts with it ,
18406	return supported_code .
18407	raise an LookupError with an argument lang_code .
18408	define the function get_language_from_path with 2 arguments : path and strict set to boolean False .
18409	call the function language_code_prefix_re.match with an argument path , substitute it for regex_match .
18410	if regex_match is false ,
18411	return None .
18412	call the method regex_match.group with an argument integer 1 , substitute the result for lang_code .
18413	try ,
18414	call the function get_supported_language_variant with 2 arguments : lang_code and strict set to strict , return the result .
18415	if LookupError exception is caught ,
18416	return None .
18417	define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
18418	use global variable _supported .
18419	if _supported is None ,
18420	_supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES .
18421	if check_path is true ,
18422	call the function get_language_from_path with an argument request.path_info , substitute it for lang_code .
18423	if lang_code is not None ,
18424	return lang_code .
18425	if request has an attribute STR0 ,
18426	get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary , substitute it for lang_code .
18427	if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language ,
18428	called with an argument lang_code is true , return lang_code .
18429	get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary , substitute it for lang_code .
18430	try ,
18431	call the function get_supported_language_variant with an argument lang_code , return the result .
18432	if LookupError exception is caught ,
18433	do nothing .
18434	get the value under the STR0 key of the request.META dictionary , if it exists substitute it for accept , if not accept is an empty string .
18435	call the function parse_accept_lang_header with an argument accept , for every accept_lang and unused in the result ,
18436	if accept_lang equals STR0 ,
18437	break from the loop execution .
18438	call the method language_code_re.search with an argument accept_lang , if it evaluates to false ,
18439	skip this loop iteration .
18440	try ,
18441	call the function get_supported_language_variant with an argument accept_lang , return the result .
18442	if LookupError exception is caught ,
18443	skip this loop iteration .
18444	try ,
18445	call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE , return the result .
18446	if LookupError exception is caught ,
18447	return settings.LANGUAGE_CODE .
18448	call the function re.compile with an argument raw string STR0 , substitute it for dot_re .
18449	define the function blankout with 2 arguments : src and char .
18450	call the method dot_re.sub with 2 arguments : char and src , return the result .
18451	call the function re.compile with an argument raw string STR0 [ ^ STR1 ) | ( ? : STR2 ] * ? ' ) ) \s* '' , substitute the result for context_re .
18452	call the function re.compile with an argument string STR0 [ ^ STR1 ) | ( ? : STR4 ] * ? ' ) ) ( \s+.*context\s+ ( ( ? : STR2 ] * ? STR3 , substitute the result for inline_re .
18453	call the function re.compile with an argument raw string STR0 [ ^ STR1 ) | ( ? : STR2 ] * ? ' ) ) ) ? ( ? : \s+| $ ) '' , substitute the result for block_re .
18454	call the function re.compile with an argument raw string STR0 , substitute the result for endblock_re .
18455	call the function re.compile with an argument raw string STR0 , substitute the result for plural_re .
18456	call the function re.compile with an argument raw string STR0.* ? STR1 , substitute the result for constant_re .
18457	call the function re.compile with an argument raw string STR0 , substitute the result for one_percent_re .
18458	define the function templatize with 2 arguments : src and origin set to None .
18459	from django.template import Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK , TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK .
18460	call the function force_text with 2 arguments : src and settings.FILE_CHARSET .
18461	out is an instance of StringIO class , created with an empty string as an argument .
18462	message_context is None .
18463	intrans is boolean False .
18464	inplural is boolean False .
18465	trimmed is boolean False .
18466	singular is an empty list .
18467	plural is an empty list .
18468	incomment is boolean False .
18469	comment is an empty list .
18470	lineno_comment_map is an dictionary .
18471	comment_lineno_cache is None .
18472	define the function join_tokens with 2 arguments : tokens and trim set to boolean False .
18473	join tokens elements into a string , substitute it for message .
18474	if trim is true ,
18475	call the function trim_whitespace with an argument message , substitute the result for message .
18476	return message .
18477	instantiate Lexer class with 2 argumets src and origin , call the method tokenize from it , for every t in the result ,
18478	if incomment is true ,
18479	if t.token_type equals TOKEN_BLOCK and t.contents equals STR0 ,
18480	join comment elements into a string , substitute it for content .
18481	translators_comment_start is None .
18482	for every lineno and line is enumerated result of the method content.splitlines , called with an argument boolean True ,
18483	call the method line.lstrip , if the result starts with TRANSLATOR_COMMENT_MARK ,
18484	substitute lineno for translators_comment_start .
18485	for every lineno and line is enumerated result of the method content.splitlines , called with an argument boolean True ,
18486	if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start ,
18487	substitute STR0 in string STR1 with line , write it to out file .
18488	if not ,
18489	write string STR0 to out file .
18490	incomment is boolean False .
18491	comment is an empty list .
18492	if not ,
18493	append t.contents to comment .
18494	otherwise if intrans is true ,
18495	if t.token_type equals TOKEN_BLOCK ,
18496	call the function endblock_re.match with an argument t.contents , substitute the result for endbmatch .
18497	call the function plural_re.match with an argument t.contents , substitute the result for pluralmatch .
18498	if endbmatch is true ,
18499	if inplural is true ,
18500	if message_context is true ,
18501	substitute STR0 in string STR1 with message_context , result of the function join_tokens , called with 2 arguments : singular and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out .
18502	if not ,
18503	substitute STR0 in string STR1 with result of the function join_tokens , called with 2 arguments : singular , and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out .
18504	for every part in singular ,
18505	call the method blankout with 2 arguments : part and STR0 , write the result to out .
18506	for every part in plural ,
18507	call the method blankout with 2 arguments : part and STR0 , write the result to out .
18508	if not ,
18509	if message_context is true ,
18510	substitute STR0 in string STR1 with message_context and result of the function join_tokens , called with 2 arguments : singular and trimmed , write the result to out .
18511	if not ,
18512	substitute STR0 in string STR1 with result of the function join_tokens , called with 2 arguments : singular , and trimmed , write the result to out .
18513	for every part in singular ,
18514	call the method blankout with 2 arguments : part and STR0 , write the result to out .
18515	message_context is None .
18516	intrans is boolean False .
18517	inplural is boolean False .
18518	singular is an empty list .
18519	plural is an empty list .
18520	otherwise if pluralmatch is true ,
18521	inplural is boolean True .
18522	if not ,
18523	filemsg is an empty string .
18524	if origin is true ,
18525	filemsg is a string STR0 , where STR1 is replaced with origin .
18526	raise an SyntaxError with an argument string STR0 , formated with t.contents , filemsg and t.lineno .
18527	otherwise if t.token_type equals TOKEN_VAR ,
18528	if inplural is true ,
18529	append string STR0 to plural , where STR1 is replaced with t.contents .
18530	if not ,
18531	append string STR0 to singular , where STR1 is replaced with t.contents .
18532	if t.token_type == TOKEN_TEXT :
18533	call the method one_percent_re.sub with 2 arguments : string STR0 and t.contents , substitute the result for contents .
18534	if inplural is true ,
18535	append contents to plural .
18536	if not ,
18537	append contents to singular .
18538	if not ,
18539	if comment_lineno_cache is not None ,
18540	count occurrences of STR0 in t.contents , add the result to t.lineno , substitute the result for cur_lineno .
18541	if comment_lineno_cache equals cur_lineno .
18542	if t.token_type is not equal to TOKEN_COMMENT ,
18543	for every c in lineno_comment_map dictionary value under the comment_lineno_cache key ,
18544	filemsg is an empty string .
18545	if origin is true ,
18546	filemsg is a string STR0 , where STR1 is replaced with origin .
18547	warn_msg is a string STR0 , formated with c , filemsg and comment_lineno_cache .
18548	call the function warnings.warn with 2 arguments : warn_msg and TranslatorCommentWarning .
18549	value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string .
18550	if not ,
18551	join lineno_comment_map dictionary value under the comment_lineno_cache key into a string , separated with STR0 , format with it a string STR1 , write it to out .
18552	comment_lineno_cache is None ,
18553	if t.token_type equals TOKEN_BLOCK ,
18554	call the function inline_re.match with an argument t.contents , substitute the result for imatch .
18555	call the function block_re.match with an argument t.contents , substitute the result for bmatch .
18556	call the function constant_re.findall with an argument t.contents , substitute the result for cmatches .
18557	if imatch is true ,
18558	call the method imatch.group with an argument integer 1 , substitute the result for g .
18559	if first element of g equals a string STR ,
18560	strip g of STR from both ends ,
18561	otherwise if first element of g equals a string STR ,
18562	strip g of STR from both ends ,
18563	call the method one_percent_re.sub with 2 arguments : string STR0 and g , substitute the result for .
18564	call the method imatch.group with an argument integer 1 , if it evaluates to true ,
18565	call the method imatch.group with an argument integer 2 , use the result as an argument for the call to the method context_re.match , substitute the result for context_match .
18566	call the method context_match.group with an argument integer 1 , substitute the result for message_context .
18567	if first element of message_context equals to character STR ,
18568	strip message_context of STR characters from both ends , substitute the result for message_context .
18569	otherwise if , first element of message_context is equal to STR ,
18570	strip message_context of STR characters from both ends , substitute the result for message_context .
18571	format string STR0 with message_context and g , write it to out .
18572	message_context is None .
18573	if not ,
18574	format string STR0 with g , write it to out .
18575	otherwise if bmatch is true ,
18576	call the method constant_re.findall with an argument t.contents , for every fmatch in the result ,
18577	format string STR0 , with fmatch , write it to out .
18578	call the method bmatch.group with an argument integer 1 , if it evaluates to true ,
18579	call the method bmatch.group with an argument integer 1 , use the result as an argument for the call to the function context_re.match , substitute the result for context_match .
18580	call the method context_match.group with an argument integer 1 , substitute the result for message_context .
18581	if first element of message_context equals to character STR ,
18582	strip message_context of STR characters from both ends , substitute the result for message_context .
18583	otherwise if first element of message_context equals to character STR ,
18584	strip message_context of STR characters from both ends , substitute the result for message_context .
18585	intrans is boolean True .
18586	inplural is boolean False .
18587	if string STR0 is contained in result of the method t.split_contents , trimmed is boolean True , otherwise is boolean False .
18588	singular is an empty list .
18589	plural is an empty list .
18590	otherwise if cmatches is true ,
18591	for every cmatch in cmatches ,
18592	format string STR0 , with fmatch , write it to out .
18593	otherwise if t.contents equals a string STR0 ,
18594	incomment is boolean True .
18595	if not ,
18596	call the function blankout with 2 arguments : t.contents and STR0 , write the result to out .
18597	otherwise if t.token_type equals TOKEN_VAR ,
18598	split t.contents by STR0 symbol , substitute the result for parts ,
18599	call the method constant_re.match with first element of parts as an argument , substitute the result for cmatch .
18600	if cmatch is true ,
18601	call the method cmatch.group with an argument integer 1 , format with the result string STR0 , write it to out .
18602	for every p in parts without the first element ,
18603	find index of the occurrence of string STR0 in p , if its greater or equal to integer 0 ,
18604	split p into two parts at the first STR0 , use the second element of the result to format string STR1 , write it to out .
18605	if not ,
18606	call the function blankout with 2 arguments : p and STR0 , write the result to out .
18607	otherwise if t.token_type equals TOKEN_COMMENT ,
18608	strip t.contents from the left side of whitespaces , if the result starts with TRANSLATOR_COMMENT_MARK ,
18609	call the method lineno_comment_map.setdefault with 2 arguments : t.lineno and an empty list , append t.contents to the result .
18610	substitute t.lineno for comment_lineno_cache .
18611	if not ,
18612	call the function blankout with 2 arguments : t.contents and STR0 , write the result to out .
18613	call the method out.getvalue , return the result .
18614	define the function parse_accept_lang_header with an argument lang_string .
18615	result is an empty list .
18616	convert lang_string to lowercase , split by the result string accept_language_re , substitute the result for pieces .
18617	if last element of pieces is true ,
18618	return an empty list .
18619	for every i in range of integers from integer 0 to the length of pieces decremented by one , with step of integer 3 ,
18620	substitute 3 successive elements starting from the i-th index of pieces for first , lang and priority , respectively .
18621	if first is true ,
18622	return an empty list .
18623	if priority is true ,
18624	try ,
18625	convert priority into a floating point integer , substitute it for priority .
18626	if ValueError exception is caught ,
18627	return an empty list .
18628	if priority is false ,
18629	priority is floating point number 1.0 .
18630	append a tuple with 2 entries lang and priority to result .
18631	sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k .
18632	return result .
18633	import module copy .
18634	derive the class Node from object base class .
18635	default is a string STR0 .
18636	define the method __init__ with 4 arguments : self , children set to None , connector set to None and negated set to boolean False .
18637	if children is true , copy children list to self.children , otherwise self.children is an empty list .
18638	if connector is true , substitute it for self.connector , otherwise substitute self.default for self.connector .
18639	substitute negated for self.negated .
18640	decorator classmethod ,
18641	define the method _new_instance with 4 arguments : ( cls , children set to None , connector set to None and negated set to boolean False .
18642	obj is an instance of Node class , created with 3 arguments : children , connector and negated .
18643	substitute cls for obj.__class__ .
18644	return obj .
18645	define the method __str__ with an argument self .
18646	if self.negated ,
18647	return string STR0 , formated with self.connector and string created by joining c into a string , separated by STR1 , for every c in self.children .
18648	return string STR0 , formated with self.connector and string created by joining c into a string , separated by STR1 , for every c in self.children .
18649	define the method __repr__ with an argument self .
18650	return string STR0 , formated with self.__class__.__name__ and self .
18651	define the method __deepcopy__ with 2 arguments : self and memodict .
18652	obj is an instance of Node class , created with 2 arguments : connector set to self.connector and negated set to self.negated .
18653	substitute self.__class__ for obj.__class__ .
18654	call the function copy.deepcopy with 2 arguments : self.children and memodict , substitute the result for obj.children .
18655	return obj .
18656	define the method __len__ with an argument self .
18657	return the length of self.children .
18658	define the method __bool__ with an argument self .
18659	convert self.children into an boolean , return it .
18660	define the method __nonzero__ with an argument self .
18661	get the type of the self object , on the result call the __bool__ method with an argument self , return the result .
18662	define the method __contains__ with 2 arguments : self and other .
18663	if other is contained in self.children , return boolean True , otherwise return boolean False .
18664	define the method _prepare_data with 2 arguments : self and data .
18665	return data .
18666	define the method add with 4 arguments : self , data , conn_type and squash set to boolean True .
18667	if data is contained in self.children ,
18668	return data .
18669	call the method self._prepare_data with an argument data , substitute the result for data .
18670	if squash is false ,
18671	append data to self.children .
18672	return data .
18673	if self.connector equals conn_type ,
18674	if data is instance of Node and data.negated is false , and if data.connector equals conn_type or length of data equals integer 1 ,
18675	extend self.children list with data.children .
18676	return self .
18677	if not ,
18678	append data to self.children .
18679	return data .
18680	if not ,
18681	call the method self._new_instance with 3 arguments : self.children , self.connector and self.negated , substitute the result for obj .
18682	substitute conn_type for self.connector .
18683	self.children is an list with 2 elements : obj and data .
18684	return data .
18685	define the method negate with an argument self .
18686	invert self.negated .
18687	from __future__ import unicode_literals into default name space .
18688	from datetime import timedelta and tzinfo into default name space .
18689	import module time .
18690	import module warnings .
18691	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
18692	from django.utils.encoding import force_str , force_text and DEFAULT_LOCALE_ENCODING into default name space .
18693	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel set to 2 .
18694	derive the class FixedOffset from the tzinfo base class .
18695	define the method __init__ with 2 arguments : self and offset .
18696	call the function warnings.warn with 2 arguments : STR0 and RemovedInDjango19Warning .
18697	if offset is an instance of timedelta class ,
18698	substitute offset for self.__offset .
18699	substitute self.__offset.seconds for offset .
18700	if not ,
18701	call the function timedelta with an argument minutes set to offset , substitute the result for self.__offset .
18702	if offset is lesser than integer 0 , sign is set to STR0 , otherwise sign is STR1 ,
18703	self.__name is a string STR0 , replace STR1 with sign , STR2 is replaced with absolute value of offset divided by 60 , and placed into 2 character spaces , and STR3 is replaced with reminder of the division of absolute offset by integer 60 , and placed into 2 character spaces .
18704	define the method __repr__ with an argument self .
18705	return self.__name .
18706	define the method __getinitargs__ with an argument self .
18707	return a tuple with an element self.__offset .
18708	define the method utcoffset with 2 arguments self and dt .
18709	return self.__offset .
18710	define the method tzname with 2 arguments self and dt .
18711	return self.__name .
18712	define the method dst with 2 arguments self and dt .
18713	call the function timedelta with an argument integer 0 , return the result .
18714	derive the class LocalTimezone from the tzinfo base class .
18715	define the method __init__ with 2 arguments self and dt .
18716	call the function warnings.warn with 2 arguments : string STR0 and RemovedInDjango19Warning .
18717	call the method tzinfo.__init__ with an argument self .
18718	substitute dt for self.__dt .
18719	call the method self.tzname with an argument dt , substitute the result for self._tzname .
18720	define the method __repr__ with an argument self .
18721	call the function force_str with an argument self._tzname , return the result .
18722	define the method __getinitargs__ with an argument self .
18723	return a tuple with an element self.__dt .
18724	define the method utcoffset with 2 arguments self and dt .
18725	call the nethod self._isdst with an argument dt , if it evaluates to true ,
18726	call the function timedelta with an argument seconds as negative time.altzone , return the result .
18727	if not ,
18728	call the function timedelta with an argument seconds as negative time.timezone , return the result .
18729	define the method dst with 2 arguments self and dt .
18730	call the nethod self._isdst with an argument dt , if it evaluates to true ,
18731	call the function timedelta with an argument seconds as negative time.timezone , subtract the result from the result of the call , to the function timedelta called with an argument seconds as negative time.altzone , return the result .
18732	if not ,
18733	call the function timedelta with an argument integer 0 , return the result .
18734	define the method tzname with 2 arguments self and dt .
18735	if dt is None is_dst is boolean False , otherwise call the method self._isdst with an argument dt , substitute the result for is_dst .
18736	try ,
18737	call the function force_text with 2 arguments : value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING , return the result .
18738	if UnicodeDecodeError exception is caught ,
18739	return None .
18740	define the method _isdst with 2 arguments self and dt .
18741	tt is an tuple with 9 elements : dt.year , dt.month , dt.day , dt.hour , dt.minute , dt.second , result of the function dt.weekday , integer 0 and integer 0 .
18742	try ,
18743	call the method time.mktime with an argument tt , substitute the result for stamp .
18744	if OverflowError or ValueError exceptions are caught ,
18745	create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element , substitute the result for tt .
18746	call the method time.mktime with an argument tt , substitute the result for stamp .
18747	call the method time.localtime with an argument stamp , substitute the result for tt .
18748	if tt.tm_isdst is greater than intger 0 , return boolean True , otherwise return boolean False .
18749	from __future__ import absolute_import into default name space .
18750	import module warnings .
18751	from django.utils.deprecation import RemovedInDjango19Warning into default name space .
18752	call the function warnings.warn with 3 arguments : string STR0 , RemovedInDjango19Warning and stacklevel as integer 2 .
18753	try ,
18754	from unittest2 import everything .
18755	if ImportError exception is caught ,
18756	from unittest import import everything .
18757	from __future__ import unicode_literals into default name space .
18758	import module datetime .
18759	import module os .
18760	import module subprocess .
18761	define the function get_version with version set to None as argument .
18762	call the get_complete_version function with version as argument , store the result in version .
18763	call the get_major_version wit version as argument , store the result in major .
18764	sub is an empty string .
18765	if fourth element of version equals to string STR0 and fight element of version equals to integer 0 ,
18766	call the function get_git_changeset , store the result in git_changeset .
18767	if git_changeset is true ,
18768	convert git_changeset to string , append it to the string STR0 , replace it for sub .
18769	otherwise if fourth element of version does not equals to STR0 ,
18770	mapping is a dictionary with 3 initial entries : STR0 for STR1 , STR for STR2 and STR3 for STR4 .
18771	use fourth element of version as a key to get the value from mapping dictionary , append to it fourth element of version converted to string , substitute it for sub .
18772	sum major and sub , return the result converted to string .
18773	define the function get_major_version with an argument version defaulting to None .
18774	call the get_complete_version with an argument version , store the result in version .
18775	assign integer 2 to parts if third element of version equals to zero , otherwise assign it integer 3 .
18776	convert x into a string for every x in list of version elements up to the parts index , join the previous into a string separated by STR0 , assign the result to major .
18777	return major .
18778	define the function get_complete_version with in argument version , defaulting to None .
18779	if version is None ,
18780	from django import VERSION as version into default name space .
18781	if not ,
18782	if length of version does not equals to integer 5 , raise an exception .
18783	if fourth element of version does not equals to string STR0 or STR1 or STR2 or STR3 , raise an exception .
18784	return version
18785	define the function get_git_changeset .
18786	if get_git_changeset has an attribute STR0 ,
18787	return get_git_changeset.cache .
18788	get the absolute path of the __file__ , repo_dir is name of the directory two leveles above it .
18789	call the subprocess.Popen function with , STR0 , stdout set to subprocess.PIPE , stderr set to subprocess.PIPE , shell set to boolean True , cwd set to repo_dir and universal_newlines set to boolean True , as arguments , substitute the result for git_log .
18790	evaluate the method git_log.communicate , substitute first element of the result for timestamp .
18791	try
18792	call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument , substitute result for timestamp .
18793	if ValueError exception is caught ,
18794	changeset is None .
18795	if not ,
18796	call the timestamp.strftime with string STR0 as an argument , substitute the result for changeset .
18797	substitute changeset for get_git_changeset.cache .
18798	return changeset .
18799	from xml.sax.saxutils import XMLGenerator into default name space .
18800	derive the class SimplerXMLGenerator form the XMLGenerator base class .
18801	define the method addQuickElement with 4 arguments : self , name , contents set to None and attrs set to None .
18802	if attrs is None ,
18803	attrs is an empty dictionary .
18804	cal the method self.startElement with 2 arguments : name and attrs .
18805	if contents is not None ,
18806	call the method self.characters with an argument contents .
18807	call the method self.endElement with an argument name .
