if not len ( self . backout ) :
if bits [ 4 ] != STR0 :
raise CommandError ( STR1 % invalid_tag )
def module_has_submodule ( package , module_name ) :
tt = _time . localtime ( stamp )
ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
boolean_attrs = [ ]
c = subject [ i ]
except AttributeError :
p = PillowImageFile . Parser ( )
def is_iterable ( x ) :
pass
self . literal = int ( self . literal )
ipv4_address = STR0 % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
obj = self . _new_instance ( self . children , self . connector ,  self . negated )
def get_cookie_signer ( salt = STR0 ) :
if bcc :
project_name , target = options . pop ( STR0 ) , options . pop ( STR1 )
if isinstance ( other , BaseContext ) :
try :
except Exception :
raise self . source_error ( source , msg )
if obj_list is None :
if plen < ( alen - dlen ) or plen > alen :
k = match . end ( )
if not pythonrc :
if not field_desc . endswith ( STR0 ) :
if self . field . label is None :
def prepare_value ( self , value ) :
self . stdout . write ( self . style . MIGRATE_LABEL ( STR0 ) + STR1 % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
result_args = new_args
else :
out . write ( STR0 % line )
pop_context = False
priority = float ( priority )
for base in reversed ( new_class . __mro__ ) :
else :
class TemporaryFile ( FileProxyMixin ) :
raise NotImplementedError ( STR0 )
connection = connections [ database ]
callable = callable
def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
from django . db . migrations . autodetector import MigrationAutodetector
obj = settings . TEMPLATE_STRING_IF_INVALID
obj = new_obj
import stat
return STR0 . join ( output )
raise base . DeserializationError ( STR0 )
if old_handler is not None :
if self . verbosity >= 3 :
else :
if app_config . models_module is None :
def do_include ( parser , token ) :
@ property
class Command ( AppCommand ) :
apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )
return True
return out
host = self . META [ STR0 ]
def size ( self , name ) :
def unlock ( f ) :
ch , escaped = next ( pattern_iter )
compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
self . _populated = False
class ComboField ( Field ) :
op = OPERATORS [ token ]
comment . append ( t . contents )
if item [ STR0 ] is not None :
g = imatch . group ( 1 )
class FileBasedCache ( BaseCache ) :
if isinstance ( value , datetime . date ) :
from . registry import register , run_checks , tag_exists , Tags
if whitelist is not None :
link_prev , link_next , key , result = link
s = Select ( choices = choices )
try :
return s . encode ( STR0 )
elif isinstance ( self . obj , models . base . ModelBase ) :
return DebugVariableNode ( contents )
if token . contents == STR0 :
url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
piece += elt [ 0 ]
lineno = lineno + self . __starttag_text . count ( STR0 )
return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
def render ( self , name , value , attrs = None ) :
def __eq__ ( self , other ) :
if field . rel . to . _meta . pk . rel :
if self . current_token is not EndToken :
def __init__ ( self , * args , ** kwargs ) :
backend_cls = import_string ( backend )
excluded_apps = set ( )
self . pos = 0
if m :
else :
elif ch == STR0 :
def delete_many ( self , keys , version = None ) :
for i , handler in enumerate ( self . _upload_handlers ) :
def smart_split ( text ) :
for receiver , _ , _ in receivers :
return STR0 . join ( output )
try :
logger . propagate = True
def to_python ( self , value ) :
from django . utils . datastructures import MultiValueDict
def exit_command ( self ) :
self . _add_installed_apps_translations ( )
raise ValueError ( STR0 % ch )
def handle ( self , * fixture_labels , ** options ) :
self . dicts . append ( other_dict )
cache . set ( cache_key , [ ] , cache_timeout )
if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
self . val_expr = val_expr
if PY3 :
tag_exists = registry . tag_exists
widget . is_localized = True
except KeyError :
domain_regex = re . compile (    rSTR0 ,  re . IGNORECASE )
factory = c
try :
return result
if not hasattr ( func , STR0 ) :
formatter = self . config [ STR0 ] [ formatter ]
WEEKDAYS_ABBR = {  0 : _ ( STR0 ) , 1 : _ ( STR1 ) , 2 : _ ( STR2 ) , 3 : _ ( STR3 ) , 4 : _ ( STR4 ) ,  5 : _ ( STR5 ) , 6 : _ ( STR6 )  }
def _handle_object ( self , node ) :
from __future__ import unicode_literals
input_type = None
def delete_many ( self , keys , version = None ) :
parser . delete_first_token ( )
def empty_variable ( self , token ) :
if self . _options :
from django . conf import settings
kwargs = { }
commands . update ( { name : app_config . name for name in find_commands ( path ) } )
def value_from_datadict ( self , data , files , name ) :
statements = sql_create ( app_config , self . style , connection )
self . lineno = None
@ wraps ( fdel )
is_required = False
if self . verbosity >= 1 :
self . replace_header ( STR1 , STR2 % ( subtype , charset ) )
def value_from_datadict ( self , data , files , name ) :
option = STR0
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
super ( MovedModule , self ) . __init__ ( name )
from django . utils . http import urlquote
self . stdout . write ( self . style . MIGRATE_LABEL ( STR0 ) + STR1 % ( targets [ 0 ] [ 0 ] , ) )
if current_version >= ( 3 , 4 ) :
file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
def handle ( self , * args , ** options ) :
def parse_boundary_stream ( stream , max_header_size ) :
result = self . configurator . convert ( value )
file_size = data . size
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
import bz2
except IndexError :
if settings . TEMPLATE_DEBUG :
from django . apps import apps
class ModelChoiceField ( ChoiceField ) :
meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
try :
from django . core . management . base import BaseCommand , CommandError
return [ etag_str ]
value = localize ( value , use_l10n = context . use_l10n )
def read ( self , size = None ) :
rawdata = self . rawdata
if tablename in connection . introspection . table_names ( ) :
return STR0 % ( self . id , self . value )
break
client = self . _lib . Client ( self . _servers )
if options [ STR0 ] in ( STR1 , STR2 ) :
if handlers :
from django . utils . html import escape
break
if fields is not None :
else :
else :
class RemovedInDjango19Warning ( DeprecationWarning ) :
try :
while end > 0 and s . count ( bSTR0 , 0 , end ) % 2 :
except UnicodeError as e :
data [ f . name ] = list ( qs . values_list ( STR0 , flat = True ) )
fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
codecs . lookup ( encoding )
base = force_text ( base )
bits . append ( int ( x ) )
form . save_m2m = save_m2m
raise ValueError (  STR0 % value )
return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
if command in parse_until :
for exclude in excludes :
pass
def capfirst ( value ) :
import bpython
retval = self . expression ( )
with codecs . open ( sql_file , STR0 , encoding = settings . FILE_CHARSET ) as fp :
pos = self . file . tell ( )
lineno_comment_map = { }
continue
class ZipArchive ( BaseArchive ) :
def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :
