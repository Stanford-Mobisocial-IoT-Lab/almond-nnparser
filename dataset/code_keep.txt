context . autoescape = self . setting
field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )
return DebugNode ( )
def resolve ( self , context , ignore_failures = False ) :
except AttributeError :
return s
extracted = self . _archive . extractfile ( member )
six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
return self . __deepcopy__ ( { } )
data [ field . attname ] = None
self . dicts . append ( other_dict )
def __init__ ( self , dir , params ) :
def validate ( self , value ) :
value = self . get ( key , version = version )
if PY3 :
if value in self . empty_values :
block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
import glob
def add_handlers ( self , logger , handlers ) :
raise NotImplementedError ( STR0 )
p = language . find ( STR0 )
def create_nodelist ( self ) :
def _wrapper ( self , * args , ** kwargs ) :
import random
except KeyError :
default_error_messages = { STR1 : _ ( STR0 ) , }
self . tags = { }
try :
label_for = format_html ( STR1 , self . id_for_label )
request_started = Signal ( )
def __mod__ ( self , rhs ) :
return self . handle_merge ( loader , conflicts )
return s
raise ContentNotRenderedError ( STR0 STR1 )
from django . core . files . base import File
for t in type ( res ) . mro ( ) :
return result
elif self . _delegate_text :
return self
if value :
raise TemplateSyntaxError ( STR0 othan once.' % option )
value = STR0 . join ( reversed ( parts ) )
signature = base64_hmac ( self . salt + STR0 , value , self . key )
return self . data . isocalendar ( ) [ 0 ]
@ register . filter ( is_safe = False )
connection = connections [ self . using ]
self . active_writers += 1
if not answer :
html [ STR0 ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )
@ property
self . pos += 1
def clean ( self , value ) :
if self . _isdst ( dt ) :
else :
def extend_nodelist ( self , nodelist , node , token ) :
try :
id_ = self . field . widget . attrs . get ( STR0 ) or self . auto_id
return str ( major + sub )
from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
def parse_datetime ( value ) :
def indexbytes ( buf , i ) :
return s . decode ( STR0 , errors ) . encode ( encoding , errors )
self . _size = size
return iter ( self . keyOrder )
from django . core import signals
def dec ( func ) :
return p . image . size
if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :
cursor . execute ( statement )
class Module_six_moves_urllib ( types . ModuleType ) :
from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
_func_defaults = STR0
if pattern . name is not None :
return ( ( not url_info . netloc or url_info . netloc == host ) and ( not url_info . scheme or url_info . scheme in [ STR0 , STR1 ] ) )
_entity_re = re . compile ( STR0 )
if iso_input not in val :
def get_default_prefix ( cls ) :
warnings . warn ( STR0 , RemovedInDjango19Warning , stacklevel = 2 )
def _list_cache_files ( self ) :
if self . feed [ STR0 ] is not None :
def _cache ( self ) :
cache_key = STR0 % ( key_prefix , url . hexdigest ( ) )
stream . unget ( chunk )
os . makedirs ( self . _dir , 0o700 )
break
def chunks ( self , chunk_size = None ) :
raise TypeError ( STR0 STR1 % level )
for receiver , _ , _ in receivers :
raise
if self . match is None or self . match_re . search ( f ) :
self . resolver_match = None
import os
return self . nodelist_false . render ( context )
try :
if self . timeout is not None :
return False
except KeyError :
def check_migrations ( self ) :
if filename . endswith ( ( STR0 , STR1 ) ) :
if STR0 in self . attrs :
def valid_value ( self , value ) :
return self
out . write ( STR0 )
return value . upper ( )
pass
import errno
post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , STR0 ) ]
if len ( bits ) not in ( 2 , 3 ) :
if value is None :
except ImportError :
memoryview = memoryview
super ( Serializer , self ) . handle_field ( obj , field )
from django . core import signals
missing_fields = ( set ( none_model_fields ) - set ( new_class . declared_fields . keys ( ) ) )
def firstof ( parser , token ) :
options = { }
mime_type = STR0
self . stdout . write ( STR0 )
else :
yield STR0 % field_desc
template = template [ 7 : ]
raise NotImplementedError ( STR0 )
chunk_size = self . DEFAULT_CHUNK_SIZE
if val == [ ] :
def mark_for_escaping ( s ) :
@ property
return context_extras
from __future__ import unicode_literals
hextets = ip_str . split ( STR0 )
_ , file_ext = os . path . splitext ( self . file )
def compress ( self , data_list ) :
if match :
e = TemplateSyntaxError ( msg )
def values ( self ) :
return new_value
return False
try :
return STR0 . join ( sql_flush ( self . style , connections [ options [ STR1 ] ] , only_django = True ) )
bits . append ( None )
duplicate . render_context = copy ( self . render_context )
defaults = parser . parse_args ( args = args )
self . style = color_style ( )
except ( ValueError , TypeError ) :
if value and STR0 in value :
from os import path
if six . PY3 :
if settings . DEBUG :
content = template . render ( context )
raise CommandError ( STR0 % app_label )
try :
return lambda text : colorize ( text , opts , ** kwargs )
tried . append ( [ pattern ] )
return command . execute ( * args , ** defaults )
status_code = 302
def u ( self ) :
elif token_string . startswith ( BLOCK_TAG_START ) :
args = [ STR1 % arg for arg in args ]
for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :
for x in arg . split ( STR0 ) :
for path in self . locale_paths :
key = bytes_to_text ( key , self . encoding )
self . remove_potfiles ( )
self . _post_render_callbacks . append ( callback )
base64d = STR0 + base64d
zfile = GzipFile ( mode = STR0 , compresslevel = 6 , fileobj = zbuf )
def discard ( self , item ) :
raise
renderer = RadioFieldRenderer
self . settings_exception = exc
if not os . path . exists ( filename ) :
return initial != data
class OutputWrapper ( object ) :
@ register . filter ( is_safe = False )
if not UserModel . _default_manager . exists ( ) and options . get ( STR0 ) :
def _is_expired ( self , f ) :
libraries = { }
def as_textarea ( self , attrs = None , ** kwargs ) :
from django . utils . encoding import force_str
parser . add_argument ( STR1 , default = DEFAULT_DB_ALIAS , help = STR2 )
if isinstance ( other_dict , MultiValueDict ) :
return func
with connection . constraint_checks_disabled ( ) :
return ( ord ( byte ) for byte in buf )
ext = mimetypes . guess_extension ( content_type )
url = property ( lambda self : self [ STR0 ] )
def __add__ ( self , rhs ) :
import os
else :
return super ( PasswordInput , self ) . render ( name , value , attrs )
call_command ( STR0 , verbosity = max ( self . verbosity - 1 , 0 ) , interactive = False , database = db , reset_sequences = False , inhibit_post_migrate = True , )
if not path_info :
class classonlymethod ( classmethod ) :
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
return ''
lib = get_library ( taglib )
self . _validate_unique = False
FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num , can_order = can_order , can_delete = can_delete , validate_min = validate_min , validate_max = validate_max )
return latest_date or datetime . datetime . now ( )
return klass
def extract ( self ) :
def __init__ ( self , connection_reset = False ) :
output . append ( STR0 )
return STR0
if hasattr ( field . rel . to . _default_manager , STR0 ) :
while ch != STR0 :
raise ValidationError ( error_message , code = STR0 )
__hash__ = new_method_proxy ( hash )
pass
s = s1
return STR0 % ( self . name , self . nodelist )
try :
except AttributeError :
new_value . append ( self . coerce ( choice ) )
assert is_iterable ( new_errors ) , ( STR0 STR1 % check )
self . token_type , self . contents = token_type , contents
for name in filters :
clean = lambda self , x : len ( x )
class FileBasedCache ( BaseCache ) :
response = middleware_method ( request )
help = STR0
for cat in item [ STR0 ] :
def decorating_function ( user_function ) :
text_type = str
class Command ( AppCommand ) :
parser . add_argument ( STR0 , action = STR1 , version = self . get_version ( ) )
from django . template . loader import get_template
id = STR0
return STR . join ( self . _container )
_win = ( sys . platform == STR0 )
elif autoescape :
headerlist = [ ]
def check_1_7_compatibility ( ** kwargs ) :
field_params [ STR0 ] = row [ 4 ] if row [ 4 ] is not None else 10
for i , handler in enumerate ( self . _upload_handlers ) :
return language [ : p ] . lower ( ) + STR0 + language [ p + 1 : ] . upper ( )
raise CommandError ( STR0 % ( name , app_or_project , message ) )
if filters :
class DisallowedRedirect ( SuspiciousOperation ) :
Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
self . dict [ item ] = None
shutil . move ( the_path , guessed_path )
else :
continue
if path is not None :
def validate ( self , value ) :
def __init__ ( self , format_string ) :
def n ( self ) :
cls = None
else :
if model in excluded_models :
insert = complain
handler = self . configure_handler ( handlers [ name ] )
r = o . isoformat ( )
if new is None :
def tell ( self ) :
__all__ = [ STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , ]
itervalues = _itervalues
self . encoding = encoding
from django . db import connections , DEFAULT_DB_ALIAS
assert remaining > 0 , STR0
else :
self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
raise CommandError ( STR0 % name )
self . setup_environ ( )
def get_nodes_by_type ( self , nodetype ) :
connection = connections [ options [ STR0 ] ]
def __repr__ ( self ) :
class SplitDateTimeField ( MultiValueField ) :
elif args [ 1 ] [ 0 ] == STR0 :
root [ KEY ] = root [ RESULT ] = None
@ upload_handlers . setter
self . keyOrder = list ( data ) if data else [ ]
if protocol != STR0 and unpack_ipv4 :
raise
from __future__ import unicode_literals
return tempdir
hard_coded_bullets_re = re . compile ( STR0 % STR1 . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
from django . db . migrations . optimizer import MigrationOptimizer
filename = filename . encode ( STR0 )
self . _varlist = varlist
from __future__ import unicode_literals
if has_old_option and has_new_option :
for key , op in OPERATORS . items ( ) :
script_name = get_script_name ( environ )
yield STR0
def S ( self ) :
class DefaultCacheProxy ( object ) :
data = self . form . initial . get ( self . name , self . field . initial )
try :
class DateInput ( DateTimeBaseInput ) :
HTMLParser . __init__ ( self , strict = False )
return duplicate
raise ImportError
is_usable = True
location = urljoin ( current_uri , location )
def popitem ( self ) :
else :
if extend :
if item [ STR0 ] is not None :
comment_notes = [ ]
class ZipArchive ( BaseArchive ) :
if not func . is_usable :
out . write ( blankout ( part , STR0 ) )
return iri_to_uri ( location )
from django . template import Template , Context
parser . add_argument ( STR0 , help = STR1 )
else :
ALLOWED_VARIABLE_CHARS = ( STR0 STR1 )
_add_doc ( reraise , STR0 )
def split_url ( url ) :
def as_ul ( self ) :
except KeyboardInterrupt :
try :
absolute_http_url_re = re . compile ( STR0 , re . I )
def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
model = None
return False
@ property
final_path = abspathu ( join ( base , * paths ) )
if num_loopvars != len_item :
_tc . load ( str ( STR0 ) )
return { STR0 : self . ns , STR1 : self . feed [ STR2 ] }
self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
if six . PY3 :
def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :
def set_cdata_mode ( self , tag ) :
name = self . timezone . tzname ( self . data ) if self . timezone else None
else :
if threading :
try :
@ register . filter ( is_safe = True )
if settings . is_overridden ( STR0 ) :
self . _assert_mutable ( )
except AttributeError :
top = bottom + self . per_page
_supported = None
import types
if field in form . cleaned_data :
from django . conf import settings
class CacheClass ( DatabaseCache ) :
to_unicode = lambda s : force_text ( s , strings_only = True )
from . . import Warning , register , Tags
except KeyError :
return path . split ( STR0 , 1 )
def __init__ ( self , content ) :
def __exit__ ( self , exc_type , exc_value , traceback ) :
else :
def resolve ( self , context ) :
def escape_filter ( value ) :
for attr in _urllib_request_moved_attributes :
except ( OSError , NotImplementedError , AttributeError ) :
else :
raise NoReverseMatch ( STR0 % ( lookup_view , e ) )
class TemporaryFile ( FileProxyMixin ) :
return scheme in self . url_schemes
self . path = ''
return type ( self ) . __bool__ ( self )
class SimpleCookie ( http_cookies . SimpleCookie ) :
exp = pickle . load ( f )
return potfiles
cls . _delegate_text = six . text_type in resultclasses
media = media + w . media
if DEFAULT_CACHE_ALIAS not in settings . CACHES :
def root_attributes ( self ) :
key = make_key ( args , kwds , typed ) if kwds or typed else args
s = s . replace ( STR0 , STR1 )
app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , STR0 ) ) )
def delete_many ( self , keys , version = None ) :
zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
executor = MigrationExecutor ( connection )
if level is not None :
while s [ : 1 ] == STR0 :
self . stdout . write ( STR0 , self . style . MIGRATE_FAILURE )
_func_closure = STR0
@ register . filter ( is_safe = True )
pass
attrs = { STR0 : smart_text ( obj . _meta ) }
try :
yield STR0
else :
object_data = model_to_dict ( instance , opts . fields , opts . exclude )
except UnicodeError :
try :
key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
if isinstance ( elt , Group ) :
except Exception :
from django . utils . encoding import force_bytes , force_str , force_text
if re . search ( STR0 % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :
lib = libraries . get ( library_name , None )
filename = os . path . join ( to_path , name )
def __init__ ( self , redirect_to , * args , ** kwargs ) :
ipv4_address = STR0 % ( int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) , int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) , int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) , int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) , )
return mark_safe ( contents )
self . parsed = parsed
with connections [ db ] . cursor ( ) as cursor :
except KeyError :
else :
continue
self . file_path = getattr ( settings , STR0 , None )
input_attrs [ STR0 ] = STR1 % ( id_ , i )
@ stringfilter
EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )
def display ( self ) :
handler_config = handlers [ name ]
default_storage = DefaultStorage ( )
for app_config in apps . get_app_configs ( ) :
if response :
except OSError as e :
if len ( value ) != 2 :
try :
def clean ( self , value ) :
root = nonlocal_root [ 0 ]
try :
self . host = host or settings . EMAIL_HOST
if node . hasAttribute ( STR0 ) :
chunk_size = self . DEFAULT_CHUNK_SIZE
raise ContentNotRenderedError ( STR0 STR1 )
def lazy ( func , * resultclasses ) :
stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :
result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
return None
if not hasattr ( self , STR0 ) :
return etags
class LocalTimezone ( tzinfo ) :
class Http404 ( Exception ) :
parser . StartDoctypeDeclHandler = self . start_doctype_decl
return ''
message . message ( )
code = STR0
text_type = unicode
from django . utils . ipv6 import is_valid_ipv6_address
widget = self . field . widget
raise TemplateDoesNotExist ( name )
base62 = BaseConverter ( BASE62_ALPHABET )
return sys . modules [ name ] is not None
return os . path . normpath ( path )
digits . append ( STR0 )
args = [ ]
return FilterNode ( filter_expr , nodelist )
def get_version ( self ) :
for state , rules in states . items ( ) :
return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
for operation in migration . merged_operations :
class SelectMultiple ( Select ) :
if opts . fields == ALL_FIELDS :
if not self . valid_value ( val ) :
except KeyboardInterrupt :
return
from django . conf import settings
opfunc . __name__ = opname
self . check_test = boolean_check if check_test is None else check_test
try :
file_ . close ( )
for app_dir in app_dirs :
else :
view = viewname
if self . _varlist :
if hasattr ( value , STR0 ) and not isinstance ( value , six . text_type ) :
resource = resource_string ( app_config . name , pkg_name )
models = app_config . get_models ( include_auto_created = True )
return chain ( * [ [ format_html ( STR4 , self . absolute_path ( path ) , medium ) for path in self . _css [ medium ] ] for medium in media ] )
raise CommandError ( STR0 STR1 STR2 % po_path )
def __init__ ( self , data = None ) :
if hasattr ( file , STR0 ) :
return callback ( request , ** param_dict )
else :
def __repr__ ( self ) :
except ( TypeError , ValueError ) :
import dummy_threading as threading
nodelist = parser . parse ( ( STR0 , ) )
if STR0 in truncate :
def close ( self ) :
self . msgattrib_options = self . msgattrib_options [ : ] + [ STR0 ]
def _render ( self , context ) :
import json
else :
self . _done = False
raise TemplateSyntaxError ( STR0 STR1 % token . contents )
self . allow_empty_first_page = allow_empty_first_page
return value . lower ( )
def render ( self , name , value , attrs = None , choices = ( ) ) :
filepath = os . path . abspath ( filepath )
except ImportError as e :
for name in handlers :
def unsign ( self , value , max_age = None ) :
yield d
val = self [ key ]
ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )
if self . loaded_object_count > 0 :
else :
except KeyError :
if hasattr ( pattern , STR0 ) :
if level is not None :
options = FASTCGI_OPTIONS . copy ( )
return int ( timeout )
continue
time_str = time_str . decode ( STR0 )
if upload :
return key in caches [ DEFAULT_CACHE_ALIAS ]
loaders = [ ]
self . method = None
CONVERT_PATTERN = re . compile ( STR0 )
if self . verbosity >= 3 :
contents = one_percent_re . sub ( STR0 , t . contents )
class PasswordInput ( TextInput ) :
class CacheClass ( LocMemCache ) :
server_port = str ( self . META [ STR0 ] )
os . close ( fd )
if refto in seen_models :
return wrapped
write ( arg )
field_notes . append ( STR0 )
if not context_instance :
_locs_ = frame . f_locals
return
locale_dirs = filter ( os . path . isdir , glob . glob ( STR0 % basedir ) )
if hasattr ( _active , STR0 ) :
return format_html ( "" )
elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
return import_string ( app_path )
exec ( compile ( handle . read ( ) , pythonrc , STR0 ) , imported_objects )
if only_django :
return import_string ( key_func )
renderer = CheckboxFieldRenderer
ns_pattern = ''
value = normalize_newlines ( value )
offset = offset . seconds // 60
possibilities = self . reverse_dict . getlist ( lookup_view )
if as_ != STR0 :
def prepare_value ( self , value ) :
po_path = os . path . join ( dirpath , f )
def http_date ( epoch_seconds = None ) :
if not want_unicode :
__all__ = ( STR0 , STR1 , STR2 , STR3 )
stderr . write ( STR0 % ( e . __class__ . __name__ , e ) )
def _reset_dicts ( self , value = None ) :
result [ i ] += piece
try :
from django . utils . html import avoid_wrapping
if is_compressed :
@ property
import sys
self . default_kwargs = default_kwargs or { }
def trim_url ( x , limit = trim_url_limit ) :
else :
app_label = options [ STR0 ]
recipients = [ sanitize_address ( addr , email_message . encoding ) for addr in email_message . recipients ( ) ]
return kwargs
os . makedirs ( original_path )
else :
import memcache
template = self . template . resolve ( context )
self . tokens = mapped_tokens
from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
if old_attr is None :
result = STR0 . join ( hextets [ 0 : 6 ] )
inline_re = re . compile ( STR STR0[^ STR1)|(?: STR4]*?'))(\s+.*context\s+((?: STR2]*? STR3"" )
return ugettext_lazy ( value )
method = kwargs . pop ( STR0 )
for _ , nodelist in self . conditions_nodelists :
def __init__ ( self , context , * args , ** kwargs ) :
try :
def __str__ ( self ) :
class_name = base . __name__
class ImageField ( FileField ) :
offset = ( len ( self . __starttag_text ) - self . __starttag_text . rfind ( STR0 ) )
if lang_code :
handler . addQuickElement ( STR0 , item [ STR1 ] , guid_attrs )
def _cull ( self ) :
import warnings
data = ( form . cleaned_data [ field ] , ) + date_data
exclude = self . _get_validation_exclusions ( )
output_transaction = True
def npath ( path ) :
ip_str = _explode_shorthand_ip_string ( ip_str )
import mimetypes
self . stderr . write ( STR0 % app_label )
return value
return False
else :
number = '' . join ( reversed ( digits ) )
value = timezone . normalize ( value )
@ register . tag
if contents is not None :
@ python_2_unicode_compatible
raise
try :
pass
from __future__ import unicode_literals
msg [ STR0 ] = make_msgid ( )
return initial_forms
return obj
except OSError as e :
if self . can_delete and self . _should_delete_form ( form ) :
self . message = message
if not m :
raise CommandError ( STR0 % STR1 . join ( STR2 % ( model . _meta . app_label , model . _meta . object_name ) for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) ) )
return property ( fget , fset , fdel , doc )
def Deserializer ( stream_or_string , ** options ) :
_CacheInfo = namedtuple ( STR0 , [ STR1 , STR2 , STR3 , STR4 ] )
class QueryDict ( MultiValueDict ) :
def prefix ( bp , func ) :
from django . utils . http import cookie_date
return serializer ( ) . loads ( data )
f . write ( pickle . dumps ( expiry , - 1 ) )
from xml . sax . saxutils import XMLGenerator
signals . request_finished . connect ( cache . close )
root [ : ] = [ root , root , None , None ]
elif name == STR0 :
re_newlines = re . compile ( STR0 )
return value
trans_real . _default = None
target_var = bits [ - 1 ]
self . stdout . write ( self . style . MIGRATE_SUCCESS ( STR0 ) )
def _has_expired ( self , key ) :
_file = os . fdopen ( fd , mode )
class DjangoJSONEncoder ( json . JSONEncoder ) :
self . _errors . append ( form . errors )
try :
boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
break
fname = self . _key_to_file ( key , version )
missing_args_message = STR0
ch , escaped = next ( pattern_iter )
for model in sort_dependencies ( app_list . items ( ) ) :
if option_value in selected_choices :
except InvalidOperation :
__contains__ = has_header
loop_dict [ STR0 ] = i + 1
truncate = force_text ( truncate )
if connection . ops . start_transaction_sql ( ) :
super ( FileField , self ) . __init__ ( * args , ** kwargs )
if self . _wrapped is empty :
if not re . search ( STR0 , name ) :
@ register . filter ( STR0 , is_safe = True )
format = color_settings . get ( role , { } )
return _ ( STR0 )
def __init__ ( self , mode = STR0 , bufsize = - 1 , suffix = STR1' , dir = None ) :
return mark_for_escaping ( value )
result = STR0 . join ( hextets )
def __copy__ ( self ) :
parser . add_argument ( STR1 , action = STR2 , dest = STR3 , default = False , help = STR0 )
else :
output = ''
from django . utils . encoding import force_str , force_text
return do_translate ( message , STR0 )
data = BytesIO ( self . _body )
self . saved_forms . append ( form )
class FilePathField ( ChoiceField ) :
fn ( * args , ** kwargs )
raise ValueError ( STR0 % date )
self . template_parser = parser
filter_expr = parser . compile_filter ( STR0 % ( rest ) )
def __copy__ ( self ) :
class TemplateEncodingError ( Exception ) :
return language [ : p ] . lower ( ) + STR0 + language [ p + 1 : ] . lower ( )
var , constant = match . group ( STR0 , STR1 )
base36 = BaseConverter ( BASE36_ALPHABET )
try :
if unhandled_params :
sites . append ( site )
if with_base_fields :
except ImportError as e :
return attrs
@ classmethod
def _delete ( self , fname ) :
return caches [ DEFAULT_CACHE_ALIAS ] != other
return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
self . _caches . caches [ alias ] = cache
del self . dicts [ - 1 ] [ key ]
new_file . write ( content )
except IndexError :
import re
self . run_shell ( shell = options [ STR0 ] )
docs_version = STR0
lib = get_library ( taglib )
value = int ( value )
def date_format ( value , format = None , use_l10n = None ) :
color_names = ( STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 )
super ( SortedDict , self ) . __setitem__ ( key , value )
def write_migration_files ( self , changes ) :
len ( X ( ) )
if i >= self . initial_form_count ( ) and i >= self . min_num :
from django . core . validators import validate_ipv4_address
