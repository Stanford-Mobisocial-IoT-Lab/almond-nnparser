return self . _headers [ header . lower ( ) ] [ 1 ]
contents = format_html ( STR0 , contents , label_suffix )
def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
model_list . append ( model )
raise TemplateSyntaxError ( STR0 )
return STR0 % ( self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
def escape ( text ) :
if message is not None :
self . _deleted_form_indexes = [ ]
if can_fail :
if retval :
yield node
if schemes is not None :
default_error_messages = { STR0 : _ ( STR1 ) , STR2 : ungettext_lazy ( STR3 , STR4 , STR5 ) , STR6 : ungettext_lazy ( STR7 , STR8 , STR9 ) , STR10 : ungettext_lazy ( STR11 , STR12 , STR13 ) , }
from django . utils import dateformat , numberformat , datetime_safe
def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :
s = s . replace ( STR0 , STR1 )
def to_python ( self , value ) :
class CheckMessage ( object ) :
def __new__ ( cls , * args , ** kwargs ) :
check_for_migrations ( app_config , connection )
except ( HTMLParseError , UnboundLocalError ) :
def get_language ( ) :
if domain is not None :
else :
if getattr ( e , STR0 , False ) :
super ( JsLexer , self ) . __init__ ( self . states , STR0 )
elif isinstance ( obj , EscapeData ) :
except ( ValueError , TypeError ) :
return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )
render_context = self . context . render_context
from django . utils . deprecation import RemovedInDjango19Warning
handler = SimplerXMLGenerator ( outfile , encoding )
if self . attachments :
def load_template ( self , template_name , template_dirs = None ) :
MEMCACHE_MAX_KEY_LENGTH = 250
pass
missing_args_message = STR0
from django . utils . translation import ugettext as _
BASE16_ALPHABET = STR0
if hasattr ( self , STR0 ) :
except ( TypeError , VariableDoesNotExist ) :
if node . getElementsByTagName ( STR0 ) :
elif len ( fks_to_parent ) == 0 :
for localedir in reversed ( settings . LOCALE_PATHS ) :
from __future__ import unicode_literals
from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
return ipv4_unpacked
if self . old_timezone is None :
renderer = RadioFieldRenderer
if err_log :
result = middleware . process_exception ( request , e )
url = STR
self . endElement ( name )
self . command_stack . pop ( )
for attr , value in list ( attrs . items ( ) ) :
if self . _validate_unique :
bits = token . contents . split ( )
help = STR0
remove_tags = allow_lazy ( remove_tags , six . text_type )
secret = settings . SECRET_KEY
return template . render ( context )
return False
connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently )
return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) ) or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
@ property
def forbid_multi_line_headers ( name , val , encoding ) :
default_error_messages = { STR0 : _ ( STR1 ) , }
counters [ i ] += chunk_length
possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
visible_issue_count = 0
self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )
class CommandError ( Exception ) :
if not options . get ( STR0 ) :
raise ValueError ( STR0 % ( protocol , list ( ip_address_validator_map ) ) )
except KeyError :
except ValidationError as e :
to_python = self . _get_to_python ( pk_field )
if renderer :
import re
if old_attr is None :
if len ( fks_to_parent ) == 1 :
INFO = 20
def handle_default_options ( options ) :
tok = STR200
default_error_messages = { STR0 : _ ( STR1 ) }
from django . core . serializers . python import Serializer as PythonSerializer
if self . can_delete and self . _should_delete_form ( form ) :
if code is not None :
latest_date = item_date
self . using = options . get ( STR0 )
return AutoEscapeControlNode ( ( arg == STR0 ) , nodelist )
attrs = dict ( self . attrs , ** kwargs )
def __new__ ( cls , * args , ** kwargs ) :
if questioner . ask_merge ( app_label ) :
def import_by_path ( dotted_path , error_prefix = STR ) :
new_msg = ( STR0 STR1 STR2 STR3 STR4 STR5 ) % ( connection . settings_dict [ STR6 ] , e )
if str ( STR0 ) in value or str ( STR1 ) in value :
return self . filter_expr . resolve ( context )
if new_mod is None :
self . _validate_unique = False
warnings . warn ( STR0 STR1 , RemovedInDjango19Warning , stacklevel = 2 )
self . creation_counter = Field . creation_counter
def _coerce ( self , value ) :
if url . startswith ( STR0 ) :
def enter_command ( self , command , token ) :
prefix = STR0 % self . app_or_project
pass
from django . utils . module_loading import import_string
acceptable_endblocks = ( STR0 , STR1 % block_name )
raise CommandError ( STR0 % ( self . app_or_project , template ) )
raise NotImplementedError ( STR0 )
value = value . strip ( )
def handle ( self , ** options ) :
return True
return format_html ( STR0 , flatatt ( final_attrs ) , force_text ( value ) )
top = bottom + self . per_page
raise CommandError ( STR0 % name )
file_root , file_ext = os . path . splitext ( file_name )
return MONTHS_AP [ self . data . month ]
return msgs
return lang_code
return s . encode ( STR0 )
if self not in state_frame :
self . field = field
if code is None :
from __future__ import absolute_import
from django . utils import six
except UnicodeDecodeError :
except ImportError :
csrf_token = context . get ( STR0 , None )
app_configs = None
from django . utils . deprecation import RemovedInDjango19Warning
self . object_list = object_list
return False
self . validate_key ( key )
raise CommandError ( STR0 STR1 )
if kw [ STR0 ] :
return language [ : p ] . lower ( ) + STR0 + language [ p + 1 : ] . upper ( )
self . namespaces = [ x for x in namespaces if x ]
else :
def error ( self , token , msg ) :
if value in self . empty_values :
db = router . db_for_write ( self . cache_model_class )
new_ip = ip_str . split ( STR0 )
year += 2000
if errors :
field_value = getInnerText ( node ) . strip ( )
def humanize ( dirname ) :
def get_queryset ( self ) :
return self . _stream . read ( * args , ** kwargs )
def get_response ( self , request ) :
except Exception as e :
odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
except KeyError :
elif action == STR0 :
def __add__ ( self , rhs ) :
except UnicodeDecodeError :
from django . core . management . base import AppCommand
return [ self [ k ] for k in self . keyOrder ]
if not model . _meta . proxy and router . allow_migrate ( using , model ) :
with open ( path , STR0 ) :
__all__ = ( STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , STR11 , )
class IfNode ( Node ) :
return False
BASE36_ALPHABET = STR0
else :
try :
hidden_fields . append ( six . text_type ( bf ) )
return [ field for field in self if field . is_hidden ]
value = str ( Header ( value , STR0 , maxlinelen = sys . maxsize ) . encode ( ) )
def __repr__ ( self ) :
from django . core . serializers . base import DeserializationError
cc_delim_re = re . compile ( STR0 )
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
while s [ : 1 ] == STR0 :
if not _cached_filenames and settings . USE_I18N :
assert not ( cls . _delegate_bytes and cls . _delegate_text ) , STR0
else :
def handle ( self , * app_labels , ** options ) :
else :
msg [ STR0 ] = formatdate ( )
return STR0
if not qs . ordered :
options += [ ( app_config . label , 0 ) for app_config in app_configs ]
return STR
sys . stderr . close ( )
return timesince ( value , arg )
check_for_language = lambda x : True
return attrs
self . _js = [ ]
if bf . label :
from django . conf import settings
for base in bases [ : : - 1 ] :
def widget_attrs ( self , widget ) :
return SpacelessNode ( nodelist )
for message in messages :
@ stringfilter
return list ( self . iteritems ( ) )
creation_counter = 0
self . old_method_name = old_method_name
return self . object_list [ index ]
offset = self . __offset . seconds // 60
yield buffer_
if as_ != STR0 :
def __init__ ( self , schemes = None , ** kwargs ) :
self . conditions_nodelists = conditions_nodelists
from django . utils import six
__all__ = ( STR0 , STR1 , STR2 )
self . set ( key , value , timeout , version )
sys . exit ( 1 )
exclude = [ ]
return I18N_MODIFIED if filename . endswith ( STR0 ) else FILE_MODIFIED
try :
raise AttributeError ( STR0 )
return True
query_string = query_string . decode ( )
for field_node in node . getElementsByTagName ( STR0 ) :
return result
termios = None
else :
def __init__ ( self , data = None , files = None , auto_id = STR0 , prefix = None , initial = None , error_class = ErrorList , label_suffix = None , empty_permitted = False ) :
def module_to_dict ( module , omittable = lambda k : k . startswith ( STR0 ) ) :
from django . utils import six
except TypeError :
self . value = value
def filter ( self , record ) :
raise TemplateSyntaxError ( STR0 STR1 % token . contents )
return self . __class__ ( [ ( k , v [ : ] ) for k , v in self . lists ( ) ] )
if app_label not in executor . loader . migrated_apps :
used_name = the_path . split ( STR0 ) [ - 1 ]
sys . stderr . write ( STR0 % e )
def rmtree_errorhandler ( func , path , exc_info ) :
self . backout . append ( self . pointer )
fname = self . _key_to_file ( key , version )
def __init__ ( self , name , content , content_type = STR0 ) :
else :
self . _cache . clear ( )
self . xml . startElement ( STR0 , attrs )
del self . _expire_info [ key ]
key = self . make_key ( key , version = version )
try :
msg . attach ( self . _create_mime_attachment ( * alternative ) )
class EmailBackend ( ConsoleEmailBackend ) :
template_dir = template_dir . decode ( fs_encoding )
for site in sites :
databases = [ self . using , None ]
self . tokens . insert ( 0 , token )
return 0
base64d = STR0 + base64d
try :
try :
parser . add_argument ( STR1 , STR2 , dest = STR3 , action = STR4 , default = [ STR5 ] , help = STR6 STR7 STR8 )
itervalues = _itervalues
value = None
import json
import importlib
_mtimes [ filename ] = mtime
if push is not None :
endbmatch = endblock_re . match ( t . contents )
csrf_token = context . get ( STR0 , None )
import datetime
class ExternalReferenceForbidden ( DefusedXmlException ) :
for elt in source :
field = Model . _meta . get_field ( field_name )
elif not os . path . exists ( self . file_path ) :
RemovedInNextVersionWarning = RemovedInDjango19Warning
_called_from_command_line = False
return b STR
return result
def gettext ( message ) :
MAXSIZE = sys . maxsize
return value
if STR0 in self . attrs :
if part in PALETTES :
else :
import os
smart_split_re = re . compile ( STR0 , re . VERBOSE )
raise NotImplementedError ( STR0 )
if urlconf is None :
with lock :
def close_caches ( ** kwargs ) :
class RendererMixin ( object ) :
if PY3 :
def __init__ ( self , format_string ) :
if ch == STR0 :
compare = lambda self , a , b : a < b
check_programs ( STR0 , STR1 , STR2 )
self . backout . append ( self . pointer )
self . fixture_object_count += objects_in_fixture
except IndexError :
templatetags_modules = _templatetags_modules
DEFAULT_TIMEOUT = object ( )
pid = 1
self . default_kwargs = default_kwargs or { }
if msg :
form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )
def ungettext ( singular , plural , number ) :
def __str__ ( self ) :
def import_library ( taglib_module ) :
qn = connection . ops . quote_name
else :
return _ ( STR0 )
def is_hidden ( self ) :
compressed = zlib . compress ( data )
pass
return int ( binascii . hexlify ( x ) , 16 )
def create_var ( self , value ) :
raise ValidationError ( self . error_messages [ STR0 ] , code = STR1 , params = { STR2 : ( self . max_digits - self . decimal_places ) } , )
self . keyOrder . remove ( k )
class HttpResponseNotModified ( HttpResponse ) :
raise CommandError ( STR0 STR1 STR2 )
@ register . tag
errors = self . default_error_messages . copy ( )
break
self . lasttag = tag = match . group ( 1 ) . lower ( )
if invalid_var_format_string is None :
from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
except KeyError :
if not expires :
if self . count == 0 and not self . allow_empty_first_page :
id_ = self . attrs . get ( STR0 , None )
deactivate_all ( )
use_reloader = options . get ( STR0 )
module = _import_module ( self . mod )
from django . template . context import ( BaseContext , Context , RequestContext , ContextPopException )
yield STR0
bits = urlsplit ( location )
continue
_prefixes . value = prefix
assert not isinstance ( bcc , six . string_types ) , STR200
if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :
_html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
if isinstance ( template , ( list , tuple ) ) :
from django . utils import six , lru_cache
return ip_str . rsplit ( STR0 , 1 ) [ 1 ]
return initial != data
self . stdout . write ( STR0 % title )
if json . __version__ . split ( STR0 ) >= [ STR1 , STR2 , STR3 ] :
del self . _headers [ header . lower ( ) ]
import os
si = open ( STR0 , STR1 )
digits = decimals
chunk += over_chunk
self . position -= len ( bytes )
from django . utils . module_loading import import_string
if escaped :
locales = set ( locales ) - set ( exclude )
if neg :
if not m :
for d in self . dicts :
return None
self . command_stack . append ( ( command , token . source ) )
def __init__ ( self , args , kw ) :
assert content is None
self . __to_language = to_language ( language )
def close ( self ) :
def __getitem__ ( self , key ) :
def render ( self , name , value , attrs = None ) :
self . validators . append ( validators . MinValueValidator ( min_value ) )
raise ImproperlyConfigured ( STR0 STR1 )
self . hide_empty = options . get ( STR0 , False )
if not chunks :
from django . utils . six . moves import input
try :
except ValueError :
self . stdout . write ( STR0 )
elif cmatches :
inputs = [ ]
if not extra_context :
trans_real . _translations = { }
cursor . execute ( STR0 STR1 % table , [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )
import rlcompleter
if PY3 :
def _has_changed ( self , initial , data ) :
return self . format ( STR0 )
app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , STR0 ) ) )
def get_format_modules ( lang = None , reverse = False ) :
elif t . token_type == TOKEN_VAR :
super ( Command , self ) . add_arguments ( parser )
except ImportError :
UserModel = get_user_model ( )
from django . utils import six
context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
dig1 , dig2 = inner . copy ( ) , outer . copy ( )
return self . nodelist . render ( new_context )
def default_key_func ( key , key_prefix , version ) :
value = list . pop ( self , idx )
from django . utils . regex_helper import normalize
pop = complain
table_names = [ ]
ULONG_PTR = c_int64
code = STR0
processors = ( )
if os . path . exists ( fname ) :
excluded_models . add ( model )
DEFAULT_CACHE_ALIAS = STR0
data = conditional_escape ( arg ) . join ( value )
self . resolver_match = None
return r
self . _request_middleware = None
from django . db import connections , DEFAULT_DB_ALIAS
matches = filter_re . finditer ( token )
fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
return super ( TimeField , self ) . to_python ( value )
else :
tagname = tagname . lower ( )
def restart_with_reloader ( ) :
class EmptyPage ( InvalidPage ) :
return super ( TimestampSigner , self ) . sign ( value )
except KeyError :
return num_sent
choices = ( ( STR0 , ugettext_lazy ( STR1 ) ) , ( STR2 , ugettext_lazy ( STR3 ) ) , ( STR4 , ugettext_lazy ( STR5 ) ) )
from django . utils . encoding import force_text , smart_text
request = None
pk_value = None
else :
self . reader_leaves ( )
self . deleted_objects . append ( obj )
from django . db import connections , DEFAULT_DB_ALIAS
start = 0
_add_doc ( get_unbound_function , STR0 )
class CacheHandler ( object ) :
f = os . path . join ( root , f )
import threading
translators_comment_start = None
help = STR0
self . current_token = self . next_token ( )
if str ( number ) [ 0 ] == sign :
def compress_string ( s ) :
orig = getattr ( self . parent_instance , self . to_field )
ch = None
return node . render ( context )
bytes = float ( bytes )
raise CommandError ( STR0 STR1 % ( STR . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
except OSError as e :
if html_message :
self . set_charset ( utf8_charset )
def load ( parser , token ) :
def timeuntil ( d , now = None ) :
self . stdout . write ( STR0 % ( fixture_name , humanize ( fixture_dir ) ) )
_add_doc ( reraise , STR0 )
query = query . lists ( )
data_set = set ( force_text ( value ) for value in data )
try :
@ register . tag
sys . stderr . write ( msg )
setattr ( base , old_method_name , wrapper ( old_method ) )
clean_data . append ( field . clean ( field_value ) )
for field in self . fields . values ( ) :
from django . utils . safestring import mark_safe
file_field_list = [ ]
nesting += 1
BM_compatible = True
self . func = func
try :
yield STR0
return all ( w . is_hidden for w in self . widgets )
raise ValidationError ( self . message , code = self . code )
__iter__ = xreadlines
def __init__ ( self , permitted_methods , * args , ** kwargs ) :
return result
super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
parser . add_argument ( STR0 , action = STR1 , dest = STR2 , default = True , help = STR3 )
value = b STR . join ( self . make_bytes ( chunk ) for chunk in value )
self . json_kwargs [ STR0 ] = ( STR1 , STR2 )
command = load_command_class ( app_name , name )
meta = getattr ( form , STR0 , None )
return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap , isolated_context = isolated_context )
for f in filters :
if exclude and f . name in exclude :
connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently )
dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
break
self [ key ] = result
else :
if callable ( getattr ( self . stream , STR0 , None ) ) :
self . locale_paths = [ ]
if strings_only and is_protected_type ( s ) :
django . setup ( )
raise
except MultiPartParserError :
raise TemplateSyntaxError ( STR0 % name )
__str__ = new_method_proxy ( str )
return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )
else :
if STR0 not in opts :
