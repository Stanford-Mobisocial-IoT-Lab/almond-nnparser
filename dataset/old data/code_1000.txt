if isinstance ( option_label , ( list , tuple ) ) :
locales . append ( locale . split ( STR0 ) [ 0 ] )
try :
return self
return name + STR0
except NoReverseMatch :
if help_texts and f . name in help_texts :
def modified_time ( self , name ) :
media = property ( _get_media )
return total_forms
def U ( self ) :
def truncatechars ( value , arg ) :
from datetime import timedelta , tzinfo
if html :
try :
raise ValueError ( `` Base36 input too large '' )
qs = qs . using ( form . instance . _state . db )
if field_value is not None :
from django . core . management . sql import sql_custom
return s
def __iter__ ( self ) :
normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )
return base , ext
class Command ( AppCommand ) :
compare = lambda self , a , b : a > b
super ( Select , self ) . __init__ ( attrs )
boundary = boundary . encode ( STR0 )
if message :
from django . utils . encoding import force_text
value = { True : STR0 , False : STR1 , STR2 : STR3 , STR4 : STR5 } [ value ]
def __next__ ( self ) :
parser . add_argument ( STR0 , dest = STR1 , help = `` Only dump objects with given primary keys. `` `` Accepts a comma separated list of keys. `` `` This option will only work when you specify one model . '' )
if self . is_reversed :
class MultiValueDict ( dict ) :
parser . delete_first_token ( )
_js_escapes . update ( ( ord ( STR0 % z ) , STR1 % z ) for z in range ( 32 ) )
else :
class Truncator ( SimpleLazyObject ) :
elif not hasattr ( message , STR0 if six . PY3 else STR1 ) :
class CacheClass ( FileBasedCache ) :
new_name = STR0 % ( new_name , num )
yield STR0
if kwds :
encoding = property ( lambda self : self . file . encoding )
field_name = disposition [ STR0 ] . strip ( )
if record . exc_info :
nodelist_loop = parser . parse ( ( STR0 , end_tag ) )
requires_system_checks = False
else :
_html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
self . stdout . write ( self . style . MIGRATE_HEADING ( `` Optimizing ... '' ) )
kwargs [ STR0 ] = number
except Exception :
out . write ( blankout ( part , STR0 ) )
elif self . _meta . fields and field not in self . _meta . fields :
def value_from_datadict ( self , data , files , name ) :
raise TypeError ( STR0 )
outdict = { }
def __init__ ( self , iterable = None ) :
return force_str ( STR0 % ( request . __class__ . __name__ , path , six . text_type ( get ) , six . text_type ( post ) , six . text_type ( cookies ) , six . text_type ( meta ) ) )
if isinstance ( val , tuple ) :
import os
template = get_template_from_string ( template , origin , template_name )
else :
self . _errors [ field ] = self . error_class ( error_class = STR0 )
days = ( STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 )
try :
pass
def resolve ( self , path ) :
pass
self . form = form
from xml . dom import pulldom
if ch == STR0 :
return get_connection ( backend = self . email_backend , fail_silently = True )
if STR0 not in attrs :
unpacked_vars = dict ( zip ( self . loopvars , item ) )
k , v = x , True
def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :
if self . required :
try :
LANGUAGE_SESSION_KEY = STR0
return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
data = ( form . cleaned_data [ field ] , ) + date_data
return ustring_re . sub ( fix , s )
meta = type ( str ( STR0 ) , ( object , ) , { } )
for model in app_models :
widget = ClearableFileInput
else :
from django . utils import six
def __init__ ( self , producer , length = None ) :
from django . utils import six
def iri_to_uri ( iri ) :
__all__ = [ STR0 ]
if isinstance ( regex , six . string_types ) :
locks . lock ( fd , locks . LOCK_EX )
def iterbytes ( buf ) :
block = type ( self ) ( block . name , block . nodelist )
errors = `` strict ''
import gettext
def get_cache_key ( request , key_prefix = None , method = STR0 , cache = None ) :
from . import Error , Tags , register
wrapper . cache_clear = cache_clear
else :
def render_options ( self , choices , selected_choices ) :
encoding = settings . DEFAULT_CHARSET
content = content . decode ( STR0 )
return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
elif bytes < MB :
value = value . encode ( charset )
dictConfigClass = DictConfigurator
if param in unhandled_params :
raise CommandError ( `` % r conflicts with the name of an existing `` `` Python module and can not be used as a `` `` project name . Please try another name . '' % project_name )
call_command ( STR0 , STR1 , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
return self . as_widget ( Textarea ( ) , attrs , ** kwargs )
def __call__ ( self , value ) :
j = match . end ( )
mw_instance = mw_class ( )
def format_subject ( self , subject ) :
if size == 0 :
def clear_cdata_mode ( self ) :
raise TemplateSyntaxError ( `` Invalid arguments provided to assignment_tag '' )
PATTERN = `` '' '' classdef < STR0 any+ STR1 suite < any* funcdef < STR2 unifunc=STR3 parameters < STR4 NAME STR5 > any+ > any* > > `` '' ''
if self . options . get ( `` indent '' ) :
else :
parser . add_argument ( STR0 , action = STR1 , dest = STR2 , default = DEFAULT_DB_ALIAS , help = STR3 STR4 )
self . _queryset = qs
self . max_value , self . min_value = max_value , min_value
return value
@ property
self . xml . endElement ( `` field '' )
def regex ( self ) :
idx = m . groups ( ) [ 0 ]
if reduce ( operator . eq , level ) :
value = dict . get ( self , key , default )
return message
self . models . add ( obj . object . __class__ )
def module_to_dict ( module , omittable = lambda k : k . startswith ( STR0 ) ) :
for app_label , app_migrations in changes . items ( ) :
if compare_to ! = state_frame [ self ] :
pass
help_text = STR0
from django . utils . module_loading import import_string
else :
def camel_case_to_spaces ( value ) :
for filepath in self . get_template_sources ( template_name , template_dirs ) :
for app_dir in app_dirs :
set_script_prefix ( get_script_name ( environ ) )
if hasattr ( request , STR0 ) :
def write ( data ) :
before_import_registry = copy . copy ( register_to . _registry )
if str_number [ 0 ] == STR0 :
def created_time ( self , name ) :
return { STR0 : settings . MEDIA_URL }
vary_headers = cc_delim_re . split ( response [ STR0 ] )
self . _catalog . update ( other . _catalog )
def assertRaisesRegex ( self , * args , ** kwargs ) :
raise TemplateDoesNotExist ( name )
if PY3 :
name = _resolve_name ( name [ level : ] , package , level )
super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
def __init__ ( self , * args , ** kwargs ) :
except KeyError :
if six . PY2 :
statement . append ( cleaned_line )
attrs . setdefault ( STR0 , STR1 )
elif len ( fks_to_parent ) == 0 :
for node in self . nodelist_loop :
self . error ( `` bad end tag : % r '' % ( rawdata [ i : j ] , ) )
class SimpleLazyObject ( LazyObject ) :
self . addr = STR0 if self . use_ipv6 else STR1
klass = app_name
timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
return chunk
else :
if os . path . isfile ( f ) :
if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :
nodelist = parser . parse ( ( STR0 , ) )
out . write ( STR0 % p . split ( STR1 , 1 ) [ 1 ] )
return EscapeBytes ( bytes ( s ) )
value = force_text ( value )
cmatch = constant_re . match ( parts [ 0 ] )
chars = allow_lazy ( chars )
def wrapper ( * args , ** kwds ) :
return value
def L ( self ) :
def make_key ( self , key , version = None ) :
elif message_context [ 0 ] == `` ' '' :
return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )
from __future__ import unicode_literals
import threading
def add_item ( self , title , link , description , author_email = None , author_name = None , author_link = None , pubdate = None , comments = None , unique_id = None , unique_id_is_permalink = None , enclosure = None , categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :
mode = STR0 if isinstance ( chunk , bytes ) else STR1
handler . startElement ( STR0 , self . root_attributes ( ) )
except ( ValueError , OverflowError , InvalidOperation ) :
from django . apps import apps
self . connection = None
compare_to = None
def write_message ( self , message ) :
from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
line = STR0 % plural_form_line
except ( ValueError , TypeError ) :
if not args :
def assertCountEqual ( self , * args , ** kwargs ) :
return value
_urllib_parse_moved_attributes = [ MovedAttribute ( `` ParseResult '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` SplitResult '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` parse_qs '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` parse_qsl '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` urldefrag '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` urljoin '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` urlparse '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` urlsplit '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` urlunparse '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` urlunsplit '' , `` urlparse '' , `` urllib.parse '' ) , MovedAttribute ( `` quote '' , `` urllib '' , `` urllib.parse '' ) , MovedAttribute ( `` quote_plus '' , `` urllib '' , `` urllib.parse '' ) , MovedAttribute ( `` unquote '' , `` urllib '' , `` urllib.parse '' ) , MovedAttribute ( `` unquote_plus '' , `` urllib '' , `` urllib.parse '' ) , MovedAttribute ( `` urlencode '' , `` urllib '' , `` urllib.parse '' ) , MovedAttribute ( `` splitquery '' , `` urllib '' , `` urllib.parse '' ) , ]
def linenumbers ( value , autoescape = None ) :
if renderer :
processors . append ( func )
os . umask ( umask )
import os
def get_unique_error_message ( self , unique_check ) :
def get_language_from_request ( request , check_path = False ) :
robotparser = sys . modules [ __name__ + `` .moves.urllib_robotparser '' ]
class HttpResponseNotFound ( HttpResponse ) :
new_errors = check ( app_configs = app_configs )
kwargs = { STR0 : form , STR1 : formfield_callback , STR2 : formset , STR3 : extra , STR4 : can_delete , STR5 : can_order , STR6 : fields , STR7 : exclude , STR8 : min_num , STR9 : max_num , STR10 : widgets , STR11 : validate_min , STR12 : validate_max , STR13 : localized_fields , STR14 : labels , STR15 : help_texts , STR16 : error_messages , }
return None
cull_num = num // self . _cull_frequency
class FileField ( Field ) :
self . template_dirs = template_dirs
if root :
return save_instance ( self , self . instance , self . _meta . fields , fail_message , commit , self . _meta . exclude , construct = False )
resolver = get_ns_resolver ( ns_pattern , resolver )
if var_obj is None :
error_msg = `` Your TEMPLATE_DIRS setting is empty . Change it to point to at least one template directory . ''
self . _cull ( )
return STR0
return STR0 . join ( statements )
if item [ STR0 ] is not None :
raise TypeError ( `` update expected at most 1 arguments , got % d '' % len ( args ) )
obj = new_obj
use_grouping = use_grouping or force_grouping
self . _callback_str = prefix + STR0 + self . _callback_str
if self . _delegate_bytes :
def _setup ( self ) :
try :
e . args = ( `` Could not load % ( app_label ) s. % ( object_name ) s ( pk= % ( pk ) s ) : % ( error_msg ) s '' % { STR0 : obj . object . _meta . app_label , STR1 : obj . object . _meta . object_name , STR2 : obj . object . pk , STR3 : force_text ( e ) } , )
return parser
return STR0 % self . data . microsecond
def _iteritems ( self ) :
pid = os . getpid ( )
if invalid_var_format_string :
if name == `` _wrapped '' :
from django . db import router , DEFAULT_DB_ALIAS
def select_template ( template_name_list , dirs = None ) :
self . handle_fk_field ( obj , field )
warnings . warn ( `` resolve_variable ( ) is deprecated . Use django.template . '' `` Variable ( path ) .resolve ( context ) instead '' , RemovedInDjango20Warning , stacklevel = 2 )
def _fd ( f ) :
values = reversed ( values )
if subcommand_cls . use_argparse :
except TemplateSyntaxError as e :
if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
if self . can_delete :
from django . utils . translation import trans_null as trans
raise ValueError ( STR0 STR1 % ( name , e ) )
def supports_color ( ) :
if self . selected_fields is None or field . attname in self . selected_fields :
self . xml . endElement ( `` field '' )
from django . core . management . sql import check_for_migrations
raise ValidationError ( _ ( STR0 ) , code = STR1 )
args , varargs , varkw , defaults = getargspec ( func )
def _raw_value ( self , fieldname ) :
truncate_len = length
continue
import tempfile
self . number = number
pass
year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]
tzinfo . __init__ ( self )
def __getitem__ ( self , name ) :
class date ( real_date ) :
handler . addQuickElement ( `` description '' , item [ STR0 ] )
return data . get ( name , None )
continue
try :
return settings . TEMPLATE_STRING_IF_INVALID
for h in logger . handlers [ : ] :
parser . add_argument ( STR0 , action = STR1 , dest = STR2 , default = DEFAULT_DB_ALIAS , help = STR3 STR4 )
raise NotImplementedError ( STR0 )
return msgs
f = super ( ImageField , self ) . to_python ( data )
except OSError as e :
prefixed = name + `` . ''
class ImproperlyConfigured ( Exception ) :
self . object_list = list ( self . object_list )
return force_bytes ( s , encoding , strings_only , errors )
def close ( self ) :
self . attachments . append ( ( filename , content , mimetype ) )
def __del__ ( self ) :
else :
return not settings . DEBUG
try :
else :
if value in self . empty_values :
if check not in self . registered_checks :
path = join ( os . getcwdu ( ) , path )
def deactivate ( ) :
def __repr__ ( self ) :
raise SignatureExpired ( STR0 % ( age , max_age ) )
def luhn ( candidate ) :
input_type = STR0
self . to_field = kwargs . pop ( `` to_field '' , None )
if weight > = 6 :
timetuple = dt . timetuple ( )
if latest_date is None or item_date > latest_date :
collect . extend ( _builtin_context_processors )
msg = `` Invalid HTTP_HOST header : % r . '' % host
filters = [ ]
fd = os . open ( full_path , flags , 0o666 )
vary_headers = [ ]
import functools
self . seek ( 0 )
raise CommandError ( `` % r is not a valid % s name . Please % s . '' % ( name , app_or_project , message ) )
def tzname ( self , dt ) :
def handle ( self , ** options ) :
index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
return self . forms [ 0 ] . media
if self . to_field :
return ZERO
timeout = - 1
def add_arguments ( self , parser ) :
time_re = re . compile ( rSTR0 rSTR1 )
if self . fk . rel . field_name ! = self . fk . rel . to . _meta . pk . name :
self . verbosity = int ( options . get ( STR0 ) )
templatetags_modules = _templatetags_modules
def _get_name ( self ) :
if bf_errors :
idstring = STR0 + idstring
from django . db . migrations . optimizer import MigrationOptimizer
return response
def time_format ( value , format_string ) :
self . method = environ [ STR0 ] . upper ( )
self . month_none_value = self . none_value
def unordered_list ( value , autoescape = None ) :
continue
wrapped_main_func = check_errors ( main_func )
self . _fqdn = socket . getfqdn ( )
filter_name = match . group ( `` filter_name '' )
if not tag or current_len > = truncate_len :
return errors
import types
escaper = conditional_escape
self . _changed_data = [ ]
field_params [ STR0 ] = col_name
msg += `` System check identified % s ( % s silenced ) . '' % ( `` no issues '' if visible_issue_count == 0 else `` 1 issue '' if visible_issue_count == 1 else `` % s issues '' % visible_issue_count , len ( all_issues ) - visible_issue_count , )
else :
from django . utils import six
help = `` Prints the custom table modifying SQL statements for the given app name ( s ) . ''
try :
help = `` Prints the SQL statements for the named migration . ''
return True
def _createdir ( self ) :
inputs = [ ]
if not getattr ( self , STR0 , False ) :
errors . update ( kwargs [ STR0 ] )
if STR0 in args [ 1 ] :
def tag_exists ( self , tag ) :
allow_multiple_selected = False
class IncludeNode ( Node ) :
if extra_attrs :
pass
return STR0
break
root = [ ]
else :
try :
backend = params . pop ( STR0 )
from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll , byref )
def __init__ ( self , offset ) :
elif _len ( cache ) > = maxsize :
try :
def __init__ ( self , * args , ** kwargs ) :
self . _archive . close ( )
if value in self . empty_values :
options [ option ] = value
self . files = files or { }
except ImportError :
def as_ul ( self ) :
return getattr ( _prefixes , `` value '' , STR0 )
except ValueError :
cached_loaders . append ( find_template_loader ( loader ) )
try :
os . write ( fd , current_chunk )
app_name = commands [ subcommand ]
else :
name = config . get ( STR0 , STR1 )
def _get_choices ( self ) :
warnings . warn ( `` ` % s. % s` is deprecated , use ` % s` instead . '' % ( self . class_name , self . old_method_name , self . new_method_name ) , self . deprecation_warning , 2 )
retval = self
current = settings . TEMPLATE_STRING_IF_INVALID
_super = super
def __init__ ( self , host , * args , ** kwargs ) :
from django . utils . deprecation import RemovedInDjango19Warning
if PY3 :
new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
class Formatter ( object ) :
raise
scheme , netloc , path , query , fragment = urlsplit ( url )
name = [ ]
t = select_template ( file_name )
@ register . filter ( is_safe = False )
def __repr__ ( self ) :
from django . core import mail
from __future__ import unicode_literals
if self . addr :
if t in self . __dispatch :
handler . addQuickElement ( `` title '' , self . feed [ STR0 ] )
Image . open ( file ) . verify ( )
def is_valid_path ( path , urlconf = None ) :
from django . core . mail . backends . base import BaseEmailBackend
error = { field or NON_FIELD_ERRORS : error . error_list }
register = Library ( )
url = smart_urlquote ( STR0 % middle )
def add_library ( self , lib ) :
else :
self . _populate ( )
if isinstance ( message , ValidationError ) :
def striptags ( value ) :
return False
HttpResponse . content . fset ( self , value )
items = _iteritems
sign = STR0
phone2numeric = allow_lazy ( phone2numeric )
if exp is not None and exp < time . time ( ) :
if last == 3 :
if isinstance ( s , SafeData ) :
text = STR0 % ( text or STR1 , RESET )
pass
raise TemplateSyntaxError ( `` Searching for value . Unexpected `` `` end of string in column % d : % s '' % ( i , subject ) )
def handle_m2m_field ( self , obj , field ) :
GB = 1 < < 30
return six . text_type ( s , encoding , STR0 )
return self . pointer < len ( self . subject )
try :
@ lru_cache . lru_cache ( maxsize = None )
raise AttributeError ( `` % s could not be imported `` % self . name )
value = ugettext ( `` % s PB '' ) % filesize_number_format ( bytes / PB )
path = parts [ 1 : ]
return value
return value . lower ( )
if ( form . cleaned_data and form . cleaned_data [ field ] is not None and form . cleaned_data [ unique_for ] is not None ) :
return super ( QueryDict , self ) . pop ( key , * args )
from django . utils . translation import get_language , to_locale , check_for_language
if len ( bits ) ! = 6 :
else :
while True :
elif args [ - 2 ] == `` as '' :
defaults [ STR0 ] = True
return True
def configure_filter ( self , config ) :
decimal_separator = get_format ( STR0 )
elif f . unique :
return [ field for field in self if not field . is_hidden ]
with connections [ db ] . cursor ( ) as cursor :
return type ( form . __name__ + str ( STR0 ) , ( formset , ) , attrs )
super ( QueryDict , self ) . setlist ( key , list_ )
def reraise ( tp , value , tb = None ) :
inplural = False
if callable ( initial_value ) :
obj = mark_safe ( new_obj )
return attrs
filemsg = STR0 % origin
command_dir = os . path . join ( management_dir , STR0 )
with io . open ( potfile , STR0 , encoding = STR1 ) as fp :
return self . hashvalue
return cls . __new__ ( cls , * args )
if item_type == FIELD :
class WSGIServer ( simple_server . WSGIServer , object ) :
bits = urlsplit ( location )
callback , param_dict = resolver . resolve_error_handler ( 500 )
def __new__ ( mcs , name , bases , attrs ) :
except ImportError :
self . close ( )
response . content = bSTR0
def get_current_timezone ( ) :
connection = connections [ options . get ( STR0 ) ]
output = [ ]
error = sys . modules [ __name__ + `` .moves.urllib_error '' ]
return [ None , None ]
if app_config . models_module is None or app_config in excluded_apps :
return update_wrapper ( wrapper , user_function )
if language_code not in self . _regex_dict :
lang = get_language ( )
unique_check = [ field for field in unique_check if field ! = self . fk . name ]
if _cookie_encodes_correctly and _cookie_allows_colon_in_names :
if self . verbosity > = 2 :
self . sysid = sysid
class ClearableFileInput ( FileInput ) :
resolved_args = [ context ] + resolved_args
default_validators = [ validators . validate_slug ]
if isinstance ( pattern , RegexURLResolver ) :
def _long_to_bin ( x , hex_format_string ) :
if hasattr ( os . path , STR0 ) :
def get_template_sources ( self , template_name , template_dirs = None ) :
ip_str = _sanitize_ipv4_mapping ( ip_str )
return force_text ( unquote ( force_str ( quoted_url ) ) )
self . _start_relational_field ( field )
import os
field_notes . append ( `` Field renamed because it started with STR0 . '' )
import sys
import errno
def get_complete_version ( version = None ) :
stream_or_string = stream_or_string . decode ( STR0 )
return Variable ( path ) . resolve ( context )
msg [ STR0 ] = self . subject
pattern = pattern . lower ( )
self . none_value = ( 0 , empty_label )
leave_locale_alone = True
def get_script_prefix ( ) :
else :
super ( DTDForbidden , self ) . __init__ ( )
from django . utils . deprecation import RemovedInDjango19Warning
from django . conf import settings
def to_locale ( language , to_lower = False ) :
self . match_re = re . compile ( self . match )
renderer = None
return x
if not match :
if ch == STR0 :
notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
self . pos = 0
key = self . make_key ( key , version = version )
parser . add_argument ( STR0 , nargs = STR1 , help = STR2 )
parse = sys . modules [ __name__ + `` .moves.urllib_parse '' ]
def clean ( self , value ) :
def _wrapper ( self , * args , ** kwargs ) :
return _time . tzname [ self . _isdst ( dt ) ]
def incr ( self , key , delta = 1 , version = None ) :
elif options [ STR0 ] in ( STR1 , STR2 ) :
self . options = options
try :
self . _base_set ( STR0 , key , value , timeout )
handler . endElement ( `` channel '' )
if default is None :
name = self . format ( STR0 )
class DateTimeInput ( DateTimeBaseInput ) :
def static ( request ) :
cleaned = self . clean ( value )
parser . add_argument ( STR0 , nargs = argparse . REMAINDER , help = STR1 )
six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) , sys . exc_info ( ) [ 2 ] )
return smart_text ( obj )
if pathext is None :
context_extras = { }
return None
def read ( self ) :
del frame
warnings . warn ( `` FastCGI support has been deprecated and will be removed in Django 1.9 . '' , RemovedInDjango19Warning )
value = int ( s , 36 )
warnings . warn ( STR0 STR1 % ( key , MEMCACHE_MAX_KEY_LENGTH ) , CacheKeyWarning )
return any ( self . dicts )
parser . add_argument ( STR0 , default = DEFAULT_DB_ALIAS , help = STR1 STR2 )
return list ( zip ( * flatten_result ( result ) ) )
error = error . error_dict
def check_programs ( * programs ) :
categories = [ force_text ( c ) for c in categories ]
self . args = args
if callable ( lookup_view ) :
def add_post_render_callback ( self , callback ) :
candidate_subs = text_kwargs
global _supported
EventHandler . modified_code = I18N_MODIFIED
if command in parse_until :
if not os . path . exists ( directory ) :
from django . db . migrations . autodetector import MigrationAutodetector
else :
try :
return json . dumps ( self . get_json_data ( escape_html ) )
super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
else :
print ( `` Running post-migrate handlers for application % s '' % app_config . label )
except LookupError :
def __len__ ( self ) :
self . indent ( 2 )
class ModelFormOptions ( object ) :
MB = 1 < < 20
class HttpResponseRedirect ( HttpResponseRedirectBase ) :
def _get_size_from_underlying_file ( self ) :
try :
replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
get = ( pformat ( GET_override ) if GET_override is not None else pformat ( request . GET ) )
except AttributeError :
break
from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
except KeyError :
if k [ 1 ] is None :
except IOError as e :
return force_text ( value )
check_for_migrations ( app_config , connection )
return _slugify ( value )
def parse_datetime ( value ) :
pass
return time_str + STR0
from django . utils import timezone
def loads ( s , key = None , salt = STR0 , serializer = JSONSerializer , max_age = None ) :
raise CommandError ( `` errors happened while running xgettext on % s\n % s '' % ( self . file , errors ) )
if self . localize :
for j in xrange ( int ( iterations ) ) :
parent = ( object , )
parser = parser_class ( lexer . tokenize ( ) )
else :
if response :
_active . value = pytz . timezone ( timezone )
parser . add_argument ( STR0 , STR1 , dest = STR2 , action = STR3 , default = [ ] , help = STR4 STR5 STR6 )
self . add_item_elements ( handler , item )
archive . extract ( filename , tempdir )
url = None
warnings . warn ( `` django.utils.tzinfo will be removed in Django 1.9. `` `` Use django.utils.timezone instead . '' , RemovedInDjango19Warning , stacklevel = 2 )
def constant_time_compare ( val1 , val2 ) :
for attr in _moved_attributes :
return zbuf . getvalue ( )
class Page ( collections . Sequence ) :
for app_name , model_list in manifest . items ( ) :
warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) , RemovedInDjango19Warning , stacklevel = 2 )
if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :
except ImportError :
def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :
if settings . TEMPLATE_STRING_IF_INVALID :
end_index = None
return parent
parser = self . _parser
_supported = None
from django . utils import six
parser . add_argument ( STR0 , metavar = STR1 , nargs = STR2 )
return SpacelessNode ( nodelist )
for k in doomed :
if self not in state_frame :
@ wraps ( fget )
__all__ = [ STR0 , STR1 , STR2 , STR3 , STR4 , STR5 , STR6 , STR7 , STR8 , STR9 , STR10 , STR11 , STR12 , STR13 , STR14 , STR15 , STR16 , STR17 , STR18 , STR19 , STR20 , STR21 , STR22 , ]
i += 1
def get_digit ( value , arg ) :
self . max_length , self . min_length = max_length , min_length
finally :
self . model_name = STR0
super ( Command , self ) . add_arguments ( parser )
month_field = STR0
if categories :
return STR0 . join ( sql_flush ( self . style , connections [ options [ STR1 ] ] , only_django = True ) )
def _bin_to_long ( x ) :
self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
from django . forms . extras . widgets import SelectDateWidget
content = STR0
parser . delete_first_token ( )
for i , ( seconds , name ) in enumerate ( chunks ) :
import warnings
def token_kwargs ( bits , parser , support_legacy = False ) :
if isinstance ( value , datetime . datetime ) :
pass
return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )
output_transaction = True
def __repr__ ( self ) :
def model_to_dict ( instance , fields = None , exclude = None ) :
errors . append ( Error ( `` % s was connected to the STR0 signal `` `` with a lazy reference to the STR1 sender , `` `` which has not been installed . '' % ( description , name , STR2 . join ( reference ) ) , obj = receiver . __module__ , hint = None , id = STR3 ) )
def __exit__ ( self , exc , value , tb ) :
class ChunkIter ( six . Iterator ) :
got_request_exception = Signal ( providing_args = [ `` request '' ] )
Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
in_tag = not in_tag
self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
try :
else :
try :
return retval
if not response . streaming :
for tok in rules :
def infix ( bp , func ) :
while i < list_length :
if not m :
def chunks ( self , chunk_size = None ) :
for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
return
return isinstance ( obj , _PROTECTED_TYPES )
if STR0 in kwargs :
if self . _cull_frequency == 0 :
if model_list is None :
def fields_for_model ( model , fields = None , exclude = None , widgets = None , formfield_callback = None , localized_fields = None , labels = None , help_texts = None , error_messages = None ) :
def __init__ ( self , dict_ = None , autoescape = True , current_app = None , use_l10n = None , use_tz = None ) :
def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
i += 1
super ( TemplateResponse , self ) . __init__ ( template , context , content_type , status )
raise MultiValueDictKeyError ( repr ( key ) )
ch , escaped = next ( pattern_iter )
def __init__ ( self , digits , sign = STR0 ) :
if self . load_initial_data :
if app_config . models_module is None :
raise CommandError ( STR0 % connection . client . executable_name )
ch2 = None
for member in members :
