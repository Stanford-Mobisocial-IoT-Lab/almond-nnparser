# Copyright 2017 The Board of Trustees of the Leland Stanford Junior University
#
# Author: sawyerb <sawyerb@cs.stanford.edu>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
Created on May 2, 2017

@author: sawyerb
'''

import tensorflow as tf
import numpy as np
import re
import math
from tensorflow.python.util import nest

from .base_model import BaseModel

from .config import Config

# TODO put params in config.py
NUM_ENCODER_BLOCKS = 6;
NUM_DECODER_BLOCKS = 6;
NUM_HEADS = 5;

class TransformerAligner(BaseModel):

    def build(self):
        self.add_placeholders()
        xavier = tf.contrib.layers.xavier_initializer()
    
        # Embed the inputs. shape: (batch_size, max_length, embed_size)
        input_embeddings = self.add_input_embeddings(xavier)

        # Calculate padding and attention bias mask for attention layers.
        # (batch_size, max_input_length)
        input_padding = get_padding_mask(self.input_length_placeholder)
        attention_bias = get_padding_bias(input_padding)

        with tf.variable_scope('encoder'):
            with tf.variable_scope("positional_encoding"):
                input_embeddings += positional_encoding(self.config.max_length,
                                                        self.config.input_projection)
            # Apply dropout immediately before encoding.
            input_embeddings = tf.nn.dropout(input_embeddings,
                                             self.dropout_placeholder)
            # Encoder block. shape (batch_size, max_length, encoder_hidden_size)
            final_encoder_state = self.add_encoder_op(input_embeddings, attention_bias, input_padding)

        # Add training decoder
        # shape (batch_size, max_length, output_size)
        with tf.variable_scope('train_decoder', initializer=xavier):
            train_logits = self.add_decoder_op(final_encoder_state, training=True)

        # Calculate training loss and training op
        if self.config.decoder_sequence_loss > 0:
            with tf.name_scope('sequence_loss'):
                sequence_loss = self.add_loss_op(train_logits)
        else:
            sequence_loss = 0

        with tf.name_scope('training_loss'):
            self.loss = self.config.decoder_sequence_loss * sequence_loss + self.add_regularization_loss()

        self.train_op = self.add_training_op(self.loss)

        # Add inference decoder
        # shape (batch_size, max_length, output_size)
        with tf.variable_scope('eval_decoder', initializer=xavier):
            eval_logits = self.add_decoder_op(final_encoder_state, training=False)

        # Calculate evaluation loss
        if self.config.decoder_sequence_loss > 0:
            with tf.name_scope('sequence_loss'):
                sequence_loss = self.add_loss_op(eval_logits)
        else:
            sequence_loss = 0

        with tf.name_scope('eval_loss'):
            self.eval_loss = self.config.decoder_sequence_loss * sequence_loss

        # Finalize predictions by taking argmax and adding beam size of 1
        self.raw_preds = eval_logits
        preds = tf.argmax(eval_logits, axis=2)
        self.preds = self.finalize_predictions(preds)
        if not isinstance(self.preds, dict):
            self.preds = {
                self.config.grammar.primary_output: self.preds
            }

        weights = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)
        size = 0
        def get_size(w):
            shape = w.get_shape()
            if shape.ndims == 2:
                return int(shape[0])*int(shape[1])
            else:
                return int(shape[0])
        for w in weights:
            sz = get_size(w)
            print('weight', w, sz)
            size += sz
        print('total model size', size)

    def add_placeholders(self):
        self.add_input_placeholders()
        self.add_output_placeholders()
        self.add_extra_placeholders()

    def add_input_placeholders(self):
        self.input_placeholder = tf.placeholder(tf.int32, shape=(None, self.config.max_length), name='input_sequence')
        self.input_length_placeholder = tf.placeholder(tf.int32, shape=(None,), name='input_length')
        self.constituency_parse_placeholder = tf.placeholder(tf.bool, shape=(None, 2*self.config.max_length-1), name='input_constituency_parse')

    def add_output_placeholders(self):
        self.output_placeholders = dict()
        for key in self.config.grammar.output_size:
            self.output_placeholders[key] = tf.placeholder(tf.int32, shape=(None, self.config.max_length), name='output_sequence')
            self.primary_output_placeholder = self.output_placeholders[self.config.grammar.primary_output]
        self.output_length_placeholder = tf.placeholder(tf.int32, shape=(None,), name='output_length')

    def add_extra_placeholders(self):
        self.batch_number_placeholder = tf.placeholder(tf.int32, shape=(), name='batch_number')
        self.epoch_placeholder = tf.placeholder(tf.int32, shape=(), name='epoch_number')
        self.dropout_placeholder = tf.placeholder(tf.float32, shape=(), name='dropout_probability')
        self.action_counts = None       # Don't need

    def create_feed_dict(self, inputs_batch, input_length_batch, parses_batch,
                         labels_sequence_batch=None, labels_batch=None, label_length_batch=None,
                         dropout=1, batch_number=0, epoch=0):

        feed_dict = dict()
        feed_dict[self.input_placeholder] = inputs_batch
        feed_dict[self.input_length_placeholder] = input_length_batch
        feed_dict[self.constituency_parse_placeholder] = parses_batch
        if labels_batch is not None:
            for key, batch in labels_batch.items():
                feed_dict[self.output_placeholders[key]] = batch
        if label_length_batch is not None:
            feed_dict[self.output_length_placeholder] = label_length_batch
        feed_dict[self.dropout_placeholder] = dropout
        feed_dict[self.batch_number_placeholder] = batch_number
        feed_dict[self.epoch_placeholder] = epoch

        return feed_dict

    @property
    def batch_size(self):
        return tf.shape(self.input_placeholder)[0]

    def add_input_embeddings(self, xavier):
        with tf.variable_scope('embed', initializer=xavier):
            with tf.variable_scope('input'):

                shape = (self.config.dictionary_size, self.config.input_embed_size)
                init = None

                if self.config.train_input_embeddings:
                    if self.config.input_embedding_matrix is not None:
                        init = tf.constant_initializer(self.config.input_embedding_matrix)

                    self.input_embed_matrix = tf.get_variable('embedding',
                                                              shape=shape,
                                                              initializer=init)
                else:
                    self.input_embed_matrix = tf.constant(self.config.input_embedding_matrix)

                # shape: (dictionary size, embed_size)
                assert self.input_embed_matrix.get_shape() == shape

        # shape: (batch size, max input length, embed_size)
        inputs = tf.nn.embedding_lookup([self.input_embed_matrix], self.input_placeholder)
        assert inputs.get_shape()[1:] == (self.config.max_length, self.config.input_embed_size)

        # now project the input down to a small size
        input_projection = tf.layers.Dense(units=self.config.input_projection,
                                           name='input_projection')
        return input_projection(inputs)

    def add_encoder_op(self, inputs, attention_bias, input_padding):
        ''' Adds the encoder block of the Transformer network.
        Args:
            inputs: A 3D tensor with shape (batch_size, max_length, embed_size)
            attention_bias: bias for the self-attention layer. [batch_size, 1, 1, max_length]
            inputs_padding: padding mask. [batch_size, max_length]
        Return:
            A 3D tensor with shape (batch_size, max_length, hidden_size)
        '''

        hidden_size = self.config.encoder_hidden_size

        for i in range(NUM_ENCODER_BLOCKS):
            with tf.variable_scope('layer_{}'.format(i)):
                with tf.variable_scope('self_attention'):
                    # shape (batch_size, max_length, encoder_hidden_size)
                    mh_out = multihead_attention(query=inputs, key=inputs,
                                                 attn_bias=attention_bias,
                                                 attn_size=hidden_size,
                                                 num_heads=NUM_HEADS,
                                                 dropout_rate=self.dropout_placeholder)

                    # Residual connection and normalize
                    if (i != 0): mh_out += inputs
                    mh_out = normalize(mh_out, scope="mh_norm_{}".format(i))

                with tf.variable_scope('ffn'):
                    ff_out = feedforward(mh_out, 4*hidden_size, hidden_size,
                                         padding=input_padding,
                                         dropout_rate=self.dropout_placeholder)

                    # Residual connection and normalize
                    ff_out += mh_out
                    inputs = normalize(ff_out, scope="ff_norm_{}".format(i))

        return inputs

    def add_decoder_op(self, enc_final_state, training):
        ''' Adds the decoder op comprised of output embeddings, the decoder
        blocks, and the final feed forward layer.

        During training, decode is run once using the output_length_placeholder
        and primary_output_placeholder.
        During testing, decode is run in a loop until all inputs have hit EOS.

        Returns tensor of shape (batch_size, max_input_length, output_size)
        '''

        # TODO add variable scopes
        positionals = positional_encoding(self.config.max_length, self.config.output_embed_size)
        positionals = tf.tile(tf.expand_dims(positionals, 0), [self.batch_size, 1, 1])

        go_vector = tf.ones((self.batch_size, 1), dtype=tf.int32) * self.config.grammar.start
        output_embed_matrix = self.add_output_embeddings()
        output_size = self.config.grammar.output_size[self.config.grammar.primary_output]

        if training:
            # Embed the inputs
            # TODO HACK to add the go vector: this cuts off the last token
            output_ids = tf.concat([go_vector,
                                    self.primary_output_placeholder[:, :-1]],
                                    axis=1)
            # shape: (batch_size, max_input_length, output_embed_size)
            output_embeddings = tf.nn.embedding_lookup([output_embed_matrix], output_ids)

            # Positionally encode them.
            output_embeddings += positionals

            # Apply dropout immediately before decoding.
            output_embeddings = tf.nn.dropout(output_embeddings,
                                              self.dropout_placeholder)

            # Create mask for decoding.
            lengths = self.output_length_placeholder
            mask = tf.sequence_mask(lengths, self.config.max_length, dtype=tf.int32)

            # Decoder block
            # shape (batch_size, max_input_length, decoder_hidden_size)
            final_dec_state = self.add_decoder_block(enc_final_state,
                                                     output_embeddings, mask)
        else:
            def is_not_finished(i, hit_eos, *_):
                finished = i >= self.config.max_length
                finished |= tf.reduce_all(hit_eos)
                return tf.logical_not(finished)

            def inner_loop(i, hit_eos, next_id, embed_so_far, dec_state):
                # shape: (batch_size, 1, output_embed_size)
                next_id_embeddings = tf.nn.embedding_lookup([output_embed_matrix], next_id)
                # pad to be (batch, max_length, output_embed_size)
                embed_padding = tf.convert_to_tensor([[0, 0], [i, self.config.max_length - i - 1], [0, 0]])
                next_id_embeddings = tf.pad(next_id_embeddings, embed_padding)

                next_id_embeddings += tf.where(next_id_embeddings == 0, next_id_embeddings, positionals)
                embed_so_far += next_id_embeddings

                # shape (batch_size, max_input_length)
                mask = tf.sign(tf.abs(tf.reduce_sum(embed_so_far, axis=-1)))

                # shape (batch_size, max_input_length, decoder_hidden_size)
                dec_state = self.add_decoder_block(enc_final_state, embed_so_far, mask)

                # mask out dec_state[:, i+1:, :] to 0s
                ones = tf.ones(shape=(i+1, self.config.decoder_hidden_size))
                zeros = tf.zeros(shape=(self.config.max_length - i - 1, self.config.decoder_hidden_size))
                dec_state_mask = tf.expand_dims(tf.concat([ones, zeros], axis=0), 0)
                tiled_mask = tf.tile(dec_state_mask, [self.batch_size, 1, 1])
                dec_state = tf.where(tiled_mask == 0, tiled_mask, dec_state)

                # get logits from dec state
                next_id_logits = tf.layers.dense(dec_state, output_size)
                next_id = tf.argmax(next_id_logits, axis=2)[:, tf.minimum(i+1, self.config.max_length - 1)]
                hit_eos |= tf.equal(next_id, grammar_end)
                next_id = tf.cast(tf.expand_dims(next_id, 1), tf.int32)

                return i + 1, hit_eos, next_id, embed_so_far, dec_state

            grammar_end = self.config.grammar.end
            hit_eos = tf.fill([self.batch_size], False)
            dec_state = tf.zeros((self.batch_size, self.config.max_length, self.config.decoder_hidden_size))
            embed_so_far = tf.zeros((self.batch_size, self.config.max_length, self.config.output_embed_size))

            _, _, _, _, final_dec_state = tf.while_loop(is_not_finished,
                                                        inner_loop,
                                                       [tf.constant(0), hit_eos,
                                                        go_vector, embed_so_far,
                                                        dec_state],
                                                        shape_invariants=[
                                                            tf.TensorShape([]),
                                                            tf.TensorShape([None]),
                                                            tf.TensorShape([None, 1]),
                                                            tf.TensorShape([None, self.config.max_length, self.config.output_embed_size]),
                                                            tf.TensorShape([None, self.config.max_length, self.config.decoder_hidden_size])
                                                        ])
        # Final linear projection to get logits
        # shape (batch_size, max_input_length, output_size)
        logits = tf.layers.dense(final_dec_state, output_size)
        return logits

    def add_output_embeddings(self):
        xavier = tf.contrib.layers.xavier_initializer()
        with tf.variable_scope('embed', initializer=xavier):
            with tf.variable_scope('output'):
                self.output_embed_matrices = dict()
                pretrained = self.config.output_embedding_matrix

                for key, size in self.config.grammar.output_size.items():
                    if self.config.grammar.is_copy_type(key):
                        continue
                    shape = (size, self.config.output_embed_size)
                    if key == self.config.grammar.primary_output and self.config.train_output_embeddings:
                        embed_matrix = tf.get_variable('embedding_' + key,
                                                        shape=shape)
                    else:
                        embed_matrix = tf.constant(pretrained[key], name='embedding_' + key)

                    self.output_embed_matrices[key] = embed_matrix

        output_embed_matrix = self.output_embed_matrices[self.config.grammar.primary_output]
        return output_embed_matrix

    def add_decoder_block(self, enc_final_state, dec_state, mask):
        ''' Adds the decoder block.

        The decoder takes as inputs:
            encoder final state (batch_size, max_input_length, encoder_hidden_size)
            decoder initial embeddings (batch_size, max_input_length, output_embed_size)
            mask (batch_size, max_input_length)

        Returns tensor of shape (batch_size, max_input_length, decoder_hidden_size)
        '''
        hidden_size = self.config.decoder_hidden_size

        for i in range(NUM_DECODER_BLOCKS):
            with tf.variable_scope('decoder_block_{}'.format(i)):
                # shape (batch_size, max_input_length, encoder_hidden_size)
                mh_out = multihead_attention(query=dec_state, key=dec_state,
                                             key_mask=mask, query_mask=mask,
                                             attn_size=hidden_size,
                                             num_heads=NUM_HEADS,
                                             dropout_rate=self.dropout_placeholder,
                                             mask_future=True,
                                             scope='mh_decode_masked')

                # Residual connection and normalize
                if (i != 0): mh_out += dec_state
                dec_state = normalize(mh_out, scope="attention_norm_{}".format(i))

                mh_out = multihead_attention(query=dec_state, key=enc_final_state,
                                             key_mask=mask, query_mask=mask,
                                             attn_size=hidden_size,
                                             num_heads=NUM_HEADS,
                                             dropout_rate=self.dropout_placeholder,
                                             mask_future=False,
                                             scope='mh_decode_unmasked')

                # Residual connection and normalize
                mh_out += dec_state
                mh_out = normalize(mh_out, scope="enc_attention_norm_{}".format(i))

                # No change in shape
                ff_out = feedforward(mh_out, 4*hidden_size, hidden_size)

                # Residual connection and normalize
                ff_out += mh_out
                dec_state = normalize(ff_out, scope="ff_form_{}".format(i))

        return dec_state

    def finalize_predictions(self, preds):
        return tf.expand_dims(preds, axis=1)

    def add_loss_op(self, logits):
        # TODO use max margin loss
        length_diff = self.config.max_length - tf.shape(logits)[1]
        padding = tf.convert_to_tensor([[0, 0], [0, length_diff], [0, 0]], name='padding')
        logits = tf.pad(logits, padding, mode='constant')
        logits.set_shape((None, self.config.max_length, logits.shape[2]))
        logits = logits + 1e-5 # add epsilon to avoid division by 0

        mask = tf.sequence_mask(self.output_length_placeholder, self.config.max_length, dtype=tf.float32)
        return tf.contrib.seq2seq.sequence_loss(logits, self.primary_output_placeholder, mask)

    def _add_l2_helper(self, where, amount):
        weights = [w for w in tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES) if re.search(where, w.name)]
        regularizer = tf.contrib.layers.l2_regularizer(amount)
        return tf.contrib.layers.apply_regularization(regularizer, weights)

    def _add_l1_helper(self, where, amount):
        weights = [w for w in tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES) if re.search(where, w.name)]
        if not weights:
            return 0
        regularizer = tf.contrib.layers.l1_regularizer(amount)
        return tf.contrib.layers.apply_regularization(regularizer, weights)

    def add_regularization_loss(self):
        return self._add_l2_helper('/kernel:0$', self.config.l2_regularization) + \
            self._add_l2_helper('/embedding(_[a-z]+)?:0$', self.config.embedding_l2_regularization) + \
            self._add_l1_helper('/kernel:0$', self.config.l1_regularization)

    def add_training_op(self, loss):
        optclass = getattr(tf.train, self.config.optimizer + 'Optimizer')
        assert issubclass(optclass, tf.train.Optimizer)

        global_step = tf.train.get_or_create_global_step()

        learning_rate = tf.train.exponential_decay(self.config.learning_rate, global_step,
                                                   1000, self.config.learning_rate_decay)
        optimizer = optclass(learning_rate)

        gradient_var_pairs = optimizer.compute_gradients(loss)
        vars = [x[1] for x in gradient_var_pairs]
        gradients = [x[0] for x in gradient_var_pairs]
        if self.config.gradient_clip > 0:
            clipped, _ = tf.clip_by_global_norm(gradients, self.config.gradient_clip)
        else:
            clipped = gradients

        self.grad_norm = tf.global_norm(clipped)
        train_op = optimizer.apply_gradients(zip(clipped, vars), global_step=global_step)
        return train_op

    def __init__(self, config : Config):
        self.config = config


def positional_encoding(length, embed_size, min_timescale=1.0, max_timescale=1.0e4):
    """Return positional encoding.
        Calculates the position encoding as a mix of sine and cosine functions with
        geometrically increasing wavelengths.
        Defined and formulized in Attention is All You Need, section 3.5.
    Args:
        length: Sequence length.
        hidden_size: embedding size
        min_timescale: Minimum scale that will be applied at each position
        max_timescale: Maximum scale that will be applied at each position
    Returns:
        Tensor with shape [length, embed_size]
    """
    position = tf.to_float(tf.range(length))
    num_timescales = embed_size // 2
    log_timescale_increment = (math.log(float(max_timescale) / float(min_timescale)) / (tf.to_float(num_timescales) - 1))
    inv_timescales = min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)
    scaled_time = tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)
    signal = tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)
    return signal

def multihead_attention(query, key, attn_bias, attn_size=None, num_heads=8,
                        dropout_rate=1):
    '''
    Args:
        query: A 3D tensor with shape (batch_size, max_length, C_q)
        key: A 3D tensor with shape (batch_size, max_length, C_k)
        attn_bias: A 4D tensor with shape (batch_size, 1, 1, max_length)
        attn_size: attention size and also final output size
        num_heads: number of attention layers
        dropout_rate: 1 - rate of dropout
    Returns
        A 3D tensor with shape (batch_size, max_length, attn_size)
    '''

    def split_heads(self, x):
        """Split x into different heads, and transpose the resulting value.
        The tensor is transposed to ensure the inner dimensions hold the correct values
        during the matrix multiplication.
        Args:
            x: A tensor with shape [batch_size, length, attn_size]
        Returns:
            A tensor with shape [batch_size, num_heads, length, attn_size/num_heads]
        """
        with tf.name_scope("split_heads"):
            batch_size = tf.shape(x)[0]
            length = tf.shape(x)[1]
            depth = (attn_size // num_heads)

            # Split the last dimension
            x = tf.reshape(x, [batch_size, length, num_heads, depth])

            # Transpose the result
            return tf.transpose(x, [0, 2, 1, 3])

    def combine_heads(self, x):
        """Combine tensor that has been split.
        Args:
            x: A tensor [batch_size, num_heads, length, attn_size/num_heads]
        Returns:
            A tensor with shape [batch_size, length, attn_size]
        """
        with tf.name_scope("combine_heads"):
            batch_size = tf.shape(x)[0]
            length = tf.shape(x)[2]
            x = tf.transpose(x, [0, 2, 1, 3]) # --> # [batch, # length, # num_heads, # depth]
            return tf.reshape(x, [batch_size, length, attn_size])

    # (batch_size, max_length, attn_size)
    Q = tf.layers.dense(query, attn_size, use_bias=False)
    K = tf.layers.dense(key, attn_size, use_bias=False)
    V = tf.layers.dense(key, attn_size, use_bias=False)

    # (batch_size, num_heads, max_length, attn_size/num_heads)
    Q_ = split_heads(Q)
    K_ = split_heads(K)
    V_ = split_heads(V)

    # Scale Q down before taking a large dot product.
    Q_ *= ((attn_size // num_heads) ** -0.5)

    # (batch_size, num_heads, max_length, max_length)
    outputs = tf.matmul(Q_, K_, transpose_b=True)
    outputs += bias
    weights = tf.nn.softmax(outputs) # (batch_size, num_heads, max_length, max_length)

    # Dropout
    outputs = tf.nn.dropout(outputs, dropout_rate)

    # Weighted sum
    outputs = tf.matmul(outputs, V_) # (batch_size, num_heads, max_length, attn_size/num_heads)

    # Recombine heads
    outputs = self.combine_heads(outputs)

    # Final linear projection
    outputs = tf.layers.dense(outputs, attn_size, use_bias=False)

    return outputs

def feedforward(inputs, ff_size, output_size, padding=None, dropout=1):
    ''' Point-wise feed forward net implemented as two 1xd convolutions.

    Args:
        inputs: A 3D tensor with shape (batch_size, max_input_length, _)
        ff_size: size of feed forward layer
        output_size: size of layer output
        padding: padding mask. [batch_size, max_length]
    Returns:
        A 3D tensor with same shape/type as inputs
    '''

    # Retrieve dynamically known shapes
    batch_size = tf.shape(x)[0]
    length = tf.shape(x)[1]

    if padding is not None:
        with tf.name_scope("remove_padding"):
            # Flatten padding to [batch_size*length]
            pad_mask = tf.reshape(padding, [-1])

        nonpad_ids = tf.to_int32(tf.where(pad_mask < 1e-9))

        # Reshape x to # [batch_size*length, # hidden_size] to # remove padding
        x = tf.reshape(x, [-1, self.hidden_size])
        x = tf.gather_nd(x, indices=nonpad_ids)

        # Reshape # x # from # 2 # dimensions # to # 3 # dimensions.
        x.set_shape([None, self.hidden_size])
        x = tf.expand_dims(x, axis=0)

    output = self.filter_dense_layer(x)
    output = tf.nn.dropout(output, dropout)
    output = self.output_dense_layer(output)

    if padding is not None:
        with tf.name_scope("re_add_padding"):
            output = tf.squeeze(output, axis=0)
            output = tf.scatter_nd(indices=nonpad_ids, updates=output,
                                  shape=[batch_size * length, self.hidden_size])
          output = tf.reshape(output, [batch_size, length, self.hidden_size])

        # Inner layer
        params = {"inputs": inputs, "filters": ff_size, "kernel_size": 1,
                  "activation": tf.nn.relu, "use_bias": True}
        outputs = tf.layers.conv1d(**params)

        # Readout layer
        params = {"inputs": outputs, "filters": output_size, "kernel_size": 1,
                  "activation": None, "use_bias": True}
        outputs = tf.layers.conv1d(**params)

    return outputs

def normalize(inputs, scope='normalize'):
    '''Applies layer normalization.
    Returns: A tensor with the same shape and data dtype as `inputs`.
    '''
    with tf.variable_scope(scope):
        return tf.contrib.layers.layer_norm(inputs)

def get_padding_mask(lengths):
    ''' Create mask where 0 is real input and 1 is padding. (batch_size, max_input_length) '''
    with tf.variable_scope('padding'):
        lengths = self.input_length_placeholder
        padding_mask = tf.sequence_mask(lengths, self.config.max_length, dtype=tf.int32)
    return 1 - padding_mask

def get_padding_bias(mask):
    ''' Given padding mask of shape (batch_size, max_input_length)
    where 0 is real input and 1 is padding, calculates padding bias.

    Returns:
        Attention bias tensor of shape [batch_size, 1, 1 length]
    '''
    attention_bias = padding * -1e9
    attention_bias = tf.expand_dims(tf.expand_dims(attention_bias, axis=1), axis=1)
