example# 0
from threading import local
example# 1
import warnings
example# 2
from django . conf import settings
example# 3
from django . core import signals
example# 4
from django . core . cache . backends . base import (  InvalidCacheBackendError , CacheKeyWarning , BaseCache )
example# 5
from django . core . exceptions import ImproperlyConfigured
example# 6
from django . utils . deprecation import RemovedInDjango19Warning
example# 7
from django . utils . module_loading import import_string
example# 9
DEFAULT_CACHE_ALIAS = '_STR:0_'
example# 10
if DEFAULT_CACHE_ALIAS not in settings . CACHES :pass
example# 11
raise ImproperlyConfigured ( '_STR:0_' % DEFAULT_CACHE_ALIAS )
example# 12
def get_cache ( backend , ** kwargs ) :pass
example# 14
cache = _create_cache ( backend , ** kwargs )
example# 15
signals . request_finished . connect ( cache . close )
example# 16
return cache
example# 17
def _create_cache ( backend , ** kwargs ) :pass
example# 18
try :pass
except: pass
example# 19
try :pass
except: pass
example# 20
conf = settings . CACHES [ backend ]
example# 21
try: pass
except KeyError :pass
example# 22
try :pass
except: pass
example# 23
import_string ( backend )
example# 24
try: pass
except ImportError as e :pass
example# 25
raise InvalidCacheBackendError ( '_STR:0_' % (  backend , e ) )
example# 26
location = kwargs . pop ( '_STR:0_' , '' )
example# 27
params = kwargs
example# 28
if True: pass
else :pass
example# 29
params = conf . copy ( )
example# 30
params . update ( kwargs )
example# 31
backend = params . pop ( '_STR:0_' )
example# 32
location = params . pop ( '_STR:0_' , '' )
example# 33
backend_cls = import_string ( backend )
example# 34
try: pass
except ImportError as e :pass
example# 35
raise InvalidCacheBackendError (  '_STR:0_' % ( backend , e ) )
example# 36
return backend_cls ( location , params )
example# 37
class CacheHandler ( object ) :pass
example# 38
def __init__ ( self ) :pass
example# 39
self . _caches = local ( )
example# 40
def __getitem__ ( self , alias ) :pass
example# 41
try :pass
except: pass
example# 42
return self . _caches . caches [ alias ]
example# 43
try: pass
except AttributeError :pass
example# 44
self . _caches . caches = { }
example# 45
try: pass
except KeyError :pass
example# 46
pass
example# 47
if alias not in settings . CACHES :pass
example# 48
raise InvalidCacheBackendError (  '_STR:0_' % alias  )
example# 49
cache = _create_cache ( alias )
example# 50
self . _caches . caches [ alias ] = cache
example# 51
return cache
example# 52
def all ( self ) :pass
example# 53
return getattr ( self . _caches , '_STR:0_' , { } ) . values ( )
example# 54
caches = CacheHandler ( )
example# 55
class DefaultCacheProxy ( object ) :pass
example# 56
def __getattr__ ( self , name ) :pass
example# 57
return getattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
example# 58
def __setattr__ ( self , name , value ) :pass
example# 59
return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )
example# 60
def __delattr__ ( self , name ) :pass
example# 61
return delattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
example# 62
def __contains__ ( self , key ) :pass
example# 63
return key in caches [ DEFAULT_CACHE_ALIAS ]
example# 64
def __eq__ ( self , other ) :pass
example# 65
return caches [ DEFAULT_CACHE_ALIAS ] == other
example# 66
def __ne__ ( self , other ) :pass
example# 67
return caches [ DEFAULT_CACHE_ALIAS ] != other
example# 68
cache = DefaultCacheProxy ( )
example# 69
def close_caches ( ** kwargs ) :pass
example# 70
for cache in caches . all ( ) :pass
example# 71
cache . close ( )
example# 72
signals . request_finished . connect ( close_caches )
example# 73
from __future__ import unicode_literals
example# 74
import time
example# 75
import warnings
example# 76
from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning
example# 77
from django . utils . module_loading import import_string
example# 78
class InvalidCacheBackendError ( ImproperlyConfigured ) :pass
example# 79
pass
example# 80
class CacheKeyWarning ( DjangoRuntimeWarning ) :pass
example# 81
pass
example# 82
DEFAULT_TIMEOUT = object ( )
example# 83
MEMCACHE_MAX_KEY_LENGTH = 250
example# 85
return '%s:%s:%s' % ( key_prefix , version , key )
example# 86
def get_key_func ( key_func ) :pass
example# 87
if key_func is not None :pass
example# 88
if callable ( key_func ) :pass
example# 89
return key_func
example# 90
if True: pass
else :pass
example# 91
return import_string ( key_func )
example# 92
return default_key_func
example# 93
class BaseCache ( object ) :pass
example# 94
def __init__ ( self , params ) :pass
example# 95
timeout = params . get ( '_STR:1_' , params . get ( '_STR:0_' , 300 ) )
example# 96
if timeout is not None :pass
example# 97
try :pass
except: pass
example# 98
timeout = int ( timeout )
example# 99
try: pass
except ( ValueError , TypeError ) :pass
example# 100
timeout = 300
example# 101
self . default_timeout = timeout
example# 102
options = params . get ( '_STR:0_' , { } )
example# 103
max_entries = params . get ( '_STR:1_' , options . get ( '_STR:0_' , 300 ) )
example# 104
try :pass
except: pass
example# 105
self . _max_entries = int ( max_entries )
example# 106
try: pass
except ( ValueError , TypeError ) :pass
example# 107
self . _max_entries = 300
example# 109
try :pass
except: pass
example# 110
self . _cull_frequency = int ( cull_frequency )
example# 111
try: pass
except ( ValueError , TypeError ) :pass
example# 112
self . _cull_frequency = 3
example# 113
self . key_prefix = params . get ( '_STR:0_' , '' )
example# 116
def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :pass
example# 117
if timeout == DEFAULT_TIMEOUT :pass
example# 118
timeout = self . default_timeout
example# 120
timeout = - 1
example# 121
return None if timeout is None else time . time ( ) + timeout
example# 122
def make_key ( self , key , version = None ) :pass
example# 123
if version is None :pass
example# 124
version = self . version
example# 125
new_key = self . key_func ( key , self . key_prefix , version )
example# 126
return new_key
example# 128
"""         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         """
example# 129
raise NotImplementedError ( '_STR:0_' )
example# 131
raise NotImplementedError ( '_STR:0_' )
example# 133
raise NotImplementedError ( '_STR:0_' )
example# 134
def delete ( self , key , version = None ) :pass
example# 135
raise NotImplementedError ( '_STR:0_' )
example# 136
def get_many ( self , keys , version = None ) :pass
example# 137
d = { }
example# 138
for k in keys :pass
example# 139
val = self . get ( k , version = version )
example# 140
if val is not None :pass
example# 141
d [ k ] = val
example# 142
return d
example# 143
def has_key ( self , key , version = None ) :pass
example# 144
return self . get ( key , version = version ) is not None
example# 146
value = self . get ( key , version = version )
example# 147
if value is None :pass
example# 148
raise ValueError ( '_STR:0_' % key )
example# 149
new_value = value + delta
example# 150
self . set ( key , new_value , version = version )
example# 151
return new_value
example# 153
return self . incr ( key , - delta , version = version )
example# 154
def __contains__ ( self , key ) :pass
example# 155
return self . has_key ( key )
example# 156
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 157
for key , value in data . items ( ) :pass
example# 158
self . set ( key , value , timeout = timeout , version = version )
example# 159
def delete_many ( self , keys , version = None ) :pass
example# 160
for key in keys :pass
example# 161
self . delete ( key , version = version )
example# 162
def clear ( self ) :pass
example# 163
raise NotImplementedError ( '_STR:0_' )
example# 164
def validate_key ( self , key ) :pass
example# 165
if len ( key ) > MEMCACHE_MAX_KEY_LENGTH :pass
example# 166
warnings . warn ( 'Cache key will cause errors if used with memcached: '  '%s (longer than %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) ,  CacheKeyWarning )
example# 167
for char in key :pass
example# 168
if ord ( char ) < 33 or ord ( char ) == 127 :pass
example# 169
warnings . warn ( 'Cache key contains characters that will cause '  'errors if used with memcached: %r' % key ,  CacheKeyWarning )
example# 171
if version is None :pass
example# 172
version = self . version
example# 173
value = self . get ( key , version = version )
example# 174
if value is None :pass
example# 175
raise ValueError ( '_STR:0_' % key )
example# 176
self . set ( key , value , version = version + delta )
example# 177
self . delete ( key , version = version )
example# 178
return version + delta
example# 180
return self . incr_version ( key , - delta , version )
example# 182
"""Close the cache connection"""
example# 183
pass
example# 184
import base64
example# 185
from datetime import datetime
example# 186
try :pass
except: pass
example# 187
from django . utils . six . moves import cPickle as pickle
example# 188
try: pass
except ImportError :pass
example# 189
import pickle
example# 190
from django . conf import settings
example# 191
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 192
from django . db import connections , transaction , router , DatabaseError
example# 193
from django . db . backends . utils import typecast_timestamp
example# 194
from django . utils import timezone , six
example# 195
from django . utils . encoding import force_bytes
example# 196
class Options ( object ) :pass
example# 197
def __init__ ( self , table ) :pass
example# 198
self . db_table = table
example# 199
self . app_label = '_STR:0_'
example# 200
self . model_name = '_STR:0_'
example# 201
self . verbose_name = '_STR:0_'
example# 202
self . verbose_name_plural = '_STR:0_'
example# 203
self . object_name = '_STR:0_'
example# 204
self . abstract = False
example# 205
self . managed = True
example# 206
self . proxy = False
example# 207
class BaseDatabaseCache ( BaseCache ) :pass
example# 208
def __init__ ( self , table , params ) :pass
example# 209
BaseCache . __init__ ( self , params )
example# 210
self . _table = table
example# 211
class CacheEntry ( object ) :pass
example# 212
_meta = Options ( table )
example# 213
self . cache_model_class = CacheEntry
example# 214
class DatabaseCache ( BaseDatabaseCache ) :pass
example# 216
key = self . make_key ( key , version = version )
example# 217
self . validate_key ( key )
example# 218
db = router . db_for_read ( self . cache_model_class )
example# 219
table = connections [ db ] . ops . quote_name ( self . _table )
example# 220
with connections [ db ] . cursor ( ) as cursor :pass
example# 221
cursor . execute ( "SELECT cache_key, value, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
example# 222
row = cursor . fetchone ( )
example# 223
if row is None :pass
example# 224
return default
example# 225
now = timezone . now ( )
example# 226
expires = row [ 2 ]
example# 227
if connections [ db ] . features . needs_datetime_string_cast and not isinstance ( expires , datetime ) :pass
example# 228
expires = typecast_timestamp ( str ( expires ) )
example# 229
if expires < now :pass
example# 230
db = router . db_for_write ( self . cache_model_class )
example# 231
with connections [ db ] . cursor ( ) as cursor :pass
example# 232
cursor . execute ( "DELETE FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
example# 233
return default
example# 234
value = connections [ db ] . ops . process_clob ( row [ 1 ] )
example# 235
return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) )
example# 237
key = self . make_key ( key , version = version )
example# 238
self . validate_key ( key )
example# 239
self . _base_set ( '_STR:0_' , key , value , timeout )
example# 241
key = self . make_key ( key , version = version )
example# 242
self . validate_key ( key )
example# 243
return self . _base_set ( '_STR:0_' , key , value , timeout )
example# 245
timeout = self . get_backend_timeout ( timeout )
example# 246
db = router . db_for_write ( self . cache_model_class )
example# 247
table = connections [ db ] . ops . quote_name ( self . _table )
example# 248
with connections [ db ] . cursor ( ) as cursor :pass
example# 249
cursor . execute ( '_STR:0_' % table )
example# 250
num = cursor . fetchone ( ) [ 0 ]
example# 251
now = timezone . now ( )
example# 253
if timeout is None :pass
example# 254
exp = datetime . max
example# 255
if True: pass
elif settings . USE_TZ :pass
example# 256
exp = datetime . utcfromtimestamp ( timeout )
example# 257
if True: pass
else :pass
example# 258
exp = datetime . fromtimestamp ( timeout )
example# 260
if num > self . _max_entries :pass
example# 261
self . _cull ( db , cursor , now )
example# 262
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
example# 263
b64encoded = base64 . b64encode ( pickled )
example# 266
try :pass
except: pass
example# 267
with transaction . atomic ( using = db ) :pass
example# 268
cursor . execute ( "SELECT cache_key, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
example# 269
result = cursor . fetchone ( )
example# 270
if result :pass
example# 271
current_expires = result [ 1 ]
example# 272
if ( connections [ db ] . features . needs_datetime_string_cast and not  isinstance ( current_expires , datetime ) ) :pass
example# 273
current_expires = typecast_timestamp ( str ( current_expires ) )
example# 274
exp = connections [ db ] . ops . value_to_db_datetime ( exp )
example# 275
if result and ( mode == '_STR:1_' or ( mode == '_STR:0_' and current_expires < now ) ) :pass
example# 277
if True: pass
else :pass
example# 279
try: pass
except DatabaseError :pass
example# 280
return False
example# 281
if True: pass
else :pass
example# 282
return True
example# 283
def delete ( self , key , version = None ) :pass
example# 284
key = self . make_key ( key , version = version )
example# 285
self . validate_key ( key )
example# 286
db = router . db_for_write ( self . cache_model_class )
example# 287
table = connections [ db ] . ops . quote_name ( self . _table )
example# 288
with connections [ db ] . cursor ( ) as cursor :pass
example# 289
cursor . execute ( '_STR:0_' % table , [ key ] )
example# 290
def has_key ( self , key , version = None ) :pass
example# 291
key = self . make_key ( key , version = version )
example# 292
self . validate_key ( key )
example# 293
db = router . db_for_read ( self . cache_model_class )
example# 294
table = connections [ db ] . ops . quote_name ( self . _table )
example# 295
if settings . USE_TZ :pass
example# 296
now = datetime . utcnow ( )
example# 297
if True: pass
else :pass
example# 298
now = datetime . now ( )
example# 300
with connections [ db ] . cursor ( ) as cursor :pass
example# 301
cursor . execute ( "SELECT cache_key FROM %s "  "WHERE cache_key = %%s and expires > %%s" % table ,  [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )
example# 302
return cursor . fetchone ( ) is not None
example# 303
def _cull ( self , db , cursor , now ) :pass
example# 304
if self . _cull_frequency == 0 :pass
example# 305
self . clear ( )
example# 306
if True: pass
else :pass
example# 307
now = now . replace ( tzinfo = None )
example# 308
table = connections [ db ] . ops . quote_name ( self . _table )
example# 309
cursor . execute ( '_STR:0_' % table ,  [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )
example# 310
cursor . execute ( '_STR:0_' % table )
example# 311
num = cursor . fetchone ( ) [ 0 ]
example# 312
if num > self . _max_entries :pass
example# 313
cull_num = num // self . _cull_frequency
example# 314
cursor . execute (  connections [ db ] . ops . cache_key_culling_sql ( ) % table ,  [ cull_num ] )
example# 315
cursor . execute ( "DELETE FROM %s "  "WHERE cache_key < %%s" % table ,  [ cursor . fetchone ( ) [ 0 ] ] )
example# 316
def clear ( self ) :pass
example# 317
db = router . db_for_write ( self . cache_model_class )
example# 318
table = connections [ db ] . ops . quote_name ( self . _table )
example# 319
with connections [ db ] . cursor ( ) as cursor :pass
example# 320
cursor . execute ( 'DELETE FROM %s' % table )
example# 321
class CacheClass ( DatabaseCache ) :pass
example# 322
pass
example# 323
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 324
class DummyCache ( BaseCache ) :pass
example# 328
key = self . make_key ( key , version = version )
example# 329
self . validate_key ( key )
example# 330
return True
example# 332
key = self . make_key ( key , version = version )
example# 333
self . validate_key ( key )
example# 334
return default
example# 336
key = self . make_key ( key , version = version )
example# 337
self . validate_key ( key )
example# 339
key = self . make_key ( key , version = version )
example# 340
self . validate_key ( key )
example# 342
return { }
example# 344
key = self . make_key ( key , version = version )
example# 345
self . validate_key ( key )
example# 346
return False
example# 348
pass
example# 350
pass
example# 351
def clear ( self ) :pass
example# 352
pass
example# 353
class CacheClass ( DummyCache ) :pass
example# 354
pass
example# 355
import errno
example# 356
import glob
example# 357
import hashlib
example# 358
import io
example# 359
import os
example# 360
import random
example# 361
import tempfile
example# 362
import time
example# 363
import zlib
example# 364
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 365
from django . core . files . move import file_move_safe
example# 366
from django . utils . encoding import force_bytes
example# 367
try :pass
except: pass
example# 368
from django . utils . six . moves import cPickle as pickle
example# 369
try: pass
except ImportError :pass
example# 370
import pickle
example# 371
class FileBasedCache ( BaseCache ) :pass
example# 372
cache_suffix = '_STR:0_'
example# 373
def __init__ ( self , dir , params ) :pass
example# 374
super ( FileBasedCache , self ) . __init__ ( params )
example# 375
self . _dir = os . path . abspath ( dir )
example# 376
self . _createdir ( )
example# 378
if self . has_key ( key , version ) :pass
example# 379
return False
example# 380
self . set ( key , value , timeout , version )
example# 381
return True
example# 383
fname = self . _key_to_file ( key , version )
example# 384
if os . path . exists ( fname ) :pass
example# 385
try :pass
except: pass
example# 386
with io . open ( fname , '_STR:0_' ) as f :pass
example# 387
if not self . _is_expired ( f ) :pass
example# 388
return pickle . loads ( zlib . decompress ( f . read ( ) ) )
example# 389
try: pass
except IOError as e :pass
example# 390
if e . errno == errno . ENOENT :pass
example# 391
pass
example# 392
return default
example# 394
self . _createdir ( )
example# 395
fname = self . _key_to_file ( key , version )
example# 396
self . _cull ( )
example# 397
fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )
example# 398
renamed = False
example# 399
try :pass
except: pass
example# 400
with io . open ( fd , 'wb' ) as f :pass
example# 401
expiry = self . get_backend_timeout ( timeout )
example# 402
f . write ( pickle . dumps ( expiry , - 1 ) )
example# 403
f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )
example# 404
file_move_safe ( tmp_path , fname , allow_overwrite = True )
example# 405
renamed = True
example# 406
try: pass
finally :pass
example# 407
if not renamed :pass
example# 408
os . remove ( tmp_path )
example# 409
def delete ( self , key , version = None ) :pass
example# 410
self . _delete ( self . _key_to_file ( key , version ) )
example# 411
def _delete ( self , fname ) :pass
example# 412
if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :pass
example# 413
return
example# 414
try :pass
except: pass
example# 415
os . remove ( fname )
example# 416
try: pass
except OSError as e :pass
example# 417
if e . errno != errno . ENOENT :pass
example# 418
raise
example# 419
def has_key ( self , key , version = None ) :pass
example# 420
fname = self . _key_to_file ( key , version )
example# 421
if os . path . exists ( fname ) :pass
example# 422
with io . open ( fname , '_STR:0_' ) as f :pass
example# 423
return not self . _is_expired ( f )
example# 424
return False
example# 425
def _cull ( self ) :pass
example# 426
filelist = self . _list_cache_files ( )
example# 427
num_entries = len ( filelist )
example# 428
if num_entries < self . _max_entries :pass
example# 429
return
example# 430
if self . _cull_frequency == 0 :pass
example# 431
return self . clear ( )
example# 432
filelist = random . sample ( filelist ,  int ( num_entries / self . _cull_frequency ) )
example# 433
for fname in filelist :pass
example# 434
self . _delete ( fname )
example# 435
def _createdir ( self ) :pass
example# 436
if not os . path . exists ( self . _dir ) :pass
example# 437
try :pass
except: pass
example# 439
try: pass
except OSError as e :pass
example# 440
if e . errno != errno . EEXIST :pass
example# 441
raise EnvironmentError (  "Cache directory '%s' does not exist "  "and could not be created'" % self . _dir )
example# 442
def _key_to_file ( self , key , version = None ) :pass
example# 443
key = self . make_key ( key , version = version )
example# 444
self . validate_key ( key )
example# 446
def clear ( self ) :pass
example# 447
if not os . path . exists ( self . _dir ) :pass
example# 448
return
example# 449
for fname in self . _list_cache_files ( ) :pass
example# 450
self . _delete ( fname )
example# 451
def _is_expired ( self , f ) :pass
example# 452
exp = pickle . load ( f )
example# 453
if exp is not None and exp < time . time ( ) :pass
example# 454
f . close ( )
example# 455
self . _delete ( f . name )
example# 456
return True
example# 457
return False
example# 458
def _list_cache_files ( self ) :pass
example# 459
if not os . path . exists ( self . _dir ) :pass
example# 460
return [ ]
example# 462
return filelist
example# 463
class CacheClass ( FileBasedCache ) :pass
example# 464
pass
example# 465
import time
example# 466
try :pass
except: pass
example# 467
from django . utils . six . moves import cPickle as pickle
example# 468
try: pass
except ImportError :pass
example# 469
import pickle
example# 470
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 471
from django . utils . synch import RWLock
example# 472
_caches = { }
example# 473
_expire_info = { }
example# 474
_locks = { }
example# 475
class LocMemCache ( BaseCache ) :pass
example# 477
BaseCache . __init__ ( self , params )
example# 478
self . _cache = _caches . setdefault ( name , { } )
example# 479
self . _expire_info = _expire_info . setdefault ( name , { } )
example# 480
self . _lock = _locks . setdefault ( name , RWLock ( ) )
example# 482
key = self . make_key ( key , version = version )
example# 483
self . validate_key ( key )
example# 484
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
example# 485
with self . _lock . writer ( ) :pass
example# 486
if self . _has_expired ( key ) :pass
example# 487
self . _set ( key , pickled , timeout )
example# 488
return True
example# 489
return False
example# 491
key = self . make_key ( key , version = version )
example# 492
self . validate_key ( key )
example# 493
pickled = None
example# 494
with self . _lock . reader ( ) :pass
example# 495
if not self . _has_expired ( key ) :pass
example# 496
pickled = self . _cache [ key ]
example# 497
if pickled is not None :pass
example# 498
try :pass
except: pass
example# 499
return pickle . loads ( pickled )
example# 500
try: pass
except pickle . PickleError :pass
example# 501
return default
example# 502
with self . _lock . writer ( ) :pass
example# 503
try :pass
except: pass
example# 504
del self . _cache [ key ]
example# 505
del self . _expire_info [ key ]
example# 506
try: pass
except KeyError :pass
example# 507
pass
example# 508
return default
example# 510
if len ( self . _cache ) >= self . _max_entries :pass
example# 511
self . _cull ( )
example# 512
self . _cache [ key ] = value
example# 513
self . _expire_info [ key ] = self . get_backend_timeout ( timeout )
example# 515
key = self . make_key ( key , version = version )
example# 516
self . validate_key ( key )
example# 517
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
example# 518
with self . _lock . writer ( ) :pass
example# 519
self . _set ( key , pickled , timeout )
example# 521
value = self . get ( key , version = version )
example# 522
if value is None :pass
example# 523
raise ValueError ( '_STR:0_' % key )
example# 524
new_value = value + delta
example# 525
key = self . make_key ( key , version = version )
example# 526
pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )
example# 527
with self . _lock . writer ( ) :pass
example# 528
self . _cache [ key ] = pickled
example# 529
return new_value
example# 530
def has_key ( self , key , version = None ) :pass
example# 531
key = self . make_key ( key , version = version )
example# 532
self . validate_key ( key )
example# 533
with self . _lock . reader ( ) :pass
example# 534
if not self . _has_expired ( key ) :pass
example# 535
return True
example# 536
with self . _lock . writer ( ) :pass
example# 537
try :pass
except: pass
example# 538
del self . _cache [ key ]
example# 539
del self . _expire_info [ key ]
example# 540
try: pass
except KeyError :pass
example# 541
pass
example# 542
return False
example# 543
def _has_expired ( self , key ) :pass
example# 544
exp = self . _expire_info . get ( key , - 1 )
example# 545
if exp is None or exp > time . time ( ) :pass
example# 546
return False
example# 547
return True
example# 548
def _cull ( self ) :pass
example# 549
if self . _cull_frequency == 0 :pass
example# 550
self . clear ( )
example# 551
if True: pass
else :pass
example# 552
doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]
example# 553
for k in doomed :pass
example# 554
self . _delete ( k )
example# 555
def _delete ( self , key ) :pass
example# 556
try :pass
except: pass
example# 557
del self . _cache [ key ]
example# 558
try: pass
except KeyError :pass
example# 559
pass
example# 560
try :pass
except: pass
example# 561
del self . _expire_info [ key ]
example# 562
try: pass
except KeyError :pass
example# 563
pass
example# 564
def delete ( self , key , version = None ) :pass
example# 565
key = self . make_key ( key , version = version )
example# 566
self . validate_key ( key )
example# 567
with self . _lock . writer ( ) :pass
example# 568
self . _delete ( key )
example# 569
def clear ( self ) :pass
example# 570
self . _cache . clear ( )
example# 571
self . _expire_info . clear ( )
example# 572
class CacheClass ( LocMemCache ) :pass
example# 573
pass
example# 574
import time
example# 575
import pickle
example# 576
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 577
from django . utils import six
example# 578
from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning
example# 579
from django . utils . encoding import force_str
example# 580
from django . utils . functional import cached_property
example# 581
class BaseMemcachedCacheMethods ( RenameMethodsBase ) :pass
example# 583
class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :pass
example# 584
def __init__ ( self , server , params , library , value_not_found_exception ) :pass
example# 585
super ( BaseMemcachedCache , self ) . __init__ ( params )
example# 586
if isinstance ( server , six . string_types ) :pass
example# 587
self . _servers = server . split ( '_STR:0_' )
example# 588
if True: pass
else :pass
example# 589
self . _servers = server
example# 590
self . LibraryValueNotFoundException = value_not_found_exception
example# 591
self . _lib = library
example# 592
self . _options = params . get ( '_STR:0_' , None )
example# 593
@ property
def dummy(): pass
example# 594
def _cache ( self ) :pass
example# 595
if getattr ( self , '_STR:0_' , None ) is None :pass
example# 596
self . _client = self . _lib . Client ( self . _servers )
example# 597
return self . _client
example# 598
def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :pass
example# 599
if timeout == DEFAULT_TIMEOUT :pass
example# 600
timeout = self . default_timeout
example# 601
if timeout is None :pass
example# 602
return 0
example# 604
timeout = - 1
example# 605
if timeout > 2592000 :pass
example# 606
timeout += int ( time . time ( ) )
example# 607
return int ( timeout )
example# 608
def make_key ( self , key , version = None ) :pass
example# 609
return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )
example# 611
key = self . make_key ( key , version = version )
example# 612
return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )
example# 614
key = self . make_key ( key , version = version )
example# 615
val = self . _cache . get ( key )
example# 616
if val is None :pass
example# 617
return default
example# 618
return val
example# 620
key = self . make_key ( key , version = version )
example# 621
self . _cache . set ( key , value , self . get_backend_timeout ( timeout ) )
example# 622
def delete ( self , key , version = None ) :pass
example# 623
key = self . make_key ( key , version = version )
example# 624
self . _cache . delete ( key )
example# 625
def get_many ( self , keys , version = None ) :pass
example# 627
ret = self . _cache . get_multi ( new_keys )
example# 628
if ret :pass
example# 629
_ = { }
example# 630
m = dict ( zip ( new_keys , keys ) )
example# 631
for k , v in ret . items ( ) :pass
example# 632
_ [ m [ k ] ] = v
example# 633
ret = _
example# 634
return ret
example# 635
def close ( self , ** kwargs ) :pass
example# 636
self . _cache . disconnect_all ( )
example# 638
key = self . make_key ( key , version = version )
example# 640
return self . _cache . decr ( key , - delta )
example# 641
try :pass
except: pass
example# 642
val = self . _cache . incr ( key , delta )
example# 643
try: pass
except self . LibraryValueNotFoundException :pass
example# 644
val = None
example# 645
if val is None :pass
example# 646
raise ValueError ( '_STR:0_' % key )
example# 647
return val
example# 649
key = self . make_key ( key , version = version )
example# 650
if delta < 0 :pass
example# 651
return self . _cache . incr ( key , - delta )
example# 652
try :pass
except: pass
example# 653
val = self . _cache . decr ( key , delta )
example# 654
try: pass
except self . LibraryValueNotFoundException :pass
example# 655
val = None
example# 656
if val is None :pass
example# 657
raise ValueError ( '_STR:0_' % key )
example# 658
return val
example# 659
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 660
safe_data = { }
example# 661
for key , value in data . items ( ) :pass
example# 662
key = self . make_key ( key , version = version )
example# 663
safe_data [ key ] = value
example# 664
self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )
example# 665
def delete_many ( self , keys , version = None ) :pass
example# 666
l = lambda x : self . make_key ( x , version = version )
example# 667
self . _cache . delete_multi ( map ( l , keys ) )
example# 668
def clear ( self ) :pass
example# 669
self . _cache . flush_all ( )
example# 670
class MemcachedCache ( BaseMemcachedCache ) :pass
example# 671
def __init__ ( self , server , params ) :pass
example# 672
import memcache
example# 673
super ( MemcachedCache , self ) . __init__ ( server , params ,  library = memcache ,  value_not_found_exception = ValueError )
example# 674
@ property
def dummy(): pass
example# 675
def _cache ( self ) :pass
example# 676
if getattr ( self , '_STR:0_' , None ) is None :pass
example# 677
self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )
example# 678
return self . _client
example# 679
class PyLibMCCache ( BaseMemcachedCache ) :pass
example# 680
def __init__ ( self , server , params ) :pass
example# 681
import pylibmc
example# 682
super ( PyLibMCCache , self ) . __init__ ( server , params ,  library = pylibmc ,  value_not_found_exception = pylibmc . NotFound )
example# 683
@ cached_property
def dummy(): pass
example# 684
def _cache ( self ) :pass
example# 685
client = self . _lib . Client ( self . _servers )
example# 686
if self . _options :pass
example# 687
client . behaviors = self . _options
example# 688
return client
example# 689
from __future__ import unicode_literals
example# 690
import hashlib
example# 691
from django . utils . encoding import force_bytes
example# 692
from django . utils . http import urlquote
example# 693
TEMPLATE_FRAGMENT_KEY_TEMPLATE = '_STR:0_'
example# 694
def make_template_fragment_key ( fragment_name , vary_on = None ) :pass
example# 695
if vary_on is None :pass
example# 696
vary_on = ( )
example# 697
key = '_STR:0_' . join ( urlquote ( var ) for var in vary_on )
example# 699
return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )
example# 700
from __future__ import unicode_literals
example# 701
from . messages import ( CheckMessage ,  Debug , Info , Warning , Error , Critical ,  DEBUG , INFO , WARNING , ERROR , CRITICAL )
example# 702
from . registry import register , run_checks , tag_exists , Tags
example# 705
import django . core . checks . model_checks
example# 706
__all__ = [  '_STR:0_' ,  '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' , '_STR:5_' ,  'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' ,  'register' , 'run_checks' , 'tag_exists' , 'Tags' ,  ]
example# 707
from __future__ import unicode_literals
example# 708
from django . apps import apps
example# 709
from . . import Warning , register , Tags
example# 710
@ register ( Tags . compatibility )
def dummy(): pass
example# 712
errors = [ ]
example# 713
errors . extend ( _check_test_runner ( ** kwargs ) )
example# 714
errors . extend ( _check_boolean_field_default_value ( ** kwargs ) )
example# 715
return errors
example# 716
def _check_test_runner ( app_configs = None , ** kwargs ) :pass
example# 717
from django . conf import settings
example# 718
weight = 0
example# 719
if not settings . is_overridden ( '_STR:0_' ) :pass
example# 720
try :pass
except: pass
example# 721
settings . SITE_ID
example# 722
weight += 2
example# 723
try: pass
except AttributeError :pass
example# 724
pass
example# 725
try :pass
except: pass
example# 726
settings . BASE_DIR
example# 727
try: pass
except AttributeError :pass
example# 728
weight += 2
example# 729
if settings . is_overridden ( '_STR:0_' ) :pass
example# 730
weight += 2
example# 731
if settings . is_overridden ( '_STR:0_' ) :pass
example# 732
weight += 2
example# 733
if settings . is_overridden ( '_STR:0_' ) :pass
example# 734
weight += 1
example# 735
if '_STR:0_' not in set ( settings . MIDDLEWARE_CLASSES ) :pass
example# 736
weight += 1
example# 739
if True: pass
else :pass
example# 740
return [ ]
example# 741
def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) :pass
example# 742
from django . db import models
example# 743
problem_fields = [  field  for model in apps . get_models ( ** kwargs )  if app_configs is None or model . _meta . app_config in app_configs  for field in model . _meta . local_fields  if isinstance ( field , models . BooleanField ) and not field . has_default ( )  ]
example# 745
from __future__ import unicode_literals
example# 746
from . . import Warning , register , Tags
example# 747
@ register ( Tags . compatibility )
def dummy(): pass
example# 749
errors = [ ]
example# 750
errors . extend ( _check_middleware_classes ( ** kwargs ) )
example# 751
return errors
example# 752
def _check_middleware_classes ( app_configs = None , ** kwargs ) :pass
example# 753
from django . conf import settings
example# 754
if not settings . is_overridden ( '_STR:0_' ) :pass
example# 756
if True: pass
else :pass
example# 757
return [ ]
example# 758
from __future__ import unicode_literals
example# 760
DEBUG = 10
example# 761
INFO = 20
example# 762
WARNING = 30
example# 763
ERROR = 40
example# 764
CRITICAL = 50
example# 766
class CheckMessage ( object ) :pass
example# 767
def __init__ ( self , level , msg , hint = None , obj = None , id = None ) :pass
example# 768
assert isinstance ( level , int ) , '_STR:0_'
example# 769
self . level = level
example# 770
self . msg = msg
example# 771
self . hint = hint
example# 772
self . obj = obj
example# 773
self . id = id
example# 774
def __eq__ ( self , other ) :pass
example# 775
return all ( getattr ( self , attr ) == getattr ( other , attr )  for attr in [ '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' ] )
example# 776
def __ne__ ( self , other ) :pass
example# 777
return not ( self == other )
example# 778
def __str__ ( self ) :pass
example# 779
from django . db import models
example# 780
if self . obj is None :pass
example# 781
obj = '_STR:0_'
example# 782
if True: pass
elif isinstance ( self . obj , models . base . ModelBase ) :pass
example# 783
model = self . obj
example# 784
app = model . _meta . app_label
example# 785
obj = '%s.%s' % ( app , model . _meta . object_name )
example# 786
if True: pass
else :pass
example# 787
obj = force_str ( self . obj )
example# 788
id = "(%s) " % self . id if self . id else ""
example# 789
hint = '_STR:0_' % self . hint if self . hint else ''
example# 790
return '_STR:0_' % ( obj , id , self . msg , hint )
example# 791
def __repr__ ( self ) :pass
example# 792
return '_STR:0_' % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )
example# 793
def is_serious ( self ) :pass
example# 794
return self . level >= ERROR
example# 795
def is_silenced ( self ) :pass
example# 796
from django . conf import settings
example# 797
return self . id in settings . SILENCED_SYSTEM_CHECKS
example# 798
class Debug ( CheckMessage ) :pass
example# 799
def __init__ ( self , * args , ** kwargs ) :pass
example# 801
class Info ( CheckMessage ) :pass
example# 802
def __init__ ( self , * args , ** kwargs ) :pass
example# 804
class Warning ( CheckMessage ) :pass
example# 805
def __init__ ( self , * args , ** kwargs ) :pass
example# 807
class Error ( CheckMessage ) :pass
example# 808
def __init__ ( self , * args , ** kwargs ) :pass
example# 810
class Critical ( CheckMessage ) :pass
example# 811
def __init__ ( self , * args , ** kwargs ) :pass
example# 813
from __future__ import unicode_literals
example# 814
from itertools import chain
example# 815
import types
example# 816
from django . apps import apps
example# 817
from . import Error , Tags , register
example# 818
@ register ( Tags . models )
def dummy(): pass
example# 819
def check_all_models ( app_configs = None , ** kwargs ) :pass
example# 820
errors = [ model . check ( ** kwargs )  for model in apps . get_models ( )  if app_configs is None or model . _meta . app_config in app_configs ]
example# 821
return list ( chain ( * errors ) )
example# 822
@ register ( Tags . models , Tags . signals )
def dummy(): pass
example# 823
def check_model_signals ( app_configs = None , ** kwargs ) :pass
example# 824
from django . db import models
example# 825
errors = [ ]
example# 826
for name in dir ( models . signals ) :pass
example# 827
obj = getattr ( models . signals , name )
example# 828
if isinstance ( obj , models . signals . ModelSignal ) :pass
example# 829
for reference , receivers in obj . unresolved_references . items ( ) :pass
example# 830
for receiver , _ , _ in receivers :pass
example# 831
if isinstance ( receiver , types . FunctionType ) :pass
example# 832
description = '_STR:0_' % receiver . __name__
example# 833
if True: pass
else :pass
example# 834
description = '_STR:0_' % receiver . __class__ . __name__
example# 836
return errors
example# 837
from __future__ import unicode_literals
example# 838
from itertools import chain
example# 839
from django . utils . itercompat import is_iterable
example# 840
class Tags ( object ) :pass
example# 841
admin = '_STR:0_'
example# 842
compatibility = '_STR:0_'
example# 843
models = '_STR:0_'
example# 844
signals = '_STR:0_'
example# 845
class CheckRegistry ( object ) :pass
example# 846
def __init__ ( self ) :pass
example# 847
self . registered_checks = [ ]
example# 848
def register ( self , * tags ) :pass
example# 849
def inner ( check ) :pass
example# 850
check . tags = tags
example# 851
if check not in self . registered_checks :pass
example# 852
self . registered_checks . append ( check )
example# 853
return check
example# 854
return inner
example# 855
def run_checks ( self , app_configs = None , tags = None ) :pass
example# 856
errors = [ ]
example# 857
if tags is not None :pass
example# 858
checks = [ check for check in self . registered_checks  if hasattr ( check , '_STR:0_' ) and set ( check . tags ) & set ( tags ) ]
example# 859
if True: pass
else :pass
example# 860
checks = self . registered_checks
example# 861
for check in checks :pass
example# 862
new_errors = check ( app_configs = app_configs )
example# 863
assert is_iterable ( new_errors ) , (  "The function %r did not return a list. All functions registered "  "with the checks registry must return a list." % check )
example# 864
errors . extend ( new_errors )
example# 865
return errors
example# 866
def tag_exists ( self , tag ) :pass
example# 867
return tag in self . tags_available ( )
example# 868
def tags_available ( self ) :pass
example# 869
return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , '_STR:0_' ) ] ) )
example# 870
registry = CheckRegistry ( )
example# 871
register = registry . register
example# 872
run_checks = registry . run_checks
example# 873
tag_exists = registry . tag_exists
example# 874
from __future__ import unicode_literals
example# 875
from django . conf import settings
example# 876
from django . middleware . csrf import get_token
example# 877
from django . utils import six
example# 878
from django . utils . encoding import smart_text
example# 879
from django . utils . functional import lazy
example# 880
def csrf ( request ) :pass
example# 881
def _get_val ( ) :pass
example# 882
token = get_token ( request )
example# 883
if token is None :pass
example# 884
return '_STR:0_'
example# 885
if True: pass
else :pass
example# 886
return smart_text ( token )
example# 887
_get_val = lazy ( _get_val , six . text_type )
example# 889
def debug ( request ) :pass
example# 890
context_extras = { }
example# 891
if settings . DEBUG and request . META . get ( '_STR:0_' ) in settings . INTERNAL_IPS :pass
example# 892
context_extras [ '_STR:0_' ] = True
example# 893
from django . db import connection
example# 894
context_extras [ 'sql_queries' ] = connection . queries
example# 895
return context_extras
example# 896
def i18n ( request ) :pass
example# 897
from django . utils import translation
example# 898
context_extras = { }
example# 899
context_extras [ '_STR:0_' ] = settings . LANGUAGES
example# 900
context_extras [ '_STR:0_' ] = translation . get_language ( )
example# 901
context_extras [ '_STR:0_' ] = translation . get_language_bidi ( )
example# 902
return context_extras
example# 903
def tz ( request ) :pass
example# 904
from django . utils import timezone
example# 906
def static ( request ) :pass
example# 908
def media ( request ) :pass
example# 910
def request ( request ) :pass
example# 912
from functools import reduce
example# 913
import operator
example# 914
from django . utils import six
example# 915
from django . utils . encoding import force_text
example# 916
class DjangoRuntimeWarning ( RuntimeWarning ) :pass
example# 917
pass
example# 918
class AppRegistryNotReady ( Exception ) :pass
example# 919
pass
example# 920
class ObjectDoesNotExist ( Exception ) :pass
example# 921
silent_variable_failure = True
example# 922
class MultipleObjectsReturned ( Exception ) :pass
example# 923
pass
example# 924
class SuspiciousOperation ( Exception ) :pass
example# 925
class SuspiciousMultipartForm ( SuspiciousOperation ) :pass
example# 926
pass
example# 927
class SuspiciousFileOperation ( SuspiciousOperation ) :pass
example# 928
pass
example# 929
class DisallowedHost ( SuspiciousOperation ) :pass
example# 930
pass
example# 931
class DisallowedRedirect ( SuspiciousOperation ) :pass
example# 932
pass
example# 933
class PermissionDenied ( Exception ) :pass
example# 934
pass
example# 935
class ViewDoesNotExist ( Exception ) :pass
example# 936
pass
example# 937
class MiddlewareNotUsed ( Exception ) :pass
example# 938
pass
example# 939
class ImproperlyConfigured ( Exception ) :pass
example# 940
pass
example# 941
class FieldError ( Exception ) :pass
example# 942
pass
example# 943
NON_FIELD_ERRORS = '_STR:0_'
example# 944
class ValidationError ( Exception ) :pass
example# 946
super ( ValidationError , self ) . __init__ ( message , code , params )
example# 947
if isinstance ( message , ValidationError ) :pass
example# 948
if hasattr ( message , '_STR:0_' ) :pass
example# 949
message = message . error_dict
example# 951
message = message . error_list
example# 952
if True: pass
else :pass
example# 953
message , code , params = message . message , message . code , message . params
example# 954
if isinstance ( message , dict ) :pass
example# 955
self . error_dict = { }
example# 956
for field , messages in message . items ( ) :pass
example# 957
if not isinstance ( messages , ValidationError ) :pass
example# 958
messages = ValidationError ( messages )
example# 959
self . error_dict [ field ] = messages . error_list
example# 960
if True: pass
elif isinstance ( message , list ) :pass
example# 961
self . error_list = [ ]
example# 962
for message in message :pass
example# 963
if not isinstance ( message , ValidationError ) :pass
example# 964
message = ValidationError ( message )
example# 965
self . error_list . extend ( message . error_list )
example# 966
if True: pass
else :pass
example# 967
self . message = message
example# 968
self . code = code
example# 969
self . params = params
example# 970
self . error_list = [ self ]
example# 971
@ property
def dummy(): pass
example# 972
def message_dict ( self ) :pass
example# 973
getattr ( self , '_STR:0_' )
example# 974
return dict ( self )
example# 975
@ property
def dummy(): pass
example# 976
def messages ( self ) :pass
example# 977
if hasattr ( self , '_STR:0_' ) :pass
example# 978
return reduce ( operator . add , dict ( self ) . values ( ) )
example# 979
return list ( self )
example# 980
def update_error_dict ( self , error_dict ) :pass
example# 981
if hasattr ( self , '_STR:0_' ) :pass
example# 982
for field , error_list in self . error_dict . items ( ) :pass
example# 984
if True: pass
else :pass
example# 986
return error_dict
example# 987
def __iter__ ( self ) :pass
example# 988
if hasattr ( self , '_STR:0_' ) :pass
example# 989
for field , errors in self . error_dict . items ( ) :pass
example# 990
yield field , list ( ValidationError ( errors ) )
example# 991
if True: pass
else :pass
example# 992
for error in self . error_list :pass
example# 993
message = error . message
example# 994
if error . params :pass
example# 995
message %= error . params
example# 996
yield force_text ( message )
example# 997
def __str__ ( self ) :pass
example# 998
if hasattr ( self , '_STR:0_' ) :pass
example# 999
return repr ( dict ( self ) )
example# 1000
return repr ( list ( self ) )
example# 1001
def __repr__ ( self ) :pass
example# 1002
return '_STR:0_' % self
example# 1003
from django . core . files . base import File
example# 1004
__all__ = [ '_STR:0_' ]
example# 1005
from __future__ import unicode_literals
example# 1006
import os
example# 1007
from io import BytesIO , StringIO , UnsupportedOperation
example# 1008
from django . utils . encoding import smart_text
example# 1009
from django . core . files . utils import FileProxyMixin
example# 1010
from django . utils import six
example# 1013
class File ( FileProxyMixin ) :pass
example# 1015
def __init__ ( self , file , name = None ) :pass
example# 1016
self . file = file
example# 1017
if name is None :pass
example# 1018
name = getattr ( file , '_STR:0_' , None )
example# 1019
self . name = name
example# 1020
if hasattr ( file , '_STR:0_' ) :pass
example# 1021
self . mode = file . mode
example# 1022
def __str__ ( self ) :pass
example# 1023
return smart_text ( self . name or '' )
example# 1024
def __repr__ ( self ) :pass
example# 1025
return "<%s: %s>" % ( self . __class__ . __name__ , self or "None" )
example# 1026
def __bool__ ( self ) :pass
example# 1027
return bool ( self . name )
example# 1028
def __nonzero__ ( self ) :pass
example# 1029
return type ( self ) . __bool__ ( self )
example# 1030
def __len__ ( self ) :pass
example# 1031
return self . size
example# 1032
def _get_size_from_underlying_file ( self ) :pass
example# 1033
if hasattr ( self . file , '_STR:0_' ) :pass
example# 1034
return self . file . size
example# 1035
if hasattr ( self . file , '_STR:0_' ) :pass
example# 1036
try :pass
except: pass
example# 1037
return os . path . getsize ( self . file . name )
example# 1038
try: pass
except ( OSError , TypeError ) :pass
example# 1039
pass
example# 1040
if hasattr ( self . file , '_STR:0_' ) and hasattr ( self . file , '_STR:1_' ) :pass
example# 1041
pos = self . file . tell ( )
example# 1042
self . file . seek ( 0 , os . SEEK_END )
example# 1043
size = self . file . tell ( )
example# 1044
self . file . seek ( pos )
example# 1045
return size
example# 1046
raise AttributeError ( '_STR:0_' )
example# 1047
def _get_size ( self ) :pass
example# 1048
if hasattr ( self , '_STR:0_' ) :pass
example# 1049
return self . _size
example# 1050
self . _size = self . _get_size_from_underlying_file ( )
example# 1051
return self . _size
example# 1052
def _set_size ( self , size ) :pass
example# 1053
self . _size = size
example# 1054
size = property ( _get_size , _set_size )
example# 1055
def _get_closed ( self ) :pass
example# 1056
return not self . file or self . file . closed
example# 1057
closed = property ( _get_closed )
example# 1058
def chunks ( self , chunk_size = None ) :pass
example# 1059
if not chunk_size :pass
example# 1060
chunk_size = self . DEFAULT_CHUNK_SIZE
example# 1061
try :pass
except: pass
example# 1062
self . seek ( 0 )
example# 1063
try: pass
except ( AttributeError , UnsupportedOperation ) :pass
example# 1064
pass
example# 1065
while True :pass
example# 1066
data = self . read ( chunk_size )
example# 1067
if not data :pass
example# 1068
break
example# 1069
yield data
example# 1070
def multiple_chunks ( self , chunk_size = None ) :pass
example# 1071
if not chunk_size :pass
example# 1072
chunk_size = self . DEFAULT_CHUNK_SIZE
example# 1073
return self . size > chunk_size
example# 1074
def __iter__ ( self ) :pass
example# 1075
buffer_ = None
example# 1076
for chunk in self . chunks ( ) :pass
example# 1077
chunk_buffer = BytesIO ( chunk )
example# 1078
for line in chunk_buffer :pass
example# 1079
if buffer_ :pass
example# 1080
line = buffer_ + line
example# 1081
buffer_ = None
example# 1082
if line [ - 1 : ] in ( b'\n' , b'\r' ) :pass
example# 1083
yield line
example# 1084
if True: pass
else :pass
example# 1085
buffer_ = line
example# 1086
if buffer_ is not None :pass
example# 1087
yield buffer_
example# 1088
def __enter__ ( self ) :pass
example# 1089
return self
example# 1090
def __exit__ ( self , exc_type , exc_value , tb ) :pass
example# 1091
self . close ( )
example# 1092
def open ( self , mode = None ) :pass
example# 1093
if not self . closed :pass
example# 1094
self . seek ( 0 )
example# 1095
if True: pass
elif self . name and os . path . exists ( self . name ) :pass
example# 1096
self . file = open ( self . name , mode or self . mode )
example# 1097
if True: pass
else :pass
example# 1098
raise ValueError ( '_STR:0_' )
example# 1099
def close ( self ) :pass
example# 1100
self . file . close ( )
example# 1102
class ContentFile ( File ) :pass
example# 1103
def __init__ ( self , content , name = None ) :pass
example# 1105
stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO
example# 1106
if True: pass
else :pass
example# 1107
stream_class = BytesIO
example# 1108
content = force_bytes ( content )
example# 1109
super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )
example# 1110
self . size = len ( content )
example# 1111
def __str__ ( self ) :pass
example# 1112
return '_STR:0_'
example# 1113
def __bool__ ( self ) :pass
example# 1114
return True
example# 1115
def __nonzero__ ( self ) :pass
example# 1116
return type ( self ) . __bool__ ( self )
example# 1117
def open ( self , mode = None ) :pass
example# 1118
self . seek ( 0 )
example# 1119
def close ( self ) :pass
example# 1120
pass
example# 1121
import zlib
example# 1122
from django . core . files import File
example# 1123
class ImageFile ( File ) :pass
example# 1124
def _get_width ( self ) :pass
example# 1125
return self . _get_image_dimensions ( ) [ 0 ]
example# 1126
width = property ( _get_width )
example# 1127
def _get_height ( self ) :pass
example# 1128
return self . _get_image_dimensions ( ) [ 1 ]
example# 1129
height = property ( _get_height )
example# 1130
def _get_image_dimensions ( self ) :pass
example# 1131
if not hasattr ( self , '_STR:0_' ) :pass
example# 1132
close = self . closed
example# 1133
self . open ( )
example# 1134
self . _dimensions_cache = get_image_dimensions ( self , close = close )
example# 1135
return self . _dimensions_cache
example# 1136
def get_image_dimensions ( file_or_path , close = False ) :pass
example# 1137
from PIL import ImageFile as PillowImageFile
example# 1138
p = PillowImageFile . Parser ( )
example# 1139
if hasattr ( file_or_path , '_STR:0_' ) :pass
example# 1140
file = file_or_path
example# 1141
file_pos = file . tell ( )
example# 1142
file . seek ( 0 )
example# 1143
if True: pass
else :pass
example# 1144
file = open ( file_or_path , 'rb' )
example# 1145
close = True
example# 1146
try :pass
except: pass
example# 1147
chunk_size = 1024
example# 1148
while 1 :pass
example# 1149
data = file . read ( chunk_size )
example# 1150
if not data :pass
example# 1151
break
example# 1152
try :pass
except: pass
example# 1153
p . feed ( data )
example# 1154
try: pass
except zlib . error as e :pass
example# 1155
if e . args [ 0 ] . startswith ( '_STR:0_' ) :pass
example# 1156
pass
example# 1157
if True: pass
else :pass
example# 1158
raise
example# 1159
if p . image :pass
example# 1160
return p . image . size
example# 1161
chunk_size *= 2
example# 1162
return None
example# 1163
try: pass
finally :pass
example# 1164
if close :pass
example# 1165
file . close ( )
example# 1166
if True: pass
else :pass
example# 1167
file . seek ( file_pos )
example# 1168
import os
example# 1169
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' )
example# 1170
def _fd ( f ) :pass
example# 1171
return f . fileno ( ) if hasattr ( f , '_STR:0_' ) else f
example# 1172
if os . name == '_STR:0_' :pass
example# 1173
import msvcrt
example# 1174
from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 ,  Structure , Union , POINTER , windll , byref )
example# 1175
from ctypes . wintypes import BOOL , DWORD , HANDLE
example# 1176
LOCK_SH = 0
example# 1177
LOCK_NB = 0x1
example# 1178
LOCK_EX = 0x2
example# 1179
if sizeof ( c_ulong ) != sizeof ( c_void_p ) :pass
example# 1180
ULONG_PTR = c_int64
example# 1181
if True: pass
else :pass
example# 1182
ULONG_PTR = c_ulong
example# 1183
PVOID = c_void_p
example# 1184
class _OFFSET ( Structure ) :pass
example# 1186
class _OFFSET_UNION ( Union ) :pass
example# 1187
_anonymous_ = [ '_STR:0_' ]
example# 1189
class OVERLAPPED ( Structure ) :pass
example# 1190
_anonymous_ = [ '_STR:0_' ]
example# 1192
LPOVERLAPPED = POINTER ( OVERLAPPED )
example# 1193
LockFileEx = windll . kernel32 . LockFileEx
example# 1194
LockFileEx . restype = BOOL
example# 1196
UnlockFileEx = windll . kernel32 . UnlockFileEx
example# 1197
UnlockFileEx . restype = BOOL
example# 1199
def lock ( f , flags ) :pass
example# 1200
hfile = msvcrt . get_osfhandle ( _fd ( f ) )
example# 1201
overlapped = OVERLAPPED ( )
example# 1203
return bool ( ret )
example# 1204
def unlock ( f ) :pass
example# 1205
hfile = msvcrt . get_osfhandle ( _fd ( f ) )
example# 1206
overlapped = OVERLAPPED ( )
example# 1208
return bool ( ret )
example# 1209
if True: pass
else :pass
example# 1210
try :pass
except: pass
example# 1211
import fcntl
example# 1212
LOCK_SH = fcntl . LOCK_SH
example# 1213
LOCK_NB = fcntl . LOCK_NB
example# 1214
LOCK_EX = fcntl . LOCK_EX
example# 1215
try: pass
except ( ImportError , AttributeError ) :pass
example# 1216
LOCK_EX = LOCK_SH = LOCK_NB = 0
example# 1217
def lock ( f , flags ) :pass
example# 1218
return False
example# 1219
def unlock ( f ) :pass
example# 1220
return True
example# 1221
if True: pass
else :pass
example# 1222
def lock ( f , flags ) :pass
example# 1223
ret = fcntl . flock ( _fd ( f ) , flags )
example# 1225
def unlock ( f ) :pass
example# 1226
ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )
example# 1228
import os
example# 1229
from django . core . files import locks
example# 1230
try :pass
except: pass
example# 1231
from shutil import copystat
example# 1232
try: pass
except ImportError :pass
example# 1233
import stat
example# 1234
def copystat ( src , dst ) :pass
example# 1235
st = os . stat ( src )
example# 1236
mode = stat . S_IMODE ( st . st_mode )
example# 1237
if hasattr ( os , '_STR:0_' ) :pass
example# 1239
if hasattr ( os , '_STR:0_' ) :pass
example# 1240
os . chmod ( dst , mode )
example# 1241
__all__ = [ '_STR:0_' ]
example# 1242
def _samefile ( src , dst ) :pass
example# 1243
if hasattr ( os . path , '_STR:0_' ) :pass
example# 1244
try :pass
except: pass
example# 1245
return os . path . samefile ( src , dst )
example# 1246
try: pass
except OSError :pass
example# 1247
return False
example# 1248
return ( os . path . normcase ( os . path . abspath ( src ) ) ==  os . path . normcase ( os . path . abspath ( dst ) ) )
example# 1250
if _samefile ( old_file_name , new_file_name ) :pass
example# 1251
return
example# 1252
try :pass
except: pass
example# 1253
if not allow_overwrite and os . access ( new_file_name , os . F_OK ) :pass
example# 1254
raise IOError ( '_STR:0_' % new_file_name )
example# 1255
os . rename ( old_file_name , new_file_name )
example# 1256
return
example# 1257
try: pass
except OSError :pass
example# 1258
pass
example# 1259
with open ( old_file_name , 'rb' ) as old_file :pass
example# 1261
try :pass
except: pass
example# 1262
locks . lock ( fd , locks . LOCK_EX )
example# 1263
current_chunk = None
example# 1264
while current_chunk != b'' :pass
example# 1265
current_chunk = old_file . read ( chunk_size )
example# 1266
os . write ( fd , current_chunk )
example# 1267
try: pass
finally :pass
example# 1268
locks . unlock ( fd )
example# 1269
os . close ( fd )
example# 1270
copystat ( old_file_name , new_file_name )
example# 1271
try :pass
except: pass
example# 1272
os . remove ( old_file_name )
example# 1273
try: pass
except OSError as e :pass
example# 1274
if getattr ( e , '_STR:0_' , 0 ) != 32 and getattr ( e , '_STR:1_' , 0 ) != 13 :pass
example# 1275
raise
example# 1276
import os
example# 1277
import errno
example# 1278
import itertools
example# 1279
from datetime import datetime
example# 1280
from django . conf import settings
example# 1281
from django . core . exceptions import SuspiciousFileOperation
example# 1282
from django . core . files import locks , File
example# 1283
from django . core . files . move import file_move_safe
example# 1284
from django . utils . encoding import force_text , filepath_to_uri
example# 1285
from django . utils . functional import LazyObject
example# 1286
from django . utils . module_loading import import_string
example# 1287
from django . utils . six . moves . urllib . parse import urljoin
example# 1288
from django . utils . text import get_valid_filename
example# 1289
from django . utils . _os import safe_join , abspathu
example# 1290
from django . utils . deconstruct import deconstructible
example# 1291
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' )
example# 1292
class Storage ( object ) :pass
example# 1293
def open ( self , name , mode = '_STR:0_' ) :pass
example# 1294
return self . _open ( name , mode )
example# 1295
def save ( self , name , content ) :pass
example# 1296
if name is None :pass
example# 1297
name = content . name
example# 1298
if not hasattr ( content , '_STR:0_' ) :pass
example# 1299
content = File ( content )
example# 1300
name = self . get_available_name ( name )
example# 1301
name = self . _save ( name , content )
example# 1302
return force_text ( name . replace ( '\\' , '/' ) )
example# 1303
def get_valid_name ( self , name ) :pass
example# 1304
return get_valid_filename ( name )
example# 1305
def get_available_name ( self , name ) :pass
example# 1306
dir_name , file_name = os . path . split ( name )
example# 1307
file_root , file_ext = os . path . splitext ( file_name )
example# 1309
while self . exists ( name ) :pass
example# 1310
name = os . path . join ( dir_name , '_STR:0_' % ( file_root , next ( count ) , file_ext ) )
example# 1311
return name
example# 1312
def path ( self , name ) :pass
example# 1313
raise NotImplementedError ( '_STR:0_' )
example# 1314
def delete ( self , name ) :pass
example# 1315
raise NotImplementedError ( '_STR:0_' )
example# 1316
def exists ( self , name ) :pass
example# 1317
raise NotImplementedError ( '_STR:0_' )
example# 1318
def listdir ( self , path ) :pass
example# 1319
raise NotImplementedError ( '_STR:0_' )
example# 1320
def size ( self , name ) :pass
example# 1321
raise NotImplementedError ( '_STR:0_' )
example# 1322
def url ( self , name ) :pass
example# 1323
raise NotImplementedError ( '_STR:0_' )
example# 1324
def accessed_time ( self , name ) :pass
example# 1325
raise NotImplementedError ( '_STR:0_' )
example# 1326
def created_time ( self , name ) :pass
example# 1327
raise NotImplementedError ( '_STR:0_' )
example# 1328
def modified_time ( self , name ) :pass
example# 1329
raise NotImplementedError ( '_STR:0_' )
example# 1330
@ deconstructible
def dummy(): pass
example# 1331
class FileSystemStorage ( Storage ) :pass
example# 1333
if location is None :pass
example# 1334
location = settings . MEDIA_ROOT
example# 1335
self . base_location = location
example# 1336
self . location = abspathu ( self . base_location )
example# 1337
if base_url is None :pass
example# 1338
base_url = settings . MEDIA_URL
example# 1339
if True: pass
elif not base_url . endswith ( '_STR:0_' ) :pass
example# 1340
base_url += '_STR:0_'
example# 1341
self . base_url = base_url
example# 1342
self . file_permissions_mode = (  file_permissions_mode if file_permissions_mode is not None  else settings . FILE_UPLOAD_PERMISSIONS  )
example# 1343
self . directory_permissions_mode = (  directory_permissions_mode if directory_permissions_mode is not None  else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS  )
example# 1344
def _open ( self , name , mode = '_STR:0_' ) :pass
example# 1345
return File ( open ( self . path ( name ) , mode ) )
example# 1346
def _save ( self , name , content ) :pass
example# 1347
full_path = self . path ( name )
example# 1348
directory = os . path . dirname ( full_path )
example# 1349
if not os . path . exists ( directory ) :pass
example# 1350
try :pass
except: pass
example# 1351
if self . directory_permissions_mode is not None :pass
example# 1353
try :pass
except: pass
example# 1354
os . makedirs ( directory , self . directory_permissions_mode )
example# 1355
try: pass
finally :pass
example# 1356
os . umask ( old_umask )
example# 1357
if True: pass
else :pass
example# 1358
os . makedirs ( directory )
example# 1359
try: pass
except OSError as e :pass
example# 1360
if e . errno != errno . EEXIST :pass
example# 1361
raise
example# 1362
if not os . path . isdir ( directory ) :pass
example# 1363
raise IOError ( '_STR:0_' % directory )
example# 1364
while True :pass
example# 1365
try :pass
except: pass
example# 1366
if hasattr ( content , '_STR:0_' ) :pass
example# 1367
file_move_safe ( content . temporary_file_path ( ) , full_path )
example# 1368
if True: pass
else :pass
example# 1371
_file = None
example# 1372
try :pass
except: pass
example# 1373
locks . lock ( fd , locks . LOCK_EX )
example# 1374
for chunk in content . chunks ( ) :pass
example# 1375
if _file is None :pass
example# 1376
mode = '_STR:0_' if isinstance ( chunk , bytes ) else '_STR:1_'
example# 1377
_file = os . fdopen ( fd , mode )
example# 1378
_file . write ( chunk )
example# 1379
try: pass
finally :pass
example# 1380
locks . unlock ( fd )
example# 1381
if _file is not None :pass
example# 1382
_file . close ( )
example# 1383
if True: pass
else :pass
example# 1384
os . close ( fd )
example# 1385
try: pass
except OSError as e :pass
example# 1386
if e . errno == errno . EEXIST :pass
example# 1387
name = self . get_available_name ( name )
example# 1388
full_path = self . path ( name )
example# 1389
if True: pass
else :pass
example# 1390
raise
example# 1391
if True: pass
else :pass
example# 1392
break
example# 1393
if self . file_permissions_mode is not None :pass
example# 1394
os . chmod ( full_path , self . file_permissions_mode )
example# 1395
return name
example# 1396
def delete ( self , name ) :pass
example# 1397
assert name , '_STR:0_'
example# 1398
name = self . path ( name )
example# 1399
if os . path . exists ( name ) :pass
example# 1400
try :pass
except: pass
example# 1401
os . remove ( name )
example# 1402
try: pass
except OSError as e :pass
example# 1403
if e . errno != errno . ENOENT :pass
example# 1404
raise
example# 1405
def exists ( self , name ) :pass
example# 1406
return os . path . exists ( self . path ( name ) )
example# 1407
def listdir ( self , path ) :pass
example# 1408
path = self . path ( path )
example# 1409
directories , files = [ ] , [ ]
example# 1410
for entry in os . listdir ( path ) :pass
example# 1411
if os . path . isdir ( os . path . join ( path , entry ) ) :pass
example# 1412
directories . append ( entry )
example# 1413
if True: pass
else :pass
example# 1414
files . append ( entry )
example# 1415
return directories , files
example# 1416
def path ( self , name ) :pass
example# 1417
try :pass
except: pass
example# 1418
path = safe_join ( self . location , name )
example# 1419
try: pass
except ValueError :pass
example# 1420
raise SuspiciousFileOperation ( '_STR:0_' % name )
example# 1421
return os . path . normpath ( path )
example# 1422
def size ( self , name ) :pass
example# 1423
return os . path . getsize ( self . path ( name ) )
example# 1424
def url ( self , name ) :pass
example# 1425
if self . base_url is None :pass
example# 1426
raise ValueError ( '_STR:0_' )
example# 1427
return urljoin ( self . base_url , filepath_to_uri ( name ) )
example# 1428
def accessed_time ( self , name ) :pass
example# 1429
return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) )
example# 1430
def created_time ( self , name ) :pass
example# 1431
return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
example# 1432
def modified_time ( self , name ) :pass
example# 1433
return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
example# 1434
def get_storage_class ( import_path = None ) :pass
example# 1435
return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
example# 1436
class DefaultStorage ( LazyObject ) :pass
example# 1437
def _setup ( self ) :pass
example# 1438
self . _wrapped = get_storage_class ( ) ( )
example# 1439
default_storage = DefaultStorage ( )
example# 1440
import os
example# 1441
import tempfile
example# 1442
from django . core . files . utils import FileProxyMixin
example# 1443
__all__ = ( '_STR:0_' , '_STR:1_' , )
example# 1444
if os . name == '_STR:0_' :pass
example# 1445
class TemporaryFile ( FileProxyMixin ) :pass
example# 1446
def __init__ ( self , mode = '_STR:0_' , bufsize = - 1 , suffix = '' , prefix = '' ,  dir = None ) :pass
example# 1447
fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )
example# 1448
self . name = name
example# 1449
self . file = os . fdopen ( fd , mode , bufsize )
example# 1450
self . close_called = False
example# 1451
unlink = os . unlink
example# 1452
def close ( self ) :pass
example# 1453
if not self . close_called :pass
example# 1454
self . close_called = True
example# 1455
try :pass
except: pass
example# 1456
self . file . close ( )
example# 1457
try: pass
except ( OSError , IOError ) :pass
example# 1458
pass
example# 1459
try :pass
except: pass
example# 1460
self . unlink ( self . name )
example# 1461
try: pass
except ( OSError ) :pass
example# 1462
pass
example# 1463
@ property
def dummy(): pass
example# 1464
def closed ( self ) :pass
example# 1465
return self . file . closed
example# 1466
def __del__ ( self ) :pass
example# 1467
self . close ( )
example# 1468
def __enter__ ( self ) :pass
example# 1469
self . file . __enter__ ( )
example# 1470
return self
example# 1471
def __exit__ ( self , exc , value , tb ) :pass
example# 1472
self . file . __exit__ ( exc , value , tb )
example# 1473
NamedTemporaryFile = TemporaryFile
example# 1474
if True: pass
else :pass
example# 1475
NamedTemporaryFile = tempfile . NamedTemporaryFile
example# 1476
gettempdir = tempfile . gettempdir
example# 1477
import errno
example# 1478
import os
example# 1479
from io import BytesIO
example# 1480
from django . conf import settings
example# 1481
from django . core . files . base import File
example# 1482
from django . core . files import temp as tempfile
example# 1483
from django . utils . encoding import force_str
example# 1484
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' ,  '_STR:3_' )
example# 1485
class UploadedFile ( File ) :pass
example# 1488
super ( UploadedFile , self ) . __init__ ( file , name )
example# 1489
self . size = size
example# 1490
self . content_type = content_type
example# 1491
self . charset = charset
example# 1492
self . content_type_extra = content_type_extra
example# 1493
def __repr__ ( self ) :pass
example# 1494
return force_str ( '_STR:0_' % (  self . __class__ . __name__ , self . name , self . content_type ) )
example# 1495
def _get_name ( self ) :pass
example# 1496
return self . _name
example# 1497
def _set_name ( self , name ) :pass
example# 1498
if name is not None :pass
example# 1499
name = os . path . basename ( name )
example# 1500
if len ( name ) > 255 :pass
example# 1501
name , ext = os . path . splitext ( name )
example# 1502
ext = ext [ : 255 ]
example# 1503
name = name [ : 255 - len ( ext ) ] + ext
example# 1504
self . _name = name
example# 1505
name = property ( _get_name , _set_name )
example# 1506
class TemporaryUploadedFile ( UploadedFile ) :pass
example# 1508
if settings . FILE_UPLOAD_TEMP_DIR :pass
example# 1509
file = tempfile . NamedTemporaryFile ( suffix = '_STR:0_' ,  dir = settings . FILE_UPLOAD_TEMP_DIR )
example# 1510
if True: pass
else :pass
example# 1511
file = tempfile . NamedTemporaryFile ( suffix = '_STR:0_' )
example# 1512
super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
example# 1513
def temporary_file_path ( self ) :pass
example# 1514
return self . file . name
example# 1515
def close ( self ) :pass
example# 1516
try :pass
except: pass
example# 1517
return self . file . close ( )
example# 1518
try: pass
except OSError as e :pass
example# 1519
if e . errno != errno . ENOENT :pass
example# 1520
raise
example# 1521
class InMemoryUploadedFile ( UploadedFile ) :pass
example# 1524
self . field_name = field_name
example# 1525
def open ( self , mode = None ) :pass
example# 1526
self . file . seek ( 0 )
example# 1527
def chunks ( self , chunk_size = None ) :pass
example# 1528
self . file . seek ( 0 )
example# 1529
yield self . read ( )
example# 1530
def multiple_chunks ( self , chunk_size = None ) :pass
example# 1531
return False
example# 1532
class SimpleUploadedFile ( InMemoryUploadedFile ) :pass
example# 1534
content = content or b''
example# 1536
@ classmethod
def dummy(): pass
example# 1537
def from_dict ( cls , file_dict ) :pass
example# 1539
from __future__ import unicode_literals
example# 1540
from io import BytesIO
example# 1541
from django . conf import settings
example# 1542
from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
example# 1544
from django . utils . module_loading import import_string
example# 1545
__all__ = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , '_STR:5_' , '_STR:6_' ,  '_STR:7_'  ]
example# 1546
class UploadFileException ( Exception ) :pass
example# 1547
pass
example# 1549
class StopUpload ( UploadFileException ) :pass
example# 1550
def __init__ ( self , connection_reset = False ) :pass
example# 1551
self . connection_reset = connection_reset
example# 1552
def __str__ ( self ) :pass
example# 1553
if self . connection_reset :pass
example# 1554
return '_STR:0_'
example# 1555
if True: pass
else :pass
example# 1556
return '_STR:0_'
example# 1557
class SkipFile ( UploadFileException ) :pass
example# 1558
pass
example# 1559
class StopFutureHandlers ( UploadFileException ) :pass
example# 1560
pass
example# 1561
class FileUploadHandler ( object ) :pass
example# 1563
def __init__ ( self , request = None ) :pass
example# 1564
self . file_name = None
example# 1565
self . content_type = None
example# 1566
self . content_length = None
example# 1567
self . charset = None
example# 1568
self . content_type_extra = None
example# 1569
self . request = request
example# 1570
def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :pass
example# 1571
pass
example# 1572
def new_file ( self , field_name , file_name , content_type , content_length , charset = None , content_type_extra = None ) :pass
example# 1573
self . field_name = field_name
example# 1574
self . file_name = file_name
example# 1575
self . content_type = content_type
example# 1576
self . content_length = content_length
example# 1577
self . charset = charset
example# 1578
self . content_type_extra = content_type_extra
example# 1579
def receive_data_chunk ( self , raw_data , start ) :pass
example# 1580
raise NotImplementedError ( '_STR:0_' )
example# 1581
def file_complete ( self , file_size ) :pass
example# 1582
raise NotImplementedError ( '_STR:0_' )
example# 1583
def upload_complete ( self ) :pass
example# 1584
pass
example# 1585
class TemporaryFileUploadHandler ( FileUploadHandler ) :pass
example# 1586
def __init__ ( self , * args , ** kwargs ) :pass
example# 1587
super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )
example# 1588
def new_file ( self , file_name , * args , ** kwargs ) :pass
example# 1589
super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )
example# 1591
def receive_data_chunk ( self , raw_data , start ) :pass
example# 1592
self . file . write ( raw_data )
example# 1593
def file_complete ( self , file_size ) :pass
example# 1594
self . file . seek ( 0 )
example# 1595
self . file . size = file_size
example# 1596
return self . file
example# 1597
class MemoryFileUploadHandler ( FileUploadHandler ) :pass
example# 1598
def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :pass
example# 1599
if content_length > settings . FILE_UPLOAD_MAX_MEMORY_SIZE :pass
example# 1600
self . activated = False
example# 1601
if True: pass
else :pass
example# 1602
self . activated = True
example# 1603
def new_file ( self , * args , ** kwargs ) :pass
example# 1604
super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )
example# 1605
if self . activated :pass
example# 1606
self . file = BytesIO ( )
example# 1607
raise StopFutureHandlers ( )
example# 1608
def receive_data_chunk ( self , raw_data , start ) :pass
example# 1609
if self . activated :pass
example# 1610
self . file . write ( raw_data )
example# 1611
if True: pass
else :pass
example# 1612
return raw_data
example# 1613
def file_complete ( self , file_size ) :pass
example# 1614
if not self . activated :pass
example# 1615
return
example# 1616
self . file . seek ( 0 )
example# 1617
return InMemoryUploadedFile (  file = self . file ,  field_name = self . field_name ,  name = self . file_name ,  content_type = self . content_type ,  size = file_size ,  charset = self . charset ,  content_type_extra = self . content_type_extra  )
example# 1618
def load_handler ( path , * args , ** kwargs ) :pass
example# 1619
return import_string ( path ) ( * args , ** kwargs )
example# 1620
class FileProxyMixin ( object ) :pass
example# 1621
encoding = property ( lambda self : self . file . encoding )
example# 1622
fileno = property ( lambda self : self . file . fileno )
example# 1623
flush = property ( lambda self : self . file . flush )
example# 1624
isatty = property ( lambda self : self . file . isatty )
example# 1625
newlines = property ( lambda self : self . file . newlines )
example# 1626
read = property ( lambda self : self . file . read )
example# 1627
readinto = property ( lambda self : self . file . readinto )
example# 1628
readline = property ( lambda self : self . file . readline )
example# 1629
readlines = property ( lambda self : self . file . readlines )
example# 1630
seek = property ( lambda self : self . file . seek )
example# 1631
softspace = property ( lambda self : self . file . softspace )
example# 1632
tell = property ( lambda self : self . file . tell )
example# 1633
truncate = property ( lambda self : self . file . truncate )
example# 1634
write = property ( lambda self : self . file . write )
example# 1635
writelines = property ( lambda self : self . file . writelines )
example# 1636
xreadlines = property ( lambda self : self . file . xreadlines )
example# 1637
def __iter__ ( self ) :pass
example# 1638
return iter ( self . file )
example# 1639
from __future__ import unicode_literals
example# 1640
import logging
example# 1641
import sys
example# 1642
import types
example# 1643
from django import http
example# 1644
from django . conf import settings
example# 1645
from django . core import urlresolvers
example# 1646
from django . core import signals
example# 1647
from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation
example# 1648
from django . db import connections , transaction
example# 1649
from django . utils . encoding import force_text
example# 1650
from django . utils . module_loading import import_string
example# 1651
from django . utils import six
example# 1652
from django . views import debug
example# 1653
logger = logging . getLogger ( '_STR:0_' )
example# 1654
class BaseHandler ( object ) :pass
example# 1655
response_fixes = [  http . fix_location_header ,  http . conditional_content_removal ,  ]
example# 1656
def __init__ ( self ) :pass
example# 1657
self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None
example# 1658
def load_middleware ( self ) :pass
example# 1659
self . _view_middleware = [ ]
example# 1660
self . _template_response_middleware = [ ]
example# 1661
self . _response_middleware = [ ]
example# 1662
self . _exception_middleware = [ ]
example# 1663
request_middleware = [ ]
example# 1664
for middleware_path in settings . MIDDLEWARE_CLASSES :pass
example# 1665
mw_class = import_string ( middleware_path )
example# 1666
try :pass
except: pass
example# 1667
mw_instance = mw_class ( )
example# 1668
try: pass
except MiddlewareNotUsed :pass
example# 1669
continue
example# 1670
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1671
request_middleware . append ( mw_instance . process_request )
example# 1672
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1673
self . _view_middleware . append ( mw_instance . process_view )
example# 1674
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1675
self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
example# 1676
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1677
self . _response_middleware . insert ( 0 , mw_instance . process_response )
example# 1678
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1679
self . _exception_middleware . insert ( 0 , mw_instance . process_exception )
example# 1680
self . _request_middleware = request_middleware
example# 1681
def make_view_atomic ( self , view ) :pass
example# 1682
non_atomic_requests = getattr ( view , '_STR:0_' , set ( ) )
example# 1683
for db in connections . all ( ) :pass
example# 1684
if ( db . settings_dict [ 'ATOMIC_REQUESTS' ]  and db . alias not in non_atomic_requests ) :pass
example# 1685
view = transaction . atomic ( using = db . alias ) ( view )
example# 1686
return view
example# 1687
def get_exception_response ( self , request , resolver , status_code ) :pass
example# 1688
try :pass
except: pass
example# 1689
callback , param_dict = resolver . resolve_error_handler ( status_code )
example# 1690
response = callback ( request , ** param_dict )
example# 1691
try: pass
except :pass
example# 1692
signals . got_request_exception . send ( sender = self . __class__ , request = request )
example# 1693
response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
example# 1694
return response
example# 1695
def get_response ( self , request ) :pass
example# 1696
urlconf = settings . ROOT_URLCONF
example# 1697
urlresolvers . set_urlconf ( urlconf )
example# 1698
resolver = urlresolvers . RegexURLResolver ( r'_STR:0_' , urlconf )
example# 1699
try :pass
except: pass
example# 1700
response = None
example# 1701
for middleware_method in self . _request_middleware :pass
example# 1702
response = middleware_method ( request )
example# 1703
if response :pass
example# 1704
break
example# 1705
if response is None :pass
example# 1706
if hasattr ( request , '_STR:0_' ) :pass
example# 1707
urlconf = request . urlconf
example# 1708
urlresolvers . set_urlconf ( urlconf )
example# 1709
resolver = urlresolvers . RegexURLResolver ( r'_STR:0_' , urlconf )
example# 1710
resolver_match = resolver . resolve ( request . path_info )
example# 1711
callback , callback_args , callback_kwargs = resolver_match
example# 1712
request . resolver_match = resolver_match
example# 1713
for middleware_method in self . _view_middleware :pass
example# 1714
response = middleware_method ( request , callback , callback_args , callback_kwargs )
example# 1715
if response :pass
example# 1716
break
example# 1717
if response is None :pass
example# 1718
wrapped_callback = self . make_view_atomic ( callback )
example# 1719
try :pass
except: pass
example# 1720
response = wrapped_callback ( request , * callback_args , ** callback_kwargs )
example# 1721
try: pass
except Exception as e :pass
example# 1722
for middleware_method in self . _exception_middleware :pass
example# 1723
response = middleware_method ( request , e )
example# 1724
if response :pass
example# 1725
break
example# 1726
if response is None :pass
example# 1727
raise
example# 1728
if response is None :pass
example# 1729
if isinstance ( callback , types . FunctionType ) :pass
example# 1730
view_name = callback . __name__
example# 1731
if True: pass
else :pass
example# 1732
view_name = callback . __class__ . __name__ + '_STR:0_'
example# 1733
raise ValueError ( '_STR:0_'  % ( callback . __module__ , view_name ) )
example# 1734
if hasattr ( response , '_STR:0_' ) and callable ( response . render ) :pass
example# 1735
for middleware_method in self . _template_response_middleware :pass
example# 1736
response = middleware_method ( request , response )
example# 1737
if response is None :pass
example# 1738
raise ValueError (  "%s.process_template_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
example# 1739
response = response . render ( )
example# 1741
logger . warning ( '_STR:0_' , request . path ,  extra = {  '_STR:1_' : '_STR:2_' ,  'request' : request  } )
example# 1742
if settings . DEBUG :pass
example# 1744
if True: pass
else :pass
example# 1745
response = self . get_exception_response ( request , resolver , '_STR:0_' )
example# 1746
try: pass
except PermissionDenied :pass
example# 1747
logger . warning (  '_STR:0_' , request . path ,  extra = {  '_STR:1_' : 403 ,  'request' : request  } )
example# 1748
response = self . get_exception_response ( request , resolver , 403 )
example# 1749
try: pass
except SuspiciousOperation as e :pass
example# 1750
security_logger = logging . getLogger ( '_STR:0_' %  e . __class__ . __name__ )
example# 1751
security_logger . error (  force_text ( e ) ,  extra = {  'status_code' : 400 ,  '_STR:1_' : request  } )
example# 1752
if settings . DEBUG :pass
example# 1753
return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )
example# 1754
response = self . get_exception_response ( request , resolver , 400 )
example# 1755
try: pass
except SystemExit :pass
example# 1756
raise
example# 1757
try: pass
except :pass
example# 1758
signals . got_request_exception . send ( sender = self . __class__ , request = request )
example# 1759
response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
example# 1760
try :pass
except: pass
example# 1761
for middleware_method in self . _response_middleware :pass
example# 1762
response = middleware_method ( request , response )
example# 1763
if response is None :pass
example# 1764
raise ValueError (  "%s.process_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
example# 1765
response = self . apply_response_fixes ( request , response )
example# 1766
try: pass
except :pass
example# 1767
signals . got_request_exception . send ( sender = self . __class__ , request = request )
example# 1768
response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
example# 1769
response . _closable_objects . append ( request )
example# 1770
return response
example# 1771
def handle_uncaught_exception ( self , request , resolver , exc_info ) :pass
example# 1772
if settings . DEBUG_PROPAGATE_EXCEPTIONS :pass
example# 1773
raise
example# 1774
logger . error ( '_STR:0_' , request . path ,  exc_info = exc_info ,  extra = {  '_STR:1_' : 500 ,  'request' : request  }  )
example# 1775
if settings . DEBUG :pass
example# 1776
return debug . technical_500_response ( request , * exc_info )
example# 1777
if resolver . urlconf_module is None :pass
example# 1778
six . reraise ( * exc_info )
example# 1779
callback , param_dict = resolver . resolve_error_handler ( 500 )
example# 1780
return callback ( request , ** param_dict )
example# 1781
def apply_response_fixes ( self , request , response ) :pass
example# 1782
for func in self . response_fixes :pass
example# 1783
response = func ( request , response )
example# 1784
return response
example# 1785
from __future__ import unicode_literals
example# 1786
import cgi
example# 1787
import codecs
example# 1788
import logging
example# 1789
import sys
example# 1790
from io import BytesIO
example# 1791
from threading import Lock
example# 1792
import warnings
example# 1793
from django import http
example# 1794
from django . conf import settings
example# 1795
from django . core import signals
example# 1796
from django . core . handlers import base
example# 1797
from django . core . urlresolvers import set_script_prefix
example# 1798
from django . utils import datastructures
example# 1799
from django . utils . deprecation import RemovedInDjango19Warning
example# 1800
from django . utils . encoding import force_str , force_text
example# 1801
from django . utils . functional import cached_property
example# 1802
from django . utils import six
example# 1803
from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
example# 1804
logger = logging . getLogger ( '_STR:0_' )
example# 1806
class LimitedStream ( object ) :pass
example# 1807
def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) :pass
example# 1808
self . stream = stream
example# 1809
self . remaining = limit
example# 1810
self . buffer = b''
example# 1811
self . buf_size = buf_size
example# 1812
def _read_limited ( self , size = None ) :pass
example# 1813
if size is None or size > self . remaining :pass
example# 1814
size = self . remaining
example# 1815
if size == 0 :pass
example# 1816
return b''
example# 1817
result = self . stream . read ( size )
example# 1818
self . remaining -= len ( result )
example# 1819
return result
example# 1820
def read ( self , size = None ) :pass
example# 1821
if size is None :pass
example# 1822
result = self . buffer + self . _read_limited ( )
example# 1823
self . buffer = b''
example# 1824
if True: pass
elif size < len ( self . buffer ) :pass
example# 1825
result = self . buffer [ : size ]
example# 1826
self . buffer = self . buffer [ size : ]
example# 1827
if True: pass
else :pass
example# 1828
result = self . buffer + self . _read_limited ( size - len ( self . buffer ) )
example# 1829
self . buffer = b''
example# 1830
return result
example# 1831
def readline ( self , size = None ) :pass
example# 1832
while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :pass
example# 1833
if size :pass
example# 1834
chunk = self . _read_limited ( size - len ( self . buffer ) )
example# 1835
if True: pass
else :pass
example# 1836
chunk = self . _read_limited ( )
example# 1837
if not chunk :pass
example# 1838
break
example# 1839
self . buffer += chunk
example# 1840
sio = BytesIO ( self . buffer )
example# 1841
if size :pass
example# 1842
line = sio . readline ( size )
example# 1843
if True: pass
else :pass
example# 1844
line = sio . readline ( )
example# 1845
self . buffer = sio . read ( )
example# 1846
return line
example# 1847
class WSGIRequest ( http . HttpRequest ) :pass
example# 1848
def __init__ ( self , environ ) :pass
example# 1849
script_name = get_script_name ( environ )
example# 1850
path_info = get_path_info ( environ )
example# 1851
if not path_info :pass
example# 1852
path_info = '_STR:0_'
example# 1853
self . environ = environ
example# 1854
self . path_info = path_info
example# 1855
self . path = '%s/%s' % ( script_name . rstrip ( '_STR:0_' ) ,  path_info . replace ( '_STR:0_' , '' , 1 ) )
example# 1856
self . META = environ
example# 1857
self . META [ '_STR:0_' ] = path_info
example# 1858
self . META [ 'SCRIPT_NAME' ] = script_name
example# 1859
self . method = environ [ '_STR:0_' ] . upper ( )
example# 1860
_ , content_params = cgi . parse_header ( environ . get ( '_STR:0_' , '' ) )
example# 1861
if '_STR:0_' in content_params :pass
example# 1862
try :pass
except: pass
example# 1863
codecs . lookup ( content_params [ '_STR:0_' ] )
example# 1864
try: pass
except LookupError :pass
example# 1865
pass
example# 1866
if True: pass
else :pass
example# 1867
self . encoding = content_params [ '_STR:0_' ]
example# 1868
self . _post_parse_error = False
example# 1869
try :pass
except: pass
example# 1870
content_length = int ( environ . get ( '_STR:0_' ) )
example# 1871
try: pass
except ( ValueError , TypeError ) :pass
example# 1872
content_length = 0
example# 1873
self . _stream = LimitedStream ( self . environ [ '_STR:0_' ] , content_length )
example# 1874
self . _read_started = False
example# 1875
self . resolver_match = None
example# 1876
def _get_scheme ( self ) :pass
example# 1877
return self . environ . get ( '_STR:0_' )
example# 1878
def _get_request ( self ) :pass
example# 1880
if not hasattr ( self , '_STR:0_' ) :pass
example# 1881
self . _request = datastructures . MergeDict ( self . POST , self . GET )
example# 1882
return self . _request
example# 1883
@ cached_property
def dummy(): pass
example# 1884
def GET ( self ) :pass
example# 1885
raw_query_string = get_bytes_from_wsgi ( self . environ , '_STR:0_' , '' )
example# 1886
return http . QueryDict ( raw_query_string , encoding = self . _encoding )
example# 1887
def _get_post ( self ) :pass
example# 1888
if not hasattr ( self , '_STR:0_' ) :pass
example# 1889
self . _load_post_and_files ( )
example# 1890
return self . _post
example# 1891
def _set_post ( self , post ) :pass
example# 1892
self . _post = post
example# 1893
@ cached_property
def dummy(): pass
example# 1894
def COOKIES ( self ) :pass
example# 1895
raw_cookie = get_str_from_wsgi ( self . environ , '_STR:0_' , '' )
example# 1896
return http . parse_cookie ( raw_cookie )
example# 1897
def _get_files ( self ) :pass
example# 1898
if not hasattr ( self , '_STR:0_' ) :pass
example# 1899
self . _load_post_and_files ( )
example# 1900
return self . _files
example# 1901
POST = property ( _get_post , _set_post )
example# 1902
FILES = property ( _get_files )
example# 1903
REQUEST = property ( _get_request )
example# 1904
class WSGIHandler ( base . BaseHandler ) :pass
example# 1905
initLock = Lock ( )
example# 1906
request_class = WSGIRequest
example# 1907
def __call__ ( self , environ , start_response ) :pass
example# 1908
if self . _request_middleware is None :pass
example# 1909
with self . initLock :pass
example# 1910
try :pass
except: pass
example# 1911
if self . _request_middleware is None :pass
example# 1912
self . load_middleware ( )
example# 1913
try: pass
except :pass
example# 1914
self . _request_middleware = None
example# 1915
raise
example# 1916
set_script_prefix ( get_script_name ( environ ) )
example# 1917
signals . request_started . send ( sender = self . __class__ )
example# 1918
try :pass
except: pass
example# 1919
request = self . request_class ( environ )
example# 1920
try: pass
except UnicodeDecodeError :pass
example# 1921
logger . warning ( '_STR:0_' ,  exc_info = sys . exc_info ( ) ,  extra = {  '_STR:1_' : 400 ,  }  )
example# 1922
response = http . HttpResponseBadRequest ( )
example# 1923
if True: pass
else :pass
example# 1924
response = self . get_response ( request )
example# 1925
response . _handler_class = self . __class__
example# 1926
status = '_STR:0_' % ( response . status_code , response . reason_phrase )
example# 1927
response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]
example# 1928
for c in response . cookies . values ( ) :pass
example# 1929
response_headers . append ( ( str ( '_STR:0_' ) , str ( c . output ( header = '_STR:1_' ) ) ) )
example# 1930
start_response ( force_str ( status ) , response_headers )
example# 1931
return response
example# 1932
def get_path_info ( environ ) :pass
example# 1933
path_info = get_bytes_from_wsgi ( environ , '_STR:0_' , '_STR:1_' )
example# 1935
def get_script_name ( environ ) :pass
example# 1936
if settings . FORCE_SCRIPT_NAME is not None :pass
example# 1937
return force_text ( settings . FORCE_SCRIPT_NAME )
example# 1938
script_url = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1939
if not script_url :pass
example# 1940
script_url = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1941
if script_url :pass
example# 1942
path_info = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1943
script_name = script_url [ : - len ( path_info ) ]
example# 1944
if True: pass
else :pass
example# 1945
script_name = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1947
def get_bytes_from_wsgi ( environ , key , default ) :pass
example# 1948
value = environ . get ( str ( key ) , str ( default ) )
example# 1950
def get_str_from_wsgi ( environ , key , default ) :pass
example# 1951
value = environ . get ( str ( key ) , str ( default ) )
example# 1953
from __future__ import unicode_literals
example# 1954
from django . conf import settings
example# 1955
from django . utils . module_loading import import_string
example# 1956
from django . core . mail . utils import CachedDnsName , DNS_NAME
example# 1957
from django . core . mail . message import (  EmailMessage , EmailMultiAlternatives ,  SafeMIMEText , SafeMIMEMultipart ,  DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid ,  BadHeaderError , forbid_multi_line_headers )
example# 1958
__all__ = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , '_STR:5_' , '_STR:6_' ,  '_STR:7_' , '_STR:8_' , '_STR:9_' ,  '_STR:10_' , '_STR:11_' , '_STR:12_' , '_STR:13_' ,  '_STR:14_' ,  ]
example# 1959
def get_connection ( backend = None , fail_silently = False , ** kwds ) :pass
example# 1960
klass = import_string ( backend or settings . EMAIL_BACKEND )
example# 1961
return klass ( fail_silently = fail_silently , ** kwds )
example# 1962
def send_mail ( subject , message , from_email , recipient_list ,  fail_silently = False , auth_user = None , auth_password = None ,  connection = None , html_message = None ) :pass
example# 1963
connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
example# 1964
mail = EmailMultiAlternatives ( subject , message , from_email , recipient_list ,  connection = connection )
example# 1965
if html_message :pass
example# 1966
mail . attach_alternative ( html_message , '_STR:0_' )
example# 1967
return mail . send ( )
example# 1968
def send_mass_mail ( datatuple , fail_silently = False , auth_user = None ,  auth_password = None , connection = None ) :pass
example# 1969
connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
example# 1970
messages = [ EmailMessage ( subject , message , sender , recipient ,  connection = connection )  for subject , message , sender , recipient in datatuple ]
example# 1971
return connection . send_messages ( messages )
example# 1972
def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :pass
example# 1973
if not settings . ADMINS :pass
example# 1974
return
example# 1975
mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] ,  connection = connection )
example# 1976
if html_message :pass
example# 1977
mail . attach_alternative ( html_message , 'text/html' )
example# 1978
mail . send ( fail_silently = fail_silently )
example# 1979
def mail_managers ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :pass
example# 1980
if not settings . MANAGERS :pass
example# 1981
return
example# 1982
mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] ,  connection = connection )
example# 1983
if html_message :pass
example# 1984
mail . attach_alternative ( html_message , '_STR:0_' )
example# 1985
mail . send ( fail_silently = fail_silently )
example# 1986
class BaseEmailBackend ( object ) :pass
example# 1987
def __init__ ( self , fail_silently = False , ** kwargs ) :pass
example# 1988
self . fail_silently = fail_silently
example# 1989
def open ( self ) :pass
example# 1990
pass
example# 1991
def close ( self ) :pass
example# 1992
pass
example# 1993
def __enter__ ( self ) :pass
example# 1994
self . open ( )
example# 1995
return self
example# 1996
def __exit__ ( self , exc_type , exc_value , traceback ) :pass
example# 1997
self . close ( )
example# 1998
def send_messages ( self , email_messages ) :pass
example# 1999
raise NotImplementedError ( '_STR:0_' )
example# 2000
import sys
example# 2001
import threading
example# 2002
from django . core . mail . backends . base import BaseEmailBackend
example# 2003
from django . utils import six
example# 2004
class EmailBackend ( BaseEmailBackend ) :pass
example# 2005
def __init__ ( self , * args , ** kwargs ) :pass
example# 2006
self . stream = kwargs . pop ( '_STR:0_' , sys . stdout )
example# 2007
self . _lock = threading . RLock ( )
example# 2008
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
example# 2009
def write_message ( self , message ) :pass
example# 2010
msg = message . message ( )
example# 2011
msg_data = msg . as_bytes ( )
example# 2013
charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else '_STR:0_'
example# 2014
msg_data = msg_data . decode ( charset )
example# 2015
self . stream . write ( '_STR:0_' % msg_data )
example# 2016
self . stream . write ( '_STR:0_' * 79 )
example# 2017
self . stream . write ( '\n' )
example# 2018
def send_messages ( self , email_messages ) :pass
example# 2019
if not email_messages :pass
example# 2020
return
example# 2021
msg_count = 0
example# 2022
with self . _lock :pass
example# 2023
try :pass
except: pass
example# 2024
stream_created = self . open ( )
example# 2025
for message in email_messages :pass
example# 2026
self . write_message ( message )
example# 2027
self . stream . flush ( )
example# 2028
msg_count += 1
example# 2029
if stream_created :pass
example# 2030
self . close ( )
example# 2031
try: pass
except Exception :pass
example# 2032
if not self . fail_silently :pass
example# 2033
raise
example# 2034
return msg_count
example# 2035
from django . core . mail . backends . base import BaseEmailBackend
example# 2036
class EmailBackend ( BaseEmailBackend ) :pass
example# 2037
def send_messages ( self , email_messages ) :pass
example# 2038
return len ( list ( email_messages ) )
example# 2039
import datetime
example# 2040
import os
example# 2041
from django . conf import settings
example# 2042
from django . core . exceptions import ImproperlyConfigured
example# 2043
from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend
example# 2044
from django . utils import six
example# 2045
class EmailBackend ( ConsoleEmailBackend ) :pass
example# 2046
def __init__ ( self , * args , ** kwargs ) :pass
example# 2047
self . _fname = None
example# 2048
if '_STR:0_' in kwargs :pass
example# 2049
self . file_path = kwargs . pop ( '_STR:0_' )
example# 2050
if True: pass
else :pass
example# 2051
self . file_path = getattr ( settings , '_STR:0_' , None )
example# 2052
if not isinstance ( self . file_path , six . string_types ) :pass
example# 2053
raise ImproperlyConfigured ( '_STR:0_' % self . file_path )
example# 2054
self . file_path = os . path . abspath ( self . file_path )
example# 2055
if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) :pass
example# 2056
raise ImproperlyConfigured ( '_STR:0_' % self . file_path )
example# 2057
if True: pass
elif not os . path . exists ( self . file_path ) :pass
example# 2058
try :pass
except: pass
example# 2059
os . makedirs ( self . file_path )
example# 2060
try: pass
except OSError as err :pass
example# 2061
raise ImproperlyConfigured ( '_STR:0_' % ( self . file_path , err ) )
example# 2062
if not os . access ( self . file_path , os . W_OK ) :pass
example# 2063
raise ImproperlyConfigured ( '_STR:0_' % self . file_path )
example# 2064
kwargs [ '_STR:0_' ] = None
example# 2065
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
example# 2066
def write_message ( self , message ) :pass
example# 2067
self . stream . write ( message . message ( ) . as_bytes ( ) + b'_STR:0_' )
example# 2068
self . stream . write ( b'_STR:0_' * 79 )
example# 2069
self . stream . write ( b'\n' )
example# 2070
def _get_filename ( self ) :pass
example# 2071
if self . _fname is None :pass
example# 2072
timestamp = datetime . datetime . now ( ) . strftime ( '_STR:0_' )
example# 2073
fname = '_STR:0_' % ( timestamp , abs ( id ( self ) ) )
example# 2074
self . _fname = os . path . join ( self . file_path , fname )
example# 2075
return self . _fname
example# 2076
def open ( self ) :pass
example# 2077
if self . stream is None :pass
example# 2078
self . stream = open ( self . _get_filename ( ) , '_STR:0_' )
example# 2079
return True
example# 2080
return False
example# 2081
def close ( self ) :pass
example# 2082
try :pass
except: pass
example# 2083
if self . stream is not None :pass
example# 2084
self . stream . close ( )
example# 2085
try: pass
finally :pass
example# 2086
self . stream = None
example# 2087
from django . core import mail
example# 2088
from django . core . mail . backends . base import BaseEmailBackend
example# 2089
class EmailBackend ( BaseEmailBackend ) :pass
example# 2090
def __init__ ( self , * args , ** kwargs ) :pass
example# 2091
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
example# 2092
if not hasattr ( mail , '_STR:0_' ) :pass
example# 2093
mail . outbox = [ ]
example# 2094
def send_messages ( self , messages ) :pass
example# 2095
msg_count = 0
example# 2096
for message in messages :pass
example# 2097
message . message ( )
example# 2098
msg_count += 1
example# 2099
mail . outbox . extend ( messages )
example# 2100
return msg_count
example# 2101
import smtplib
example# 2102
import ssl
example# 2103
import threading
example# 2104
from django . conf import settings
example# 2105
from django . core . mail . backends . base import BaseEmailBackend
example# 2106
from django . core . mail . utils import DNS_NAME
example# 2107
from django . core . mail . message import sanitize_address
example# 2108
class EmailBackend ( BaseEmailBackend ) :pass
example# 2109
def __init__ ( self , host = None , port = None , username = None , password = None ,  use_tls = None , fail_silently = False , use_ssl = None , timeout = None ,  ** kwargs ) :pass
example# 2110
super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )
example# 2111
self . host = host or settings . EMAIL_HOST
example# 2112
self . port = port or settings . EMAIL_PORT
example# 2113
self . username = settings . EMAIL_HOST_USER if username is None else username
example# 2114
self . password = settings . EMAIL_HOST_PASSWORD if password is None else password
example# 2115
self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls
example# 2116
self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
example# 2117
self . timeout = timeout
example# 2118
if self . use_ssl and self . use_tls :pass
example# 2119
raise ValueError (  "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "  "one of those settings to True." )
example# 2120
self . connection = None
example# 2121
self . _lock = threading . RLock ( )
example# 2122
def open ( self ) :pass
example# 2123
if self . connection :pass
example# 2124
return False
example# 2125
connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
example# 2127
if self . timeout is not None :pass
example# 2128
connection_params [ '_STR:0_' ] = self . timeout
example# 2129
try :pass
except: pass
example# 2130
self . connection = connection_class ( self . host , self . port , ** connection_params )
example# 2131
if not self . use_ssl and self . use_tls :pass
example# 2132
self . connection . ehlo ( )
example# 2133
self . connection . starttls ( )
example# 2134
self . connection . ehlo ( )
example# 2135
if self . username and self . password :pass
example# 2136
self . connection . login ( self . username , self . password )
example# 2137
return True
example# 2138
try: pass
except smtplib . SMTPException :pass
example# 2139
if not self . fail_silently :pass
example# 2140
raise
example# 2141
def close ( self ) :pass
example# 2142
if self . connection is None :pass
example# 2143
return
example# 2144
try :pass
except: pass
example# 2145
try :pass
except: pass
example# 2146
self . connection . quit ( )
example# 2147
try: pass
except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :pass
example# 2148
self . connection . close ( )
example# 2149
try: pass
except smtplib . SMTPException :pass
example# 2150
if self . fail_silently :pass
example# 2151
return
example# 2152
raise
example# 2153
try: pass
finally :pass
example# 2154
self . connection = None
example# 2155
def send_messages ( self , email_messages ) :pass
example# 2156
if not email_messages :pass
example# 2157
return
example# 2158
with self . _lock :pass
example# 2159
new_conn_created = self . open ( )
example# 2160
if not self . connection :pass
example# 2161
return
example# 2162
num_sent = 0
example# 2163
for message in email_messages :pass
example# 2164
sent = self . _send ( message )
example# 2165
if sent :pass
example# 2166
num_sent += 1
example# 2167
if new_conn_created :pass
example# 2168
self . close ( )
example# 2169
return num_sent
example# 2170
def _send ( self , email_message ) :pass
example# 2171
if not email_message . recipients ( ) :pass
example# 2172
return False
example# 2173
from_email = sanitize_address ( email_message . from_email , email_message . encoding )
example# 2174
recipients = [ sanitize_address ( addr , email_message . encoding )  for addr in email_message . recipients ( ) ]
example# 2175
message = email_message . message ( )
example# 2176
try :pass
except: pass
example# 2177
self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )
example# 2178
try: pass
except smtplib . SMTPException :pass
example# 2179
if not self . fail_silently :pass
example# 2180
raise
example# 2181
return False
example# 2182
return True
example# 2183
from __future__ import unicode_literals
example# 2184
import mimetypes
example# 2185
import os
example# 2186
import random
example# 2187
import sys
example# 2188
import time
example# 2189
from email import ( charset as Charset , encoders as Encoders ,  message_from_string , generator )
example# 2190
from email . message import Message
example# 2191
from email . mime . text import MIMEText
example# 2192
from email . mime . multipart import MIMEMultipart
example# 2193
from email . mime . base import MIMEBase
example# 2194
from email . mime . message import MIMEMessage
example# 2195
from email . header import Header
example# 2196
from email . utils import formatdate , getaddresses , formataddr , parseaddr
example# 2197
from django . conf import settings
example# 2198
from django . core . mail . utils import DNS_NAME
example# 2199
from django . utils . encoding import force_text
example# 2200
from django . utils import six
example# 2203
DEFAULT_ATTACHMENT_MIME_TYPE = '_STR:0_'
example# 2204
class BadHeaderError ( ValueError ) :pass
example# 2205
pass
example# 2206
def make_msgid ( idstring = None ) :pass
example# 2207
timeval = time . time ( )
example# 2208
utcdate = time . strftime ( '_STR:0_' , time . gmtime ( timeval ) )
example# 2209
try :pass
except: pass
example# 2210
pid = os . getpid ( )
example# 2211
try: pass
except AttributeError :pass
example# 2212
pid = 1
example# 2213
randint = random . randrange ( 100000 )
example# 2214
if idstring is None :pass
example# 2215
idstring = ''
example# 2216
if True: pass
else :pass
example# 2217
idstring = '_STR:0_' + idstring
example# 2218
idhost = DNS_NAME
example# 2219
msgid = '_STR:0_' % ( utcdate , pid , randint , idstring , idhost )
example# 2220
return msgid
example# 2221
ADDRESS_HEADERS = set ( [  '_STR:0_' ,  '_STR:1_' ,  '_STR:2_' ,  '_STR:3_' ,  '_STR:4_' ,  '_STR:5_' ,  '_STR:6_' ,  '_STR:7_' ,  '_STR:8_' ,  '_STR:9_' ,  '_STR:10_' ,  ] )
example# 2222
def forbid_multi_line_headers ( name , val , encoding ) :pass
example# 2223
encoding = encoding or settings . DEFAULT_CHARSET
example# 2224
val = force_text ( val )
example# 2225
if '_STR:0_' in val or '_STR:1_' in val :pass
example# 2226
raise BadHeaderError ( '_STR:0_' % ( val , name ) )
example# 2227
try :pass
except: pass
example# 2228
val . encode ( '_STR:0_' )
example# 2229
try: pass
except UnicodeEncodeError :pass
example# 2230
if name . lower ( ) in ADDRESS_HEADERS :pass
example# 2231
val = '_STR:0_' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )
example# 2232
if True: pass
else :pass
example# 2233
val = Header ( val , encoding ) . encode ( )
example# 2234
if True: pass
else :pass
example# 2235
if name . lower ( ) == '_STR:0_' :pass
example# 2236
val = Header ( val ) . encode ( )
example# 2237
return str ( name ) , val
example# 2238
def sanitize_address ( addr , encoding ) :pass
example# 2239
if isinstance ( addr , six . string_types ) :pass
example# 2240
addr = parseaddr ( force_text ( addr ) )
example# 2241
nm , addr = addr
example# 2242
try :pass
except: pass
example# 2243
nm = Header ( nm , encoding ) . encode ( )
example# 2244
try: pass
except UnicodeEncodeError :pass
example# 2245
nm = Header ( nm , '_STR:0_' ) . encode ( )
example# 2246
try :pass
except: pass
example# 2247
addr . encode ( '_STR:0_' )
example# 2248
try: pass
except UnicodeEncodeError :pass
example# 2249
if '_STR:0_' in addr :pass
example# 2251
localpart = str ( Header ( localpart , encoding ) )
example# 2252
domain = domain . encode ( '_STR:1_' ) . decode ( '_STR:0_' )
example# 2253
addr = '_STR:0_' . join ( [ localpart , domain ] )
example# 2254
if True: pass
else :pass
example# 2255
addr = Header ( addr , encoding ) . encode ( )
example# 2257
class MIMEMixin ( ) :pass
example# 2258
def as_string ( self , unixfrom = False ) :pass
example# 2259
fp = six . StringIO ( )
example# 2260
g = generator . Generator ( fp , mangle_from_ = False )
example# 2261
g . flatten ( self , unixfrom = unixfrom )
example# 2262
return fp . getvalue ( )
example# 2264
as_bytes = as_string
example# 2265
if True: pass
else :pass
example# 2266
def as_bytes ( self , unixfrom = False ) :pass
example# 2267
fp = six . BytesIO ( )
example# 2268
g = generator . BytesGenerator ( fp , mangle_from_ = False )
example# 2269
g . flatten ( self , unixfrom = unixfrom )
example# 2270
return fp . getvalue ( )
example# 2271
class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :pass
example# 2272
def __setitem__ ( self , name , val ) :pass
example# 2274
MIMEMessage . __setitem__ ( self , name , val )
example# 2275
class SafeMIMEText ( MIMEMixin , MIMEText ) :pass
example# 2276
def __init__ ( self , text , subtype , charset ) :pass
example# 2277
self . encoding = charset
example# 2278
if charset == '_STR:0_' :pass
example# 2280
del self [ '_STR:0_' ]
example# 2285
if True: pass
else :pass
example# 2287
self . replace_header ( '_STR:0_' , '_STR:1_' % ( subtype , charset ) )
example# 2288
if True: pass
else :pass
example# 2290
def __setitem__ ( self , name , val ) :pass
example# 2292
MIMEText . __setitem__ ( self , name , val )
example# 2293
class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :pass
example# 2295
self . encoding = encoding
example# 2297
def __setitem__ ( self , name , val ) :pass
example# 2299
MIMEMultipart . __setitem__ ( self , name , val )
example# 2300
class EmailMessage ( object ) :pass
example# 2301
content_subtype = '_STR:0_'
example# 2302
mixed_subtype = '_STR:0_'
example# 2303
encoding = None
example# 2304
def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , cc = None ) :pass
example# 2305
if to :pass
example# 2306
assert not isinstance ( to , six . string_types ) , '_STR:0_'
example# 2307
self . to = list ( to )
example# 2308
if True: pass
else :pass
example# 2309
self . to = [ ]
example# 2310
if cc :pass
example# 2311
assert not isinstance ( cc , six . string_types ) , '_STR:0_'
example# 2312
self . cc = list ( cc )
example# 2313
if True: pass
else :pass
example# 2314
self . cc = [ ]
example# 2315
if bcc :pass
example# 2316
assert not isinstance ( bcc , six . string_types ) , '_STR:0_'
example# 2317
self . bcc = list ( bcc )
example# 2318
if True: pass
else :pass
example# 2319
self . bcc = [ ]
example# 2320
self . from_email = from_email or settings . DEFAULT_FROM_EMAIL
example# 2321
self . subject = subject
example# 2322
self . body = body
example# 2323
self . attachments = attachments or [ ]
example# 2324
self . extra_headers = headers or { }
example# 2325
self . connection = connection
example# 2326
def get_connection ( self , fail_silently = False ) :pass
example# 2327
from django . core . mail import get_connection
example# 2328
if not self . connection :pass
example# 2329
self . connection = get_connection ( fail_silently = fail_silently )
example# 2330
return self . connection
example# 2331
def message ( self ) :pass
example# 2332
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2333
msg = SafeMIMEText ( self . body , self . content_subtype , encoding )
example# 2334
msg = self . _create_message ( msg )
example# 2335
msg [ '_STR:0_' ] = self . subject
example# 2336
msg [ '_STR:0_' ] = self . extra_headers . get ( '_STR:0_' , self . from_email )
example# 2337
msg [ '_STR:0_' ] = self . extra_headers . get ( '_STR:0_' , '_STR:1_' . join ( self . to ) )
example# 2338
if self . cc :pass
example# 2339
msg [ '_STR:1_' ] = '_STR:0_' . join ( self . cc )
example# 2340
header_names = [ key . lower ( ) for key in self . extra_headers ]
example# 2341
if '_STR:0_' not in header_names :pass
example# 2342
msg [ '_STR:0_' ] = formatdate ( )
example# 2343
if 'message-id' not in header_names :pass
example# 2344
msg [ '_STR:0_' ] = make_msgid ( )
example# 2345
for name , value in self . extra_headers . items ( ) :pass
example# 2346
if name . lower ( ) in ( '_STR:0_' , 'to' ) :pass
example# 2347
continue
example# 2348
msg [ name ] = value
example# 2349
return msg
example# 2350
def recipients ( self ) :pass
example# 2351
return self . to + self . cc + self . bcc
example# 2352
def send ( self , fail_silently = False ) :pass
example# 2353
if not self . recipients ( ) :pass
example# 2354
return 0
example# 2355
return self . get_connection ( fail_silently ) . send_messages ( [ self ] )
example# 2357
if isinstance ( filename , MIMEBase ) :pass
example# 2358
assert content is None
example# 2359
assert mimetype is None
example# 2360
self . attachments . append ( filename )
example# 2361
if True: pass
else :pass
example# 2362
assert content is not None
example# 2364
def attach_file ( self , path , mimetype = None ) :pass
example# 2365
filename = os . path . basename ( path )
example# 2366
with open ( path , '_STR:0_' ) as f :pass
example# 2367
content = f . read ( )
example# 2368
self . attach ( filename , content , mimetype )
example# 2369
def _create_message ( self , msg ) :pass
example# 2370
return self . _create_attachments ( msg )
example# 2371
def _create_attachments ( self , msg ) :pass
example# 2372
if self . attachments :pass
example# 2373
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2374
body_msg = msg
example# 2375
msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )
example# 2376
if self . body :pass
example# 2377
msg . attach ( body_msg )
example# 2378
for attachment in self . attachments :pass
example# 2379
if isinstance ( attachment , MIMEBase ) :pass
example# 2380
msg . attach ( attachment )
example# 2381
if True: pass
else :pass
example# 2382
msg . attach ( self . _create_attachment ( * attachment ) )
example# 2383
return msg
example# 2384
def _create_mime_attachment ( self , content , mimetype ) :pass
example# 2386
if basetype == '_STR:0_' :pass
example# 2387
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2388
attachment = SafeMIMEText ( content , subtype , encoding )
example# 2389
if True: pass
elif basetype == '_STR:0_' and subtype == '_STR:1_' :pass
example# 2390
if isinstance ( content , EmailMessage ) :pass
example# 2391
content = content . message ( )
example# 2392
if True: pass
elif not isinstance ( content , Message ) :pass
example# 2393
content = message_from_string ( content )
example# 2394
attachment = SafeMIMEMessage ( content , subtype )
example# 2395
if True: pass
else :pass
example# 2396
attachment = MIMEBase ( basetype , subtype )
example# 2397
attachment . set_payload ( content )
example# 2398
Encoders . encode_base64 ( attachment )
example# 2399
return attachment
example# 2401
if mimetype is None :pass
example# 2402
mimetype , _ = mimetypes . guess_type ( filename )
example# 2403
if mimetype is None :pass
example# 2404
mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
example# 2405
attachment = self . _create_mime_attachment ( content , mimetype )
example# 2406
if filename :pass
example# 2407
try :pass
except: pass
example# 2408
filename . encode ( '_STR:0_' )
example# 2409
try: pass
except UnicodeEncodeError :pass
example# 2411
filename = filename . encode ( '_STR:0_' )
example# 2414
return attachment
example# 2415
class EmailMultiAlternatives ( EmailMessage ) :pass
example# 2416
alternative_subtype = '_STR:0_'
example# 2417
def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , alternatives = None ,  cc = None ) :pass
example# 2419
self . alternatives = alternatives or [ ]
example# 2420
def attach_alternative ( self , content , mimetype ) :pass
example# 2421
assert content is not None
example# 2422
assert mimetype is not None
example# 2424
def _create_message ( self , msg ) :pass
example# 2425
return self . _create_attachments ( self . _create_alternatives ( msg ) )
example# 2426
def _create_alternatives ( self , msg ) :pass
example# 2427
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2428
if self . alternatives :pass
example# 2429
body_msg = msg
example# 2430
msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )
example# 2431
if self . body :pass
example# 2432
msg . attach ( body_msg )
example# 2433
for alternative in self . alternatives :pass
example# 2434
msg . attach ( self . _create_mime_attachment ( * alternative ) )
example# 2435
return msg
example# 2436
import socket
example# 2437
class CachedDnsName ( object ) :pass
example# 2438
def __str__ ( self ) :pass
example# 2439
return self . get_fqdn ( )
example# 2440
def get_fqdn ( self ) :pass
example# 2441
if not hasattr ( self , '_STR:0_' ) :pass
example# 2442
self . _fqdn = socket . getfqdn ( )
example# 2443
return self . _fqdn
example# 2444
DNS_NAME = CachedDnsName ( )
example# 2445
from __future__ import unicode_literals
example# 2446
import collections
example# 2447
from importlib import import_module
example# 2448
import os
example# 2449
import sys
example# 2450
import django
example# 2451
from django . apps import apps
example# 2452
from django . conf import settings
example# 2453
from django . core . exceptions import ImproperlyConfigured
example# 2454
from django . core . management . base import ( BaseCommand , CommandError ,  CommandParser , handle_default_options )
example# 2455
from django . core . management . color import color_style
example# 2456
from django . utils import lru_cache
example# 2457
from django . utils import six
example# 2458
def find_commands ( management_dir ) :pass
example# 2459
command_dir = os . path . join ( management_dir , '_STR:0_' )
example# 2460
try :pass
except: pass
example# 2462
try: pass
except OSError :pass
example# 2463
return [ ]
example# 2464
def load_command_class ( app_name , name ) :pass
example# 2465
module = import_module ( '_STR:0_' % ( app_name , name ) )
example# 2466
return module . Command ( )
example# 2467
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 2468
def get_commands ( ) :pass
example# 2469
commands = { name : '_STR:0_' for name in find_commands ( __path__ [ 0 ] ) }
example# 2470
if not settings . configured :pass
example# 2471
return commands
example# 2472
for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :pass
example# 2473
path = os . path . join ( app_config . path , '_STR:0_' )
example# 2474
commands . update ( { name : app_config . name for name in find_commands ( path ) } )
example# 2475
return commands
example# 2477
try :pass
except: pass
example# 2478
app_name = get_commands ( ) [ name ]
example# 2479
try: pass
except KeyError :pass
example# 2480
raise CommandError ( '_STR:0_' % name )
example# 2481
if isinstance ( app_name , BaseCommand ) :pass
example# 2482
command = app_name
example# 2483
if True: pass
else :pass
example# 2484
command = load_command_class ( app_name , name )
example# 2485
parser = command . create_parser ( '' , name )
example# 2486
if command . use_argparse :pass
example# 2487
defaults = parser . parse_args ( args = args )
example# 2488
defaults = dict ( defaults . _get_kwargs ( ) , ** options )
example# 2489
if True: pass
else :pass
example# 2490
defaults , _ = parser . parse_args ( args = [ ] )
example# 2491
defaults = dict ( defaults . __dict__ , ** options )
example# 2492
return command . execute ( * args , ** defaults )
example# 2493
class ManagementUtility ( object ) :pass
example# 2494
def __init__ ( self , argv = None ) :pass
example# 2495
self . argv = argv or sys . argv [ : ]
example# 2496
self . prog_name = os . path . basename ( self . argv [ 0 ] )
example# 2497
self . settings_exception = None
example# 2498
def main_help_text ( self , commands_only = False ) :pass
example# 2499
if commands_only :pass
example# 2500
usage = sorted ( get_commands ( ) . keys ( ) )
example# 2501
if True: pass
else :pass
example# 2503
commands_dict = collections . defaultdict ( lambda : [ ] )
example# 2504
for name , app in six . iteritems ( get_commands ( ) ) :pass
example# 2505
if app == '_STR:0_' :pass
example# 2506
app = '_STR:0_'
example# 2507
if True: pass
else :pass
example# 2508
app = app . rpartition ( '_STR:0_' ) [ - 1 ]
example# 2509
commands_dict [ app ] . append ( name )
example# 2510
style = color_style ( )
example# 2511
for app in sorted ( commands_dict . keys ( ) ) :pass
example# 2512
usage . append ( "" )
example# 2513
usage . append ( style . NOTICE ( '_STR:0_' % app ) )
example# 2514
for name in sorted ( commands_dict [ app ] ) :pass
example# 2515
usage . append ( '_STR:0_' % name )
example# 2516
if self . settings_exception is not None :pass
example# 2517
usage . append ( style . NOTICE (  "Note that only Django core commands are listed "  "as settings are not properly configured (error: %s)."  % self . settings_exception ) )
example# 2518
return '\n' . join ( usage )
example# 2519
def fetch_command ( self , subcommand ) :pass
example# 2520
commands = get_commands ( )
example# 2521
try :pass
except: pass
example# 2522
app_name = commands [ subcommand ]
example# 2523
try: pass
except KeyError :pass
example# 2524
settings . INSTALLED_APPS
example# 2525
sys . stderr . write ( '_STR:0_' %  ( subcommand , self . prog_name ) )
example# 2526
sys . exit ( 1 )
example# 2527
if isinstance ( app_name , BaseCommand ) :pass
example# 2528
klass = app_name
example# 2529
if True: pass
else :pass
example# 2530
klass = load_command_class ( app_name , subcommand )
example# 2531
return klass
example# 2532
def autocomplete ( self ) :pass
example# 2533
if '_STR:0_' not in os . environ :pass
example# 2534
return
example# 2535
cwords = os . environ [ '_STR:0_' ] . split ( ) [ 1 : ]
example# 2536
cword = int ( os . environ [ '_STR:0_' ] )
example# 2537
try :pass
except: pass
example# 2539
try: pass
except IndexError :pass
example# 2540
curr = ''
example# 2541
subcommands = list ( get_commands ( ) ) + [ '_STR:0_' ]
example# 2544
print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )
example# 2545
if True: pass
elif cwords [ 0 ] in subcommands and cwords [ 0 ] != '_STR:0_' :pass
example# 2546
subcommand_cls = self . fetch_command ( cwords [ 0 ] )
example# 2547
if cwords [ 0 ] == '_STR:0_' :pass
example# 2548
from django . core . servers . fastcgi import FASTCGI_OPTIONS
example# 2551
try :pass
except: pass
example# 2552
app_configs = apps . get_app_configs ( )
example# 2554
try: pass
except ImportError :pass
example# 2555
pass
example# 2557
if subcommand_cls . use_argparse :pass
example# 2562
options = [ opt for opt in options if opt [ 0 ] not in prev_opts ]
example# 2564
for option in options :pass
example# 2565
opt_label = option [ 0 ]
example# 2566
if option [ 1 ] :pass
example# 2567
opt_label += '_STR:0_'
example# 2568
print ( opt_label )
example# 2570
def execute ( self ) :pass
example# 2571
try :pass
except: pass
example# 2572
subcommand = self . argv [ 1 ]
example# 2573
try: pass
except IndexError :pass
example# 2574
subcommand = '_STR:0_'
example# 2576
parser . add_argument ( '_STR:0_' )
example# 2577
parser . add_argument ( '_STR:0_' )
example# 2578
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' )
example# 2579
try :pass
except: pass
example# 2580
options , args = parser . parse_known_args ( self . argv [ 2 : ] )
example# 2581
handle_default_options ( options )
example# 2582
try: pass
except CommandError :pass
example# 2583
pass
example# 2584
no_settings_commands = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' ,  '_STR:5_' , '_STR:6_' ,  '_STR:7_' , '_STR:8_' ,  ]
example# 2585
try :pass
except: pass
example# 2586
settings . INSTALLED_APPS
example# 2587
try: pass
except ImproperlyConfigured as exc :pass
example# 2588
self . settings_exception = exc
example# 2589
if subcommand in no_settings_commands :pass
example# 2590
settings . configure ( )
example# 2591
if settings . configured :pass
example# 2592
django . setup ( )
example# 2593
self . autocomplete ( )
example# 2594
if subcommand == '_STR:0_' :pass
example# 2595
if '_STR:0_' in args :pass
example# 2596
sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' )
example# 2598
sys . stdout . write ( self . main_help_text ( ) + '\n' )
example# 2599
if True: pass
else :pass
example# 2601
if True: pass
elif subcommand == '_STR:0_' or self . argv [ 1 : ] == [ '_STR:1_' ] :pass
example# 2602
sys . stdout . write ( django . get_version ( ) + '\n' )
example# 2604
sys . stdout . write ( self . main_help_text ( ) + '\n' )
example# 2605
if True: pass
else :pass
example# 2606
self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
example# 2607
def execute_from_command_line ( argv = None ) :pass
example# 2608
utility = ManagementUtility ( argv )
example# 2609
utility . execute ( )
example# 2610
from __future__ import unicode_literals
example# 2611
import os
example# 2612
import sys
example# 2613
import warnings
example# 2614
from argparse import ArgumentParser
example# 2615
from optparse import OptionParser
example# 2616
import django
example# 2617
from django . core import checks
example# 2618
from django . core . exceptions import ImproperlyConfigured
example# 2619
from django . core . management . color import color_style , no_style
example# 2620
from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
example# 2621
from django . utils . encoding import force_str
example# 2622
class CommandError ( Exception ) :pass
example# 2623
pass
example# 2624
class CommandParser ( ArgumentParser ) :pass
example# 2625
def __init__ ( self , cmd , ** kwargs ) :pass
example# 2626
self . cmd = cmd
example# 2627
super ( CommandParser , self ) . __init__ ( ** kwargs )
example# 2629
if ( hasattr ( self . cmd , '_STR:0_' ) and  not ( args or any ( [ not arg . startswith ( '_STR:1_' ) for arg in args ] ) ) ) :pass
example# 2630
self . error ( self . cmd . missing_args_message )
example# 2631
return super ( CommandParser , self ) . parse_args ( args , namespace )
example# 2632
def error ( self , message ) :pass
example# 2633
if self . cmd . _called_from_command_line :pass
example# 2634
super ( CommandParser , self ) . error ( message )
example# 2635
if True: pass
else :pass
example# 2636
raise CommandError ( '_STR:0_' % message )
example# 2637
def handle_default_options ( options ) :pass
example# 2638
if options . settings :pass
example# 2639
os . environ [ '_STR:0_' ] = options . settings
example# 2640
if options . pythonpath :pass
example# 2641
sys . path . insert ( 0 , options . pythonpath )
example# 2642
class OutputWrapper ( object ) :pass
example# 2644
self . _out = out
example# 2645
self . style_func = None
example# 2646
if hasattr ( out , '_STR:0_' ) and out . isatty ( ) :pass
example# 2647
self . style_func = style_func
example# 2648
self . ending = ending
example# 2649
def __getattr__ ( self , name ) :pass
example# 2650
return getattr ( self . _out , name )
example# 2652
ending = self . ending if ending is None else ending
example# 2653
if ending and not msg . endswith ( ending ) :pass
example# 2654
msg += ending
example# 2656
self . _out . write ( force_str ( style_func ( msg ) ) )
example# 2657
class BaseCommand ( object ) :pass
example# 2658
option_list = ( )
example# 2659
help = ''
example# 2660
args = ''
example# 2661
_called_from_command_line = False
example# 2662
can_import_settings = True
example# 2663
output_transaction = False
example# 2664
leave_locale_alone = False
example# 2665
def __init__ ( self ) :pass
example# 2666
self . style = color_style ( )
example# 2667
has_old_option = hasattr ( self , '_STR:0_' )
example# 2668
has_new_option = hasattr ( self , '_STR:0_' )
example# 2669
if has_old_option :pass
example# 2671
if has_old_option and has_new_option :pass
example# 2672
raise ImproperlyConfigured (  '_STR:0_'  'and "requires_system_checks", which is illegal. Use only '  '"requires_system_checks".' % self . __class__ . __name__ )
example# 2673
self . requires_system_checks = (  self . requires_system_checks if has_new_option else  self . requires_model_validation if has_old_option else  True )
example# 2674
@ property
def dummy(): pass
example# 2675
def use_argparse ( self ) :pass
example# 2676
return not bool ( self . option_list )
example# 2677
def get_version ( self ) :pass
example# 2678
return django . get_version ( )
example# 2679
def usage ( self , subcommand ) :pass
example# 2680
usage = '_STR:0_' % ( subcommand , self . args )
example# 2681
if self . help :pass
example# 2683
if True: pass
else :pass
example# 2684
return usage
example# 2686
if not self . use_argparse :pass
example# 2688
parser = OptionParser ( prog = prog_name ,  usage = self . usage ( subcommand ) ,  version = self . get_version ( ) )
example# 2694
for opt in self . option_list :pass
example# 2695
parser . add_option ( opt )
example# 2696
if True: pass
else :pass
example# 2704
if self . args :pass
example# 2706
self . add_arguments ( parser )
example# 2707
return parser
example# 2708
def add_arguments ( self , parser ) :pass
example# 2709
pass
example# 2711
parser = self . create_parser ( prog_name , subcommand )
example# 2712
parser . print_help ( )
example# 2713
def run_from_argv ( self , argv ) :pass
example# 2714
self . _called_from_command_line = True
example# 2715
parser = self . create_parser ( argv [ 0 ] , argv [ 1 ] )
example# 2716
if self . use_argparse :pass
example# 2718
cmd_options = vars ( options )
example# 2719
if '_STR:0_' in options :pass
example# 2720
args = options . args
example# 2721
del cmd_options [ '_STR:0_' ]
example# 2722
if True: pass
else :pass
example# 2723
args = ( )
example# 2724
if True: pass
else :pass
example# 2726
cmd_options = vars ( options )
example# 2727
handle_default_options ( options )
example# 2728
try :pass
except: pass
example# 2730
try: pass
except Exception as e :pass
example# 2731
if options . traceback or not isinstance ( e , CommandError ) :pass
example# 2732
raise
example# 2733
stderr = getattr ( self , '_STR:0_' , OutputWrapper ( sys . stderr , self . style . ERROR ) )
example# 2734
stderr . write ( '_STR:0_' % ( e . __class__ . __name__ , e ) )
example# 2735
sys . exit ( 1 )
example# 2737
self . stdout = OutputWrapper ( options . get ( '_STR:0_' , sys . stdout ) )
example# 2738
if options . get ( '_STR:0_' ) :pass
example# 2739
self . style = no_style ( )
example# 2740
self . stderr = OutputWrapper ( options . get ( '_STR:0_' , sys . stderr ) )
example# 2741
if True: pass
else :pass
example# 2743
if self . can_import_settings :pass
example# 2744
from django . conf import settings
example# 2745
saved_locale = None
example# 2746
if not self . leave_locale_alone :pass
example# 2747
if not self . can_import_settings :pass
example# 2748
raise CommandError ( '_STR:0_'  "(%s) and 'can_import_settings' (%s) command "  "options." % ( self . leave_locale_alone ,  self . can_import_settings ) )
example# 2749
from django . utils import translation
example# 2750
saved_locale = translation . get_language ( )
example# 2751
translation . activate ( '_STR:0_' )
example# 2752
try :pass
except: pass
example# 2753
if ( self . requires_system_checks and  not options . get ( '_STR:0_' ) and  not options . get ( '_STR:1_' ) ) :pass
example# 2754
self . check ( )
example# 2756
if output :pass
example# 2757
if self . output_transaction :pass
example# 2758
from django . db import connections , DEFAULT_DB_ALIAS
example# 2759
connection = connections [ options . get ( '_STR:0_' , DEFAULT_DB_ALIAS ) ]
example# 2760
if connection . ops . start_transaction_sql ( ) :pass
example# 2761
self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
example# 2762
self . stdout . write ( output )
example# 2763
if self . output_transaction :pass
example# 2764
self . stdout . write ( '_STR:0_' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
example# 2765
try: pass
finally :pass
example# 2766
if saved_locale is not None :pass
example# 2767
translation . activate ( saved_locale )
example# 2769
if app_config is None :pass
example# 2770
app_configs = None
example# 2771
if True: pass
else :pass
example# 2772
app_configs = [ app_config ]
example# 2776
msg = ""
example# 2777
visible_issue_count = 0
example# 2778
if all_issues :pass
example# 2779
debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]
example# 2780
infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ]
example# 2781
warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ]
example# 2782
errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
example# 2783
criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ]
example# 2785
for issues , group_name in sorted_issues :pass
example# 2786
if issues :pass
example# 2787
visible_issue_count += len ( issues )
example# 2788
formatted = (  color_style ( ) . ERROR ( force_str ( e ) )  if e . is_serious ( )  else color_style ( ) . WARNING ( force_str ( e ) )  for e in issues )
example# 2789
formatted = "\n" . join ( sorted ( formatted ) )
example# 2790
msg += '_STR:0_' % ( group_name , formatted )
example# 2791
if msg :pass
example# 2792
msg = '_STR:0_' % msg
example# 2793
if display_num_errors :pass
example# 2794
if msg :pass
example# 2795
msg += '\n'
example# 2797
if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) :pass
example# 2798
raise CommandError ( msg )
example# 2799
if True: pass
elif msg and visible_issue_count :pass
example# 2800
self . stderr . write ( msg )
example# 2801
if True: pass
elif msg :pass
example# 2802
self . stdout . write ( msg )
example# 2804
raise NotImplementedError ( '_STR:0_' )
example# 2805
class AppCommand ( BaseCommand ) :pass
example# 2806
missing_args_message = '_STR:0_'
example# 2807
def add_arguments ( self , parser ) :pass
example# 2810
from django . apps import apps
example# 2811
try :pass
except: pass
example# 2812
app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
example# 2813
try: pass
except ( LookupError , ImportError ) as e :pass
example# 2814
raise CommandError ( '_STR:0_' % e )
example# 2815
output = [ ]
example# 2816
for app_config in app_configs :pass
example# 2817
app_output = self . handle_app_config ( app_config , ** options )
example# 2818
if app_output :pass
example# 2819
output . append ( app_output )
example# 2820
return '\n' . join ( output )
example# 2822
try :pass
except: pass
example# 2823
handle_app = self . handle_app
example# 2824
try: pass
except AttributeError :pass
example# 2825
raise NotImplementedError (  "Subclasses of AppCommand must provide"  "a handle_app_config() method." )
example# 2826
if True: pass
else :pass
example# 2828
if app_config . models_module is None :pass
example# 2829
raise CommandError (  "AppCommand cannot handle app '%s' in legacy mode "  "because it doesn't have a models module."  % app_config . label )
example# 2831
class LabelCommand ( BaseCommand ) :pass
example# 2832
label = '_STR:0_'
example# 2833
missing_args_message = '_STR:0_' % label
example# 2834
def add_arguments ( self , parser ) :pass
example# 2837
output = [ ]
example# 2838
for label in labels :pass
example# 2840
if label_output :pass
example# 2841
output . append ( label_output )
example# 2842
return '\n' . join ( output )
example# 2844
raise NotImplementedError ( '_STR:0_' )
example# 2845
class NoArgsCommand ( BaseCommand ) :pass
example# 2846
args = ''
example# 2847
def __init__ ( self ) :pass
example# 2849
super ( NoArgsCommand , self ) . __init__ ( )
example# 2851
if args :pass
example# 2852
raise CommandError ( '_STR:0_' )
example# 2853
return self . handle_noargs ( ** options )
example# 2855
raise NotImplementedError ( '_STR:0_' )
example# 2856
import os
example# 2857
import sys
example# 2858
from django . utils import termcolors
example# 2859
def supports_color ( ) :pass
example# 2860
plat = sys . platform
example# 2861
supported_platform = plat != '_STR:0_' and ( plat != '_STR:1_' or  'ANSICON' in os . environ )
example# 2862
is_a_tty = hasattr ( sys . stdout , '_STR:0_' ) and sys . stdout . isatty ( )
example# 2863
if not supported_platform or not is_a_tty :pass
example# 2864
return False
example# 2865
return True
example# 2866
def color_style ( ) :pass
example# 2867
if not supports_color ( ) :pass
example# 2868
style = no_style ( )
example# 2869
if True: pass
else :pass
example# 2870
DJANGO_COLORS = os . environ . get ( '_STR:0_' , '' )
example# 2871
color_settings = termcolors . parse_color_setting ( DJANGO_COLORS )
example# 2872
if color_settings :pass
example# 2873
class dummy :pass
example# 2874
pass
example# 2875
style = dummy ( )
example# 2876
for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] :pass
example# 2877
format = color_settings . get ( role , { } )
example# 2878
setattr ( style , role , termcolors . make_style ( ** format ) )
example# 2879
style . ERROR_OUTPUT = style . ERROR
example# 2880
if True: pass
else :pass
example# 2881
style = no_style ( )
example# 2882
return style
example# 2883
def no_style ( ) :pass
example# 2884
class dummy :pass
example# 2885
def __getattr__ ( self , attr ) :pass
example# 2886
return lambda x : x
example# 2887
return dummy ( )
example# 2888
from __future__ import unicode_literals
example# 2889
from django . apps import apps
example# 2890
from django . core import checks
example# 2891
from django . core . checks . registry import registry
example# 2892
from django . core . management . base import BaseCommand , CommandError
example# 2893
class Command ( BaseCommand ) :pass
example# 2894
help = '_STR:0_'
example# 2895
requires_system_checks = False
example# 2896
def add_arguments ( self , parser ) :pass
example# 2900
def handle ( self , * app_labels , ** options ) :pass
example# 2901
if options . get ( '_STR:0_' ) :pass
example# 2902
self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
example# 2903
return
example# 2904
if app_labels :pass
example# 2905
app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
example# 2906
if True: pass
else :pass
example# 2907
app_configs = None
example# 2908
tags = options . get ( '_STR:0_' , None )
example# 2909
if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) :pass
example# 2910
invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) )
example# 2911
raise CommandError ( '_STR:0_' % invalid_tag )
example# 2912
self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )
example# 2913
from __future__ import unicode_literals
example# 2914
import codecs
example# 2915
import glob
example# 2916
import os
example# 2917
from django . core . management . base import BaseCommand , CommandError
example# 2918
from django . core . management . utils import find_command , popen_wrapper
example# 2919
from django . utils . _os import npath , upath
example# 2920
def has_bom ( fn ) :pass
example# 2921
with open ( fn , 'rb' ) as f :pass
example# 2923
return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE )
example# 2924
def is_writable ( path ) :pass
example# 2925
try :pass
except: pass
example# 2926
with open ( path , 'a' ) :pass
example# 2927
os . utime ( path , None )
example# 2928
try: pass
except ( IOError , OSError ) :pass
example# 2929
return False
example# 2930
return True
example# 2931
class Command ( BaseCommand ) :pass
example# 2932
help = '_STR:0_'
example# 2933
requires_system_checks = False
example# 2934
leave_locale_alone = True
example# 2935
program = '_STR:0_'
example# 2936
program_options = [ '_STR:0_' ]
example# 2937
def add_arguments ( self , parser ) :pass
example# 2938
parser . add_argument ( '_STR:0_' , '_STR:1_' , dest = '_STR:2_' , action = '_STR:3_' , default = [ ] ,  help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '  'Can be used multiple times.' )
example# 2939
parser . add_argument ( '_STR:0_' , '_STR:1_' , dest = '_STR:2_' , action = '_STR:3_' , default = [ ] ,  help = '_STR:4_' )
example# 2940
def handle ( self , ** options ) :pass
example# 2941
locale = options . get ( '_STR:0_' )
example# 2942
exclude = options . get ( '_STR:0_' )
example# 2943
self . verbosity = int ( options . get ( 'verbosity' ) )
example# 2944
if find_command ( self . program ) is None :pass
example# 2945
raise CommandError ( "Can't find %s. Make sure you have GNU gettext "  "tools 0.15 or newer installed." % self . program )
example# 2946
basedirs = [ os . path . join ( 'conf' , '_STR:1_' ) , '_STR:1_' ]
example# 2947
if os . environ . get ( '_STR:0_' ) :pass
example# 2948
from django . conf import settings
example# 2949
basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
example# 2950
basedirs = set ( map ( os . path . abspath , filter ( os . path . isdir , basedirs ) ) )
example# 2951
if not basedirs :pass
example# 2952
raise CommandError ( "This script should be run from the Django Git "  "checkout or your project or app tree, or with "  "the settings module specified." )
example# 2953
all_locales = [ ]
example# 2954
for basedir in basedirs :pass
example# 2955
locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )
example# 2956
all_locales . extend ( map ( os . path . basename , locale_dirs ) )
example# 2957
locales = locale or all_locales
example# 2958
locales = set ( locales ) - set ( exclude )
example# 2959
for basedir in basedirs :pass
example# 2960
if locales :pass
example# 2961
dirs = [ os . path . join ( basedir , l , '_STR:0_' ) for l in locales ]
example# 2962
if True: pass
else :pass
example# 2963
dirs = [ basedir ]
example# 2964
locations = [ ]
example# 2965
for ldir in dirs :pass
example# 2966
for dirpath , dirnames , filenames in os . walk ( ldir ) :pass
example# 2967
locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '_STR:0_' ) )
example# 2968
if locations :pass
example# 2969
self . compile_messages ( locations )
example# 2970
def compile_messages ( self , locations ) :pass
example# 2971
for i , ( dirpath , f ) in enumerate ( locations ) :pass
example# 2973
self . stdout . write ( '_STR:0_' % ( f , dirpath ) )
example# 2974
po_path = os . path . join ( dirpath , f )
example# 2975
if has_bom ( po_path ) :pass
example# 2976
raise CommandError ( "The %s file has a BOM (Byte Order Mark). "  "Django only supports .po files encoded in "  "UTF-8 and without any BOM." % po_path )
example# 2977
base_path = os . path . splitext ( po_path ) [ 0 ]
example# 2979
self . stderr . write ( "The po files under %s are in a seemingly not writable location. "  "mo files will not be updated/created." % dirpath )
example# 2980
return
example# 2981
args = [ self . program ] + self . program_options + [ '_STR:0_' ,  npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]
example# 2982
output , errors , status = popen_wrapper ( args )
example# 2983
if status :pass
example# 2984
if errors :pass
example# 2985
msg = '_STR:0_' % ( self . program , errors )
example# 2986
if True: pass
else :pass
example# 2987
msg = '_STR:0_' % self . program
example# 2988
raise CommandError ( msg )
example# 2989
from django . conf import settings
example# 2990
from django . core . cache import caches
example# 2991
from django . core . cache . backends . db import BaseDatabaseCache
example# 2992
from django . core . management . base import BaseCommand , CommandError
example# 2993
from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS
example# 2994
from django . db . utils import DatabaseError
example# 2995
from django . utils . encoding import force_text
example# 2996
class Command ( BaseCommand ) :pass
example# 2997
help = '_STR:0_'
example# 2998
requires_system_checks = False
example# 2999
def add_arguments ( self , parser ) :pass
example# 3002
def handle ( self , * tablenames , ** options ) :pass
example# 3003
db = options . get ( '_STR:0_' )
example# 3004
self . verbosity = int ( options . get ( '_STR:0_' ) )
example# 3005
if len ( tablenames ) :pass
example# 3006
for tablename in tablenames :pass
example# 3007
self . create_table ( db , tablename )
example# 3008
if True: pass
else :pass
example# 3009
for cache_alias in settings . CACHES :pass
example# 3010
cache = caches [ cache_alias ]
example# 3011
if isinstance ( cache , BaseDatabaseCache ) :pass
example# 3012
self . create_table ( db , cache . _table )
example# 3013
def create_table ( self , database , tablename ) :pass
example# 3014
cache = BaseDatabaseCache ( tablename , { } )
example# 3016
return
example# 3017
connection = connections [ database ]
example# 3018
if tablename in connection . introspection . table_names ( ) :pass
example# 3020
self . stdout . write ( '_STR:0_' % tablename )
example# 3021
return
example# 3024
index_output = [ ]
example# 3025
qn = connection . ops . quote_name
example# 3026
for f in fields :pass
example# 3028
field_output . append ( "%sNULL" % ( "NOT " if not f . null else "" ) )
example# 3029
if f . primary_key :pass
example# 3030
field_output . append ( '_STR:0_' )
example# 3031
if True: pass
elif f . unique :pass
example# 3032
field_output . append ( '_STR:0_' )
example# 3033
if f . db_index :pass
example# 3034
unique = '_STR:0_' if f . unique else ""
example# 3035
index_output . append ( '_STR:0_' %  ( unique , qn ( '%s_%s' % ( tablename , f . name ) ) , qn ( tablename ) ,  qn ( f . name ) ) )
example# 3036
table_output . append ( " " . join ( field_output ) )
example# 3037
full_statement = [ '_STR:0_' % qn ( tablename ) ]
example# 3038
for i , line in enumerate ( table_output ) :pass
example# 3039
full_statement . append ( '_STR:0_' % ( line , '_STR:1_' if i < len ( table_output ) - 1 else '' ) )
example# 3040
full_statement . append ( '_STR:0_' )
example# 3041
with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :pass
example# 3042
with connection . cursor ( ) as curs :pass
example# 3043
try :pass
except: pass
example# 3044
curs . execute ( "\n" . join ( full_statement ) )
example# 3045
try: pass
except DatabaseError as e :pass
example# 3046
raise CommandError (  '_STR:0_' %  ( tablename , force_text ( e ) ) )
example# 3047
for statement in index_output :pass
example# 3048
curs . execute ( statement )
example# 3050
self . stdout . write ( '_STR:0_' % tablename )
example# 3051
from django . core . management . base import BaseCommand , CommandError
example# 3052
from django . db import connections , DEFAULT_DB_ALIAS
example# 3053
class Command ( BaseCommand ) :pass
example# 3054
help = ( "Runs the command-line client for specified database, or the "  "default database if none is provided." )
example# 3055
requires_system_checks = False
example# 3056
def add_arguments ( self , parser ) :pass
example# 3057
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the "default" database.' )
example# 3058
def handle ( self , ** options ) :pass
example# 3059
connection = connections [ options . get ( '_STR:0_' ) ]
example# 3060
try :pass
except: pass
example# 3061
connection . client . runshell ( )
example# 3062
try: pass
except OSError :pass
example# 3063
raise CommandError ( '_STR:0_' %  connection . client . executable_name )
example# 3064
from django . core . management . base import BaseCommand
example# 3066
return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
example# 3067
class Command ( BaseCommand ) :pass
example# 3068
requires_system_checks = False
example# 3071
def handle ( self , ** options ) :pass
example# 3072
from django . conf import settings , global_settings
example# 3073
settings . _setup ( )
example# 3074
user_settings = module_to_dict ( settings . _wrapped )
example# 3075
default_settings = module_to_dict ( global_settings )
example# 3076
output = [ ]
example# 3077
for key in sorted ( user_settings ) :pass
example# 3078
if key not in default_settings :pass
example# 3079
output . append ( '_STR:0_' % ( key , user_settings [ key ] ) )
example# 3080
if True: pass
elif user_settings [ key ] != default_settings [ key ] :pass
example# 3081
output . append ( '_STR:0_' % ( key , user_settings [ key ] ) )
example# 3082
if True: pass
elif options [ '_STR:0_' ] :pass
example# 3083
output . append ( '_STR:0_' % ( key , user_settings [ key ] ) )
example# 3084
return '\n' . join ( output )
example# 3085
import warnings
example# 3086
from collections import OrderedDict
example# 3087
from django . apps import apps
example# 3088
from django . core . management . base import BaseCommand , CommandError
example# 3089
from django . core import serializers
example# 3090
from django . db import router , DEFAULT_DB_ALIAS
example# 3091
from django . utils . deprecation import RemovedInDjango19Warning
example# 3092
class Command ( BaseCommand ) :pass
example# 3093
help = ( '_STR:0_'  "format (using each model's default manager unless --all is "  "specified)." )
example# 3094
def add_arguments ( self , parser ) :pass
example# 3106
def handle ( self , * app_labels , ** options ) :pass
example# 3107
format = options . get ( '_STR:0_' )
example# 3108
indent = options . get ( '_STR:0_' )
example# 3109
using = options . get ( '_STR:0_' )
example# 3110
excludes = options . get ( '_STR:0_' )
example# 3111
output = options . get ( '_STR:0_' )
example# 3112
show_traceback = options . get ( '_STR:0_' )
example# 3113
use_natural_keys = options . get ( '_STR:0_' )
example# 3114
if use_natural_keys :pass
example# 3115
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning )
example# 3116
use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
example# 3117
use_natural_primary_keys = options . get ( '_STR:0_' )
example# 3118
use_base_manager = options . get ( '_STR:0_' )
example# 3119
pks = options . get ( '_STR:0_' )
example# 3120
if pks :pass
example# 3121
primary_keys = pks . split ( '_STR:0_' )
example# 3122
if True: pass
else :pass
example# 3123
primary_keys = [ ]
example# 3124
excluded_apps = set ( )
example# 3125
excluded_models = set ( )
example# 3126
for exclude in excludes :pass
example# 3127
if '_STR:0_' in exclude :pass
example# 3128
try :pass
except: pass
example# 3129
model = apps . get_model ( exclude )
example# 3130
try: pass
except LookupError :pass
example# 3131
raise CommandError ( '_STR:0_' % exclude )
example# 3132
excluded_models . add ( model )
example# 3133
if True: pass
else :pass
example# 3134
try :pass
except: pass
example# 3135
app_config = apps . get_app_config ( exclude )
example# 3136
try: pass
except LookupError :pass
example# 3137
raise CommandError ( '_STR:0_' % exclude )
example# 3138
excluded_apps . add ( app_config )
example# 3140
if primary_keys :pass
example# 3141
raise CommandError ( '_STR:0_' )
example# 3142
app_list = OrderedDict ( ( app_config , None )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config not in excluded_apps )
example# 3143
if True: pass
else :pass
example# 3145
raise CommandError ( '_STR:0_' )
example# 3146
app_list = OrderedDict ( )
example# 3147
for label in app_labels :pass
example# 3148
try :pass
except: pass
example# 3149
app_label , model_label = label . split ( '_STR:0_' )
example# 3150
try :pass
except: pass
example# 3151
app_config = apps . get_app_config ( app_label )
example# 3152
try: pass
except LookupError :pass
example# 3153
raise CommandError ( "Unknown application: %s" % app_label )
example# 3154
if app_config . models_module is None or app_config in excluded_apps :pass
example# 3155
continue
example# 3156
try :pass
except: pass
example# 3157
model = app_config . get_model ( model_label )
example# 3158
try: pass
except LookupError :pass
example# 3159
raise CommandError ( "Unknown model: %s.%s" % ( app_label , model_label ) )
example# 3161
if app_list_value is not None :pass
example# 3162
if model not in app_list_value :pass
example# 3163
app_list_value . append ( model )
example# 3164
try: pass
except ValueError :pass
example# 3165
if primary_keys :pass
example# 3166
raise CommandError ( '_STR:0_' )
example# 3167
app_label = label
example# 3168
try :pass
except: pass
example# 3169
app_config = apps . get_app_config ( app_label )
example# 3170
try: pass
except LookupError :pass
example# 3171
raise CommandError ( "Unknown application: %s" % app_label )
example# 3172
if app_config . models_module is None or app_config in excluded_apps :pass
example# 3173
continue
example# 3174
app_list [ app_config ] = None
example# 3175
if format not in serializers . get_public_serializer_formats ( ) :pass
example# 3176
try :pass
except: pass
example# 3177
serializers . get_serializer ( format )
example# 3178
try: pass
except serializers . SerializerDoesNotExist :pass
example# 3179
pass
example# 3180
raise CommandError ( "Unknown serialization format: %s" % format )
example# 3181
def get_objects ( ) :pass
example# 3182
for model in sort_dependencies ( app_list . items ( ) ) :pass
example# 3183
if model in excluded_models :pass
example# 3184
continue
example# 3185
if not model . _meta . proxy and router . allow_migrate ( using , model ) :pass
example# 3186
if use_base_manager :pass
example# 3187
objects = model . _base_manager
example# 3188
if True: pass
else :pass
example# 3189
objects = model . _default_manager
example# 3190
queryset = objects . using ( using ) . order_by ( model . _meta . pk . name )
example# 3191
if primary_keys :pass
example# 3192
queryset = queryset . filter ( pk__in = primary_keys )
example# 3193
for obj in queryset . iterator ( ) :pass
example# 3194
yield obj
example# 3195
try :pass
except: pass
example# 3196
self . stdout . ending = None
example# 3197
stream = open ( output , 'w' ) if output else None
example# 3198
try :pass
except: pass
example# 3200
try: pass
finally :pass
example# 3201
if stream :pass
example# 3202
stream . close ( )
example# 3203
try: pass
except Exception as e :pass
example# 3204
if show_traceback :pass
example# 3205
raise
example# 3206
raise CommandError ( '_STR:0_' % e )
example# 3207
def sort_dependencies ( app_list ) :pass
example# 3208
model_dependencies = [ ]
example# 3209
models = set ( )
example# 3210
for app_config , model_list in app_list :pass
example# 3211
if model_list is None :pass
example# 3212
model_list = app_config . get_models ( )
example# 3213
for model in model_list :pass
example# 3214
models . add ( model )
example# 3215
if hasattr ( model , '_STR:0_' ) :pass
example# 3216
deps = getattr ( model . natural_key , '_STR:0_' , [ ] )
example# 3217
if deps :pass
example# 3218
deps = [ apps . get_model ( dep ) for dep in deps ]
example# 3219
if True: pass
else :pass
example# 3220
deps = [ ]
example# 3221
for field in model . _meta . fields :pass
example# 3222
if hasattr ( field . rel , '_STR:0_' ) :pass
example# 3223
rel_model = field . rel . to
example# 3224
if hasattr ( rel_model , '_STR:0_' ) and rel_model != model :pass
example# 3225
deps . append ( rel_model )
example# 3226
for field in model . _meta . many_to_many :pass
example# 3227
if field . rel . through . _meta . auto_created :pass
example# 3228
rel_model = field . rel . to
example# 3229
if hasattr ( rel_model , '_STR:0_' ) and rel_model != model :pass
example# 3230
deps . append ( rel_model )
example# 3232
model_dependencies . reverse ( )
example# 3233
model_list = [ ]
example# 3234
while model_dependencies :pass
example# 3235
skipped = [ ]
example# 3236
changed = False
example# 3237
while model_dependencies :pass
example# 3238
model , deps = model_dependencies . pop ( )
example# 3239
found = True
example# 3240
for candidate in ( ( d not in models or d in model_list ) for d in deps ) :pass
example# 3241
if not candidate :pass
example# 3242
found = False
example# 3243
if found :pass
example# 3244
model_list . append ( model )
example# 3245
changed = True
example# 3246
if True: pass
else :pass
example# 3248
if not changed :pass
example# 3249
raise CommandError ( '_STR:0_' %  '_STR:2_' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )
example# 3250
model_dependencies = skipped
example# 3251
return model_list
example# 3252
import sys
example# 3253
from importlib import import_module
example# 3254
from django . apps import apps
example# 3255
from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
example# 3256
from django . core . management import call_command
example# 3257
from django . core . management . base import BaseCommand , CommandError
example# 3258
from django . core . management . color import no_style
example# 3259
from django . core . management . sql import sql_flush , emit_post_migrate_signal
example# 3260
from django . utils . six . moves import input
example# 3261
from django . utils import six
example# 3262
class Command ( BaseCommand ) :pass
example# 3263
help = ( '_STR:0_'  'migrations. Unmigrated apps will also have their initial_data '  'fixture reloaded. Does not achieve a "fresh install" state.' )
example# 3264
def add_arguments ( self , parser ) :pass
example# 3268
def handle ( self , ** options ) :pass
example# 3269
database = options . get ( '_STR:0_' )
example# 3270
connection = connections [ database ]
example# 3271
verbosity = options . get ( '_STR:0_' )
example# 3272
interactive = options . get ( '_STR:0_' )
example# 3273
reset_sequences = options . get ( '_STR:0_' , True )
example# 3274
allow_cascade = options . get ( '_STR:0_' , False )
example# 3275
inhibit_post_migrate = options . get ( '_STR:0_' , False )
example# 3276
self . style = no_style ( )
example# 3277
for app_config in apps . get_app_configs ( ) :pass
example# 3278
try :pass
except: pass
example# 3280
try: pass
except ImportError :pass
example# 3281
pass
example# 3283
if interactive :pass
example# 3284
confirm = input ( """You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type '_STR:3_' to continue, or '_STR:4_' to cancel: """ % connection . settings_dict [ '_STR:5_' ] )
example# 3285
if True: pass
else :pass
example# 3286
confirm = '_STR:0_'
example# 3287
if confirm == '_STR:0_' :pass
example# 3288
try :pass
except: pass
example# 3290
with connection . cursor ( ) as cursor :pass
example# 3291
for sql in sql_list :pass
example# 3292
cursor . execute ( sql )
example# 3293
try: pass
except Exception as e :pass
example# 3294
new_msg = (  "Database %s couldn't be flushed. Possible reasons:\n"  "  * The database isn't running or isn't configured correctly.\n"  "  * At least one of the expected database tables doesn't exist.\n"  "  * The SQL was invalid.\n"  "Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"  "The full error: %s" ) % ( connection . settings_dict [ 'NAME' ] , e )
example# 3296
if not inhibit_post_migrate :pass
example# 3297
self . emit_post_migrate ( verbosity , interactive , database )
example# 3298
if options . get ( '_STR:0_' ) :pass
example# 3300
if True: pass
else :pass
example# 3301
self . stdout . write ( '_STR:0_' )
example# 3302
@ staticmethod
def dummy(): pass
example# 3303
def emit_post_migrate ( verbosity , interactive , database ) :pass
example# 3304
all_models = [ ]
example# 3305
for app_config in apps . get_app_configs ( ) :pass
example# 3306
all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )
example# 3308
from __future__ import unicode_literals
example# 3309
from collections import OrderedDict
example# 3310
import keyword
example# 3311
import re
example# 3312
from django . core . management . base import BaseCommand , CommandError
example# 3313
from django . db import connections , DEFAULT_DB_ALIAS
example# 3314
class Command ( BaseCommand ) :pass
example# 3315
help = '_STR:0_'
example# 3316
requires_system_checks = False
example# 3317
db_module = '_STR:0_'
example# 3318
def add_arguments ( self , parser ) :pass
example# 3321
try :pass
except: pass
example# 3322
for line in self . handle_inspection ( options ) :pass
example# 3323
self . stdout . write ( "%s\n" % line )
example# 3324
try: pass
except NotImplementedError :pass
example# 3325
raise CommandError ( '_STR:0_' )
example# 3327
connection = connections [ options [ '_STR:0_' ] ]
example# 3328
table_name_filter = options . get ( '_STR:0_' )
example# 3330
strip_prefix = lambda s : s [ 1 : ] if s . startswith ( "u'" ) else s
example# 3331
with connection . cursor ( ) as cursor :pass
example# 3332
yield '_STR:0_'
example# 3333
yield '_STR:0_'
example# 3334
yield '_STR:0_'
example# 3335
yield '_STR:0_'
example# 3336
yield '_STR:0_'
example# 3337
yield '_STR:0_'
example# 3338
yield '_STR:0_'
example# 3339
yield '_STR:0_'
example# 3340
yield '_STR:0_'
example# 3341
yield '_STR:0_'
example# 3342
yield ''
example# 3343
yield '_STR:0_' % self . db_module
example# 3344
known_models = [ ]
example# 3345
for table_name in connection . introspection . table_names ( cursor ) :pass
example# 3346
if table_name_filter is not None and callable ( table_name_filter ) :pass
example# 3347
if not table_name_filter ( table_name ) :pass
example# 3348
continue
example# 3349
yield ''
example# 3350
yield ''
example# 3353
try :pass
except: pass
example# 3355
try: pass
except NotImplementedError :pass
example# 3356
relations = { }
example# 3357
try :pass
except: pass
example# 3359
try: pass
except NotImplementedError :pass
example# 3360
indexes = { }
example# 3361
used_column_names = [ ]
example# 3362
for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :pass
example# 3363
comment_notes = [ ]
example# 3364
extra_params = OrderedDict ( )
example# 3365
column_name = row [ 0 ]
example# 3366
is_relation = i in relations
example# 3368
extra_params . update ( params )
example# 3369
comment_notes . extend ( notes )
example# 3370
used_column_names . append ( att_name )
example# 3371
if column_name in indexes :pass
example# 3372
if indexes [ column_name ] [ '_STR:0_' ] :pass
example# 3373
extra_params [ '_STR:0_' ] = True
example# 3374
if True: pass
elif indexes [ column_name ] [ '_STR:0_' ] :pass
example# 3375
extra_params [ '_STR:0_' ] = True
example# 3376
if is_relation :pass
example# 3378
if rel_to in known_models :pass
example# 3379
field_type = 'ForeignKey(%s' % rel_to
example# 3380
if True: pass
else :pass
example# 3381
field_type = "ForeignKey('%s'" % rel_to
example# 3382
if True: pass
else :pass
example# 3384
extra_params . update ( field_params )
example# 3385
comment_notes . extend ( field_notes )
example# 3386
field_type += '_STR:0_'
example# 3388
if field_type == '_STR:0_' :pass
example# 3389
continue
example# 3390
if True: pass
elif field_type == '_STR:0_' and not connection . features . can_introspect_autofield :pass
example# 3391
comment_notes . append ( '_STR:0_' )
example# 3392
if row [ 6 ] :pass
example# 3393
if field_type == '_STR:0_' :pass
example# 3394
field_type = '_STR:0_'
example# 3395
if True: pass
else :pass
example# 3396
extra_params [ '_STR:0_' ] = True
example# 3397
if field_type not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 3398
extra_params [ '_STR:0_' ] = True
example# 3399
field_desc = '_STR:0_' % (  att_name ,   '' if '_STR:1_' in field_type else '_STR:2_' ,  field_type ,  )
example# 3400
if extra_params :pass
example# 3401
if not field_desc . endswith ( '_STR:0_' ) :pass
example# 3402
field_desc += '_STR:0_'
example# 3403
field_desc += '_STR:1_' . join ( [  '_STR:0_' % ( k , strip_prefix ( repr ( v ) ) )  for k , v in extra_params . items ( ) ] )
example# 3404
field_desc += '_STR:0_'
example# 3405
if comment_notes :pass
example# 3406
field_desc += '  # ' + ' ' . join ( comment_notes )
example# 3407
yield '_STR:0_' % field_desc
example# 3408
for meta_line in self . get_meta ( table_name ) :pass
example# 3409
yield meta_line
example# 3411
field_params = { }
example# 3412
field_notes = [ ]
example# 3413
new_name = col_name . lower ( )
example# 3414
if new_name != col_name :pass
example# 3415
field_notes . append ( '_STR:0_' )
example# 3416
if is_relation :pass
example# 3417
if new_name . endswith ( '_STR:0_' ) :pass
example# 3419
if True: pass
else :pass
example# 3420
field_params [ '_STR:0_' ] = col_name
example# 3423
field_notes . append ( '_STR:0_' )
example# 3426
new_name = new_name . replace ( '_STR:0_' , '_STR:1_' )
example# 3428
field_notes . append ( '_STR:0_' )
example# 3429
if new_name . startswith ( '_STR:0_' ) :pass
example# 3430
new_name = 'field%s' % new_name
example# 3431
field_notes . append ( '_STR:0_' )
example# 3432
if new_name . endswith ( '_STR:0_' ) :pass
example# 3433
new_name = '%sfield' % new_name
example# 3434
field_notes . append ( '_STR:0_' )
example# 3435
if keyword . iskeyword ( new_name ) :pass
example# 3436
new_name += '_STR:0_'
example# 3437
field_notes . append ( 'Field renamed because it was a Python reserved word.' )
example# 3438
if new_name [ 0 ] . isdigit ( ) :pass
example# 3439
new_name = 'number_%s' % new_name
example# 3440
field_notes . append ( '_STR:0_' )
example# 3441
if new_name in used_column_names :pass
example# 3442
num = 0
example# 3443
while '_STR:0_' % ( new_name , num ) in used_column_names :pass
example# 3444
num += 1
example# 3445
new_name = '_STR:0_' % ( new_name , num )
example# 3446
field_notes . append ( 'Field renamed because of name conflict.' )
example# 3447
if col_name != new_name and field_notes :pass
example# 3448
field_params [ '_STR:0_' ] = col_name
example# 3449
return new_name , field_params , field_notes
example# 3451
field_params = OrderedDict ( )
example# 3452
field_notes = [ ]
example# 3453
try :pass
except: pass
example# 3455
try: pass
except KeyError :pass
example# 3456
field_type = '_STR:0_'
example# 3457
field_notes . append ( '_STR:0_' )
example# 3458
if type ( field_type ) is tuple :pass
example# 3459
field_type , new_params = field_type
example# 3461
if field_type == 'CharField' and row [ 3 ] :pass
example# 3462
field_params [ 'max_length' ] = int ( row [ 3 ] )
example# 3463
if field_type == '_STR:0_' :pass
example# 3464
if row [ 4 ] is None or row [ 5 ] is None :pass
example# 3465
field_notes . append (  'max_digits and decimal_places have been guessed, as this '  'database handles decimal fields as float' )
example# 3466
field_params [ '_STR:0_' ] = row [ 4 ] if row [ 4 ] is not None else 10
example# 3467
field_params [ '_STR:0_' ] = row [ 5 ] if row [ 5 ] is not None else 5
example# 3468
if True: pass
else :pass
example# 3469
field_params [ '_STR:0_' ] = row [ 4 ]
example# 3470
field_params [ '_STR:0_' ] = row [ 5 ]
example# 3471
return field_type , field_params , field_notes
example# 3472
def get_meta ( self , table_name ) :pass
example# 3474
from __future__ import unicode_literals
example# 3475
import glob
example# 3476
import gzip
example# 3477
import os
example# 3478
import warnings
example# 3479
import zipfile
example# 3480
from django . apps import apps
example# 3481
from django . conf import settings
example# 3482
from django . core import serializers
example# 3483
from django . core . management . base import BaseCommand , CommandError
example# 3484
from django . core . management . color import no_style
example# 3485
from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS ,  IntegrityError , DatabaseError )
example# 3486
from django . utils import lru_cache
example# 3487
from django . utils . encoding import force_text
example# 3488
from django . utils . functional import cached_property
example# 3489
from django . utils . _os import upath
example# 3490
from itertools import product
example# 3491
try :pass
except: pass
example# 3492
import bz2
example# 3494
try: pass
except ImportError :pass
example# 3496
class Command ( BaseCommand ) :pass
example# 3497
help = '_STR:0_'
example# 3498
missing_args_message = ( '_STR:0_'  "path of at least one fixture in the command line." )
example# 3505
self . ignore = options . get ( '_STR:0_' )
example# 3506
self . using = options . get ( '_STR:0_' )
example# 3507
self . app_label = options . get ( '_STR:0_' )
example# 3508
self . hide_empty = options . get ( '_STR:0_' , False )
example# 3509
self . verbosity = options . get ( '_STR:0_' )
example# 3510
with transaction . atomic ( using = self . using ) :pass
example# 3511
self . loaddata ( fixture_labels )
example# 3512
if transaction . get_autocommit ( self . using ) :pass
example# 3513
connections [ self . using ] . close ( )
example# 3515
connection = connections [ self . using ]
example# 3516
self . fixture_count = 0
example# 3517
self . loaded_object_count = 0
example# 3518
self . fixture_object_count = 0
example# 3519
self . models = set ( )
example# 3520
self . serialization_formats = serializers . get_public_serializer_formats ( )
example# 3524
with connection . constraint_checks_disabled ( ) :pass
example# 3525
for fixture_label in fixture_labels :pass
example# 3526
self . load_label ( fixture_label )
example# 3527
table_names = [ model . _meta . db_table for model in self . models ]
example# 3528
try :pass
except: pass
example# 3529
connection . check_constraints ( table_names = table_names )
example# 3530
try: pass
except Exception as e :pass
example# 3532
raise
example# 3533
if self . loaded_object_count > 0 :pass
example# 3535
if sequence_sql :pass
example# 3537
self . stdout . write ( '_STR:0_' )
example# 3538
with connection . cursor ( ) as cursor :pass
example# 3539
for line in sequence_sql :pass
example# 3540
cursor . execute ( line )
example# 3543
pass
example# 3544
if True: pass
elif self . fixture_object_count == self . loaded_object_count :pass
example# 3545
self . stdout . write ( '_STR:0_' %  ( self . loaded_object_count , self . fixture_count ) )
example# 3546
if True: pass
else :pass
example# 3547
self . stdout . write ( '_STR:0_' %  ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )
example# 3548
def load_label ( self , fixture_label ) :pass
example# 3549
for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) :pass
example# 3550
_ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( fixture_file ) )
example# 3551
open_method , mode = self . compression_formats [ cmp_fmt ]
example# 3552
fixture = open_method ( fixture_file , mode )
example# 3553
try :pass
except: pass
example# 3554
self . fixture_count += 1
example# 3555
objects_in_fixture = 0
example# 3556
loaded_objects_in_fixture = 0
example# 3558
self . stdout . write ( '_STR:0_' %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )
example# 3560
for obj in objects :pass
example# 3561
objects_in_fixture += 1
example# 3563
loaded_objects_in_fixture += 1
example# 3564
self . models . add ( obj . object . __class__ )
example# 3565
try :pass
except: pass
example# 3566
obj . save ( using = self . using )
example# 3567
try: pass
except ( DatabaseError , IntegrityError ) as e :pass
example# 3568
e . args = ( "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s" % {  'app_label' : obj . object . _meta . app_label ,  'object_name' : obj . object . _meta . object_name ,  'pk' : obj . object . pk ,  'error_msg' : force_text ( e )  } , )
example# 3569
raise
example# 3570
self . loaded_object_count += loaded_objects_in_fixture
example# 3571
self . fixture_object_count += objects_in_fixture
example# 3572
try: pass
except Exception as e :pass
example# 3573
if not isinstance ( e , CommandError ) :pass
example# 3574
e . args = ( '_STR:0_' % ( fixture_file , e ) , )
example# 3575
raise
example# 3576
try: pass
finally :pass
example# 3577
fixture . close ( )
example# 3580
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 3581
def find_fixtures ( self , fixture_label ) :pass
example# 3582
fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )
example# 3584
cmp_fmts = list ( self . compression_formats . keys ( ) ) if cmp_fmt is None else [ cmp_fmt ]
example# 3585
ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ]
example# 3587
self . stdout . write ( '_STR:0_' % fixture_name )
example# 3588
if os . path . isabs ( fixture_name ) :pass
example# 3589
fixture_dirs = [ os . path . dirname ( fixture_name ) ]
example# 3590
fixture_name = os . path . basename ( fixture_name )
example# 3591
if True: pass
else :pass
example# 3592
fixture_dirs = self . fixture_dirs
example# 3593
if os . path . sep in fixture_name :pass
example# 3594
fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) )  for dir_ in fixture_dirs ]
example# 3595
fixture_name = os . path . basename ( fixture_name )
example# 3597
targets = set ( '_STR:0_' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )
example# 3598
fixture_files = [ ]
example# 3599
for fixture_dir in fixture_dirs :pass
example# 3600
if self . verbosity >= 2 :pass
example# 3601
self . stdout . write ( '_STR:0_' % humanize ( fixture_dir ) )
example# 3602
fixture_files_in_dir = [ ]
example# 3603
for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '_STR:0_' ) ) :pass
example# 3604
if os . path . basename ( candidate ) in targets :pass
example# 3607
self . stdout . write ( '_STR:0_' %  ( fixture_name , humanize ( fixture_dir ) ) )
example# 3609
raise CommandError (  '_STR:0_' %  ( fixture_name , humanize ( fixture_dir ) ) )
example# 3610
fixture_files . extend ( fixture_files_in_dir )
example# 3611
if fixture_name != '_STR:0_' and not fixture_files :pass
example# 3612
warnings . warn ( '_STR:0_' % fixture_name )
example# 3613
return fixture_files
example# 3614
@ cached_property
def dummy(): pass
example# 3615
def fixture_dirs ( self ) :pass
example# 3616
dirs = [ ]
example# 3617
for app_config in apps . get_app_configs ( ) :pass
example# 3618
if self . app_label and app_config . label != self . app_label :pass
example# 3619
continue
example# 3620
app_dir = os . path . join ( app_config . path , '_STR:0_' )
example# 3621
if os . path . isdir ( app_dir ) :pass
example# 3622
dirs . append ( app_dir )
example# 3623
dirs . extend ( list ( settings . FIXTURE_DIRS ) )
example# 3624
dirs . append ( '' )
example# 3625
dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
example# 3626
return dirs
example# 3627
def parse_name ( self , fixture_name ) :pass
example# 3630
cmp_fmt = parts [ - 1 ]
example# 3631
parts = parts [ : - 1 ]
example# 3632
if True: pass
else :pass
example# 3633
cmp_fmt = None
example# 3634
if len ( parts ) > 1 :pass
example# 3635
if parts [ - 1 ] in self . serialization_formats :pass
example# 3636
ser_fmt = parts [ - 1 ]
example# 3637
parts = parts [ : - 1 ]
example# 3638
if True: pass
else :pass
example# 3639
raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
example# 3640
if True: pass
else :pass
example# 3641
ser_fmt = None
example# 3642
name = '_STR:0_' . join ( parts )
example# 3643
return name , ser_fmt , cmp_fmt
example# 3644
class SingleZipReader ( zipfile . ZipFile ) :pass
example# 3646
zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
example# 3648
raise ValueError ( '_STR:0_' )
example# 3649
def read ( self ) :pass
example# 3651
def humanize ( dirname ) :pass
example# 3652
return "'%s'" % dirname if dirname else '_STR:0_'
example# 3653
from __future__ import unicode_literals
example# 3654
import fnmatch
example# 3655
import glob
example# 3656
import io
example# 3657
import os
example# 3658
import re
example# 3659
import sys
example# 3660
from itertools import dropwhile
example# 3661
import django
example# 3662
from django . core . management . base import CommandError , BaseCommand
example# 3663
from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
example# 3664
from django . utils . encoding import force_str
example# 3665
from django . utils . functional import total_ordering
example# 3666
from django . utils import six
example# 3667
from django . utils . text import get_text_list
example# 3668
from django . utils . jslex import prepare_js_for_gettext
example# 3670
STATUS_OK = 0
example# 3671
def check_programs ( * programs ) :pass
example# 3672
for program in programs :pass
example# 3673
if find_command ( program ) is None :pass
example# 3674
raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
example# 3675
@ total_ordering
def dummy(): pass
example# 3676
class TranslatableFile ( object ) :pass
example# 3678
self . file = file_name
example# 3679
self . dirpath = dirpath
example# 3680
self . locale_dir = locale_dir
example# 3681
def __repr__ ( self ) :pass
example# 3682
return '_STR:0_' % os . sep . join ( [ self . dirpath , self . file ] )
example# 3683
def __eq__ ( self , other ) :pass
example# 3684
return self . path == other . path
example# 3685
def __lt__ ( self , other ) :pass
example# 3686
return self . path < other . path
example# 3687
@ property
def dummy(): pass
example# 3688
def path ( self ) :pass
example# 3689
return os . path . join ( self . dirpath , self . file )
example# 3691
from django . conf import settings
example# 3692
from django . utils . translation import templatize
example# 3694
command . stdout . write ( '_STR:0_' % ( self . file , self . dirpath ) )
example# 3695
_ , file_ext = os . path . splitext ( self . file )
example# 3696
if domain == '_STR:0_' and file_ext in command . extensions :pass
example# 3697
is_templatized = True
example# 3698
orig_file = os . path . join ( self . dirpath , self . file )
example# 3699
with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :pass
example# 3700
src_data = fp . read ( )
example# 3701
src_data = prepare_js_for_gettext ( src_data )
example# 3702
thefile = '%s.c' % self . file
example# 3703
work_file = os . path . join ( self . dirpath , thefile )
example# 3705
fp . write ( src_data )
example# 3707
args . append ( work_file )
example# 3708
if True: pass
elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :pass
example# 3709
thefile = self . file
example# 3710
orig_file = os . path . join ( self . dirpath , self . file )
example# 3711
is_templatized = file_ext in command . extensions
example# 3712
if is_templatized :pass
example# 3714
src_data = fp . read ( )
example# 3715
thefile = '%s.py' % self . file
example# 3718
fp . write ( content )
example# 3719
work_file = os . path . join ( self . dirpath , thefile )
example# 3721
args . append ( work_file )
example# 3722
if True: pass
else :pass
example# 3723
return
example# 3724
msgs , errors , status = popen_wrapper ( args )
example# 3725
if errors :pass
example# 3726
if status != STATUS_OK :pass
example# 3727
if is_templatized :pass
example# 3728
os . unlink ( work_file )
example# 3729
raise CommandError (  '_STR:0_' %  ( self . file , errors ) )
example# 3731
command . stdout . write ( errors )
example# 3732
if msgs :pass
example# 3734
msgs = msgs . decode ( '_STR:0_' )
example# 3735
potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
example# 3736
if is_templatized :pass
example# 3737
if os . name == '_STR:0_' :pass
example# 3738
old = '_STR:0_' + work_file
example# 3739
new = '_STR:0_' + orig_file
example# 3740
if True: pass
else :pass
example# 3741
old = '_STR:0_' + work_file [ 2 : ]
example# 3742
new = '_STR:0_' + orig_file [ 2 : ]
example# 3743
msgs = msgs . replace ( old , new )
example# 3745
if is_templatized :pass
example# 3746
os . unlink ( work_file )
example# 3748
if os . path . exists ( potfile ) :pass
example# 3750
if True: pass
else :pass
example# 3751
msgs = msgs . replace ( '_STR:0_' , '_STR:1_' )
example# 3753
fp . write ( msgs )
example# 3754
class Command ( BaseCommand ) :pass
example# 3755
help = ( '_STR:0_'  '_STR:1_'  '_STR:2_'  '_STR:3_'  '_STR:4_' )
example# 3756
requires_system_checks = False
example# 3757
leave_locale_alone = True
example# 3758
msgmerge_options = [ '_STR:0_' , '_STR:1_' ]
example# 3759
msguniq_options = [ '_STR:0_' ]
example# 3760
msgattrib_options = [ '_STR:0_' ]
example# 3761
xgettext_options = [ '_STR:0_' , '_STR:1_' ]
example# 3776
locale = options . get ( '_STR:0_' )
example# 3777
exclude = options . get ( '_STR:0_' )
example# 3778
self . domain = options . get ( '_STR:0_' )
example# 3779
self . verbosity = options . get ( '_STR:0_' )
example# 3780
process_all = options . get ( '_STR:0_' )
example# 3781
extensions = options . get ( '_STR:0_' )
example# 3782
self . symlinks = options . get ( '_STR:0_' )
example# 3783
ignore_patterns = options . get ( '_STR:0_' )
example# 3784
if options . get ( '_STR:0_' ) :pass
example# 3786
self . ignore_patterns = list ( set ( ignore_patterns ) )
example# 3787
if options . get ( '_STR:0_' ) :pass
example# 3788
self . msgmerge_options = self . msgmerge_options [ : ] + [ '_STR:0_' ]
example# 3789
self . msguniq_options = self . msguniq_options [ : ] + [ '_STR:0_' ]
example# 3790
self . msgattrib_options = self . msgattrib_options [ : ] + [ '_STR:0_' ]
example# 3791
self . xgettext_options = self . xgettext_options [ : ] + [ '_STR:0_' ]
example# 3792
if options . get ( '_STR:0_' ) :pass
example# 3793
self . msgmerge_options = self . msgmerge_options [ : ] + [ '_STR:0_' ]
example# 3794
self . msguniq_options = self . msguniq_options [ : ] + [ '_STR:0_' ]
example# 3795
self . msgattrib_options = self . msgattrib_options [ : ] + [ '_STR:0_' ]
example# 3796
self . xgettext_options = self . xgettext_options [ : ] + [ '_STR:0_' ]
example# 3797
self . no_obsolete = options . get ( '_STR:0_' )
example# 3798
self . keep_pot = options . get ( '_STR:0_' )
example# 3799
if self . domain not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 3800
raise CommandError ( "currently makemessages only supports domains "  "'django' and 'djangojs'" )
example# 3801
if self . domain == '_STR:0_' :pass
example# 3802
exts = extensions if extensions else [ '_STR:0_' ]
example# 3803
if True: pass
else :pass
example# 3805
self . extensions = handle_extensions ( exts )
example# 3806
if ( locale is None and not exclude and not process_all ) or self . domain is None :pass
example# 3807
raise CommandError ( '_STR:0_' % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
example# 3808
from django . conf import settings
example# 3809
if settings . configured :pass
example# 3810
settings . USE_I18N = True
example# 3811
if True: pass
else :pass
example# 3812
settings . configure ( USE_I18N = True )
example# 3814
self . stdout . write ( '_STR:0_'  % get_text_list ( list ( self . extensions ) , 'and' ) )
example# 3816
self . locale_paths = [ ]
example# 3817
self . default_locale_path = None
example# 3818
if os . path . isdir ( os . path . join ( '_STR:0_' , '_STR:1_' ) ) :pass
example# 3819
self . locale_paths = [ os . path . abspath ( os . path . join ( '_STR:0_' , '_STR:1_' ) ) ]
example# 3820
self . default_locale_path = self . locale_paths [ 0 ]
example# 3821
self . invoked_for_django = True
example# 3822
if True: pass
else :pass
example# 3823
self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )
example# 3824
if os . path . isdir ( '_STR:0_' ) :pass
example# 3825
self . locale_paths . append ( os . path . abspath ( '_STR:0_' ) )
example# 3826
if self . locale_paths :pass
example# 3827
self . default_locale_path = self . locale_paths [ 0 ]
example# 3828
if not os . path . exists ( self . default_locale_path ) :pass
example# 3829
os . makedirs ( self . default_locale_path )
example# 3830
locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )
example# 3831
all_locales = map ( os . path . basename , locale_dirs )
example# 3832
if process_all :pass
example# 3833
locales = all_locales
example# 3834
if True: pass
else :pass
example# 3835
locales = locale or all_locales
example# 3836
locales = set ( locales ) - set ( exclude )
example# 3837
if locales :pass
example# 3839
check_programs ( '_STR:0_' )
example# 3840
try :pass
except: pass
example# 3841
potfiles = self . build_potfiles ( )
example# 3842
for locale in locales :pass
example# 3844
self . stdout . write ( '_STR:0_' % locale )
example# 3845
for potfile in potfiles :pass
example# 3847
try: pass
finally :pass
example# 3848
if not self . keep_pot :pass
example# 3849
self . remove_potfiles ( )
example# 3850
def build_potfiles ( self ) :pass
example# 3851
file_list = self . find_files ( "." )
example# 3852
self . remove_potfiles ( )
example# 3853
for f in file_list :pass
example# 3854
try :pass
except: pass
example# 3856
try: pass
except UnicodeDecodeError :pass
example# 3857
self . stdout . write ( '_STR:0_' % ( f . file , f . dirpath ) )
example# 3858
potfiles = [ ]
example# 3859
for path in self . locale_paths :pass
example# 3860
potfile = os . path . join ( path , '_STR:0_' % str ( self . domain ) )
example# 3861
if not os . path . exists ( potfile ) :pass
example# 3862
continue
example# 3863
args = [ '_STR:0_' ] + self . msguniq_options + [ potfile ]
example# 3864
msgs , errors , status = popen_wrapper ( args )
example# 3866
msgs = msgs . decode ( '_STR:0_' )
example# 3867
if errors :pass
example# 3868
if status != STATUS_OK :pass
example# 3869
raise CommandError (  '_STR:0_' % errors )
example# 3871
self . stdout . write ( errors )
example# 3873
fp . write ( msgs )
example# 3874
potfiles . append ( potfile )
example# 3875
return potfiles
example# 3876
def remove_potfiles ( self ) :pass
example# 3877
for path in self . locale_paths :pass
example# 3878
pot_path = os . path . join ( path , '_STR:0_' % str ( self . domain ) )
example# 3879
if os . path . exists ( pot_path ) :pass
example# 3880
os . unlink ( pot_path )
example# 3881
def find_files ( self , root ) :pass
example# 3882
def is_ignored ( path , ignore_patterns ) :pass
example# 3883
filename = os . path . basename ( path )
example# 3884
ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
example# 3885
return any ( ignore ( pattern ) for pattern in ignore_patterns )
example# 3886
dir_suffix = '%s*' % os . sep
example# 3887
norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ]
example# 3888
all_files = [ ]
example# 3890
for dirname in dirnames [ : ] :pass
example# 3891
if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :pass
example# 3892
dirnames . remove ( dirname )
example# 3894
self . stdout . write ( '_STR:0_' % dirname )
example# 3895
if True: pass
elif dirname == '_STR:0_' :pass
example# 3896
dirnames . remove ( dirname )
example# 3897
self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
example# 3898
for filename in filenames :pass
example# 3899
file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )
example# 3900
if is_ignored ( file_path , self . ignore_patterns ) :pass
example# 3902
self . stdout . write ( '_STR:0_' % ( filename , dirpath ) )
example# 3903
if True: pass
else :pass
example# 3904
locale_dir = None
example# 3905
for path in self . locale_paths :pass
example# 3906
if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :pass
example# 3907
locale_dir = path
example# 3908
break
example# 3909
if not locale_dir :pass
example# 3910
locale_dir = self . default_locale_path
example# 3911
if not locale_dir :pass
example# 3912
raise CommandError (  '_STR:0_' % file_path )
example# 3913
all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
example# 3914
return sorted ( all_files )
example# 3915
def write_po_file ( self , potfile , locale ) :pass
example# 3916
basedir = os . path . join ( os . path . dirname ( potfile ) , locale , '_STR:0_' )
example# 3917
if not os . path . isdir ( basedir ) :pass
example# 3918
os . makedirs ( basedir )
example# 3919
pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )
example# 3920
if os . path . exists ( pofile ) :pass
example# 3921
args = [ '_STR:0_' ] + self . msgmerge_options + [ pofile , potfile ]
example# 3922
msgs , errors , status = popen_wrapper ( args )
example# 3924
msgs = msgs . decode ( '_STR:0_' )
example# 3925
if errors :pass
example# 3926
if status != STATUS_OK :pass
example# 3927
raise CommandError (  '_STR:0_' % errors )
example# 3929
self . stdout . write ( errors )
example# 3930
if True: pass
else :pass
example# 3932
msgs = fp . read ( )
example# 3933
if not self . invoked_for_django :pass
example# 3934
msgs = self . copy_plural_forms ( msgs , locale )
example# 3935
msgs = msgs . replace (  '_STR:0_' % self . domain , "" )
example# 3937
fp . write ( msgs )
example# 3938
if self . no_obsolete :pass
example# 3939
args = [ '_STR:0_' ] + self . msgattrib_options + [ '_STR:1_' , pofile , pofile ]
example# 3940
msgs , errors , status = popen_wrapper ( args )
example# 3941
if errors :pass
example# 3942
if status != STATUS_OK :pass
example# 3943
raise CommandError (  '_STR:0_' % errors )
example# 3945
self . stdout . write ( errors )
example# 3946
def copy_plural_forms ( self , msgs , locale ) :pass
example# 3947
django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
example# 3948
if self . domain == '_STR:0_' :pass
example# 3950
if True: pass
else :pass
example# 3951
domains = ( '_STR:0_' , )
example# 3952
for domain in domains :pass
example# 3953
django_po = os . path . join ( django_dir , '_STR:0_' , '_STR:1_' , locale , '_STR:2_' , '%s.po' % domain )
example# 3954
if os . path . exists ( django_po ) :pass
example# 3956
m = plural_forms_re . search ( fp . read ( ) )
example# 3957
if m :pass
example# 3958
plural_form_line = force_str ( m . group ( '_STR:0_' ) )
example# 3960
self . stdout . write ( '_STR:0_' % plural_form_line )
example# 3961
lines = [ ]
example# 3962
found = False
example# 3963
for line in msgs . split ( '\n' ) :pass
example# 3964
if not found and ( not line or plural_forms_re . search ( line ) ) :pass
example# 3965
line = '%s\n' % plural_form_line
example# 3966
found = True
example# 3967
lines . append ( line )
example# 3968
msgs = '\n' . join ( lines )
example# 3969
break
example# 3970
return msgs
example# 3971
import sys
example# 3972
import os
example# 3973
import operator
example# 3974
from django . apps import apps
example# 3975
from django . core . management . base import BaseCommand , CommandError
example# 3976
from django . db . migrations import Migration
example# 3977
from django . db . migrations . loader import MigrationLoader
example# 3978
from django . db . migrations . autodetector import MigrationAutodetector
example# 3979
from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
example# 3980
from django . db . migrations . state import ProjectState
example# 3981
from django . db . migrations . writer import MigrationWriter
example# 3982
from django . utils . six . moves import reduce
example# 3983
class Command ( BaseCommand ) :pass
example# 3984
help = '_STR:0_'
example# 3992
self . verbosity = options . get ( '_STR:0_' )
example# 3993
self . interactive = options . get ( '_STR:0_' )
example# 3994
self . dry_run = options . get ( '_STR:0_' , False )
example# 3995
self . merge = options . get ( '_STR:0_' , False )
example# 3996
self . empty = options . get ( '_STR:0_' , False )
example# 3997
app_labels = set ( app_labels )
example# 3998
bad_app_labels = set ( )
example# 3999
for app_label in app_labels :pass
example# 4000
try :pass
except: pass
example# 4001
apps . get_app_config ( app_label )
example# 4002
try: pass
except LookupError :pass
example# 4003
bad_app_labels . add ( app_label )
example# 4004
if bad_app_labels :pass
example# 4005
for app_label in bad_app_labels :pass
example# 4006
self . stderr . write ( '_STR:0_' % app_label )
example# 4009
conflicts = loader . detect_conflicts ( )
example# 4010
if conflicts and not self . merge :pass
example# 4011
name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
example# 4012
raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
example# 4013
if self . merge and not conflicts :pass
example# 4014
self . stdout . write ( '_STR:0_' )
example# 4015
return
example# 4016
if self . merge and conflicts :pass
example# 4019
if self . empty :pass
example# 4020
if not app_labels :pass
example# 4021
raise CommandError ( '_STR:0_' )
example# 4022
changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
example# 4024
self . write_migration_files ( changes )
example# 4025
return
example# 4029
self . stdout . write ( '_STR:0_' % app_labels . pop ( ) )
example# 4031
self . stdout . write ( '_STR:0_' % ( '_STR:1_' . join ( app_labels ) ) )
example# 4032
if True: pass
else :pass
example# 4033
self . stdout . write ( '_STR:0_' )
example# 4034
return
example# 4035
self . write_migration_files ( changes )
example# 4036
def write_migration_files ( self , changes ) :pass
example# 4037
directory_created = { }
example# 4038
for app_label , app_migrations in changes . items ( ) :pass
example# 4040
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % app_label ) + "\n" )
example# 4041
for migration in app_migrations :pass
example# 4042
writer = MigrationWriter ( migration )
example# 4044
self . stdout . write ( '_STR:0_' % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
example# 4045
for operation in migration . operations :pass
example# 4046
self . stdout . write ( '_STR:0_' % operation . describe ( ) )
example# 4047
if not self . dry_run :pass
example# 4048
migrations_directory = os . path . dirname ( writer . path )
example# 4049
if not directory_created . get ( app_label , False ) :pass
example# 4050
if not os . path . isdir ( migrations_directory ) :pass
example# 4051
os . mkdir ( migrations_directory )
example# 4052
init_path = os . path . join ( migrations_directory , '_STR:0_' )
example# 4053
if not os . path . isfile ( init_path ) :pass
example# 4054
open ( init_path , "w" ) . close ( )
example# 4055
directory_created [ app_label ] = True
example# 4056
migration_string = writer . as_string ( )
example# 4057
with open ( writer . path , "wb" ) as fh :pass
example# 4058
fh . write ( migration_string )
example# 4060
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % writer . filename ) + "\n" )
example# 4061
self . stdout . write ( "%s\n" % writer . as_string ( ) )
example# 4062
def handle_merge ( self , loader , conflicts ) :pass
example# 4063
if self . interactive :pass
example# 4064
questioner = InteractiveMigrationQuestioner ( )
example# 4065
if True: pass
else :pass
example# 4066
questioner = MigrationQuestioner ( defaults = { '_STR:0_' : True } )
example# 4067
for app_label , migration_names in conflicts . items ( ) :pass
example# 4068
merge_migrations = [ ]
example# 4069
for migration_name in migration_names :pass
example# 4070
migration = loader . get_migration ( app_label , migration_name )
example# 4072
merge_migrations . append ( migration )
example# 4073
common_ancestor = None
example# 4074
for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :pass
example# 4075
if reduce ( operator . eq , level ) :pass
example# 4076
common_ancestor = level [ 0 ]
example# 4077
if True: pass
else :pass
example# 4078
break
example# 4079
if common_ancestor is None :pass
example# 4080
raise ValueError ( '_STR:0_' % migration_names )
example# 4081
for migration in merge_migrations :pass
example# 4082
migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
example# 4083
migration . merged_operations = [ ]
example# 4084
for node_app , node_name in migration . branch :pass
example# 4085
migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
example# 4087
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % app_label ) )
example# 4088
for migration in merge_migrations :pass
example# 4089
self . stdout . write ( self . style . MIGRATE_LABEL ( '_STR:0_' % migration . name ) )
example# 4090
for operation in migration . merged_operations :pass
example# 4091
self . stdout . write ( '_STR:0_' % operation . describe ( ) )
example# 4092
if questioner . ask_merge ( app_label ) :pass
example# 4093
numbers = [  MigrationAutodetector . parse_number ( migration . name )  for migration in merge_migrations  ]
example# 4094
try :pass
except: pass
example# 4095
biggest_number = max ( [ x for x in numbers if x is not None ] )
example# 4096
try: pass
except ValueError :pass
example# 4097
biggest_number = 1
example# 4100
writer = MigrationWriter ( new_migration )
example# 4101
with open ( writer . path , "wb" ) as fh :pass
example# 4102
fh . write ( writer . as_string ( ) )
example# 4104
self . stdout . write ( '_STR:0_' % writer . path )
example# 4105
from __future__ import unicode_literals
example# 4106
from collections import OrderedDict
example# 4107
from importlib import import_module
example# 4108
import itertools
example# 4109
import traceback
example# 4110
from django . apps import apps
example# 4111
from django . core . management import call_command
example# 4112
from django . core . management . base import BaseCommand , CommandError
example# 4113
from django . core . management . color import no_style
example# 4114
from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
example# 4115
from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
example# 4116
from django . db . migrations . executor import MigrationExecutor
example# 4117
from django . db . migrations . loader import MigrationLoader , AmbiguityError
example# 4118
from django . db . migrations . state import ProjectState
example# 4119
from django . db . migrations . autodetector import MigrationAutodetector
example# 4120
from django . utils . module_loading import module_has_submodule
example# 4121
class Command ( BaseCommand ) :pass
example# 4122
help = '_STR:0_'
example# 4123
def add_arguments ( self , parser ) :pass
example# 4124
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' ,  help = '_STR:2_' )
example# 4125
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' ,  help = '_STR:2_' )
example# 4126
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' , default = True ,  help = '_STR:3_' )
example# 4127
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' , default = True ,  help = '_STR:3_' )
example# 4128
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the "default" database.' )
example# 4129
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' , default = False ,  help = '_STR:3_' )
example# 4130
parser . add_argument ( '_STR:0_' , '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = '_STR:4_' )
example# 4131
def handle ( self , * args , ** options ) :pass
example# 4132
self . verbosity = options . get ( '_STR:0_' )
example# 4133
self . interactive = options . get ( '_STR:0_' )
example# 4134
self . show_traceback = options . get ( '_STR:0_' )
example# 4135
self . load_initial_data = options . get ( '_STR:0_' )
example# 4136
self . test_database = options . get ( '_STR:0_' , False )
example# 4137
for app_config in apps . get_app_configs ( ) :pass
example# 4138
if module_has_submodule ( app_config . module , '_STR:0_' ) :pass
example# 4139
import_module ( '_STR:0_' , app_config . name )
example# 4140
db = options . get ( '_STR:0_' )
example# 4141
connection = connections [ db ]
example# 4142
if options . get ( "list" , False ) :pass
example# 4143
return self . show_migration_list ( connection , [ options [ '_STR:0_' ] ] if options [ '_STR:0_' ] else None )
example# 4144
executor = MigrationExecutor ( connection , self . migration_progress_callback )
example# 4145
conflicts = executor . loader . detect_conflicts ( )
example# 4146
if conflicts :pass
example# 4147
name_str = "; " . join (  '_STR:0_' % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
example# 4148
raise CommandError ( '_STR:0_' % name_str )
example# 4149
run_syncdb = False
example# 4150
target_app_labels_only = True
example# 4151
if options [ '_STR:0_' ] and options [ '_STR:1_' ] :pass
example# 4152
app_label , migration_name = options [ '_STR:0_' ] , options [ '_STR:1_' ]
example# 4153
if app_label not in executor . loader . migrated_apps :pass
example# 4154
raise CommandError ( '_STR:0_' % app_label )
example# 4155
if migration_name == "zero" :pass
example# 4156
targets = [ ( app_label , None ) ]
example# 4157
if True: pass
else :pass
example# 4158
try :pass
except: pass
example# 4159
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
example# 4160
try: pass
except AmbiguityError :pass
example# 4161
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4162
try: pass
except KeyError :pass
example# 4163
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4164
targets = [ ( app_label , migration . name ) ]
example# 4165
target_app_labels_only = False
example# 4166
if True: pass
elif options [ '_STR:0_' ] :pass
example# 4167
app_label = options [ '_STR:0_' ]
example# 4168
if app_label not in executor . loader . migrated_apps :pass
example# 4169
raise CommandError ( '_STR:0_' % app_label )
example# 4170
targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ]
example# 4171
if True: pass
else :pass
example# 4172
targets = executor . loader . graph . leaf_nodes ( )
example# 4173
run_syncdb = True
example# 4174
plan = executor . migration_plan ( targets )
example# 4175
if self . verbosity >= 1 :pass
example# 4176
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4177
if run_syncdb and executor . loader . unmigrated_apps :pass
example# 4178
self . stdout . write ( self . style . MIGRATE_LABEL ( '_STR:1_' ) + ( ", " . join ( executor . loader . unmigrated_apps ) ) )
example# 4179
if target_app_labels_only :pass
example# 4180
self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
example# 4181
if True: pass
else :pass
example# 4182
if targets [ 0 ] [ 1 ] is None :pass
example# 4183
self . stdout . write ( self . style . MIGRATE_LABEL ( '_STR:0_' ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
example# 4184
if True: pass
else :pass
example# 4185
self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + '_STR:0_' % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
example# 4186
if run_syncdb and executor . loader . unmigrated_apps :pass
example# 4187
if self . verbosity >= 1 :pass
example# 4188
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4189
created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )
example# 4190
if True: pass
else :pass
example# 4191
created_models = [ ]
example# 4192
if options . get ( "test_flush" , False ) :pass
example# 4195
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4196
if not plan :pass
example# 4198
self . stdout . write ( '_STR:0_' )
example# 4199
autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )
example# 4200
changes = autodetector . changes ( graph = executor . loader . graph )
example# 4201
if changes :pass
example# 4202
self . stdout . write ( self . style . NOTICE ( '_STR:0_' ) )
example# 4203
self . stdout . write ( self . style . NOTICE ( '_STR:0_' ) )
example# 4204
if True: pass
else :pass
example# 4205
executor . migrate ( targets , plan , fake = options . get ( "fake" , False ) )
example# 4206
emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
example# 4207
def migration_progress_callback ( self , action , migration , fake = False ) :pass
example# 4209
if action == '_STR:0_' :pass
example# 4210
self . stdout . write ( '_STR:0_' % migration , ending = "" )
example# 4211
self . stdout . flush ( )
example# 4212
if True: pass
elif action == "apply_success" :pass
example# 4213
if fake :pass
example# 4214
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4215
if True: pass
else :pass
example# 4216
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4217
if True: pass
elif action == "unapply_start" :pass
example# 4218
self . stdout . write ( '_STR:0_' % migration , ending = "" )
example# 4219
self . stdout . flush ( )
example# 4220
if True: pass
elif action == '_STR:0_' :pass
example# 4221
if fake :pass
example# 4222
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4223
if True: pass
else :pass
example# 4224
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4225
def sync_apps ( self , connection , app_labels ) :pass
example# 4226
cursor = connection . cursor ( )
example# 4227
try :pass
except: pass
example# 4228
tables = connection . introspection . table_names ( cursor )
example# 4229
seen_models = connection . introspection . installed_models ( tables )
example# 4230
created_models = set ( )
example# 4231
pending_references = { }
example# 4232
all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
example# 4233
def model_installed ( model ) :pass
example# 4234
opts = model . _meta
example# 4235
converter = connection . introspection . table_name_converter
example# 4236
return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
example# 4237
manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
example# 4238
create_models = set ( itertools . chain ( * manifest . values ( ) ) )
example# 4239
emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
example# 4241
self . stdout . write ( '_STR:0_' )
example# 4242
with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :pass
example# 4243
for app_name , model_list in manifest . items ( ) :pass
example# 4244
for model in model_list :pass
example# 4246
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4247
sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
example# 4248
seen_models . add ( model )
example# 4249
created_models . add ( model )
example# 4250
for refto , refs in references . items ( ) :pass
example# 4251
pending_references . setdefault ( refto , [ ] ) . extend ( refs )
example# 4252
if refto in seen_models :pass
example# 4253
sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )
example# 4254
sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )
example# 4256
self . stdout . write ( "    Creating table %s\n" % model . _meta . db_table )
example# 4257
for statement in sql :pass
example# 4258
cursor . execute ( statement )
example# 4259
tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
example# 4260
try: pass
finally :pass
example# 4261
cursor . close ( )
example# 4262
cursor = connection . cursor ( )
example# 4263
try :pass
except: pass
example# 4265
self . stdout . write ( '_STR:0_' )
example# 4266
for app_name , model_list in manifest . items ( ) :pass
example# 4267
for model in model_list :pass
example# 4268
if model in created_models :pass
example# 4269
custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )
example# 4270
if custom_sql :pass
example# 4272
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4273
try :pass
except: pass
example# 4274
with transaction . atomic ( using = connection . alias ) :pass
example# 4275
for sql in custom_sql :pass
example# 4276
cursor . execute ( sql )
example# 4277
try: pass
except Exception as e :pass
example# 4278
self . stderr . write ( "    Failed to install custom SQL for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
example# 4279
if self . show_traceback :pass
example# 4280
traceback . print_exc ( )
example# 4281
if True: pass
else :pass
example# 4283
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4285
self . stdout . write ( '_STR:0_' )
example# 4286
for app_name , model_list in manifest . items ( ) :pass
example# 4287
for model in model_list :pass
example# 4288
if model in created_models :pass
example# 4289
index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
example# 4290
if index_sql :pass
example# 4292
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4293
try :pass
except: pass
example# 4294
with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :pass
example# 4295
for sql in index_sql :pass
example# 4296
cursor . execute ( sql )
example# 4297
try: pass
except Exception as e :pass
example# 4298
self . stderr . write ( '_STR:0_' % ( app_name , model . _meta . object_name , e ) )
example# 4299
try: pass
finally :pass
example# 4300
cursor . close ( )
example# 4301
if self . load_initial_data :pass
example# 4302
for app_label in app_labels :pass
example# 4303
call_command ( '_STR:0_' , '_STR:1_' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
example# 4304
return created_models
example# 4305
def show_migration_list ( self , connection , app_names = None ) :pass
example# 4306
loader = MigrationLoader ( connection )
example# 4307
graph = loader . graph
example# 4308
if app_names :pass
example# 4309
invalid_apps = [ ]
example# 4310
for app_name in app_names :pass
example# 4311
if app_name not in loader . migrated_apps :pass
example# 4312
invalid_apps . append ( app_name )
example# 4313
if invalid_apps :pass
example# 4314
raise CommandError ( '_STR:0_' % ( ", " . join ( invalid_apps ) ) )
example# 4315
if True: pass
else :pass
example# 4316
app_names = sorted ( loader . migrated_apps )
example# 4317
for app_name in app_names :pass
example# 4318
self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
example# 4319
shown = set ( )
example# 4320
for node in graph . leaf_nodes ( app_name ) :pass
example# 4321
for plan_node in graph . forwards_plan ( node ) :pass
example# 4322
if plan_node not in shown and plan_node [ 0 ] == app_name :pass
example# 4323
title = plan_node [ 1 ]
example# 4324
if graph . nodes [ plan_node ] . replaces :pass
example# 4325
title += '_STR:0_' % len ( graph . nodes [ plan_node ] . replaces )
example# 4326
if plan_node in loader . applied_migrations :pass
example# 4327
self . stdout . write ( '_STR:0_' % title )
example# 4328
if True: pass
else :pass
example# 4329
self . stdout . write ( '_STR:0_' % title )
example# 4330
shown . add ( plan_node )
example# 4331
if not shown :pass
example# 4332
self . stdout . write ( '_STR:0_' , self . style . MIGRATE_FAILURE )
example# 4333
import argparse
example# 4334
import warnings
example# 4335
from django . core . management . base import BaseCommand
example# 4336
from django . utils . deprecation import RemovedInDjango19Warning
example# 4337
class Command ( BaseCommand ) :pass
example# 4338
help = '_STR:0_'
example# 4343
from django . conf import settings
example# 4344
from django . utils import translation
example# 4345
try :pass
except: pass
example# 4346
translation . activate ( settings . LANGUAGE_CODE )
example# 4347
try: pass
except AttributeError :pass
example# 4348
pass
example# 4349
from django . core . servers . fastcgi import runfastcgi
example# 4350
runfastcgi ( args )
example# 4352
from django . core . servers . fastcgi import FASTCGI_HELP
example# 4353
return FASTCGI_HELP
example# 4354
from __future__ import unicode_literals
example# 4355
from datetime import datetime
example# 4356
import errno
example# 4357
import os
example# 4358
import re
example# 4359
import sys
example# 4360
import socket
example# 4361
from django . core . management . base import BaseCommand , CommandError
example# 4362
from django . core . servers . basehttp import run , get_internal_wsgi_application
example# 4363
from django . db import connections , DEFAULT_DB_ALIAS
example# 4364
from django . db . migrations . executor import MigrationExecutor
example# 4365
from django . utils import autoreload
example# 4366
from django . utils import six
example# 4367
from django . core . exceptions import ImproperlyConfigured
example# 4370
class Command ( BaseCommand ) :pass
example# 4371
help = '_STR:0_'
example# 4372
requires_system_checks = False
example# 4379
return get_internal_wsgi_application ( )
example# 4381
from django . conf import settings
example# 4382
if not settings . DEBUG and not settings . ALLOWED_HOSTS :pass
example# 4383
raise CommandError ( '_STR:0_' )
example# 4386
raise CommandError ( '_STR:0_' )
example# 4388
if not options . get ( '_STR:0_' ) :pass
example# 4389
self . addr = ''
example# 4390
self . port = DEFAULT_PORT
example# 4391
if True: pass
else :pass
example# 4393
if m is None :pass
example# 4394
raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ '_STR:1_' ] )
example# 4396
if not self . port . isdigit ( ) :pass
example# 4397
raise CommandError ( '_STR:0_' % self . port )
example# 4398
if self . addr :pass
example# 4400
self . addr = self . addr [ 1 : - 1 ]
example# 4405
if not self . addr :pass
example# 4408
self . run ( ** options )
example# 4410
use_reloader = options . get ( '_STR:0_' )
example# 4411
if use_reloader :pass
example# 4413
if True: pass
else :pass
example# 4416
from django . conf import settings
example# 4417
from django . utils import translation
example# 4418
threading = options . get ( '_STR:0_' )
example# 4419
shutdown_message = options . get ( '_STR:0_' , '' )
example# 4420
quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
example# 4421
self . stdout . write ( '_STR:0_' )
example# 4422
self . validate ( display_num_errors = True )
example# 4423
try :pass
except: pass
example# 4424
self . check_migrations ( )
example# 4425
try: pass
except ImproperlyConfigured :pass
example# 4426
pass
example# 4427
now = datetime . now ( ) . strftime ( '_STR:0_' )
example# 4429
now = now . decode ( '_STR:0_' )
example# 4431
translation . activate ( settings . LANGUAGE_CODE )
example# 4432
try :pass
except: pass
example# 4435
try: pass
except socket . error as e :pass
example# 4437
try :pass
except: pass
example# 4438
error_text = ERRORS [ e . errno ]
example# 4439
try: pass
except KeyError :pass
example# 4440
error_text = str ( e )
example# 4441
self . stderr . write ( '_STR:0_' % error_text )
example# 4442
os . _exit ( 1 )
example# 4443
try: pass
except KeyboardInterrupt :pass
example# 4444
if shutdown_message :pass
example# 4445
self . stdout . write ( shutdown_message )
example# 4446
sys . exit ( 0 )
example# 4447
def check_migrations ( self ) :pass
example# 4448
executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
example# 4449
plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
example# 4450
if plan :pass
example# 4451
self . stdout . write ( self . style . NOTICE ( '_STR:0_' ) )
example# 4452
self . stdout . write ( self . style . NOTICE ( '_STR:0_' ) )
example# 4453
BaseRunserverCommand = Command
example# 4454
import os
example# 4455
from django . core . management . base import BaseCommand
example# 4456
class Command ( BaseCommand ) :pass
example# 4457
help = '_STR:0_'
example# 4458
requires_system_checks = False
example# 4464
def _ipython_pre_011 ( self ) :pass
example# 4465
from IPython . Shell import IPShell
example# 4466
shell = IPShell ( argv = [ ] )
example# 4467
shell . mainloop ( )
example# 4468
def _ipython_pre_100 ( self ) :pass
example# 4469
from IPython . frontend . terminal . ipapp import TerminalIPythonApp
example# 4470
app = TerminalIPythonApp . instance ( )
example# 4471
app . initialize ( argv = [ ] )
example# 4472
app . start ( )
example# 4473
def _ipython ( self ) :pass
example# 4474
from IPython import start_ipython
example# 4475
start_ipython ( argv = [ ] )
example# 4476
def ipython ( self ) :pass
example# 4478
try :pass
except: pass
example# 4479
ip ( )
example# 4480
try: pass
except ImportError :pass
example# 4481
pass
example# 4482
if True: pass
else :pass
example# 4483
return
example# 4484
raise ImportError ( '_STR:0_' )
example# 4485
def bpython ( self ) :pass
example# 4486
import bpython
example# 4487
bpython . embed ( )
example# 4488
def run_shell ( self , shell = None ) :pass
example# 4489
available_shells = [ shell ] if shell else self . shells
example# 4490
for shell in available_shells :pass
example# 4491
try :pass
except: pass
example# 4492
return getattr ( self , shell ) ( )
example# 4493
try: pass
except ImportError :pass
example# 4494
pass
example# 4495
raise ImportError
example# 4497
try :pass
except: pass
example# 4498
if options [ '_STR:0_' ] :pass
example# 4499
raise ImportError
example# 4500
self . run_shell ( shell = options [ '_STR:0_' ] )
example# 4501
try: pass
except ImportError :pass
example# 4502
import code
example# 4503
imported_objects = { }
example# 4504
try :pass
except: pass
example# 4505
import readline
example# 4506
try: pass
except ImportError :pass
example# 4507
pass
example# 4508
if True: pass
else :pass
example# 4509
import rlcompleter
example# 4510
readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
example# 4511
readline . parse_and_bind ( '_STR:0_' )
example# 4512
if not options [ '_STR:0_' ] :pass
example# 4514
if not pythonrc :pass
example# 4515
continue
example# 4516
pythonrc = os . path . expanduser ( pythonrc )
example# 4517
if not os . path . isfile ( pythonrc ) :pass
example# 4518
continue
example# 4519
try :pass
except: pass
example# 4520
with open ( pythonrc ) as handle :pass
example# 4521
exec ( compile ( handle . read ( ) , pythonrc , '_STR:0_' ) , imported_objects )
example# 4522
try: pass
except NameError :pass
example# 4523
pass
example# 4524
code . interact ( local = imported_objects )
example# 4525
from __future__ import unicode_literals
example# 4526
from django . core . management . base import AppCommand
example# 4527
from django . core . management . sql import sql_create
example# 4528
from django . db import connections , DEFAULT_DB_ALIAS
example# 4529
class Command ( AppCommand ) :pass
example# 4530
help = '_STR:0_'
example# 4531
output_transaction = True
example# 4533
super ( Command , self ) . add_arguments ( parser )
example# 4536
if app_config . models_module is None :pass
example# 4537
return
example# 4538
connection = connections [ options [ '_STR:0_' ] ]
example# 4540
return '\n' . join ( statements )
example# 4541
from __future__ import unicode_literals
example# 4542
from django . core . management . base import AppCommand
example# 4543
from django . core . management . sql import sql_all
example# 4544
from django . db import connections , DEFAULT_DB_ALIAS
example# 4545
class Command ( AppCommand ) :pass
example# 4546
help = '_STR:0_'
example# 4547
output_transaction = True
example# 4549
super ( Command , self ) . add_arguments ( parser )
example# 4552
if app_config . models_module is None :pass
example# 4553
return
example# 4554
connection = connections [ options [ '_STR:0_' ] ]
example# 4556
return '\n' . join ( statements )
example# 4557
from __future__ import unicode_literals
example# 4558
from django . core . management . base import AppCommand
example# 4559
from django . core . management . sql import sql_delete
example# 4560
from django . db import connections , DEFAULT_DB_ALIAS
example# 4561
class Command ( AppCommand ) :pass
example# 4562
help = '_STR:0_'
example# 4563
output_transaction = True
example# 4565
super ( Command , self ) . add_arguments ( parser )
example# 4568
if app_config . models_module is None :pass
example# 4569
return
example# 4570
connection = connections [ options [ '_STR:0_' ] ]
example# 4572
return '\n' . join ( statements )
example# 4573
from __future__ import unicode_literals
example# 4574
from django . core . management . base import AppCommand
example# 4575
from django . core . management . sql import sql_custom
example# 4576
from django . db import connections , DEFAULT_DB_ALIAS
example# 4577
class Command ( AppCommand ) :pass
example# 4578
help = '_STR:0_'
example# 4579
output_transaction = True
example# 4580
def add_arguments ( self , parser ) :pass
example# 4581
super ( Command , self ) . add_arguments ( parser )
example# 4582
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4583
def handle_app_config ( self , app_config , ** options ) :pass
example# 4584
if app_config . models_module is None :pass
example# 4585
return
example# 4586
connection = connections [ options [ '_STR:0_' ] ]
example# 4587
statements = sql_custom ( app_config , self . style , connection )
example# 4588
return '\n' . join ( statements )
example# 4589
from __future__ import unicode_literals
example# 4590
from django . core . management . base import AppCommand
example# 4591
from django . core . management . sql import sql_destroy_indexes
example# 4592
from django . db import connections , DEFAULT_DB_ALIAS
example# 4593
class Command ( AppCommand ) :pass
example# 4594
help = '_STR:0_'
example# 4595
output_transaction = True
example# 4597
super ( Command , self ) . add_arguments ( parser )
example# 4600
if app_config . models_module is None :pass
example# 4601
return
example# 4602
connection = connections [ options [ '_STR:0_' ] ]
example# 4604
return '\n' . join ( statements )
example# 4605
from __future__ import unicode_literals
example# 4606
from django . core . management . base import BaseCommand
example# 4607
from django . core . management . sql import sql_flush
example# 4608
from django . db import connections , DEFAULT_DB_ALIAS
example# 4609
class Command ( BaseCommand ) :pass
example# 4610
help = '_STR:0_'
example# 4611
output_transaction = True
example# 4612
def add_arguments ( self , parser ) :pass
example# 4613
super ( Command , self ) . add_arguments ( parser )
example# 4614
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4615
def handle ( self , ** options ) :pass
example# 4616
return '\n' . join ( sql_flush ( self . style , connections [ options [ '_STR:0_' ] ] , only_django = True ) )
example# 4617
from __future__ import unicode_literals
example# 4618
from django . core . management . base import AppCommand
example# 4619
from django . core . management . sql import sql_indexes
example# 4620
from django . db import connections , DEFAULT_DB_ALIAS
example# 4621
class Command ( AppCommand ) :pass
example# 4622
help = '_STR:0_'
example# 4623
output_transaction = True
example# 4624
def add_arguments ( self , parser ) :pass
example# 4625
super ( Command , self ) . add_arguments ( parser )
example# 4626
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4627
def handle_app_config ( self , app_config , ** options ) :pass
example# 4628
if app_config . models_module is None :pass
example# 4629
return
example# 4630
connection = connections [ options [ '_STR:0_' ] ]
example# 4631
statements = sql_indexes ( app_config , self . style , connection )
example# 4632
return '\n' . join ( statements )
example# 4633
from __future__ import unicode_literals
example# 4634
from django . core . management . base import BaseCommand , CommandError
example# 4635
from django . db import connections , DEFAULT_DB_ALIAS
example# 4636
from django . db . migrations . executor import MigrationExecutor
example# 4637
from django . db . migrations . loader import AmbiguityError
example# 4638
class Command ( BaseCommand ) :pass
example# 4639
help = '_STR:0_'
example# 4640
def add_arguments ( self , parser ) :pass
example# 4641
parser . add_argument ( '_STR:0_' ,  help = '_STR:1_' )
example# 4642
parser . add_argument ( '_STR:0_' ,  help = '_STR:1_' )
example# 4643
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
example# 4644
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' ,  default = False , help = '_STR:3_' )
example# 4645
def handle ( self , * args , ** options ) :pass
example# 4646
connection = connections [ options [ '_STR:0_' ] ]
example# 4647
executor = MigrationExecutor ( connection )
example# 4648
app_label , migration_name = options [ '_STR:0_' ] , options [ '_STR:1_' ]
example# 4649
if app_label not in executor . loader . migrated_apps :pass
example# 4650
raise CommandError ( '_STR:0_' % app_label )
example# 4651
try :pass
except: pass
example# 4652
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
example# 4653
try: pass
except AmbiguityError :pass
example# 4654
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4655
try: pass
except KeyError :pass
example# 4656
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4657
targets = [ ( app_label , migration . name ) ]
example# 4658
plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ '_STR:0_' ] ) ]
example# 4659
sql_statements = executor . collect_sql ( plan )
example# 4660
for statement in sql_statements :pass
example# 4661
self . stdout . write ( statement )
example# 4662
from __future__ import unicode_literals
example# 4663
from django . core . management . base import AppCommand
example# 4664
from django . core . management . sql import check_for_migrations
example# 4665
from django . db import connections , DEFAULT_DB_ALIAS
example# 4666
class Command ( AppCommand ) :pass
example# 4667
help = '_STR:0_'
example# 4668
output_transaction = True
example# 4670
super ( Command , self ) . add_arguments ( parser )
example# 4673
if app_config . models_module is None :pass
example# 4674
return
example# 4675
connection = connections [ options . get ( '_STR:0_' ) ]
example# 4677
models = app_config . get_models ( include_auto_created = True )
example# 4679
return '\n' . join ( statements )
example# 4680
from django . core . management . base import BaseCommand , CommandError
example# 4681
from django . utils import six
example# 4682
from django . db import connections , DEFAULT_DB_ALIAS , migrations
example# 4683
from django . db . migrations . loader import AmbiguityError
example# 4684
from django . db . migrations . executor import MigrationExecutor
example# 4685
from django . db . migrations . writer import MigrationWriter
example# 4686
from django . db . migrations . optimizer import MigrationOptimizer
example# 4687
class Command ( BaseCommand ) :pass
example# 4688
help = '_STR:0_'
example# 4695
self . verbosity = options . get ( '_STR:0_' )
example# 4696
self . interactive = options . get ( '_STR:0_' )
example# 4697
app_label , migration_name = options [ '_STR:0_' ] , options [ '_STR:1_' ]
example# 4698
executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
example# 4699
if app_label not in executor . loader . migrated_apps :pass
example# 4700
raise CommandError ( '_STR:0_' % app_label )
example# 4701
try :pass
except: pass
example# 4702
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
example# 4703
try: pass
except AmbiguityError :pass
example# 4704
raise CommandError ( '_STR:0_' % ( migration_name , app_label ) )
example# 4705
try: pass
except KeyError :pass
example# 4706
raise CommandError ( '_STR:0_' % ( migration_name , app_label ) )
example# 4709
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4710
for migration in migrations_to_squash :pass
example# 4711
self . stdout . write ( " - %s" % migration . name )
example# 4712
if self . interactive :pass
example# 4713
answer = None
example# 4714
while not answer or answer not in '_STR:0_' :pass
example# 4715
answer = six . moves . input ( '_STR:0_' )
example# 4716
if not answer :pass
example# 4717
answer = "n"
example# 4718
break
example# 4719
if True: pass
else :pass
example# 4720
answer = answer [ 0 ] . lower ( )
example# 4721
if answer != "y" :pass
example# 4722
return
example# 4723
operations = [ ]
example# 4724
for smigration in migrations_to_squash :pass
example# 4725
operations . extend ( smigration . operations )
example# 4727
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4728
optimizer = MigrationOptimizer ( )
example# 4731
if len ( new_operations ) == len ( operations ) :pass
example# 4732
self . stdout . write ( '_STR:0_' )
example# 4733
if True: pass
else :pass
example# 4734
self . stdout . write ( '_STR:0_' % ( len ( operations ) , len ( new_operations ) ) )
example# 4735
replaces = [ ]
example# 4736
for migration in migrations_to_squash :pass
example# 4737
if migration . replaces :pass
example# 4738
replaces . extend ( migration . replaces )
example# 4739
if True: pass
else :pass
example# 4741
subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
example# 4743
writer = MigrationWriter ( new_migration )
example# 4744
with open ( writer . path , "wb" ) as fh :pass
example# 4745
fh . write ( writer . as_string ( ) )
example# 4747
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % writer . path ) )
example# 4748
self . stdout . write ( '_STR:0_' )
example# 4749
self . stdout . write ( '_STR:0_' )
example# 4750
self . stdout . write ( '_STR:0_' )
example# 4751
self . stdout . write ( '_STR:0_' )
example# 4752
from importlib import import_module
example# 4753
from django . core . management . base import CommandError
example# 4754
from django . core . management . templates import TemplateCommand
example# 4755
class Command ( TemplateCommand ) :pass
example# 4756
help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
example# 4757
missing_args_message = '_STR:0_'
example# 4759
app_name , target = options . pop ( '_STR:0_' ) , options . pop ( '_STR:1_' )
example# 4761
try :pass
except: pass
example# 4762
import_module ( app_name )
example# 4763
try: pass
except ImportError :pass
example# 4764
pass
example# 4765
if True: pass
else :pass
example# 4766
raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
example# 4768
from importlib import import_module
example# 4769
from django . core . management . base import CommandError
example# 4770
from django . core . management . templates import TemplateCommand
example# 4771
from django . utils . crypto import get_random_string
example# 4772
class Command ( TemplateCommand ) :pass
example# 4773
help = ( '_STR:0_'  "project name in the current directory or optionally in the "  "given directory." )
example# 4774
missing_args_message = '_STR:0_'
example# 4775
def handle ( self , ** options ) :pass
example# 4776
project_name , target = options . pop ( '_STR:0_' ) , options . pop ( 'directory' )
example# 4777
self . validate_name ( project_name , '_STR:0_' )
example# 4778
try :pass
except: pass
example# 4779
import_module ( project_name )
example# 4780
try: pass
except ImportError :pass
example# 4781
pass
example# 4782
if True: pass
else :pass
example# 4783
raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as a "  "project name. Please try another name." %  project_name )
example# 4784
chars = '_STR:0_'
example# 4787
import warnings
example# 4788
from django . apps import apps
example# 4789
from django . contrib . auth import get_user_model
example# 4790
from django . db import DEFAULT_DB_ALIAS
example# 4791
from django . core . management import call_command
example# 4792
from django . core . management . base import BaseCommand
example# 4793
from django . utils . deprecation import RemovedInDjango19Warning
example# 4794
from django . utils . six . moves import input
example# 4795
class Command ( BaseCommand ) :pass
example# 4796
help = '_STR:0_'
example# 4797
def add_arguments ( self , parser ) :pass
example# 4804
try :pass
except: pass
example# 4806
try: pass
except LookupError :pass
example# 4807
return
example# 4808
UserModel = get_user_model ( )
example# 4809
if not UserModel . _default_manager . exists ( ) and options . get ( '_STR:0_' ) :pass
example# 4810
msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
example# 4811
confirm = input ( msg )
example# 4812
while 1 :pass
example# 4813
if confirm not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 4814
confirm = input ( '_STR:0_' )
example# 4815
continue
example# 4816
if confirm == '_STR:0_' :pass
example# 4818
break
example# 4819
import logging
example# 4820
import sys
example# 4821
import os
example# 4822
from django . conf import settings
example# 4823
from django . core . management . base import BaseCommand
example# 4824
from django . test . utils import get_runner
example# 4825
class Command ( BaseCommand ) :pass
example# 4826
help = '_STR:0_'
example# 4827
requires_system_checks = False
example# 4828
def __init__ ( self ) :pass
example# 4829
self . test_runner = None
example# 4830
super ( Command , self ) . __init__ ( )
example# 4831
def run_from_argv ( self , argv ) :pass
example# 4832
option = '_STR:0_'
example# 4833
for arg in argv [ 2 : ] :pass
example# 4834
if arg . startswith ( option ) :pass
example# 4835
self . test_runner = arg [ len ( option ) : ]
example# 4836
break
example# 4837
super ( Command , self ) . run_from_argv ( argv )
example# 4838
def add_arguments ( self , parser ) :pass
example# 4844
test_runner_class = get_runner ( settings , self . test_runner )
example# 4845
if hasattr ( test_runner_class , '_STR:0_' ) :pass
example# 4846
raise RuntimeError (  '_STR:0_'  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
example# 4847
if hasattr ( test_runner_class , '_STR:1_' ) :pass
example# 4848
test_runner_class . add_arguments ( parser )
example# 4850
if options [ '_STR:0_' ] > 0 :pass
example# 4851
logger = logging . getLogger ( '_STR:0_' )
example# 4852
handler = logging . StreamHandler ( )
example# 4853
logger . addHandler ( handler )
example# 4855
if options [ '_STR:0_' ] > 0 :pass
example# 4856
logger . removeHandler ( handler )
example# 4858
from django . conf import settings
example# 4859
from django . test . utils import get_runner
example# 4861
if options . get ( '_STR:0_' ) is not None :pass
example# 4862
os . environ [ '_STR:1_' ] = options [ '_STR:0_' ]
example# 4863
del options [ '_STR:0_' ]
example# 4864
test_runner = TestRunner ( ** options )
example# 4865
failures = test_runner . run_tests ( test_labels )
example# 4866
if failures :pass
example# 4867
sys . exit ( bool ( failures ) )
example# 4868
from django . core . management import call_command
example# 4869
from django . core . management . base import BaseCommand
example# 4870
from django . db import connection
example# 4871
class Command ( BaseCommand ) :pass
example# 4872
help = '_STR:0_'
example# 4873
args = '_STR:0_'
example# 4874
requires_system_checks = False
example# 4875
def add_arguments ( self , parser ) :pass
example# 4876
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' ,  help = '_STR:3_' )
example# 4877
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' , default = True ,  help = '_STR:3_' )
example# 4878
parser . add_argument ( '_STR:0_' , default = '' ,  help = '_STR:1_' )
example# 4880
def handle ( self , * fixture_labels , ** options ) :pass
example# 4881
verbosity = options . get ( '_STR:0_' )
example# 4882
interactive = options . get ( '_STR:0_' )
example# 4883
db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )
example# 4885
shutdown_message = '_STR:1_' % db_name
example# 4886
use_threading = connection . features . test_db_allows_multiple_connections
example# 4888
from __future__ import unicode_literals
example# 4889
import warnings
example# 4890
from django . core . management . commands . check import Command as CheckCommand
example# 4891
from django . utils . deprecation import RemovedInDjango19Warning
example# 4892
class Command ( CheckCommand ) :pass
example# 4893
help = '_STR:0_' + CheckCommand . help
example# 4894
def handle ( self , ** options ) :pass
example# 4895
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning )
example# 4896
super ( Command , self ) . handle ( ** options )
example# 4897
from __future__ import unicode_literals
example# 4898
import codecs
example# 4899
import os
example# 4900
import re
example# 4901
import warnings
example# 4902
from django . apps import apps
example# 4903
from django . conf import settings
example# 4904
from django . core . management . base import CommandError
example# 4905
from django . db import models , router
example# 4906
from django . utils . deprecation import RemovedInDjango19Warning
example# 4908
from django . db . migrations . loader import MigrationLoader
example# 4909
loader = MigrationLoader ( connection )
example# 4910
if app_config . label in loader . migrated_apps :pass
example# 4911
raise CommandError ( '_STR:0_' % app_config . label )
example# 4913
check_for_migrations ( app_config , connection )
example# 4914
if connection . settings_dict [ '_STR:0_' ] == '_STR:1_' :pass
example# 4915
raise CommandError ( '_STR:0_' +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
example# 4916
app_models = app_config . get_models ( include_auto_created = True )
example# 4917
final_output = [ ]
example# 4918
tables = connection . introspection . table_names ( )
example# 4919
known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
example# 4920
pending_references = { }
example# 4921
for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :pass
example# 4922
output , references = connection . creation . sql_create_model ( model , style , known_models )
example# 4923
final_output . extend ( output )
example# 4924
for refto , refs in references . items ( ) :pass
example# 4926
if refto in known_models :pass
example# 4929
known_models . add ( model )
example# 4930
not_installed_models = set ( pending_references . keys ( ) )
example# 4931
if not_installed_models :pass
example# 4932
alter_sql = [ ]
example# 4933
for model in not_installed_models :pass
example# 4934
alter_sql . extend ( [ '_STR:0_' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
example# 4935
if alter_sql :pass
example# 4936
final_output . append ( '_STR:0_' )
example# 4937
final_output . extend ( alter_sql )
example# 4938
return final_output
example# 4940
check_for_migrations ( app_config , connection )
example# 4941
try :pass
except: pass
example# 4942
cursor = connection . cursor ( )
example# 4943
try: pass
except Exception :pass
example# 4944
cursor = None
example# 4945
try :pass
except: pass
example# 4946
if cursor :pass
example# 4947
table_names = connection . introspection . table_names ( cursor )
example# 4948
if True: pass
else :pass
example# 4949
table_names = [ ]
example# 4950
output = [ ]
example# 4951
to_delete = set ( )
example# 4952
references_to_delete = { }
example# 4953
app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
example# 4954
for model in app_models :pass
example# 4955
if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :pass
example# 4956
opts = model . _meta
example# 4957
for f in opts . local_fields :pass
example# 4958
if f . rel and f . rel . to not in to_delete :pass
example# 4960
to_delete . add ( model )
example# 4961
for model in app_models :pass
example# 4962
if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :pass
example# 4963
output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
example# 4964
try: pass
finally :pass
example# 4965
if cursor and close_connection :pass
example# 4966
cursor . close ( )
example# 4967
connection . close ( )
example# 4968
return output [ : : - 1 ]
example# 4970
if only_django :pass
example# 4971
tables = connection . introspection . django_table_names ( only_existing = True )
example# 4972
if True: pass
else :pass
example# 4973
tables = connection . introspection . table_names ( )
example# 4974
seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
example# 4975
statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
example# 4976
return statements
example# 4978
check_for_migrations ( app_config , connection )
example# 4979
output = [ ]
example# 4980
app_models = router . get_migratable_models ( app_config , connection . alias )
example# 4981
for model in app_models :pass
example# 4983
return output
example# 4985
check_for_migrations ( app_config , connection )
example# 4986
output = [ ]
example# 4988
output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
example# 4989
return output
example# 4991
check_for_migrations ( app_config , connection )
example# 4992
output = [ ]
example# 4993
for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :pass
example# 4994
output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
example# 4995
return output
example# 4997
check_for_migrations ( app_config , connection )
example# 4998
return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
example# 4999
def _split_statements ( content ) :pass
example# 5000
comment_re = re . compile ( r'_STR:0_' )
example# 5001
statements = [ ]
example# 5002
statement = [ ]
example# 5003
for line in content . split ( "\n" ) :pass
example# 5005
if not cleaned_line :pass
example# 5006
continue
example# 5007
statement . append ( cleaned_line )
example# 5008
if cleaned_line . endswith ( ";" ) :pass
example# 5009
statements . append ( " " . join ( statement ) )
example# 5010
statement = [ ]
example# 5011
return statements
example# 5013
opts = model . _meta
example# 5014
app_dirs = [ ]
example# 5015
app_dir = apps . get_app_config ( model . _meta . app_label ) . path
example# 5016
app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , '_STR:0_' ) ) )
example# 5017
old_app_dir = os . path . normpath ( os . path . join ( app_dir , '_STR:0_' ) )
example# 5018
if os . path . exists ( old_app_dir ) :pass
example# 5020
app_dirs . append ( old_app_dir )
example# 5021
output = [ ]
example# 5022
if opts . managed :pass
example# 5023
post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , '_STR:0_' ) ]
example# 5024
for f in post_sql_fields :pass
example# 5025
output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
example# 5026
backend_name = connection . settings_dict [ '_STR:1_' ] . split ( '_STR:0_' ) [ - 1 ]
example# 5027
sql_files = [ ]
example# 5028
for app_dir in app_dirs :pass
example# 5029
sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )
example# 5030
sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
example# 5031
for sql_file in sql_files :pass
example# 5032
if os . path . exists ( sql_file ) :pass
example# 5035
return output
example# 5037
for app_config in apps . get_app_configs ( ) :pass
example# 5038
if app_config . models_module is None :pass
example# 5039
continue
example# 5041
print ( '_STR:0_' % app_config . label )
example# 5045
for app_config in apps . get_app_configs ( ) :pass
example# 5046
if app_config . models_module is None :pass
example# 5047
continue
example# 5049
print ( '_STR:0_' % app_config . label )
example# 5052
import cgi
example# 5053
import errno
example# 5054
import mimetypes
example# 5055
import os
example# 5056
import posixpath
example# 5057
import re
example# 5058
import shutil
example# 5059
import stat
example# 5060
import sys
example# 5061
import tempfile
example# 5062
from os import path
example# 5063
import django
example# 5064
from django . template import Template , Context
example# 5065
from django . utils import archive
example# 5066
from django . utils . six . moves . urllib . request import urlretrieve
example# 5067
from django . utils . _os import rmtree_errorhandler
example# 5068
from django . core . management . base import BaseCommand , CommandError
example# 5069
from django . core . management . utils import handle_extensions
example# 5072
class TemplateCommand ( BaseCommand ) :pass
example# 5073
requires_system_checks = False
example# 5074
can_import_settings = False
example# 5075
url_schemes = [ '_STR:0_' , '_STR:1_' , '_STR:2_' ]
example# 5076
leave_locale_alone = True
example# 5077
def add_arguments ( self , parser ) :pass
example# 5084
self . app_or_project = app_or_project
example# 5085
self . paths_to_remove = [ ]
example# 5086
self . verbosity = options [ '_STR:0_' ]
example# 5088
if target is None :pass
example# 5089
top_dir = path . join ( os . getcwd ( ) , name )
example# 5090
try :pass
except: pass
example# 5091
os . makedirs ( top_dir )
example# 5092
try: pass
except OSError as e :pass
example# 5093
if e . errno == errno . EEXIST :pass
example# 5094
message = '_STR:0_' % top_dir
example# 5095
if True: pass
else :pass
example# 5096
message = e
example# 5097
raise CommandError ( message )
example# 5098
if True: pass
else :pass
example# 5099
top_dir = os . path . abspath ( path . expanduser ( target ) )
example# 5100
if not os . path . exists ( top_dir ) :pass
example# 5101
raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
example# 5103
extra_files = [ ]
example# 5104
for file in options [ '_STR:0_' ] :pass
example# 5105
extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( '_STR:0_' ) ) )
example# 5107
self . stdout . write ( "Rendering %s template files with "  "extensions: %s\n" %  ( app_or_project , '_STR:1_' . join ( extensions ) ) )
example# 5108
self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , '_STR:1_' . join ( extra_files ) ) )
example# 5109
base_name = '%s_name' % app_or_project
example# 5110
base_subdir = '%s_template' % app_or_project
example# 5111
base_directory = '%s_directory' % app_or_project
example# 5112
if django . VERSION [ - 2 ] != '_STR:0_' :pass
example# 5113
docs_version = '_STR:0_'
example# 5114
if True: pass
else :pass
example# 5117
from django . conf import settings
example# 5118
if not settings . configured :pass
example# 5119
settings . configure ( )
example# 5121
prefix_length = len ( template_dir ) + 1
example# 5122
for root , dirs , files in os . walk ( template_dir ) :pass
example# 5123
path_rest = root [ prefix_length : ]
example# 5124
relative_dir = path_rest . replace ( base_name , name )
example# 5125
if relative_dir :pass
example# 5126
target_dir = path . join ( top_dir , relative_dir )
example# 5127
if not path . exists ( target_dir ) :pass
example# 5128
os . mkdir ( target_dir )
example# 5129
for dirname in dirs [ : ] :pass
example# 5130
if dirname . startswith ( '_STR:0_' ) or dirname == '_STR:1_' :pass
example# 5131
dirs . remove ( dirname )
example# 5132
for filename in files :pass
example# 5133
if filename . endswith ( ( '_STR:0_' , '_STR:1_' , '_STR:2_' ) ) :pass
example# 5134
continue
example# 5135
old_path = path . join ( root , filename )
example# 5137
if path . exists ( new_path ) :pass
example# 5138
raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
example# 5139
with open ( old_path , '_STR:0_' ) as template_file :pass
example# 5140
content = template_file . read ( )
example# 5141
if filename . endswith ( extensions ) or filename in extra_files :pass
example# 5142
content = content . decode ( '_STR:0_' )
example# 5143
template = Template ( content )
example# 5144
content = template . render ( context )
example# 5145
content = content . encode ( '_STR:0_' )
example# 5146
with open ( new_path , '_STR:0_' ) as new_file :pass
example# 5147
new_file . write ( content )
example# 5149
self . stdout . write ( '_STR:0_' % new_path )
example# 5150
try :pass
except: pass
example# 5151
shutil . copymode ( old_path , new_path )
example# 5152
self . make_writeable ( new_path )
example# 5153
try: pass
except OSError :pass
example# 5154
self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
example# 5155
if self . paths_to_remove :pass
example# 5157
self . stdout . write ( '_STR:0_' )
example# 5158
for path_to_remove in self . paths_to_remove :pass
example# 5159
if path . isfile ( path_to_remove ) :pass
example# 5160
os . remove ( path_to_remove )
example# 5161
if True: pass
else :pass
example# 5164
if template is None :pass
example# 5165
return path . join ( django . __path__ [ 0 ] , '_STR:0_' , subdir )
example# 5166
if True: pass
else :pass
example# 5167
if template . startswith ( '_STR:0_' ) :pass
example# 5169
expanded_template = path . expanduser ( template )
example# 5170
expanded_template = path . normpath ( expanded_template )
example# 5171
if path . isdir ( expanded_template ) :pass
example# 5172
return expanded_template
example# 5173
if self . is_url ( template ) :pass
example# 5174
absolute_path = self . download ( template )
example# 5175
if True: pass
else :pass
example# 5176
absolute_path = path . abspath ( expanded_template )
example# 5177
if path . exists ( absolute_path ) :pass
example# 5178
return self . extract ( absolute_path )
example# 5179
raise CommandError ( '_STR:0_' %  ( self . app_or_project , template ) )
example# 5181
if name is None :pass
example# 5182
raise CommandError ( '_STR:0_' % (  "an" if app_or_project == "app" else "a" , app_or_project ) )
example# 5185
message = '_STR:0_'
example# 5186
if True: pass
else :pass
example# 5187
message = '_STR:0_'
example# 5188
raise CommandError ( '_STR:0_' %  ( name , app_or_project , message ) )
example# 5189
def download ( self , url ) :pass
example# 5190
def cleanup_url ( url ) :pass
example# 5191
tmp = url . rstrip ( '_STR:0_' )
example# 5192
filename = tmp . split ( '_STR:0_' ) [ - 1 ]
example# 5193
if url . endswith ( '_STR:0_' ) :pass
example# 5194
display_url = tmp + '_STR:0_'
example# 5195
if True: pass
else :pass
example# 5196
display_url = url
example# 5197
return filename , display_url
example# 5198
prefix = '_STR:0_' % self . app_or_project
example# 5199
tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_STR:0_' )
example# 5200
self . paths_to_remove . append ( tempdir )
example# 5201
filename , display_url = cleanup_url ( url )
example# 5203
self . stdout . write ( '_STR:0_' % display_url )
example# 5204
try :pass
except: pass
example# 5205
the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
example# 5206
try: pass
except IOError as e :pass
example# 5207
raise CommandError ( '_STR:0_' %  ( url , filename , e ) )
example# 5208
used_name = the_path . split ( '_STR:0_' ) [ - 1 ]
example# 5209
content_disposition = info . get ( '_STR:0_' )
example# 5210
if content_disposition :pass
example# 5211
_ , params = cgi . parse_header ( content_disposition )
example# 5212
guessed_filename = params . get ( '_STR:0_' ) or used_name
example# 5213
if True: pass
else :pass
example# 5214
guessed_filename = used_name
example# 5215
ext = self . splitext ( guessed_filename ) [ 1 ]
example# 5216
content_type = info . get ( '_STR:0_' )
example# 5217
if not ext and content_type :pass
example# 5218
ext = mimetypes . guess_extension ( content_type )
example# 5219
if ext :pass
example# 5220
guessed_filename += ext
example# 5221
if used_name != guessed_filename :pass
example# 5222
guessed_path = path . join ( tempdir , guessed_filename )
example# 5223
shutil . move ( the_path , guessed_path )
example# 5224
return guessed_path
example# 5225
return the_path
example# 5226
def splitext ( self , the_path ) :pass
example# 5227
base , ext = posixpath . splitext ( the_path )
example# 5228
if base . lower ( ) . endswith ( '_STR:0_' ) :pass
example# 5229
ext = base [ - 4 : ] + ext
example# 5230
base = base [ : - 4 ]
example# 5231
return base , ext
example# 5232
def extract ( self , filename ) :pass
example# 5233
prefix = '_STR:0_' % self . app_or_project
example# 5235
self . paths_to_remove . append ( tempdir )
example# 5236
if self . verbosity >= 2 :pass
example# 5237
self . stdout . write ( '_STR:0_' % filename )
example# 5238
try :pass
except: pass
example# 5239
archive . extract ( filename , tempdir )
example# 5240
return tempdir
example# 5241
try: pass
except ( archive . ArchiveException , IOError ) as e :pass
example# 5242
raise CommandError ( '_STR:0_' %  ( filename , tempdir , e ) )
example# 5243
def is_url ( self , template ) :pass
example# 5244
if '_STR:0_' not in template :pass
example# 5245
return False
example# 5246
scheme = template . split ( '_STR:0_' , 1 ) [ 0 ] . lower ( )
example# 5247
return scheme in self . url_schemes
example# 5248
def make_writeable ( self , filename ) :pass
example# 5249
if sys . platform . startswith ( '_STR:0_' ) :pass
example# 5250
return
example# 5251
if not os . access ( filename , os . W_OK ) :pass
example# 5252
st = os . stat ( filename )
example# 5253
new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
example# 5254
os . chmod ( filename , new_permissions )
example# 5255
from __future__ import unicode_literals
example# 5256
import os
example# 5257
from subprocess import PIPE , Popen
example# 5258
import sys
example# 5259
from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING
example# 5260
from django . utils import six
example# 5261
from . base import CommandError
example# 5263
try :pass
except: pass
example# 5265
try: pass
except OSError as e :pass
example# 5268
output , errors = p . communicate ( )
example# 5271
ext_list = [ ]
example# 5272
for ext in extensions :pass
example# 5273
ext_list . extend ( ext . replace ( ' ' , '' ) . split ( '_STR:0_' ) )
example# 5274
for i , ext in enumerate ( ext_list ) :pass
example# 5275
if not ext . startswith ( '_STR:0_' ) :pass
example# 5276
ext_list [ i ] = '.%s' % ext_list [ i ]
example# 5277
return set ( x for x in ext_list if x . strip ( '_STR:0_' ) not in ignored )
example# 5279
if path is None :pass
example# 5281
if isinstance ( path , six . string_types ) :pass
example# 5282
path = [ path ]
example# 5283
if pathext is None :pass
example# 5285
for ext in pathext :pass
example# 5286
if cmd . endswith ( ext ) :pass
example# 5287
pathext = [ '' ]
example# 5288
break
example# 5289
for p in path :pass
example# 5290
f = os . path . join ( p , cmd )
example# 5291
if os . path . isfile ( f ) :pass
example# 5292
return f
example# 5293
for ext in pathext :pass
example# 5294
fext = f + ext
example# 5295
if os . path . isfile ( fext ) :pass
example# 5296
return fext
example# 5297
return None
example# 5298
import collections
example# 5299
from math import ceil
example# 5300
from django . utils import six
example# 5301
class InvalidPage ( Exception ) :pass
example# 5302
pass
example# 5303
class PageNotAnInteger ( InvalidPage ) :pass
example# 5304
pass
example# 5305
class EmptyPage ( InvalidPage ) :pass
example# 5306
pass
example# 5307
class Paginator ( object ) :pass
example# 5309
self . object_list = object_list
example# 5310
self . per_page = int ( per_page )
example# 5311
self . orphans = int ( orphans )
example# 5312
self . allow_empty_first_page = allow_empty_first_page
example# 5313
self . _num_pages = self . _count = None
example# 5314
def validate_number ( self , number ) :pass
example# 5315
try :pass
except: pass
example# 5316
number = int ( number )
example# 5317
try: pass
except ( TypeError , ValueError ) :pass
example# 5318
raise PageNotAnInteger ( '_STR:0_' )
example# 5321
if number > self . num_pages :pass
example# 5323
pass
example# 5324
if True: pass
else :pass
example# 5325
raise EmptyPage ( '_STR:0_' )
example# 5326
return number
example# 5327
def page ( self , number ) :pass
example# 5328
number = self . validate_number ( number )
example# 5329
bottom = ( number - 1 ) * self . per_page
example# 5330
top = bottom + self . per_page
example# 5331
if top + self . orphans >= self . count :pass
example# 5332
top = self . count
example# 5334
def _get_page ( self , * args , ** kwargs ) :pass
example# 5336
def _get_count ( self ) :pass
example# 5337
if self . _count is None :pass
example# 5338
try :pass
except: pass
example# 5339
self . _count = self . object_list . count ( )
example# 5340
try: pass
except ( AttributeError , TypeError ) :pass
example# 5341
self . _count = len ( self . object_list )
example# 5342
return self . _count
example# 5343
count = property ( _get_count )
example# 5344
def _get_num_pages ( self ) :pass
example# 5345
if self . _num_pages is None :pass
example# 5347
self . _num_pages = 0
example# 5348
if True: pass
else :pass
example# 5350
self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
example# 5351
return self . _num_pages
example# 5352
num_pages = property ( _get_num_pages )
example# 5353
def _get_page_range ( self ) :pass
example# 5355
page_range = property ( _get_page_range )
example# 5356
QuerySetPaginator = Paginator
example# 5357
class Page ( collections . Sequence ) :pass
example# 5359
self . object_list = object_list
example# 5360
self . number = number
example# 5361
self . paginator = paginator
example# 5362
def __repr__ ( self ) :pass
example# 5363
return '_STR:0_' % ( self . number , self . paginator . num_pages )
example# 5364
def __len__ ( self ) :pass
example# 5365
return len ( self . object_list )
example# 5366
def __getitem__ ( self , index ) :pass
example# 5367
if not isinstance ( index , ( slice , ) + six . integer_types ) :pass
example# 5368
raise TypeError
example# 5369
if not isinstance ( self . object_list , list ) :pass
example# 5370
self . object_list = list ( self . object_list )
example# 5371
return self . object_list [ index ]
example# 5372
def has_next ( self ) :pass
example# 5373
return self . number < self . paginator . num_pages
example# 5374
def has_previous ( self ) :pass
example# 5376
def has_other_pages ( self ) :pass
example# 5377
return self . has_previous ( ) or self . has_next ( )
example# 5378
def next_page_number ( self ) :pass
example# 5380
def previous_page_number ( self ) :pass
example# 5382
def start_index ( self ) :pass
example# 5384
return 0
example# 5385
return ( self . paginator . per_page * ( self . number - 1 ) ) + 1
example# 5386
def end_index ( self ) :pass
example# 5387
if self . number == self . paginator . num_pages :pass
example# 5388
return self . paginator . count
example# 5389
return self . number * self . paginator . per_page
example# 5390
import importlib
example# 5391
from django . conf import settings
example# 5392
from django . utils import six
example# 5393
from django . core . serializers . base import SerializerDoesNotExist
example# 5395
_serializers = { }
example# 5396
class BadSerializer ( object ) :pass
example# 5397
internal_use_only = False
example# 5398
def __init__ ( self , exception ) :pass
example# 5399
self . exception = exception
example# 5400
def __call__ ( self , * args , ** kwargs ) :pass
example# 5401
raise self . exception
example# 5403
if serializers is None and not _serializers :pass
example# 5404
_load_serializers ( )
example# 5405
try :pass
except: pass
example# 5406
module = importlib . import_module ( serializer_module )
example# 5407
try: pass
except ImportError as exc :pass
example# 5408
bad_serializer = BadSerializer ( exc )
example# 5409
module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
example# 5410
if serializers is None :pass
example# 5411
_serializers [ format ] = module
example# 5412
if True: pass
else :pass
example# 5413
serializers [ format ] = module
example# 5414
def unregister_serializer ( format ) :pass
example# 5415
if not _serializers :pass
example# 5416
_load_serializers ( )
example# 5417
if format not in _serializers :pass
example# 5418
raise SerializerDoesNotExist ( format )
example# 5419
del _serializers [ format ]
example# 5420
def get_serializer ( format ) :pass
example# 5421
if not _serializers :pass
example# 5422
_load_serializers ( )
example# 5423
if format not in _serializers :pass
example# 5424
raise SerializerDoesNotExist ( format )
example# 5425
return _serializers [ format ] . Serializer
example# 5426
def get_serializer_formats ( ) :pass
example# 5427
if not _serializers :pass
example# 5428
_load_serializers ( )
example# 5429
return list ( _serializers )
example# 5430
def get_public_serializer_formats ( ) :pass
example# 5431
if not _serializers :pass
example# 5432
_load_serializers ( )
example# 5433
return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
example# 5434
def get_deserializer ( format ) :pass
example# 5435
if not _serializers :pass
example# 5436
_load_serializers ( )
example# 5437
if format not in _serializers :pass
example# 5438
raise SerializerDoesNotExist ( format )
example# 5439
return _serializers [ format ] . Deserializer
example# 5441
s = get_serializer ( format ) ( )
example# 5442
s . serialize ( queryset , ** options )
example# 5443
return s . getvalue ( )
example# 5445
d = get_deserializer ( format )
example# 5446
return d ( stream_or_string , ** options )
example# 5447
def _load_serializers ( ) :pass
example# 5448
global _serializers
example# 5449
serializers = { }
example# 5450
for format in BUILTIN_SERIALIZERS :pass
example# 5452
if hasattr ( settings , '_STR:0_' ) :pass
example# 5453
for format in settings . SERIALIZATION_MODULES :pass
example# 5455
_serializers = serializers
example# 5456
import warnings
example# 5457
from django . db import models
example# 5458
from django . utils import six
example# 5459
from django . utils . deprecation import RemovedInDjango19Warning
example# 5460
class SerializerDoesNotExist ( KeyError ) :pass
example# 5461
pass
example# 5462
class SerializationError ( Exception ) :pass
example# 5463
pass
example# 5464
class DeserializationError ( Exception ) :pass
example# 5465
pass
example# 5466
class Serializer ( object ) :pass
example# 5467
internal_use_only = False
example# 5469
self . options = options
example# 5470
self . stream = options . pop ( "stream" , six . StringIO ( ) )
example# 5471
self . selected_fields = options . pop ( "fields" , None )
example# 5472
self . use_natural_keys = options . pop ( "use_natural_keys" , False )
example# 5473
if self . use_natural_keys :pass
example# 5475
self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
example# 5476
self . use_natural_primary_keys = options . pop ( '_STR:0_' , False )
example# 5477
self . start_serialization ( )
example# 5478
self . first = True
example# 5479
for obj in queryset :pass
example# 5480
self . start_object ( obj )
example# 5481
concrete_model = obj . _meta . concrete_model
example# 5482
for field in concrete_model . _meta . local_fields :pass
example# 5483
if field . serialize :pass
example# 5484
if field . rel is None :pass
example# 5485
if self . selected_fields is None or field . attname in self . selected_fields :pass
example# 5486
self . handle_field ( obj , field )
example# 5487
if True: pass
else :pass
example# 5488
if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :pass
example# 5489
self . handle_fk_field ( obj , field )
example# 5490
for field in concrete_model . _meta . many_to_many :pass
example# 5491
if field . serialize :pass
example# 5492
if self . selected_fields is None or field . attname in self . selected_fields :pass
example# 5494
self . end_object ( obj )
example# 5495
if self . first :pass
example# 5496
self . first = False
example# 5497
self . end_serialization ( )
example# 5498
return self . getvalue ( )
example# 5499
def start_serialization ( self ) :pass
example# 5500
raise NotImplementedError ( '_STR:0_' )
example# 5501
def end_serialization ( self ) :pass
example# 5502
pass
example# 5503
def start_object ( self , obj ) :pass
example# 5504
raise NotImplementedError ( '_STR:0_' )
example# 5505
def end_object ( self , obj ) :pass
example# 5506
pass
example# 5507
def handle_field ( self , obj , field ) :pass
example# 5508
raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
example# 5509
def handle_fk_field ( self , obj , field ) :pass
example# 5510
raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
example# 5513
def getvalue ( self ) :pass
example# 5514
if callable ( getattr ( self . stream , '_STR:0_' , None ) ) :pass
example# 5515
return self . stream . getvalue ( )
example# 5516
class Deserializer ( six . Iterator ) :pass
example# 5518
self . options = options
example# 5519
if isinstance ( stream_or_string , six . string_types ) :pass
example# 5520
self . stream = six . StringIO ( stream_or_string )
example# 5521
if True: pass
else :pass
example# 5522
self . stream = stream_or_string
example# 5523
def __iter__ ( self ) :pass
example# 5524
return self
example# 5525
def __next__ ( self ) :pass
example# 5526
raise NotImplementedError ( '_STR:0_' )
example# 5527
class DeserializedObject ( object ) :pass
example# 5529
self . object = obj
example# 5531
def __repr__ ( self ) :pass
example# 5532
return '_STR:0_' % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
example# 5534
models . Model . save_base ( self . object , using = using , raw = True )
example# 5537
setattr ( self . object , accessor_name , object_list )
example# 5540
obj = Model ( ** data )
example# 5541
if ( obj . pk is None and hasattr ( Model , '_STR:0_' ) and  hasattr ( Model . _default_manager , '_STR:1_' ) ) :pass
example# 5542
natural_key = obj . natural_key ( )
example# 5543
try :pass
except: pass
example# 5544
obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
example# 5545
try: pass
except Model . DoesNotExist :pass
example# 5546
pass
example# 5547
return obj
example# 5548
from __future__ import absolute_import
example# 5549
from __future__ import unicode_literals
example# 5550
import datetime
example# 5551
import decimal
example# 5552
import json
example# 5553
import sys
example# 5554
from django . core . serializers . base import DeserializationError
example# 5555
from django . core . serializers . python import Serializer as PythonSerializer
example# 5556
from django . core . serializers . python import Deserializer as PythonDeserializer
example# 5557
from django . utils import six
example# 5558
from django . utils . timezone import is_aware
example# 5559
class Serializer ( PythonSerializer ) :pass
example# 5560
internal_use_only = False
example# 5561
def start_serialization ( self ) :pass
example# 5564
self . _current = None
example# 5565
self . json_kwargs = self . options . copy ( )
example# 5566
self . json_kwargs . pop ( '_STR:0_' , None )
example# 5567
self . json_kwargs . pop ( '_STR:0_' , None )
example# 5568
if self . options . get ( '_STR:0_' ) :pass
example# 5570
self . stream . write ( "[" )
example# 5571
def end_serialization ( self ) :pass
example# 5572
if self . options . get ( "indent" ) :pass
example# 5573
self . stream . write ( "\n" )
example# 5574
self . stream . write ( "]" )
example# 5575
if self . options . get ( "indent" ) :pass
example# 5576
self . stream . write ( "\n" )
example# 5577
def end_object ( self , obj ) :pass
example# 5578
indent = self . options . get ( "indent" )
example# 5579
if not self . first :pass
example# 5580
self . stream . write ( "," )
example# 5581
if not indent :pass
example# 5582
self . stream . write ( " " )
example# 5583
if indent :pass
example# 5584
self . stream . write ( "\n" )
example# 5586
self . _current = None
example# 5587
def getvalue ( self ) :pass
example# 5588
return super ( PythonSerializer , self ) . getvalue ( )
example# 5589
def Deserializer ( stream_or_string , ** options ) :pass
example# 5590
if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :pass
example# 5591
stream_or_string = stream_or_string . read ( )
example# 5592
if isinstance ( stream_or_string , bytes ) :pass
example# 5593
stream_or_string = stream_or_string . decode ( '_STR:0_' )
example# 5594
try :pass
except: pass
example# 5595
objects = json . loads ( stream_or_string )
example# 5596
for obj in PythonDeserializer ( objects , ** options ) :pass
example# 5597
yield obj
example# 5598
try: pass
except GeneratorExit :pass
example# 5599
raise
example# 5600
try: pass
except Exception as e :pass
example# 5602
class DjangoJSONEncoder ( json . JSONEncoder ) :pass
example# 5603
def default ( self , o ) :pass
example# 5604
if isinstance ( o , datetime . datetime ) :pass
example# 5605
r = o . isoformat ( )
example# 5606
if o . microsecond :pass
example# 5608
if r . endswith ( '_STR:0_' ) :pass
example# 5610
return r
example# 5611
if True: pass
elif isinstance ( o , datetime . date ) :pass
example# 5612
return o . isoformat ( )
example# 5613
if True: pass
elif isinstance ( o , datetime . time ) :pass
example# 5614
if is_aware ( o ) :pass
example# 5615
raise ValueError ( '_STR:0_' )
example# 5616
r = o . isoformat ( )
example# 5617
if o . microsecond :pass
example# 5618
r = r [ : 12 ]
example# 5619
return r
example# 5620
if True: pass
elif isinstance ( o , decimal . Decimal ) :pass
example# 5621
return str ( o )
example# 5622
if True: pass
else :pass
example# 5623
return super ( DjangoJSONEncoder , self ) . default ( o )
example# 5624
DateTimeAwareJSONEncoder = DjangoJSONEncoder
example# 5625
from __future__ import unicode_literals
example# 5626
from django . apps import apps
example# 5627
from django . conf import settings
example# 5628
from django . core . serializers import base
example# 5629
from django . db import models , DEFAULT_DB_ALIAS
example# 5630
from django . utils . encoding import smart_text , is_protected_type
example# 5631
from django . utils import six
example# 5632
class Serializer ( base . Serializer ) :pass
example# 5633
internal_use_only = True
example# 5634
def start_serialization ( self ) :pass
example# 5635
self . _current = None
example# 5636
self . objects = [ ]
example# 5637
def end_serialization ( self ) :pass
example# 5638
pass
example# 5639
def start_object ( self , obj ) :pass
example# 5640
self . _current = { }
example# 5641
def end_object ( self , obj ) :pass
example# 5642
self . objects . append ( self . get_dump_object ( obj ) )
example# 5643
self . _current = None
example# 5644
def get_dump_object ( self , obj ) :pass
example# 5646
if not self . use_natural_primary_keys or not hasattr ( obj , '_STR:0_' ) :pass
example# 5648
return data
example# 5649
def handle_field ( self , obj , field ) :pass
example# 5650
value = field . _get_val_from_obj ( obj )
example# 5651
if is_protected_type ( value ) :pass
example# 5652
self . _current [ field . name ] = value
example# 5653
if True: pass
else :pass
example# 5654
self . _current [ field . name ] = field . value_to_string ( obj )
example# 5655
def handle_fk_field ( self , obj , field ) :pass
example# 5656
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5657
related = getattr ( obj , field . name )
example# 5658
if related :pass
example# 5659
value = related . natural_key ( )
example# 5660
if True: pass
else :pass
example# 5661
value = None
example# 5662
if True: pass
else :pass
example# 5663
value = getattr ( obj , field . get_attname ( ) )
example# 5664
self . _current [ field . name ] = value
example# 5666
if field . rel . through . _meta . auto_created :pass
example# 5667
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5669
if True: pass
else :pass
example# 5672
def getvalue ( self ) :pass
example# 5673
return self . objects
example# 5674
def Deserializer ( object_list , ** options ) :pass
example# 5675
db = options . pop ( '_STR:0_' , DEFAULT_DB_ALIAS )
example# 5676
ignore = options . pop ( '_STR:0_' , False )
example# 5677
for d in object_list :pass
example# 5678
try :pass
except: pass
example# 5679
Model = _get_model ( d [ "model" ] )
example# 5680
try: pass
except base . DeserializationError :pass
example# 5681
if ignore :pass
example# 5682
continue
example# 5683
if True: pass
else :pass
example# 5684
raise
example# 5685
data = { }
example# 5686
if '_STR:0_' in d :pass
example# 5687
data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( "pk" , None ) )
example# 5689
model_fields = Model . _meta . get_all_field_names ( )
example# 5690
for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :pass
example# 5691
if ignore and field_name not in model_fields :pass
example# 5692
continue
example# 5693
if isinstance ( field_value , str ) :pass
example# 5695
field = Model . _meta . get_field ( field_name )
example# 5696
if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :pass
example# 5697
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5699
if hasattr ( value , '_STR:0_' ) and not isinstance ( value , six . text_type ) :pass
example# 5700
return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
example# 5701
if True: pass
else :pass
example# 5702
return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
example# 5703
if True: pass
else :pass
example# 5706
if True: pass
elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :pass
example# 5707
if field_value is not None :pass
example# 5708
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5709
if hasattr ( field_value , '_STR:0_' ) and not isinstance ( field_value , six . text_type ) :pass
example# 5710
obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
example# 5711
value = getattr ( obj , field . rel . field_name )
example# 5712
if field . rel . to . _meta . pk . rel :pass
example# 5713
value = value . pk
example# 5714
if True: pass
else :pass
example# 5715
value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5716
data [ field . attname ] = value
example# 5717
if True: pass
else :pass
example# 5718
data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5719
if True: pass
else :pass
example# 5720
data [ field . attname ] = None
example# 5721
if True: pass
else :pass
example# 5722
data [ field . name ] = field . to_python ( field_value )
example# 5723
obj = base . build_instance ( Model , data , db )
example# 5725
def _get_model ( model_identifier ) :pass
example# 5726
try :pass
except: pass
example# 5727
return apps . get_model ( model_identifier )
example# 5728
try: pass
except ( LookupError , TypeError ) :pass
example# 5729
raise base . DeserializationError ( '_STR:0_' % model_identifier )
example# 5730
import decimal
example# 5731
import yaml
example# 5732
import sys
example# 5733
from io import StringIO
example# 5734
from django . db import models
example# 5735
from django . core . serializers . base import DeserializationError
example# 5736
from django . core . serializers . python import Serializer as PythonSerializer
example# 5737
from django . core . serializers . python import Deserializer as PythonDeserializer
example# 5738
from django . utils import six
example# 5739
try :pass
except: pass
example# 5740
from yaml import CSafeLoader as SafeLoader
example# 5741
from yaml import CSafeDumper as SafeDumper
example# 5742
try: pass
except ImportError :pass
example# 5743
from yaml import SafeLoader , SafeDumper
example# 5744
class DjangoSafeDumper ( SafeDumper ) :pass
example# 5745
def represent_decimal ( self , data ) :pass
example# 5747
DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
example# 5748
class Serializer ( PythonSerializer ) :pass
example# 5749
internal_use_only = False
example# 5750
def handle_field ( self , obj , field ) :pass
example# 5751
if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :pass
example# 5752
self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
example# 5753
if True: pass
else :pass
example# 5754
super ( Serializer , self ) . handle_field ( obj , field )
example# 5755
def end_serialization ( self ) :pass
example# 5757
def getvalue ( self ) :pass
example# 5758
return super ( PythonSerializer , self ) . getvalue ( )
example# 5760
if isinstance ( stream_or_string , bytes ) :pass
example# 5761
stream_or_string = stream_or_string . decode ( '_STR:0_' )
example# 5762
if isinstance ( stream_or_string , six . string_types ) :pass
example# 5763
stream = StringIO ( stream_or_string )
example# 5764
if True: pass
else :pass
example# 5765
stream = stream_or_string
example# 5766
try :pass
except: pass
example# 5769
try: pass
except GeneratorExit :pass
example# 5770
raise
example# 5771
try: pass
except Exception as e :pass
example# 5773
from __future__ import unicode_literals
example# 5774
from django . apps import apps
example# 5775
from django . conf import settings
example# 5776
from django . core . serializers import base
example# 5777
from django . db import models , DEFAULT_DB_ALIAS
example# 5778
from django . utils . xmlutils import SimplerXMLGenerator
example# 5779
from django . utils . encoding import smart_text
example# 5780
from xml . dom import pulldom
example# 5781
from xml . sax import handler
example# 5782
from xml . sax . expatreader import ExpatParser as _ExpatParser
example# 5783
class Serializer ( base . Serializer ) :pass
example# 5784
def indent ( self , level ) :pass
example# 5785
if self . options . get ( 'indent' , None ) is not None :pass
example# 5786
self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( '_STR:0_' , None ) * level )
example# 5787
def start_serialization ( self ) :pass
example# 5789
self . xml . startDocument ( )
example# 5791
def end_serialization ( self ) :pass
example# 5793
self . xml . endElement ( '_STR:0_' )
example# 5794
self . xml . endDocument ( )
example# 5795
def start_object ( self , obj ) :pass
example# 5796
if not hasattr ( obj , "_meta" ) :pass
example# 5797
raise base . SerializationError ( '_STR:0_' % type ( obj ) )
example# 5798
self . indent ( 1 )
example# 5800
if not self . use_natural_primary_keys or not hasattr ( obj , '_STR:0_' ) :pass
example# 5801
obj_pk = obj . _get_pk_val ( )
example# 5802
if obj_pk is not None :pass
example# 5803
attrs [ '_STR:0_' ] = smart_text ( obj_pk )
example# 5804
self . xml . startElement ( "object" , attrs )
example# 5805
def end_object ( self , obj ) :pass
example# 5806
self . indent ( 1 )
example# 5807
self . xml . endElement ( "object" )
example# 5808
def handle_field ( self , obj , field ) :pass
example# 5809
self . indent ( 2 )
example# 5811
if getattr ( obj , field . name ) is not None :pass
example# 5812
self . xml . characters ( field . value_to_string ( obj ) )
example# 5813
if True: pass
else :pass
example# 5814
self . xml . addQuickElement ( "None" )
example# 5815
self . xml . endElement ( "field" )
example# 5816
def handle_fk_field ( self , obj , field ) :pass
example# 5817
self . _start_relational_field ( field )
example# 5818
related_att = getattr ( obj , field . get_attname ( ) )
example# 5819
if related_att is not None :pass
example# 5820
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5821
related = getattr ( obj , field . name )
example# 5822
related = related . natural_key ( )
example# 5823
for key_value in related :pass
example# 5824
self . xml . startElement ( "natural" , { } )
example# 5825
self . xml . characters ( smart_text ( key_value ) )
example# 5826
self . xml . endElement ( "natural" )
example# 5827
if True: pass
else :pass
example# 5828
self . xml . characters ( smart_text ( related_att ) )
example# 5829
if True: pass
else :pass
example# 5830
self . xml . addQuickElement ( "None" )
example# 5831
self . xml . endElement ( "field" )
example# 5833
if field . rel . through . _meta . auto_created :pass
example# 5834
self . _start_relational_field ( field )
example# 5835
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5837
natural = value . natural_key ( )
example# 5838
self . xml . startElement ( "object" , { } )
example# 5839
for key_value in natural :pass
example# 5840
self . xml . startElement ( "natural" , { } )
example# 5841
self . xml . characters ( smart_text ( key_value ) )
example# 5842
self . xml . endElement ( "natural" )
example# 5843
self . xml . endElement ( "object" )
example# 5844
if True: pass
else :pass
example# 5847
for relobj in getattr ( obj , field . name ) . iterator ( ) :pass
example# 5849
self . xml . endElement ( "field" )
example# 5850
def _start_relational_field ( self , field ) :pass
example# 5851
self . indent ( 2 )
example# 5853
class Deserializer ( base . Deserializer ) :pass
example# 5855
super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
example# 5856
self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
example# 5857
self . db = options . pop ( '_STR:0_' , DEFAULT_DB_ALIAS )
example# 5858
self . ignore = options . pop ( '_STR:0_' , False )
example# 5859
def _make_parser ( self ) :pass
example# 5860
return DefusedExpatParser ( )
example# 5861
def __next__ ( self ) :pass
example# 5862
for event , node in self . event_stream :pass
example# 5863
if event == '_STR:0_' and node . nodeName == "object" :pass
example# 5864
self . event_stream . expandNode ( node )
example# 5865
return self . _handle_object ( node )
example# 5866
raise StopIteration
example# 5867
def _handle_object ( self , node ) :pass
example# 5868
Model = self . _get_model_from_node ( node , "model" )
example# 5869
data = { }
example# 5870
if node . hasAttribute ( '_STR:0_' ) :pass
example# 5871
data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( '_STR:0_' ) )
example# 5873
model_fields = Model . _meta . get_all_field_names ( )
example# 5874
for field_node in node . getElementsByTagName ( "field" ) :pass
example# 5875
field_name = field_node . getAttribute ( "name" )
example# 5876
if not field_name :pass
example# 5877
raise base . DeserializationError ( '_STR:0_' )
example# 5878
if self . ignore and field_name not in model_fields :pass
example# 5879
continue
example# 5880
field = Model . _meta . get_field ( field_name )
example# 5881
if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :pass
example# 5883
if True: pass
elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :pass
example# 5884
data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
example# 5885
if True: pass
else :pass
example# 5886
if field_node . getElementsByTagName ( '_STR:0_' ) :pass
example# 5887
value = None
example# 5888
if True: pass
else :pass
example# 5889
value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
example# 5890
data [ field . name ] = value
example# 5891
obj = base . build_instance ( Model , data , self . db )
example# 5893
def _handle_fk_field_node ( self , node , field ) :pass
example# 5894
if node . getElementsByTagName ( '_STR:0_' ) :pass
example# 5895
return None
example# 5896
if True: pass
else :pass
example# 5897
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5898
keys = node . getElementsByTagName ( '_STR:0_' )
example# 5899
if keys :pass
example# 5900
field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
example# 5901
obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
example# 5902
obj_pk = getattr ( obj , field . rel . field_name )
example# 5903
if field . rel . to . _meta . pk . rel :pass
example# 5904
obj_pk = obj_pk . pk
example# 5905
if True: pass
else :pass
example# 5906
field_value = getInnerText ( node ) . strip ( )
example# 5907
obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5908
return obj_pk
example# 5909
if True: pass
else :pass
example# 5910
field_value = getInnerText ( node ) . strip ( )
example# 5911
return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5913
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5915
keys = n . getElementsByTagName ( '_STR:0_' )
example# 5916
if keys :pass
example# 5917
field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
example# 5918
obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
example# 5919
if True: pass
else :pass
example# 5920
obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( '_STR:0_' ) )
example# 5921
return obj_pk
example# 5922
if True: pass
else :pass
example# 5925
def _get_model_from_node ( self , node , attr ) :pass
example# 5926
model_identifier = node . getAttribute ( attr )
example# 5927
if not model_identifier :pass
example# 5928
raise base . DeserializationError (  '_STR:0_'  % ( node . nodeName , attr ) )
example# 5929
try :pass
except: pass
example# 5930
return apps . get_model ( model_identifier )
example# 5931
try: pass
except ( LookupError , TypeError ) :pass
example# 5932
raise base . DeserializationError (  '_STR:0_'  % ( node . nodeName , model_identifier ) )
example# 5933
def getInnerText ( node ) :pass
example# 5934
inner_text = [ ]
example# 5935
for child in node . childNodes :pass
example# 5936
if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :pass
example# 5937
inner_text . append ( child . data )
example# 5938
if True: pass
elif child . nodeType == child . ELEMENT_NODE :pass
example# 5939
inner_text . extend ( getInnerText ( child ) )
example# 5940
if True: pass
else :pass
example# 5941
pass
example# 5942
return "" . join ( inner_text )
example# 5943
class DefusedExpatParser ( _ExpatParser ) :pass
example# 5944
def __init__ ( self , * args , ** kwargs ) :pass
example# 5945
_ExpatParser . __init__ ( self , * args , ** kwargs )
example# 5948
def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) :pass
example# 5949
raise DTDForbidden ( name , sysid , pubid )
example# 5950
def entity_decl ( self , name , is_parameter_entity , value , base ,  sysid , pubid , notation_name ) :pass
example# 5951
raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
example# 5952
def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :pass
example# 5953
raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
example# 5954
def external_entity_ref_handler ( self , context , base , sysid , pubid ) :pass
example# 5955
raise ExternalReferenceForbidden ( context , base , sysid , pubid )
example# 5956
def reset ( self ) :pass
example# 5957
_ExpatParser . reset ( self )
example# 5958
parser = self . _parser
example# 5959
parser . StartDoctypeDeclHandler = self . start_doctype_decl
example# 5960
parser . EntityDeclHandler = self . entity_decl
example# 5961
parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
example# 5962
parser . ExternalEntityRefHandler = self . external_entity_ref_handler
example# 5963
class DefusedXmlException ( ValueError ) :pass
example# 5964
def __repr__ ( self ) :pass
example# 5965
return str ( self )
example# 5966
class DTDForbidden ( DefusedXmlException ) :pass
example# 5967
def __init__ ( self , name , sysid , pubid ) :pass
example# 5968
super ( DTDForbidden , self ) . __init__ ( )
example# 5969
self . name = name
example# 5970
self . sysid = sysid
example# 5971
self . pubid = pubid
example# 5972
def __str__ ( self ) :pass
example# 5973
tpl = '_STR:0_'
example# 5974
return tpl . format ( self . name , self . sysid , self . pubid )
example# 5975
class EntitiesForbidden ( DefusedXmlException ) :pass
example# 5976
def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :pass
example# 5977
super ( EntitiesForbidden , self ) . __init__ ( )
example# 5978
self . name = name
example# 5979
self . value = value
example# 5980
self . base = base
example# 5981
self . sysid = sysid
example# 5982
self . pubid = pubid
example# 5983
self . notation_name = notation_name
example# 5984
def __str__ ( self ) :pass
example# 5985
tpl = '_STR:0_'
example# 5986
return tpl . format ( self . name , self . sysid , self . pubid )
example# 5987
class ExternalReferenceForbidden ( DefusedXmlException ) :pass
example# 5988
def __init__ ( self , context , base , sysid , pubid ) :pass
example# 5989
super ( ExternalReferenceForbidden , self ) . __init__ ( )
example# 5990
self . context = context
example# 5991
self . base = base
example# 5992
self . sysid = sysid
example# 5993
self . pubid = pubid
example# 5994
def __str__ ( self ) :pass
example# 5995
tpl = '_STR:0_'
example# 5996
return tpl . format ( self . sysid , self . pubid )
example# 5997
from __future__ import unicode_literals
example# 5998
import socket
example# 5999
import sys
example# 6000
from wsgiref import simple_server
example# 6001
from wsgiref . util import FileWrapper
example# 6002
from django . core . exceptions import ImproperlyConfigured
example# 6003
from django . core . management . color import color_style
example# 6004
from django . core . wsgi import get_wsgi_application
example# 6005
from django . utils import six
example# 6006
from django . utils . module_loading import import_string
example# 6007
from django . utils . six . moves import socketserver
example# 6009
def get_internal_wsgi_application ( ) :pass
example# 6010
from django . conf import settings
example# 6011
app_path = getattr ( settings , '_STR:0_' )
example# 6012
if app_path is None :pass
example# 6013
return get_wsgi_application ( )
example# 6014
try :pass
except: pass
example# 6015
return import_string ( app_path )
example# 6016
try: pass
except ImportError as e :pass
example# 6017
msg = (  "WSGI application '_STR:1_' could not be loaded; "  "Error importing module: '_STR:2_'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
example# 6019
class WSGIServer ( simple_server . WSGIServer , object ) :pass
example# 6020
request_queue_size = 10
example# 6025
def server_bind ( self ) :pass
example# 6026
super ( WSGIServer , self ) . server_bind ( )
example# 6027
self . setup_environ ( )
example# 6028
class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :pass
example# 6030
self . style = color_style ( )
example# 6032
def address_string ( self ) :pass
example# 6033
return self . client_address [ 0 ]
example# 6034
def log_message ( self , format , * args ) :pass
example# 6035
msg = '_STR:0_' % ( self . log_date_time_string ( ) , format % args )
example# 6037
msg = self . style . HTTP_SUCCESS ( msg )
example# 6039
msg = self . style . HTTP_INFO ( msg )
example# 6040
if True: pass
elif args [ 1 ] == '_STR:0_' :pass
example# 6041
msg = self . style . HTTP_NOT_MODIFIED ( msg )
example# 6043
msg = self . style . HTTP_REDIRECT ( msg )
example# 6045
msg = self . style . HTTP_NOT_FOUND ( msg )
example# 6047
msg = self . style . HTTP_BAD_REQUEST ( msg )
example# 6048
if True: pass
else :pass
example# 6049
msg = self . style . HTTP_SERVER_ERROR ( msg )
example# 6050
sys . stderr . write ( msg )
example# 6053
if threading :pass
example# 6055
if True: pass
else :pass
example# 6056
httpd_cls = WSGIServer
example# 6058
if threading :pass
example# 6059
httpd . daemon_threads = True
example# 6060
httpd . set_app ( wsgi_handler )
example# 6061
httpd . serve_forever ( )
example# 6062
import importlib
example# 6063
import os
example# 6064
import sys
example# 6065
__version__ = '_STR:0_'
example# 6066
__all__ = [ '_STR:0_' ]
example# 6067
FASTCGI_OPTIONS = {  '_STR:1_' : '_STR:0_' ,  '_STR:2_' : None ,  '_STR:3_' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
example# 6068
def fastcgi_help ( message = None ) :pass
example# 6069
print ( FASTCGI_HELP )
example# 6070
if message :pass
example# 6071
print ( message )
example# 6072
return False
example# 6074
options = FASTCGI_OPTIONS . copy ( )
example# 6075
options . update ( kwargs )
example# 6076
for x in argset :pass
example# 6077
if "=" in x :pass
example# 6079
if True: pass
else :pass
example# 6080
k , v = x , True
example# 6081
options [ k . lower ( ) ] = v
example# 6082
if "help" in options :pass
example# 6083
return fastcgi_help ( )
example# 6084
try :pass
except: pass
example# 6085
import flup
example# 6086
try: pass
except ImportError as e :pass
example# 6087
sys . stderr . write ( '_STR:0_' % e )
example# 6088
sys . stderr . write ( '_STR:0_' )
example# 6089
sys . stderr . write ( '_STR:0_' )
example# 6090
sys . stderr . write ( '_STR:0_' )
example# 6091
sys . stderr . write ( '_STR:0_' )
example# 6092
return False
example# 6093
flup_module = '_STR:1_' + options [ '_STR:0_' ]
example# 6094
if options [ '_STR:0_' ] in ( 'prefork' , '_STR:2_' ) :pass
example# 6096
flup_module += '_STR:0_'
example# 6097
if True: pass
elif options [ '_STR:0_' ] in ( '_STR:1_' , '_STR:2_' ) :pass
example# 6099
if True: pass
else :pass
example# 6100
return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
example# 6101
wsgi_opts [ '_STR:0_' ] = options [ '_STR:0_' ] is not None
example# 6102
try :pass
except: pass
example# 6104
WSGIServer = module . WSGIServer
example# 6105
try: pass
except Exception :pass
example# 6106
print ( '_STR:0_' + flup_module )
example# 6107
return False
example# 6108
from django . core . servers . basehttp import get_internal_wsgi_application
example# 6109
if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :pass
example# 6111
if True: pass
elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :pass
example# 6112
wsgi_opts [ '_STR:1_' ] = options [ "socket" ]
example# 6113
if True: pass
elif not options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :pass
example# 6114
wsgi_opts [ '_STR:0_' ] = None
example# 6115
if True: pass
else :pass
example# 6116
return fastcgi_help ( '_STR:0_' )
example# 6117
if options [ "daemonize" ] is None :pass
example# 6118
daemonize = ( wsgi_opts [ '_STR:0_' ] is not None )
example# 6119
if True: pass
else :pass
example# 6120
if options [ "daemonize" ] . lower ( ) in ( '_STR:1_' , '_STR:2_' , '_STR:3_' ) :pass
example# 6121
daemonize = True
example# 6122
if True: pass
elif options [ "daemonize" ] . lower ( ) in ( '_STR:1_' , '_STR:2_' , '_STR:3_' ) :pass
example# 6123
daemonize = False
example# 6124
if True: pass
else :pass
example# 6125
return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
example# 6126
daemon_kwargs = { }
example# 6127
if options [ '_STR:0_' ] :pass
example# 6128
daemon_kwargs [ '_STR:1_' ] = options [ '_STR:0_' ]
example# 6129
if options [ '_STR:0_' ] :pass
example# 6130
daemon_kwargs [ '_STR:1_' ] = options [ '_STR:0_' ]
example# 6131
if options [ '_STR:0_' ] :pass
example# 6133
if daemonize :pass
example# 6134
from django . utils . daemonize import become_daemon
example# 6136
if options [ "pidfile" ] :pass
example# 6137
with open ( options [ "pidfile" ] , "w" ) as fp :pass
example# 6138
fp . write ( "%d\n" % os . getpid ( ) )
example# 6140
if __name__ == '_STR:0_' :pass
example# 6141
runfastcgi ( sys . argv [ 1 : ] )
example# 6142
from django . dispatch import Signal
example# 6143
request_started = Signal ( )
example# 6144
request_finished = Signal ( )
example# 6145
got_request_exception = Signal ( providing_args = [ "request" ] )
example# 6146
from __future__ import unicode_literals
example# 6147
import base64
example# 6148
import json
example# 6149
import time
example# 6150
import zlib
example# 6151
from django . conf import settings
example# 6152
from django . utils import baseconv
example# 6153
from django . utils . crypto import constant_time_compare , salted_hmac
example# 6154
from django . utils . encoding import force_bytes , force_str , force_text
example# 6155
from django . utils . module_loading import import_string
example# 6156
class BadSignature ( Exception ) :pass
example# 6157
pass
example# 6158
class SignatureExpired ( BadSignature ) :pass
example# 6159
pass
example# 6160
def b64_encode ( s ) :pass
example# 6161
return base64 . urlsafe_b64encode ( s ) . strip ( b'_STR:0_' )
example# 6162
def b64_decode ( s ) :pass
example# 6164
return base64 . urlsafe_b64decode ( s + pad )
example# 6165
def base64_hmac ( salt , value , key ) :pass
example# 6167
def get_cookie_signer ( salt = '_STR:0_' ) :pass
example# 6168
Signer = import_string ( settings . SIGNING_BACKEND )
example# 6169
key = force_bytes ( settings . SECRET_KEY )
example# 6171
class JSONSerializer ( object ) :pass
example# 6172
def dumps ( self , obj ) :pass
example# 6174
def loads ( self , data ) :pass
example# 6175
return json . loads ( data . decode ( '_STR:0_' ) )
example# 6177
data = serializer ( ) . dumps ( obj )
example# 6178
is_compressed = False
example# 6179
if compress :pass
example# 6180
compressed = zlib . compress ( data )
example# 6182
data = compressed
example# 6183
is_compressed = True
example# 6184
base64d = b64_encode ( data )
example# 6185
if is_compressed :pass
example# 6186
base64d = b'_STR:0_' + base64d
example# 6187
return TimestampSigner ( key , salt = salt ) . sign ( base64d )
example# 6189
base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
example# 6190
decompress = False
example# 6191
if base64d [ : 1 ] == b'_STR:0_' :pass
example# 6192
base64d = base64d [ 1 : ]
example# 6193
decompress = True
example# 6194
data = b64_decode ( base64d )
example# 6195
if decompress :pass
example# 6196
data = zlib . decompress ( data )
example# 6197
return serializer ( ) . loads ( data )
example# 6198
class Signer ( object ) :pass
example# 6200
self . sep = force_str ( sep )
example# 6201
self . key = key or settings . SECRET_KEY
example# 6202
self . salt = force_str ( salt or  '_STR:0_' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
example# 6203
def signature ( self , value ) :pass
example# 6205
return force_str ( signature )
example# 6206
def sign ( self , value ) :pass
example# 6207
value = force_str ( value )
example# 6208
return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
example# 6209
def unsign ( self , signed_value ) :pass
example# 6210
signed_value = force_str ( signed_value )
example# 6211
if self . sep not in signed_value :pass
example# 6212
raise BadSignature ( '_STR:0_' % self . sep )
example# 6215
return force_text ( value )
example# 6216
raise BadSignature ( '_STR:0_' % sig )
example# 6217
class TimestampSigner ( Signer ) :pass
example# 6218
def timestamp ( self ) :pass
example# 6219
return baseconv . base62 . encode ( int ( time . time ( ) ) )
example# 6220
def sign ( self , value ) :pass
example# 6221
value = force_str ( value )
example# 6222
value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
example# 6223
return super ( TimestampSigner , self ) . sign ( value )
example# 6224
def unsign ( self , value , max_age = None ) :pass
example# 6225
result = super ( TimestampSigner , self ) . unsign ( value )
example# 6227
timestamp = baseconv . base62 . decode ( timestamp )
example# 6228
if max_age is not None :pass
example# 6229
age = time . time ( ) - timestamp
example# 6230
if age > max_age :pass
example# 6231
raise SignatureExpired (  '_STR:0_' % ( age , max_age ) )
example# 6232
return value
example# 6233
from __future__ import unicode_literals
example# 6234
import functools
example# 6235
from importlib import import_module
example# 6236
import re
example# 6237
from threading import local
example# 6238
import warnings
example# 6240
from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
example# 6241
from django . utils . datastructures import MultiValueDict
example# 6242
from django . utils . deprecation import RemovedInDjango20Warning
example# 6243
from django . utils . encoding import force_str , force_text , iri_to_uri
example# 6244
from django . utils . functional import lazy
example# 6245
from django . utils . http import urlquote
example# 6246
from django . utils . module_loading import module_has_submodule
example# 6247
from django . utils . regex_helper import normalize
example# 6248
from django . utils import six , lru_cache
example# 6249
from django . utils . translation import get_language
example# 6250
_prefixes = local ( )
example# 6251
_urlconfs = local ( )
example# 6252
class ResolverMatch ( object ) :pass
example# 6254
self . func = func
example# 6255
self . args = args
example# 6256
self . kwargs = kwargs
example# 6257
self . url_name = url_name
example# 6258
self . app_name = app_name
example# 6259
if namespaces :pass
example# 6260
self . namespaces = [ x for x in namespaces if x ]
example# 6261
if True: pass
else :pass
example# 6262
self . namespaces = [ ]
example# 6263
self . namespace = '_STR:0_' . join ( self . namespaces )
example# 6264
if not hasattr ( func , '_STR:0_' ) :pass
example# 6265
self . _func_path = '_STR:0_' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )
example# 6266
if True: pass
else :pass
example# 6267
self . _func_path = '_STR:0_' . join ( [ func . __module__ , func . __name__ ] )
example# 6268
view_path = url_name or self . _func_path
example# 6269
self . view_name = '_STR:0_' . join ( self . namespaces + [ view_path ] )
example# 6270
def __getitem__ ( self , index ) :pass
example# 6272
def __repr__ ( self ) :pass
example# 6273
return '_STR:0_' % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
example# 6275
pass
example# 6276
class NoReverseMatch ( Exception ) :pass
example# 6277
pass
example# 6278
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 6279
def get_callable ( lookup_view , can_fail = False ) :pass
example# 6280
if callable ( lookup_view ) :pass
example# 6281
return lookup_view
example# 6282
mod_name , func_name = get_mod_func ( lookup_view )
example# 6283
if not func_name :pass
example# 6284
if can_fail :pass
example# 6285
return lookup_view
example# 6286
if True: pass
else :pass
example# 6287
raise ImportError (  '_STR:0_' %  lookup_view )
example# 6288
try :pass
except: pass
example# 6289
mod = import_module ( mod_name )
example# 6290
try: pass
except ImportError :pass
example# 6291
if can_fail :pass
example# 6292
return lookup_view
example# 6293
if True: pass
else :pass
example# 6294
parentmod , submod = get_mod_func ( mod_name )
example# 6296
raise ViewDoesNotExist (  '_STR:0_' %  ( lookup_view , mod_name ) )
example# 6297
if True: pass
else :pass
example# 6298
raise
example# 6299
if True: pass
else :pass
example# 6300
try :pass
except: pass
example# 6301
view_func = getattr ( mod , func_name )
example# 6302
try: pass
except AttributeError :pass
example# 6303
if can_fail :pass
example# 6304
return lookup_view
example# 6305
if True: pass
else :pass
example# 6306
raise ViewDoesNotExist (  '_STR:0_' %  ( lookup_view , mod_name ) )
example# 6307
if True: pass
else :pass
example# 6308
if not callable ( view_func ) :pass
example# 6309
raise ViewDoesNotExist (  '_STR:0_' %  ( mod_name , func_name ) )
example# 6310
return view_func
example# 6311
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 6312
def get_resolver ( urlconf ) :pass
example# 6313
if urlconf is None :pass
example# 6314
from django . conf import settings
example# 6315
urlconf = settings . ROOT_URLCONF
example# 6316
return RegexURLResolver ( r'_STR:0_' , urlconf )
example# 6317
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 6318
def get_ns_resolver ( ns_pattern , resolver ) :pass
example# 6320
return RegexURLResolver ( r'_STR:0_' , [ ns_resolver ] )
example# 6321
def get_mod_func ( callback ) :pass
example# 6322
try :pass
except: pass
example# 6323
dot = callback . rindex ( '_STR:0_' )
example# 6324
try: pass
except ValueError :pass
example# 6325
return callback , ''
example# 6326
return callback [ : dot ] , callback [ dot + 1 : ]
example# 6327
class LocaleRegexProvider ( object ) :pass
example# 6328
def __init__ ( self , regex ) :pass
example# 6329
self . _regex = regex
example# 6330
self . _regex_dict = { }
example# 6331
@ property
def dummy(): pass
example# 6332
def regex ( self ) :pass
example# 6333
language_code = get_language ( )
example# 6334
if language_code not in self . _regex_dict :pass
example# 6335
if isinstance ( self . _regex , six . string_types ) :pass
example# 6336
regex = self . _regex
example# 6337
if True: pass
else :pass
example# 6338
regex = force_text ( self . _regex )
example# 6339
try :pass
except: pass
example# 6340
compiled_regex = re . compile ( regex , re . UNICODE )
example# 6341
try: pass
except re . error as e :pass
example# 6342
raise ImproperlyConfigured (  '_STR:0_' %  ( regex , six . text_type ( e ) ) )
example# 6343
self . _regex_dict [ language_code ] = compiled_regex
example# 6344
return self . _regex_dict [ language_code ]
example# 6345
class RegexURLPattern ( LocaleRegexProvider ) :pass
example# 6347
LocaleRegexProvider . __init__ ( self , regex )
example# 6348
if callable ( callback ) :pass
example# 6349
self . _callback = callback
example# 6350
if True: pass
else :pass
example# 6351
self . _callback = None
example# 6352
self . _callback_str = callback
example# 6353
self . default_args = default_args or { }
example# 6354
self . name = name
example# 6355
def __repr__ ( self ) :pass
example# 6356
return force_str ( '_STR:0_' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )
example# 6357
def add_prefix ( self , prefix ) :pass
example# 6358
if not prefix or not hasattr ( self , '_STR:0_' ) :pass
example# 6359
return
example# 6360
self . _callback_str = prefix + '_STR:0_' + self . _callback_str
example# 6361
def resolve ( self , path ) :pass
example# 6362
match = self . regex . search ( path )
example# 6363
if match :pass
example# 6364
kwargs = match . groupdict ( )
example# 6365
if kwargs :pass
example# 6366
args = ( )
example# 6367
if True: pass
else :pass
example# 6368
args = match . groups ( )
example# 6369
kwargs . update ( self . default_args )
example# 6370
return ResolverMatch ( self . callback , args , kwargs , self . name )
example# 6371
@ property
def dummy(): pass
example# 6372
def callback ( self ) :pass
example# 6373
if self . _callback is not None :pass
example# 6374
return self . _callback
example# 6375
self . _callback = get_callable ( self . _callback_str )
example# 6376
return self . _callback
example# 6377
class RegexURLResolver ( LocaleRegexProvider ) :pass
example# 6379
LocaleRegexProvider . __init__ ( self , regex )
example# 6380
self . urlconf_name = urlconf_name
example# 6381
if not isinstance ( urlconf_name , six . string_types ) :pass
example# 6382
self . _urlconf_module = self . urlconf_name
example# 6383
self . callback = None
example# 6384
self . default_kwargs = default_kwargs or { }
example# 6385
self . namespace = namespace
example# 6386
self . app_name = app_name
example# 6387
self . _reverse_dict = { }
example# 6388
self . _namespace_dict = { }
example# 6389
self . _app_dict = { }
example# 6390
self . _callback_strs = set ( )
example# 6391
self . _populated = False
example# 6392
def __repr__ ( self ) :pass
example# 6393
if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :pass
example# 6394
urlconf_repr = '_STR:0_' % self . urlconf_name [ 0 ] . __class__ . __name__
example# 6395
if True: pass
else :pass
example# 6396
urlconf_repr = repr ( self . urlconf_name )
example# 6397
return str ( '_STR:0_' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
example# 6398
def _populate ( self ) :pass
example# 6399
lookups = MultiValueDict ( )
example# 6400
namespaces = { }
example# 6401
apps = { }
example# 6402
language_code = get_language ( )
example# 6403
for pattern in reversed ( self . url_patterns ) :pass
example# 6404
if hasattr ( pattern , '_STR:0_' ) :pass
example# 6405
self . _callback_strs . add ( pattern . _callback_str )
example# 6406
if True: pass
elif hasattr ( pattern , '_STR:0_' ) :pass
example# 6407
callback = pattern . _callback
example# 6408
if isinstance ( callback , functools . partial ) :pass
example# 6409
callback = callback . func
example# 6410
if not hasattr ( callback , '_STR:0_' ) :pass
example# 6411
lookup_str = callback . __module__ + '_STR:0_' + callback . __class__ . __name__
example# 6412
if True: pass
else :pass
example# 6413
lookup_str = callback . __module__ + '_STR:0_' + callback . __name__
example# 6414
self . _callback_strs . add ( lookup_str )
example# 6415
p_pattern = pattern . regex . pattern
example# 6416
if p_pattern . startswith ( '_STR:0_' ) :pass
example# 6417
p_pattern = p_pattern [ 1 : ]
example# 6418
if isinstance ( pattern , RegexURLResolver ) :pass
example# 6419
if pattern . namespace :pass
example# 6421
if pattern . app_name :pass
example# 6423
if True: pass
else :pass
example# 6424
parent_pat = pattern . regex . pattern
example# 6425
for name in pattern . reverse_dict :pass
example# 6426
for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :pass
example# 6427
new_matches = normalize ( parent_pat + pat )
example# 6429
for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :pass
example# 6431
for app_name , namespace_list in pattern . app_dict . items ( ) :pass
example# 6433
self . _callback_strs . update ( pattern . _callback_strs )
example# 6434
if True: pass
else :pass
example# 6435
bits = normalize ( p_pattern )
example# 6437
if pattern . name is not None :pass
example# 6439
self . _reverse_dict [ language_code ] = lookups
example# 6440
self . _namespace_dict [ language_code ] = namespaces
example# 6441
self . _app_dict [ language_code ] = apps
example# 6442
self . _populated = True
example# 6443
@ property
def dummy(): pass
example# 6444
def reverse_dict ( self ) :pass
example# 6445
language_code = get_language ( )
example# 6446
if language_code not in self . _reverse_dict :pass
example# 6447
self . _populate ( )
example# 6448
return self . _reverse_dict [ language_code ]
example# 6449
@ property
def dummy(): pass
example# 6450
def namespace_dict ( self ) :pass
example# 6451
language_code = get_language ( )
example# 6452
if language_code not in self . _namespace_dict :pass
example# 6453
self . _populate ( )
example# 6454
return self . _namespace_dict [ language_code ]
example# 6455
@ property
def dummy(): pass
example# 6456
def app_dict ( self ) :pass
example# 6457
language_code = get_language ( )
example# 6458
if language_code not in self . _app_dict :pass
example# 6459
self . _populate ( )
example# 6460
return self . _app_dict [ language_code ]
example# 6461
def resolve ( self , path ) :pass
example# 6462
path = force_text ( path )
example# 6463
tried = [ ]
example# 6464
match = self . regex . search ( path )
example# 6465
if match :pass
example# 6466
new_path = path [ match . end ( ) : ]
example# 6467
for pattern in self . url_patterns :pass
example# 6468
try :pass
except: pass
example# 6469
sub_match = pattern . resolve ( new_path )
example# 6471
sub_tried = e . args [ 0 ] . get ( '_STR:0_' )
example# 6472
if sub_tried is not None :pass
example# 6473
tried . extend ( [ pattern ] + t for t in sub_tried )
example# 6474
if True: pass
else :pass
example# 6475
tried . append ( [ pattern ] )
example# 6476
if True: pass
else :pass
example# 6477
if sub_match :pass
example# 6478
sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
example# 6479
sub_match_dict . update ( sub_match . kwargs )
example# 6481
tried . append ( [ pattern ] )
example# 6484
@ property
def dummy(): pass
example# 6485
def urlconf_module ( self ) :pass
example# 6486
try :pass
except: pass
example# 6487
return self . _urlconf_module
example# 6488
try: pass
except AttributeError :pass
example# 6489
self . _urlconf_module = import_module ( self . urlconf_name )
example# 6490
return self . _urlconf_module
example# 6491
@ property
def dummy(): pass
example# 6492
def url_patterns ( self ) :pass
example# 6493
patterns = getattr ( self . urlconf_module , '_STR:0_' , self . urlconf_module )
example# 6494
try :pass
except: pass
example# 6495
iter ( patterns )
example# 6496
try: pass
except TypeError :pass
example# 6497
msg = (  "The included urlconf '_STR:1_' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
example# 6498
raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
example# 6499
return patterns
example# 6500
def resolve_error_handler ( self , view_type ) :pass
example# 6501
callback = getattr ( self . urlconf_module , '_STR:0_' % view_type , None )
example# 6502
if not callback :pass
example# 6503
from django . conf import urls
example# 6504
callback = getattr ( urls , '_STR:0_' % view_type )
example# 6505
return get_callable ( callback ) , { }
example# 6506
def reverse ( self , lookup_view , * args , ** kwargs ) :pass
example# 6508
def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :pass
example# 6509
if args and kwargs :pass
example# 6510
raise ValueError ( '_STR:0_' )
example# 6511
text_args = [ force_text ( v ) for v in args ]
example# 6512
text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
example# 6513
if not self . _populated :pass
example# 6514
self . _populate ( )
example# 6515
original_lookup = lookup_view
example# 6516
try :pass
except: pass
example# 6517
if lookup_view in self . _callback_strs :pass
example# 6518
lookup_view = get_callable ( lookup_view , True )
example# 6519
try: pass
except ( ImportError , AttributeError ) as e :pass
example# 6520
raise NoReverseMatch ( '_STR:0_' % ( lookup_view , e ) )
example# 6521
if True: pass
else :pass
example# 6522
if not callable ( original_lookup ) and callable ( lookup_view ) :pass
example# 6524
possibilities = self . reverse_dict . getlist ( lookup_view )
example# 6525
prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]
example# 6526
for possibility , pattern , defaults in possibilities :pass
example# 6527
for result , params in possibility :pass
example# 6528
if args :pass
example# 6529
if len ( args ) != len ( params ) + len ( prefix_args ) :pass
example# 6530
continue
example# 6532
if True: pass
else :pass
example# 6533
if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :pass
example# 6534
continue
example# 6535
matches = True
example# 6536
for k , v in defaults . items ( ) :pass
example# 6537
if kwargs . get ( k , v ) != v :pass
example# 6538
matches = False
example# 6539
break
example# 6540
if not matches :pass
example# 6541
continue
example# 6542
candidate_subs = text_kwargs
example# 6543
candidate_pat = prefix_norm . replace ( '_STR:0_' , '_STR:1_' ) + result
example# 6545
candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
example# 6546
return candidate_pat % candidate_subs
example# 6547
m = getattr ( lookup_view , '_STR:0_' , None )
example# 6548
n = getattr ( lookup_view , '_STR:0_' , None )
example# 6549
if m is not None and n is not None :pass
example# 6550
lookup_view_s = "%s.%s" % ( m , n )
example# 6551
if True: pass
else :pass
example# 6552
lookup_view_s = lookup_view
example# 6553
patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
example# 6554
raise NoReverseMatch ( '_STR:0_'  '_STR:1_' %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
example# 6555
class LocaleRegexURLResolver ( RegexURLResolver ) :pass
example# 6557
super ( LocaleRegexURLResolver , self ) . __init__ (  None , urlconf_name , default_kwargs , app_name , namespace )
example# 6558
@ property
def dummy(): pass
example# 6559
def regex ( self ) :pass
example# 6560
language_code = get_language ( )
example# 6561
if language_code not in self . _regex_dict :pass
example# 6563
self . _regex_dict [ language_code ] = regex_compiled
example# 6564
return self . _regex_dict [ language_code ]
example# 6565
def resolve ( path , urlconf = None ) :pass
example# 6566
if urlconf is None :pass
example# 6567
urlconf = get_urlconf ( )
example# 6568
return get_resolver ( urlconf ) . resolve ( path )
example# 6570
if urlconf is None :pass
example# 6571
urlconf = get_urlconf ( )
example# 6572
resolver = get_resolver ( urlconf )
example# 6573
args = args or [ ]
example# 6574
kwargs = kwargs or { }
example# 6575
if prefix is None :pass
example# 6576
prefix = get_script_prefix ( )
example# 6577
if not isinstance ( viewname , six . string_types ) :pass
example# 6578
view = viewname
example# 6579
if True: pass
else :pass
example# 6580
parts = viewname . split ( '_STR:0_' )
example# 6581
parts . reverse ( )
example# 6582
view = parts [ 0 ]
example# 6583
path = parts [ 1 : ]
example# 6584
resolved_path = [ ]
example# 6585
ns_pattern = ''
example# 6586
while path :pass
example# 6587
ns = path . pop ( )
example# 6588
try :pass
except: pass
example# 6589
app_list = resolver . app_dict [ ns ]
example# 6590
if current_app and current_app in app_list :pass
example# 6591
ns = current_app
example# 6592
if True: pass
elif ns not in app_list :pass
example# 6593
ns = app_list [ 0 ]
example# 6594
try: pass
except KeyError :pass
example# 6595
pass
example# 6596
try :pass
except: pass
example# 6597
extra , resolver = resolver . namespace_dict [ ns ]
example# 6598
resolved_path . append ( ns )
example# 6599
ns_pattern = ns_pattern + extra
example# 6600
try: pass
except KeyError as key :pass
example# 6601
if resolved_path :pass
example# 6602
raise NoReverseMatch (  '_STR:0_' %  ( key , '_STR:1_' . join ( resolved_path ) ) )
example# 6603
if True: pass
else :pass
example# 6604
raise NoReverseMatch ( '_STR:0_' %  key )
example# 6605
if ns_pattern :pass
example# 6606
resolver = get_ns_resolver ( ns_pattern , resolver )
example# 6608
reverse_lazy = lazy ( reverse , str )
example# 6609
def clear_url_caches ( ) :pass
example# 6610
get_callable . cache_clear ( )
example# 6611
get_resolver . cache_clear ( )
example# 6612
get_ns_resolver . cache_clear ( )
example# 6613
def set_script_prefix ( prefix ) :pass
example# 6614
if not prefix . endswith ( '_STR:0_' ) :pass
example# 6615
prefix += '_STR:0_'
example# 6616
_prefixes . value = prefix
example# 6617
def get_script_prefix ( ) :pass
example# 6618
return getattr ( _prefixes , "value" , '_STR:1_' )
example# 6619
def clear_script_prefix ( ) :pass
example# 6620
try :pass
except: pass
example# 6621
del _prefixes . value
example# 6622
try: pass
except AttributeError :pass
example# 6623
pass
example# 6624
def set_urlconf ( urlconf_name ) :pass
example# 6625
if urlconf_name :pass
example# 6626
_urlconfs . value = urlconf_name
example# 6627
if True: pass
else :pass
example# 6628
if hasattr ( _urlconfs , "value" ) :pass
example# 6629
del _urlconfs . value
example# 6630
def get_urlconf ( default = None ) :pass
example# 6631
return getattr ( _urlconfs , "value" , default )
example# 6632
def is_valid_path ( path , urlconf = None ) :pass
example# 6633
try :pass
except: pass
example# 6634
resolve ( path , urlconf )
example# 6635
return True
example# 6637
return False
example# 6638
from __future__ import unicode_literals
example# 6639
import re
example# 6640
from django . core . exceptions import ValidationError
example# 6641
from django . utils . deconstruct import deconstructible
example# 6642
from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
example# 6643
from django . utils . encoding import force_text
example# 6645
from django . utils import six
example# 6646
from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
example# 6648
@ deconstructible
def dummy(): pass
example# 6649
class RegexValidator ( object ) :pass
example# 6650
regex = ''
example# 6651
message = _ ( '_STR:0_' )
example# 6652
code = '_STR:0_'
example# 6653
inverse_match = False
example# 6654
flags = 0
example# 6656
if regex is not None :pass
example# 6657
self . regex = regex
example# 6658
if message is not None :pass
example# 6659
self . message = message
example# 6660
if code is not None :pass
example# 6661
self . code = code
example# 6662
if inverse_match is not None :pass
example# 6663
self . inverse_match = inverse_match
example# 6664
if flags is not None :pass
example# 6665
self . flags = flags
example# 6666
if self . flags and not isinstance ( self . regex , six . string_types ) :pass
example# 6667
raise TypeError ( '_STR:0_' )
example# 6668
if isinstance ( self . regex , six . string_types ) :pass
example# 6669
self . regex = re . compile ( self . regex , self . flags )
example# 6670
def __call__ ( self , value ) :pass
example# 6671
if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :pass
example# 6672
raise ValidationError ( self . message , code = self . code )
example# 6673
def __eq__ ( self , other ) :pass
example# 6674
return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
example# 6675
def __ne__ ( self , other ) :pass
example# 6676
return not ( self == other )
example# 6677
@ deconstructible
def dummy(): pass
example# 6678
class URLValidator ( RegexValidator ) :pass
example# 6680
message = _ ( 'Enter a valid URL.' )
example# 6683
super ( URLValidator , self ) . __init__ ( ** kwargs )
example# 6684
if schemes is not None :pass
example# 6685
self . schemes = schemes
example# 6686
def __call__ ( self , value ) :pass
example# 6687
value = force_text ( value )
example# 6688
scheme = value . split ( '_STR:0_' ) [ 0 ] . lower ( )
example# 6689
if scheme not in self . schemes :pass
example# 6690
raise ValidationError ( self . message , code = self . code )
example# 6691
try :pass
except: pass
example# 6692
super ( URLValidator , self ) . __call__ ( value )
example# 6693
try: pass
except ValidationError as e :pass
example# 6694
if value :pass
example# 6695
scheme , netloc , path , query , fragment = urlsplit ( value )
example# 6696
try :pass
except: pass
example# 6697
netloc = netloc . encode ( '_STR:0_' ) . decode ( '_STR:1_' )
example# 6698
try: pass
except UnicodeError :pass
example# 6699
raise e
example# 6701
super ( URLValidator , self ) . __call__ ( url )
example# 6702
if True: pass
else :pass
example# 6703
raise
example# 6704
if True: pass
else :pass
example# 6705
url = value
example# 6706
def validate_integer ( value ) :pass
example# 6707
try :pass
except: pass
example# 6708
int ( value )
example# 6709
try: pass
except ( ValueError , TypeError ) :pass
example# 6711
@ deconstructible
def dummy(): pass
example# 6712
class EmailValidator ( object ) :pass
example# 6713
message = _ ( 'Enter a valid email address.' )
example# 6714
code = '_STR:0_'
example# 6718
domain_whitelist = [ '_STR:0_' ]
example# 6720
if message is not None :pass
example# 6721
self . message = message
example# 6722
if code is not None :pass
example# 6723
self . code = code
example# 6724
if whitelist is not None :pass
example# 6725
self . domain_whitelist = whitelist
example# 6726
def __call__ ( self , value ) :pass
example# 6727
value = force_text ( value )
example# 6728
if not value or '_STR:0_' not in value :pass
example# 6729
raise ValidationError ( self . message , code = self . code )
example# 6731
if not self . user_regex . match ( user_part ) :pass
example# 6732
raise ValidationError ( self . message , code = self . code )
example# 6733
if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :pass
example# 6734
try :pass
except: pass
example# 6735
domain_part = domain_part . encode ( '_STR:0_' ) . decode ( '_STR:1_' )
example# 6736
if self . validate_domain_part ( domain_part ) :pass
example# 6737
return
example# 6738
try: pass
except UnicodeError :pass
example# 6739
pass
example# 6740
raise ValidationError ( self . message , code = self . code )
example# 6741
def validate_domain_part ( self , domain_part ) :pass
example# 6742
if self . domain_regex . match ( domain_part ) :pass
example# 6743
return True
example# 6744
literal_match = self . literal_regex . match ( domain_part )
example# 6745
if literal_match :pass
example# 6747
try :pass
except: pass
example# 6748
validate_ipv46_address ( ip_address )
example# 6749
return True
example# 6750
try: pass
except ValidationError :pass
example# 6751
pass
example# 6752
return False
example# 6753
def __eq__ ( self , other ) :pass
example# 6754
return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
example# 6755
validate_email = EmailValidator ( )
example# 6763
def validate_ipv46_address ( value ) :pass
example# 6764
try :pass
except: pass
example# 6766
try: pass
except ValidationError :pass
example# 6767
try :pass
except: pass
example# 6769
try: pass
except ValidationError :pass
example# 6772
def ip_address_validators ( protocol , unpack_ipv4 ) :pass
example# 6775
try :pass
except: pass
example# 6776
return ip_address_validator_map [ protocol . lower ( ) ]
example# 6777
try: pass
except KeyError :pass
example# 6778
raise ValueError ( '_STR:0_'  % ( protocol , list ( ip_address_validator_map ) ) )
example# 6779
comma_separated_int_list_re = re . compile ( '_STR:0_' )
example# 6781
@ deconstructible
def dummy(): pass
example# 6782
class BaseValidator ( object ) :pass
example# 6783
compare = lambda self , a , b : a is not b
example# 6784
clean = lambda self , x : x
example# 6785
message = _ ( '_STR:0_' )
example# 6786
code = '_STR:0_'
example# 6787
def __init__ ( self , limit_value ) :pass
example# 6788
self . limit_value = limit_value
example# 6789
def __call__ ( self , value ) :pass
example# 6790
cleaned = self . clean ( value )
example# 6792
if self . compare ( cleaned , self . limit_value ) :pass
example# 6793
raise ValidationError ( self . message , code = self . code , params = params )
example# 6794
def __eq__ ( self , other ) :pass
example# 6795
return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
example# 6796
@ deconstructible
def dummy(): pass
example# 6797
class MaxValueValidator ( BaseValidator ) :pass
example# 6798
compare = lambda self , a , b : a > b
example# 6799
message = _ ( '_STR:0_' )
example# 6800
code = '_STR:0_'
example# 6801
@ deconstructible
def dummy(): pass
example# 6802
class MinValueValidator ( BaseValidator ) :pass
example# 6803
compare = lambda self , a , b : a < b
example# 6804
message = _ ( '_STR:0_' )
example# 6805
code = '_STR:0_'
example# 6806
@ deconstructible
def dummy(): pass
example# 6807
class MinLengthValidator ( BaseValidator ) :pass
example# 6808
compare = lambda self , a , b : a < b
example# 6809
clean = lambda self , x : len ( x )
example# 6811
code = '_STR:0_'
example# 6812
@ deconstructible
def dummy(): pass
example# 6813
class MaxLengthValidator ( BaseValidator ) :pass
example# 6814
compare = lambda self , a , b : a > b
example# 6815
clean = lambda self , x : len ( x )
example# 6817
code = '_STR:0_'
example# 6818
import django
example# 6819
from django . core . handlers . wsgi import WSGIHandler
example# 6820
def get_wsgi_application ( ) :pass
example# 6821
django . setup ( )
example# 6822
return WSGIHandler ( )
example# 6823
from django . core . exceptions import ValidationError
example# 6824
from django . forms . fields import *
example# 6825
from django . forms . forms import *
example# 6826
from django . forms . formsets import *
example# 6827
from django . forms . models import *
example# 6828
from django . forms . widgets import *
example# 6829
from django . forms . extras . widgets import SelectDateWidget
example# 6830
__all__ = [ '_STR:0_' ]
example# 6831
from __future__ import unicode_literals
example# 6832
import datetime
example# 6833
import re
example# 6834
from django . forms . widgets import Widget , Select
example# 6835
from django . utils import datetime_safe
example# 6836
from django . utils . dates import MONTHS
example# 6837
from django . utils . encoding import force_str
example# 6838
from django . utils . safestring import mark_safe
example# 6839
from django . utils . formats import get_format
example# 6840
from django . utils import six
example# 6841
from django . conf import settings
example# 6842
__all__ = ( '_STR:0_' , )
example# 6844
def _parse_date_fmt ( ) :pass
example# 6845
fmt = get_format ( '_STR:0_' )
example# 6846
escaped = False
example# 6847
for char in fmt :pass
example# 6848
if escaped :pass
example# 6849
escaped = False
example# 6850
if True: pass
elif char == '\\' :pass
example# 6851
escaped = True
example# 6852
if True: pass
elif char in '_STR:0_' :pass
example# 6853
yield '_STR:0_'
example# 6854
if True: pass
elif char in '_STR:0_' :pass
example# 6855
yield '_STR:0_'
example# 6856
if True: pass
elif char in '_STR:0_' :pass
example# 6857
yield '_STR:0_'
example# 6858
class SelectDateWidget ( Widget ) :pass
example# 6860
month_field = '_STR:0_'
example# 6861
day_field = '_STR:0_'
example# 6862
year_field = '_STR:0_'
example# 6864
self . attrs = attrs or { }
example# 6865
if years :pass
example# 6866
self . years = years
example# 6867
if True: pass
else :pass
example# 6868
this_year = datetime . date . today ( ) . year
example# 6869
self . years = range ( this_year , this_year + 10 )
example# 6870
if months :pass
example# 6871
self . months = months
example# 6872
if True: pass
else :pass
example# 6873
self . months = MONTHS
example# 6874
if isinstance ( empty_label , ( list , tuple ) ) :pass
example# 6875
if not len ( empty_label ) == 3 :pass
example# 6880
if True: pass
else :pass
example# 6881
if empty_label is not None :pass
example# 6883
self . year_none_value = self . none_value
example# 6884
self . month_none_value = self . none_value
example# 6885
self . day_none_value = self . none_value
example# 6887
try :pass
except: pass
example# 6888
year_val , month_val , day_val = value . year , value . month , value . day
example# 6889
try: pass
except AttributeError :pass
example# 6890
year_val = month_val = day_val = None
example# 6891
if isinstance ( value , six . string_types ) :pass
example# 6892
if settings . USE_L10N :pass
example# 6893
try :pass
except: pass
example# 6894
input_format = get_format ( '_STR:0_' ) [ 0 ]
example# 6896
year_val , month_val , day_val = v . year , v . month , v . day
example# 6897
try: pass
except ValueError :pass
example# 6898
pass
example# 6899
if True: pass
else :pass
example# 6900
match = RE_DATE . match ( value )
example# 6901
if match :pass
example# 6902
year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]
example# 6903
html = { }
example# 6904
choices = [ ( i , i ) for i in self . years ]
example# 6906
choices = list ( six . iteritems ( self . months ) )
example# 6910
output = [ ]
example# 6911
for field in _parse_date_fmt ( ) :pass
example# 6912
output . append ( html [ field ] )
example# 6913
return mark_safe ( '\n' . join ( output ) )
example# 6914
def id_for_label ( self , id_ ) :pass
example# 6915
for first_select in _parse_date_fmt ( ) :pass
example# 6916
return '_STR:0_' % ( id_ , first_select )
example# 6917
if True: pass
else :pass
example# 6918
return '%s_month' % id_
example# 6919
def value_from_datadict ( self , data , files , name ) :pass
example# 6920
y = data . get ( self . year_field % name )
example# 6921
m = data . get ( self . month_field % name )
example# 6922
d = data . get ( self . day_field % name )
example# 6924
return None
example# 6925
if y and m and d :pass
example# 6926
if settings . USE_L10N :pass
example# 6927
input_format = get_format ( '_STR:0_' ) [ 0 ]
example# 6928
try :pass
except: pass
example# 6930
try: pass
except ValueError :pass
example# 6931
return '_STR:0_' % ( y , m , d )
example# 6932
if True: pass
else :pass
example# 6933
date_value = datetime_safe . new_date ( date_value )
example# 6934
return date_value . strftime ( input_format )
example# 6935
if True: pass
else :pass
example# 6936
return '_STR:0_' % ( y , m , d )
example# 6937
return data . get ( name , None )
example# 6938
def create_select ( self , name , field , value , val , choices , none_value ) :pass
example# 6939
if '_STR:0_' in self . attrs :pass
example# 6940
id_ = self . attrs [ '_STR:0_' ]
example# 6941
if True: pass
else :pass
example# 6942
id_ = '_STR:0_' % name
example# 6943
if not self . is_required :pass
example# 6944
choices . insert ( 0 , none_value )
example# 6945
local_attrs = self . build_attrs ( id = field % id_ )
example# 6946
s = Select ( choices = choices )
example# 6948
return select_html
example# 6949
from __future__ import unicode_literals
example# 6950
import copy
example# 6951
import datetime
example# 6952
import os
example# 6953
import re
example# 6954
import sys
example# 6955
import warnings
example# 6956
from decimal import Decimal , DecimalException
example# 6957
from io import BytesIO
example# 6958
from django . core import validators
example# 6959
from django . core . exceptions import ValidationError
example# 6960
from django . forms . utils import from_current_timezone , to_current_timezone
example# 6961
from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
example# 6962
from django . utils import formats
example# 6963
from django . utils . encoding import smart_text , force_str , force_text
example# 6965
from django . utils . deprecation import RemovedInDjango19Warning
example# 6966
from django . utils import six
example# 6967
from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
example# 6968
from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
example# 6969
from django . core . validators import EMPTY_VALUES
example# 6970
__all__ = (  '_STR:0_' , '_STR:1_' , '_STR:2_' ,  '_STR:3_' , '_STR:4_' , '_STR:5_' ,  '_STR:6_' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
example# 6971
class Field ( object ) :pass
example# 6972
widget = TextInput
example# 6973
hidden_widget = HiddenInput
example# 6974
default_validators = [ ]
example# 6975
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 6976
empty_values = list ( validators . EMPTY_VALUES )
example# 6977
creation_counter = 0
example# 6978
def __init__ ( self , required = True , widget = None , label = None , initial = None ,  help_text = '' , error_messages = None , show_hidden_initial = False ,  validators = [ ] , localize = False , label_suffix = None ) :pass
example# 6979
self . required , self . label , self . initial = required , label , initial
example# 6980
self . show_hidden_initial = show_hidden_initial
example# 6981
self . help_text = help_text
example# 6982
self . label_suffix = label_suffix
example# 6983
widget = widget or self . widget
example# 6984
if isinstance ( widget , type ) :pass
example# 6985
widget = widget ( )
example# 6986
self . localize = localize
example# 6987
if self . localize :pass
example# 6988
widget . is_localized = True
example# 6989
widget . is_required = self . required
example# 6990
extra_attrs = self . widget_attrs ( widget )
example# 6991
if extra_attrs :pass
example# 6992
widget . attrs . update ( extra_attrs )
example# 6993
self . widget = widget
example# 6994
self . creation_counter = Field . creation_counter
example# 6995
Field . creation_counter += 1
example# 6996
messages = { }
example# 6997
for c in reversed ( self . __class__ . __mro__ ) :pass
example# 6998
messages . update ( getattr ( c , '_STR:0_' , { } ) )
example# 6999
messages . update ( error_messages or { } )
example# 7000
self . error_messages = messages
example# 7001
self . validators = self . default_validators + validators
example# 7002
super ( Field , self ) . __init__ ( )
example# 7003
def prepare_value ( self , value ) :pass
example# 7004
return value
example# 7005
def to_python ( self , value ) :pass
example# 7006
return value
example# 7007
def validate ( self , value ) :pass
example# 7008
if value in self . empty_values and self . required :pass
example# 7010
def run_validators ( self , value ) :pass
example# 7011
if value in self . empty_values :pass
example# 7012
return
example# 7013
errors = [ ]
example# 7014
for v in self . validators :pass
example# 7015
try :pass
except: pass
example# 7016
v ( value )
example# 7017
try: pass
except ValidationError as e :pass
example# 7018
if hasattr ( e , '_STR:0_' ) and e . code in self . error_messages :pass
example# 7019
e . message = self . error_messages [ e . code ]
example# 7020
errors . extend ( e . error_list )
example# 7021
if errors :pass
example# 7022
raise ValidationError ( errors )
example# 7023
def clean ( self , value ) :pass
example# 7024
value = self . to_python ( value )
example# 7025
self . validate ( value )
example# 7026
self . run_validators ( value )
example# 7027
return value
example# 7028
def bound_data ( self , data , initial ) :pass
example# 7029
return data
example# 7030
def widget_attrs ( self , widget ) :pass
example# 7031
return { }
example# 7032
def get_limit_choices_to ( self ) :pass
example# 7033
if callable ( self . limit_choices_to ) :pass
example# 7034
return self . limit_choices_to ( )
example# 7035
return self . limit_choices_to
example# 7036
def _has_changed ( self , initial , data ) :pass
example# 7037
initial_value = initial if initial is not None else ''
example# 7038
try :pass
except: pass
example# 7039
data = self . to_python ( data )
example# 7040
if hasattr ( self , '_STR:0_' ) :pass
example# 7041
data = self . _coerce ( data )
example# 7042
try: pass
except ValidationError :pass
example# 7043
return True
example# 7044
data_value = data if data is not None else ''
example# 7045
return initial_value != data_value
example# 7046
def __deepcopy__ ( self , memo ) :pass
example# 7047
result = copy . copy ( self )
example# 7048
memo [ id ( self ) ] = result
example# 7049
result . widget = copy . deepcopy ( self . widget , memo )
example# 7050
result . validators = self . validators [ : ]
example# 7051
return result
example# 7052
class CharField ( Field ) :pass
example# 7054
self . max_length , self . min_length = max_length , min_length
example# 7055
super ( CharField , self ) . __init__ ( * args , ** kwargs )
example# 7056
if min_length is not None :pass
example# 7057
self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
example# 7058
if max_length is not None :pass
example# 7059
self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
example# 7060
def to_python ( self , value ) :pass
example# 7061
if value in self . empty_values :pass
example# 7062
return ''
example# 7063
return smart_text ( value )
example# 7064
def widget_attrs ( self , widget ) :pass
example# 7065
attrs = super ( CharField , self ) . widget_attrs ( widget )
example# 7066
if self . max_length is not None :pass
example# 7067
attrs . update ( { '_STR:0_' : str ( self . max_length ) } )
example# 7068
return attrs
example# 7069
class IntegerField ( Field ) :pass
example# 7070
widget = NumberInput
example# 7071
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7073
self . max_value , self . min_value = max_value , min_value
example# 7074
if kwargs . get ( '_STR:0_' ) and self . widget == NumberInput :pass
example# 7075
kwargs . setdefault ( '_STR:0_' , super ( IntegerField , self ) . widget )
example# 7076
super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
example# 7077
if max_value is not None :pass
example# 7078
self . validators . append ( validators . MaxValueValidator ( max_value ) )
example# 7079
if min_value is not None :pass
example# 7080
self . validators . append ( validators . MinValueValidator ( min_value ) )
example# 7081
def to_python ( self , value ) :pass
example# 7082
value = super ( IntegerField , self ) . to_python ( value )
example# 7083
if value in self . empty_values :pass
example# 7084
return None
example# 7085
if self . localize :pass
example# 7086
value = formats . sanitize_separators ( value )
example# 7087
try :pass
except: pass
example# 7088
value = int ( str ( value ) )
example# 7089
try: pass
except ( ValueError , TypeError ) :pass
example# 7091
return value
example# 7092
def widget_attrs ( self , widget ) :pass
example# 7093
attrs = super ( IntegerField , self ) . widget_attrs ( widget )
example# 7094
if isinstance ( widget , NumberInput ) :pass
example# 7095
if self . min_value is not None :pass
example# 7096
attrs [ '_STR:0_' ] = self . min_value
example# 7097
if self . max_value is not None :pass
example# 7098
attrs [ '_STR:0_' ] = self . max_value
example# 7099
return attrs
example# 7100
class FloatField ( IntegerField ) :pass
example# 7101
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7102
def to_python ( self , value ) :pass
example# 7103
value = super ( IntegerField , self ) . to_python ( value )
example# 7104
if value in self . empty_values :pass
example# 7105
return None
example# 7106
if self . localize :pass
example# 7107
value = formats . sanitize_separators ( value )
example# 7108
try :pass
except: pass
example# 7109
value = float ( value )
example# 7110
try: pass
except ( ValueError , TypeError ) :pass
example# 7112
return value
example# 7113
def validate ( self , value ) :pass
example# 7114
super ( FloatField , self ) . validate ( value )
example# 7115
if value != value or value in ( Decimal ( '_STR:0_' ) , Decimal ( '_STR:1_' ) ) :pass
example# 7117
return value
example# 7118
def widget_attrs ( self , widget ) :pass
example# 7119
attrs = super ( FloatField , self ) . widget_attrs ( widget )
example# 7120
if isinstance ( widget , NumberInput ) and '_STR:0_' not in widget . attrs :pass
example# 7121
attrs . setdefault ( '_STR:0_' , '_STR:1_' )
example# 7122
return attrs
example# 7123
class DecimalField ( IntegerField ) :pass
example# 7126
self . max_digits , self . decimal_places = max_digits , decimal_places
example# 7128
def to_python ( self , value ) :pass
example# 7129
if value in self . empty_values :pass
example# 7130
return None
example# 7131
if self . localize :pass
example# 7132
value = formats . sanitize_separators ( value )
example# 7133
value = smart_text ( value ) . strip ( )
example# 7134
try :pass
except: pass
example# 7135
value = Decimal ( value )
example# 7136
try: pass
except DecimalException :pass
example# 7138
return value
example# 7139
def validate ( self , value ) :pass
example# 7140
super ( DecimalField , self ) . validate ( value )
example# 7141
if value in self . empty_values :pass
example# 7142
return
example# 7143
if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :pass
example# 7145
sign , digittuple , exponent = value . as_tuple ( )
example# 7146
decimals = abs ( exponent )
example# 7147
digits = len ( digittuple )
example# 7148
if decimals > digits :pass
example# 7149
digits = decimals
example# 7150
whole_digits = digits - decimals
example# 7151
if self . max_digits is not None and digits > self . max_digits :pass
example# 7153
if self . decimal_places is not None and decimals > self . decimal_places :pass
example# 7155
if ( self . max_digits is not None and self . decimal_places is not None  and whole_digits > ( self . max_digits - self . decimal_places ) ) :pass
example# 7157
return value
example# 7158
def widget_attrs ( self , widget ) :pass
example# 7159
attrs = super ( DecimalField , self ) . widget_attrs ( widget )
example# 7160
if isinstance ( widget , NumberInput ) and '_STR:0_' not in widget . attrs :pass
example# 7161
if self . decimal_places is not None :pass
example# 7163
if True: pass
else :pass
example# 7164
step = '_STR:0_'
example# 7165
attrs . setdefault ( '_STR:0_' , step )
example# 7166
return attrs
example# 7167
class BaseTemporalField ( Field ) :pass
example# 7168
def __init__ ( self , input_formats = None , * args , ** kwargs ) :pass
example# 7169
super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )
example# 7170
if input_formats is not None :pass
example# 7171
self . input_formats = input_formats
example# 7172
def to_python ( self , value ) :pass
example# 7173
unicode_value = force_text ( value , strings_only = True )
example# 7174
if isinstance ( unicode_value , six . text_type ) :pass
example# 7175
value = unicode_value . strip ( )
example# 7176
if isinstance ( value , six . text_type ) :pass
example# 7177
for format in self . input_formats :pass
example# 7178
try :pass
except: pass
example# 7179
return self . strptime ( value , format )
example# 7180
try: pass
except ( ValueError , TypeError ) :pass
example# 7181
continue
example# 7183
def strptime ( self , value , format ) :pass
example# 7184
raise NotImplementedError ( '_STR:0_' )
example# 7185
class DateField ( BaseTemporalField ) :pass
example# 7186
widget = DateInput
example# 7187
input_formats = formats . get_format_lazy ( '_STR:0_' )
example# 7188
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7189
def to_python ( self , value ) :pass
example# 7190
if value in self . empty_values :pass
example# 7191
return None
example# 7192
if isinstance ( value , datetime . datetime ) :pass
example# 7193
return value . date ( )
example# 7194
if isinstance ( value , datetime . date ) :pass
example# 7195
return value
example# 7196
return super ( DateField , self ) . to_python ( value )
example# 7197
def strptime ( self , value , format ) :pass
example# 7199
class TimeField ( BaseTemporalField ) :pass
example# 7200
widget = TimeInput
example# 7201
input_formats = formats . get_format_lazy ( '_STR:0_' )
example# 7202
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' )  }
example# 7203
def to_python ( self , value ) :pass
example# 7204
if value in self . empty_values :pass
example# 7205
return None
example# 7206
if isinstance ( value , datetime . time ) :pass
example# 7207
return value
example# 7208
return super ( TimeField , self ) . to_python ( value )
example# 7209
def strptime ( self , value , format ) :pass
example# 7211
class DateTimeField ( BaseTemporalField ) :pass
example# 7212
widget = DateTimeInput
example# 7213
input_formats = formats . get_format_lazy ( '_STR:0_' )
example# 7214
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7215
def prepare_value ( self , value ) :pass
example# 7216
if isinstance ( value , datetime . datetime ) :pass
example# 7217
value = to_current_timezone ( value )
example# 7218
return value
example# 7219
def to_python ( self , value ) :pass
example# 7220
if value in self . empty_values :pass
example# 7221
return None
example# 7222
if isinstance ( value , datetime . datetime ) :pass
example# 7223
return from_current_timezone ( value )
example# 7224
if isinstance ( value , datetime . date ) :pass
example# 7226
return from_current_timezone ( result )
example# 7227
if isinstance ( value , list ) :pass
example# 7231
if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :pass
example# 7232
return None
example# 7233
value = '_STR:0_' % tuple ( value )
example# 7234
result = super ( DateTimeField , self ) . to_python ( value )
example# 7235
return from_current_timezone ( result )
example# 7236
def strptime ( self , value , format ) :pass
example# 7238
class RegexField ( CharField ) :pass
example# 7240
if error_message is not None :pass
example# 7241
error_messages = kwargs . get ( '_STR:0_' ) or { }
example# 7242
error_messages [ '_STR:0_' ] = error_message
example# 7243
kwargs [ 'error_messages' ] = error_messages
example# 7245
self . _set_regex ( regex )
example# 7246
def _get_regex ( self ) :pass
example# 7247
return self . _regex
example# 7248
def _set_regex ( self , regex ) :pass
example# 7249
if isinstance ( regex , six . string_types ) :pass
example# 7251
self . _regex = regex
example# 7252
if hasattr ( self , '_STR:0_' ) and self . _regex_validator in self . validators :pass
example# 7253
self . validators . remove ( self . _regex_validator )
example# 7254
self . _regex_validator = validators . RegexValidator ( regex = regex )
example# 7255
self . validators . append ( self . _regex_validator )
example# 7256
regex = property ( _get_regex , _set_regex )
example# 7257
class EmailField ( CharField ) :pass
example# 7258
widget = EmailInput
example# 7259
default_validators = [ validators . validate_email ]
example# 7261
value = self . to_python ( value ) . strip ( )
example# 7262
return super ( EmailField , self ) . clean ( value )
example# 7263
class FileField ( Field ) :pass
example# 7264
widget = ClearableFileInput
example# 7267
self . max_length = kwargs . pop ( '_STR:0_' , None )
example# 7268
self . allow_empty_file = kwargs . pop ( '_STR:0_' , False )
example# 7270
def to_python ( self , data ) :pass
example# 7271
if data in self . empty_values :pass
example# 7272
return None
example# 7273
try :pass
except: pass
example# 7274
file_name = data . name
example# 7275
file_size = data . size
example# 7276
try: pass
except AttributeError :pass
example# 7278
if self . max_length is not None and len ( file_name ) > self . max_length :pass
example# 7281
if not file_name :pass
example# 7283
if not self . allow_empty_file and not file_size :pass
example# 7285
return data
example# 7286
def clean ( self , data , initial = None ) :pass
example# 7287
if data is FILE_INPUT_CONTRADICTION :pass
example# 7289
if data is False :pass
example# 7290
if not self . required :pass
example# 7291
return False
example# 7292
data = None
example# 7293
if not data and initial :pass
example# 7294
return initial
example# 7295
return super ( FileField , self ) . clean ( data )
example# 7296
def bound_data ( self , data , initial ) :pass
example# 7297
if data in ( None , FILE_INPUT_CONTRADICTION ) :pass
example# 7298
return initial
example# 7299
return data
example# 7300
def _has_changed ( self , initial , data ) :pass
example# 7301
if data is None :pass
example# 7302
return False
example# 7303
return True
example# 7304
class ImageField ( FileField ) :pass
example# 7305
default_error_messages = {  '_STR:1_' : _ ( "Upload a valid image. The file you uploaded was either not an image or a corrupted image." ) ,  }
example# 7306
def to_python ( self , data ) :pass
example# 7307
f = super ( ImageField , self ) . to_python ( data )
example# 7308
if f is None :pass
example# 7309
return None
example# 7310
from PIL import Image
example# 7311
if hasattr ( data , '_STR:0_' ) :pass
example# 7312
file = data . temporary_file_path ( )
example# 7313
if True: pass
else :pass
example# 7314
if hasattr ( data , '_STR:0_' ) :pass
example# 7315
file = BytesIO ( data . read ( ) )
example# 7316
if True: pass
else :pass
example# 7317
file = BytesIO ( data [ '_STR:0_' ] )
example# 7318
try :pass
except: pass
example# 7319
Image . open ( file ) . verify ( )
example# 7320
try: pass
except Exception :pass
example# 7322
if hasattr ( f , '_STR:0_' ) and callable ( f . seek ) :pass
example# 7323
f . seek ( 0 )
example# 7324
return f
example# 7325
class URLField ( CharField ) :pass
example# 7326
widget = URLInput
example# 7327
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7328
default_validators = [ validators . URLValidator ( ) ]
example# 7329
def to_python ( self , value ) :pass
example# 7330
def split_url ( url ) :pass
example# 7331
try :pass
except: pass
example# 7332
return list ( urlsplit ( url ) )
example# 7333
try: pass
except ValueError :pass
example# 7335
value = super ( URLField , self ) . to_python ( value )
example# 7336
if value :pass
example# 7337
url_fields = split_url ( value )
example# 7338
if not url_fields [ 0 ] :pass
example# 7339
url_fields [ 0 ] = '_STR:0_'
example# 7340
if not url_fields [ 1 ] :pass
example# 7341
url_fields [ 1 ] = url_fields [ 2 ]
example# 7342
url_fields [ 2 ] = ''
example# 7343
url_fields = split_url ( urlunsplit ( url_fields ) )
example# 7344
value = urlunsplit ( url_fields )
example# 7345
return value
example# 7346
def clean ( self , value ) :pass
example# 7347
value = self . to_python ( value ) . strip ( )
example# 7348
return super ( URLField , self ) . clean ( value )
example# 7349
class BooleanField ( Field ) :pass
example# 7350
widget = CheckboxInput
example# 7351
def to_python ( self , value ) :pass
example# 7353
value = False
example# 7354
if True: pass
else :pass
example# 7355
value = bool ( value )
example# 7356
return super ( BooleanField , self ) . to_python ( value )
example# 7357
def validate ( self , value ) :pass
example# 7358
if not value and self . required :pass
example# 7360
def _has_changed ( self , initial , data ) :pass
example# 7361
if initial == '_STR:0_' :pass
example# 7362
initial = False
example# 7363
return bool ( initial ) != bool ( data )
example# 7364
class NullBooleanField ( BooleanField ) :pass
example# 7365
widget = NullBooleanSelect
example# 7366
def to_python ( self , value ) :pass
example# 7368
return True
example# 7370
return False
example# 7371
if True: pass
else :pass
example# 7372
return None
example# 7373
def validate ( self , value ) :pass
example# 7374
pass
example# 7375
def _has_changed ( self , initial , data ) :pass
example# 7376
if initial is not None :pass
example# 7377
initial = bool ( initial )
example# 7378
if data is not None :pass
example# 7379
data = bool ( data )
example# 7380
return initial != data
example# 7381
class ChoiceField ( Field ) :pass
example# 7382
widget = Select
example# 7383
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7386
self . choices = choices
example# 7387
def __deepcopy__ ( self , memo ) :pass
example# 7388
result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
example# 7389
result . _choices = copy . deepcopy ( self . _choices , memo )
example# 7390
return result
example# 7391
def _get_choices ( self ) :pass
example# 7392
return self . _choices
example# 7393
def _set_choices ( self , value ) :pass
example# 7394
self . _choices = self . widget . choices = list ( value )
example# 7395
choices = property ( _get_choices , _set_choices )
example# 7396
def to_python ( self , value ) :pass
example# 7397
if value in self . empty_values :pass
example# 7398
return ''
example# 7399
return smart_text ( value )
example# 7400
def validate ( self , value ) :pass
example# 7401
super ( ChoiceField , self ) . validate ( value )
example# 7402
if value and not self . valid_value ( value ) :pass
example# 7404
def valid_value ( self , value ) :pass
example# 7405
text_value = force_text ( value )
example# 7406
for k , v in self . choices :pass
example# 7407
if isinstance ( v , ( list , tuple ) ) :pass
example# 7410
return True
example# 7411
if True: pass
else :pass
example# 7412
if value == k or text_value == force_text ( k ) :pass
example# 7413
return True
example# 7414
return False
example# 7415
class TypedChoiceField ( ChoiceField ) :pass
example# 7417
self . coerce = kwargs . pop ( '_STR:0_' , lambda val : val )
example# 7418
self . empty_value = kwargs . pop ( '_STR:0_' , '' )
example# 7420
def _coerce ( self , value ) :pass
example# 7421
if value == self . empty_value or value in self . empty_values :pass
example# 7422
return self . empty_value
example# 7423
try :pass
except: pass
example# 7424
value = self . coerce ( value )
example# 7425
try: pass
except ( ValueError , TypeError , ValidationError ) :pass
example# 7427
return value
example# 7428
def clean ( self , value ) :pass
example# 7429
value = super ( TypedChoiceField , self ) . clean ( value )
example# 7430
return self . _coerce ( value )
example# 7431
class MultipleChoiceField ( ChoiceField ) :pass
example# 7432
hidden_widget = MultipleHiddenInput
example# 7433
widget = SelectMultiple
example# 7434
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  '_STR:3_' : _ ( '_STR:2_' ) ,  }
example# 7435
def to_python ( self , value ) :pass
example# 7436
if not value :pass
example# 7437
return [ ]
example# 7438
if True: pass
elif not isinstance ( value , ( list , tuple ) ) :pass
example# 7440
return [ smart_text ( val ) for val in value ]
example# 7441
def validate ( self , value ) :pass
example# 7442
if self . required and not value :pass
example# 7444
for val in value :pass
example# 7445
if not self . valid_value ( val ) :pass
example# 7447
def _has_changed ( self , initial , data ) :pass
example# 7448
if initial is None :pass
example# 7449
initial = [ ]
example# 7450
if data is None :pass
example# 7451
data = [ ]
example# 7452
if len ( initial ) != len ( data ) :pass
example# 7453
return True
example# 7454
initial_set = set ( force_text ( value ) for value in initial )
example# 7455
data_set = set ( force_text ( value ) for value in data )
example# 7456
return data_set != initial_set
example# 7457
class TypedMultipleChoiceField ( MultipleChoiceField ) :pass
example# 7459
self . coerce = kwargs . pop ( '_STR:0_' , lambda val : val )
example# 7460
self . empty_value = kwargs . pop ( '_STR:0_' , [ ] )
example# 7462
def _coerce ( self , value ) :pass
example# 7463
if value == self . empty_value or value in self . empty_values :pass
example# 7464
return self . empty_value
example# 7465
new_value = [ ]
example# 7466
for choice in value :pass
example# 7467
try :pass
except: pass
example# 7468
new_value . append ( self . coerce ( choice ) )
example# 7469
try: pass
except ( ValueError , TypeError , ValidationError ) :pass
example# 7471
return new_value
example# 7472
def clean ( self , value ) :pass
example# 7473
value = super ( TypedMultipleChoiceField , self ) . clean ( value )
example# 7474
return self . _coerce ( value )
example# 7475
def validate ( self , value ) :pass
example# 7476
if value != self . empty_value :pass
example# 7477
super ( TypedMultipleChoiceField , self ) . validate ( value )
example# 7478
if True: pass
elif self . required :pass
example# 7480
class ComboField ( Field ) :pass
example# 7481
def __init__ ( self , fields = ( ) , * args , ** kwargs ) :pass
example# 7483
for f in fields :pass
example# 7484
f . required = False
example# 7485
self . fields = fields
example# 7486
def clean ( self , value ) :pass
example# 7487
super ( ComboField , self ) . clean ( value )
example# 7488
for field in self . fields :pass
example# 7489
value = field . clean ( value )
example# 7490
return value
example# 7491
class MultiValueField ( Field ) :pass
example# 7493
def __init__ ( self , fields = ( ) , * args , ** kwargs ) :pass
example# 7494
self . require_all_fields = kwargs . pop ( '_STR:0_' , True )
example# 7496
for f in fields :pass
example# 7497
f . error_messages . setdefault ( '_STR:0_' ,  self . error_messages [ '_STR:0_' ] )
example# 7498
if self . require_all_fields :pass
example# 7499
f . required = False
example# 7500
self . fields = fields
example# 7501
def __deepcopy__ ( self , memo ) :pass
example# 7502
result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
example# 7503
result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
example# 7504
return result
example# 7505
def validate ( self , value ) :pass
example# 7506
pass
example# 7507
def clean ( self , value ) :pass
example# 7508
clean_data = [ ]
example# 7509
errors = [ ]
example# 7510
if not value or isinstance ( value , ( list , tuple ) ) :pass
example# 7511
if not value or not [ v for v in value if v not in self . empty_values ] :pass
example# 7512
if self . required :pass
example# 7514
if True: pass
else :pass
example# 7515
return self . compress ( [ ] )
example# 7516
if True: pass
else :pass
example# 7518
for i , field in enumerate ( self . fields ) :pass
example# 7519
try :pass
except: pass
example# 7520
field_value = value [ i ]
example# 7521
try: pass
except IndexError :pass
example# 7522
field_value = None
example# 7523
if field_value in self . empty_values :pass
example# 7524
if self . require_all_fields :pass
example# 7525
if self . required :pass
example# 7527
if True: pass
elif field . required :pass
example# 7528
if field . error_messages [ '_STR:0_' ] not in errors :pass
example# 7529
errors . append ( field . error_messages [ '_STR:0_' ] )
example# 7530
continue
example# 7531
try :pass
except: pass
example# 7532
clean_data . append ( field . clean ( field_value ) )
example# 7533
try: pass
except ValidationError as e :pass
example# 7534
errors . extend ( m for m in e . error_list if m not in errors )
example# 7535
if errors :pass
example# 7536
raise ValidationError ( errors )
example# 7537
out = self . compress ( clean_data )
example# 7538
self . validate ( out )
example# 7539
self . run_validators ( out )
example# 7540
return out
example# 7541
def compress ( self , data_list ) :pass
example# 7542
raise NotImplementedError ( '_STR:0_' )
example# 7543
def _has_changed ( self , initial , data ) :pass
example# 7544
if initial is None :pass
example# 7546
if True: pass
else :pass
example# 7547
if not isinstance ( initial , list ) :pass
example# 7548
initial = self . widget . decompress ( initial )
example# 7549
for field , initial , data in zip ( self . fields , initial , data ) :pass
example# 7551
return True
example# 7552
return False
example# 7553
class FilePathField ( ChoiceField ) :pass
example# 7554
def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :pass
example# 7555
self . path , self . match , self . recursive = path , match , recursive
example# 7556
self . allow_files , self . allow_folders = allow_files , allow_folders
example# 7558
if self . required :pass
example# 7559
self . choices = [ ]
example# 7560
if True: pass
else :pass
example# 7562
if self . match is not None :pass
example# 7563
self . match_re = re . compile ( self . match )
example# 7564
if recursive :pass
example# 7565
for root , dirs , files in sorted ( os . walk ( self . path ) ) :pass
example# 7566
if self . allow_files :pass
example# 7567
for f in files :pass
example# 7568
if self . match is None or self . match_re . search ( f ) :pass
example# 7569
f = os . path . join ( root , f )
example# 7571
if self . allow_folders :pass
example# 7572
for f in dirs :pass
example# 7573
if f == '_STR:0_' :pass
example# 7574
continue
example# 7575
if self . match is None or self . match_re . search ( f ) :pass
example# 7576
f = os . path . join ( root , f )
example# 7578
if True: pass
else :pass
example# 7579
try :pass
except: pass
example# 7580
for f in sorted ( os . listdir ( self . path ) ) :pass
example# 7581
if f == '_STR:0_' :pass
example# 7582
continue
example# 7583
full_file = os . path . join ( self . path , f )
example# 7584
if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or  ( self . allow_folders and os . path . isdir ( full_file ) ) ) and  ( self . match is None or self . match_re . search ( f ) ) ) :pass
example# 7586
try: pass
except OSError :pass
example# 7587
pass
example# 7588
self . widget . choices = self . choices
example# 7589
class SplitDateTimeField ( MultiValueField ) :pass
example# 7590
widget = SplitDateTimeWidget
example# 7591
hidden_widget = SplitHiddenDateTimeWidget
example# 7594
errors = self . default_error_messages . copy ( )
example# 7595
if '_STR:0_' in kwargs :pass
example# 7596
errors . update ( kwargs [ '_STR:0_' ] )
example# 7597
localize = kwargs . get ( '_STR:0_' , False )
example# 7600
def compress ( self , data_list ) :pass
example# 7601
if data_list :pass
example# 7602
if data_list [ 0 ] in self . empty_values :pass
example# 7604
if data_list [ 1 ] in self . empty_values :pass
example# 7606
result = datetime . datetime . combine ( * data_list )
example# 7607
return from_current_timezone ( result )
example# 7608
return None
example# 7609
class IPAddressField ( CharField ) :pass
example# 7613
super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
example# 7614
def to_python ( self , value ) :pass
example# 7615
if value in self . empty_values :pass
example# 7616
return ''
example# 7617
return value . strip ( )
example# 7618
class GenericIPAddressField ( CharField ) :pass
example# 7622
super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
example# 7623
def to_python ( self , value ) :pass
example# 7624
if value in self . empty_values :pass
example# 7625
return ''
example# 7626
value = value . strip ( )
example# 7627
if value and '_STR:0_' in value :pass
example# 7629
return value
example# 7630
class SlugField ( CharField ) :pass
example# 7631
default_validators = [ validators . validate_slug ]
example# 7632
def clean ( self , value ) :pass
example# 7633
value = self . to_python ( value ) . strip ( )
example# 7634
return super ( SlugField , self ) . clean ( value )
example# 7635
from __future__ import unicode_literals
example# 7636
from collections import OrderedDict
example# 7637
import copy
example# 7638
import datetime
example# 7639
import warnings
example# 7640
from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
example# 7641
from django . forms . fields import Field , FileField
example# 7642
from django . forms . utils import flatatt , ErrorDict , ErrorList
example# 7643
from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
example# 7644
from django . utils . deprecation import RemovedInDjango19Warning
example# 7646
from django . utils . html import conditional_escape , format_html
example# 7647
from django . utils . safestring import mark_safe
example# 7648
from django . utils . translation import ugettext as _
example# 7649
from django . utils import six
example# 7651
def pretty_name ( name ) :pass
example# 7652
if not name :pass
example# 7653
return ''
example# 7654
return name . replace ( '_STR:0_' , ' ' ) . capitalize ( )
example# 7658
fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
example# 7659
if with_base_fields :pass
example# 7660
for base in bases [ : : - 1 ] :pass
example# 7661
if hasattr ( base , '_STR:0_' ) :pass
example# 7662
fields = list ( six . iteritems ( base . base_fields ) ) + fields
example# 7663
if True: pass
else :pass
example# 7664
for base in bases [ : : - 1 ] :pass
example# 7665
if hasattr ( base , '_STR:0_' ) :pass
example# 7666
fields = list ( six . iteritems ( base . declared_fields ) ) + fields
example# 7667
return OrderedDict ( fields )
example# 7668
class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :pass
example# 7670
current_fields = [ ]
example# 7671
for key , value in list ( attrs . items ( ) ) :pass
example# 7672
if isinstance ( value , Field ) :pass
example# 7673
current_fields . append ( ( key , value ) )
example# 7674
attrs . pop ( key )
example# 7675
current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
example# 7676
attrs [ '_STR:0_' ] = OrderedDict ( current_fields )
example# 7678
declared_fields = OrderedDict ( )
example# 7679
for base in reversed ( new_class . __mro__ ) :pass
example# 7680
if hasattr ( base , '_STR:0_' ) :pass
example# 7681
declared_fields . update ( base . declared_fields )
example# 7682
for attr , value in base . __dict__ . items ( ) :pass
example# 7683
if value is None and attr in declared_fields :pass
example# 7684
declared_fields . pop ( attr )
example# 7685
new_class . base_fields = declared_fields
example# 7686
new_class . declared_fields = declared_fields
example# 7687
return new_class
example# 7689
class BaseForm ( object ) :pass
example# 7691
self . is_bound = data is not None or files is not None
example# 7692
self . data = data or { }
example# 7693
self . files = files or { }
example# 7694
self . auto_id = auto_id
example# 7695
self . prefix = prefix
example# 7696
self . initial = initial or { }
example# 7697
self . error_class = error_class
example# 7698
self . label_suffix = label_suffix if label_suffix is not None else _ ( '_STR:0_' )
example# 7699
self . empty_permitted = empty_permitted
example# 7700
self . _errors = None
example# 7701
self . _changed_data = None
example# 7702
self . fields = copy . deepcopy ( self . base_fields )
example# 7703
def __str__ ( self ) :pass
example# 7704
return self . as_table ( )
example# 7705
def __iter__ ( self ) :pass
example# 7706
for name in self . fields :pass
example# 7707
yield self [ name ]
example# 7709
try :pass
except: pass
example# 7710
field = self . fields [ name ]
example# 7711
try: pass
except KeyError :pass
example# 7712
raise KeyError (  '_STR:0_' % ( name , self . __class__ . __name__ ) )
example# 7713
return BoundField ( self , field , name )
example# 7714
@ property
def dummy(): pass
example# 7715
def errors ( self ) :pass
example# 7716
if self . _errors is None :pass
example# 7717
self . full_clean ( )
example# 7718
return self . _errors
example# 7719
def is_valid ( self ) :pass
example# 7720
return self . is_bound and not self . errors
example# 7722
return '_STR:0_' % ( self . prefix , field_name ) if self . prefix else field_name
example# 7724
return '_STR:0_' % self . add_prefix ( field_name )
example# 7726
top_errors = self . non_field_errors ( )
example# 7727
output , hidden_fields = [ ] , [ ]
example# 7728
for name , field in self . fields . items ( ) :pass
example# 7729
html_class_attr = ''
example# 7730
bf = self [ name ]
example# 7731
bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
example# 7732
if bf . is_hidden :pass
example# 7733
if bf_errors :pass
example# 7734
top_errors . extend (  [ _ ( '_STR:0_' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
example# 7735
hidden_fields . append ( six . text_type ( bf ) )
example# 7736
if True: pass
else :pass
example# 7737
css_classes = bf . css_classes ( )
example# 7738
if css_classes :pass
example# 7739
html_class_attr = '_STR:0_' % css_classes
example# 7740
if errors_on_separate_row and bf_errors :pass
example# 7741
output . append ( error_row % force_text ( bf_errors ) )
example# 7742
if bf . label :pass
example# 7743
label = conditional_escape ( force_text ( bf . label ) )
example# 7744
label = bf . label_tag ( label ) or ''
example# 7745
if True: pass
else :pass
example# 7746
label = ''
example# 7747
if field . help_text :pass
example# 7748
help_text = help_text_html % force_text ( field . help_text )
example# 7749
if True: pass
else :pass
example# 7750
help_text = ''
example# 7752
if top_errors :pass
example# 7753
output . insert ( 0 , error_row % force_text ( top_errors ) )
example# 7754
if hidden_fields :pass
example# 7755
str_hidden = '' . join ( hidden_fields )
example# 7756
if output :pass
example# 7757
last_row = output [ - 1 ]
example# 7758
if not last_row . endswith ( row_ender ) :pass
example# 7760
output . append ( last_row )
example# 7761
output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender
example# 7762
if True: pass
else :pass
example# 7763
output . append ( str_hidden )
example# 7764
return mark_safe ( '\n' . join ( output ) )
example# 7765
def as_table ( self ) :pass
example# 7767
def as_ul ( self ) :pass
example# 7769
def as_p ( self ) :pass
example# 7771
def non_field_errors ( self ) :pass
example# 7774
field = self . fields [ fieldname ]
example# 7775
prefix = self . add_prefix ( fieldname )
example# 7778
if not isinstance ( error , ValidationError ) :pass
example# 7779
error = ValidationError ( error )
example# 7780
if hasattr ( error , '_STR:0_' ) :pass
example# 7781
if field is not None :pass
example# 7782
raise TypeError (  "The argument `field` must be `None` when the `error` "  "argument contains errors for multiple fields."  )
example# 7783
if True: pass
else :pass
example# 7784
error = error . error_dict
example# 7785
if True: pass
else :pass
example# 7786
error = { field or NON_FIELD_ERRORS : error . error_list }
example# 7787
for field , error_list in error . items ( ) :pass
example# 7788
if field not in self . errors :pass
example# 7789
if field != NON_FIELD_ERRORS and field not in self . fields :pass
example# 7790
raise ValueError (  '_STR:0_' % ( self . __class__ . __name__ , field ) )
example# 7791
if field == NON_FIELD_ERRORS :pass
example# 7792
self . _errors [ field ] = self . error_class ( error_class = '_STR:0_' )
example# 7793
if True: pass
else :pass
example# 7794
self . _errors [ field ] = self . error_class ( )
example# 7795
self . _errors [ field ] . extend ( error_list )
example# 7796
if field in self . cleaned_data :pass
example# 7797
del self . cleaned_data [ field ]
example# 7799
if code is None :pass
example# 7800
return field in self . errors
example# 7801
if field in self . errors :pass
example# 7802
for error in self . errors . as_data ( ) [ field ] :pass
example# 7803
if error . code == code :pass
example# 7804
return True
example# 7805
return False
example# 7806
def full_clean ( self ) :pass
example# 7807
self . _errors = ErrorDict ( )
example# 7808
if not self . is_bound :pass
example# 7809
return
example# 7810
self . cleaned_data = { }
example# 7811
if self . empty_permitted and not self . has_changed ( ) :pass
example# 7812
return
example# 7813
self . _clean_fields ( )
example# 7814
self . _clean_form ( )
example# 7815
self . _post_clean ( )
example# 7816
def _clean_fields ( self ) :pass
example# 7817
for name , field in self . fields . items ( ) :pass
example# 7819
try :pass
except: pass
example# 7820
if isinstance ( field , FileField ) :pass
example# 7821
initial = self . initial . get ( name , field . initial )
example# 7822
value = field . clean ( value , initial )
example# 7823
if True: pass
else :pass
example# 7824
value = field . clean ( value )
example# 7825
self . cleaned_data [ name ] = value
example# 7826
if hasattr ( self , '_STR:0_' % name ) :pass
example# 7827
value = getattr ( self , '_STR:0_' % name ) ( )
example# 7828
self . cleaned_data [ name ] = value
example# 7829
try: pass
except ValidationError as e :pass
example# 7831
def _clean_form ( self ) :pass
example# 7832
try :pass
except: pass
example# 7833
cleaned_data = self . clean ( )
example# 7834
try: pass
except ValidationError as e :pass
example# 7836
if True: pass
else :pass
example# 7837
if cleaned_data is not None :pass
example# 7838
self . cleaned_data = cleaned_data
example# 7839
def _post_clean ( self ) :pass
example# 7840
pass
example# 7841
def clean ( self ) :pass
example# 7842
return self . cleaned_data
example# 7843
def has_changed ( self ) :pass
example# 7844
return bool ( self . changed_data )
example# 7845
@ property
def dummy(): pass
example# 7846
def changed_data ( self ) :pass
example# 7847
if self . _changed_data is None :pass
example# 7848
self . _changed_data = [ ]
example# 7849
for name , field in self . fields . items ( ) :pass
example# 7850
prefixed_name = self . add_prefix ( name )
example# 7852
if not field . show_hidden_initial :pass
example# 7853
initial_value = self . initial . get ( name , field . initial )
example# 7854
if callable ( initial_value ) :pass
example# 7855
initial_value = initial_value ( )
example# 7856
if True: pass
else :pass
example# 7857
initial_prefixed_name = self . add_initial_prefix ( name )
example# 7858
hidden_widget = field . hidden_widget ( )
example# 7859
try :pass
except: pass
example# 7861
try: pass
except ValidationError :pass
example# 7862
self . _changed_data . append ( name )
example# 7863
continue
example# 7865
self . _changed_data . append ( name )
example# 7866
return self . _changed_data
example# 7867
@ property
def dummy(): pass
example# 7868
def media ( self ) :pass
example# 7869
media = Media ( )
example# 7870
for field in self . fields . values ( ) :pass
example# 7871
media = media + field . widget . media
example# 7872
return media
example# 7873
def is_multipart ( self ) :pass
example# 7874
for field in self . fields . values ( ) :pass
example# 7875
if field . widget . needs_multipart_form :pass
example# 7876
return True
example# 7877
return False
example# 7878
def hidden_fields ( self ) :pass
example# 7879
return [ field for field in self if field . is_hidden ]
example# 7880
def visible_fields ( self ) :pass
example# 7881
return [ field for field in self if not field . is_hidden ]
example# 7882
class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :pass
example# 7884
class BoundField ( object ) :pass
example# 7886
self . form = form
example# 7887
self . field = field
example# 7888
self . name = name
example# 7889
self . html_name = form . add_prefix ( name )
example# 7890
self . html_initial_name = form . add_initial_prefix ( name )
example# 7891
self . html_initial_id = form . add_initial_prefix ( self . auto_id )
example# 7892
if self . field . label is None :pass
example# 7893
self . label = pretty_name ( name )
example# 7894
if True: pass
else :pass
example# 7895
self . label = self . field . label
example# 7896
self . help_text = field . help_text or ''
example# 7897
def __str__ ( self ) :pass
example# 7898
if self . field . show_hidden_initial :pass
example# 7899
return self . as_widget ( ) + self . as_hidden ( only_initial = True )
example# 7900
return self . as_widget ( )
example# 7901
def __iter__ ( self ) :pass
example# 7902
id_ = self . field . widget . attrs . get ( '_STR:0_' ) or self . auto_id
example# 7903
attrs = { '_STR:0_' : id_ } if id_ else { }
example# 7905
yield subwidget
example# 7906
def __len__ ( self ) :pass
example# 7907
return len ( list ( self . __iter__ ( ) ) )
example# 7909
return list ( self . __iter__ ( ) ) [ idx ]
example# 7910
@ property
def dummy(): pass
example# 7911
def errors ( self ) :pass
example# 7912
return self . form . errors . get ( self . name , self . form . error_class ( ) )
example# 7914
if not widget :pass
example# 7915
widget = self . field . widget
example# 7916
if self . field . localize :pass
example# 7917
widget . is_localized = True
example# 7918
attrs = attrs or { }
example# 7919
auto_id = self . auto_id
example# 7920
if auto_id and '_STR:0_' not in attrs and '_STR:0_' not in widget . attrs :pass
example# 7921
if not only_initial :pass
example# 7922
attrs [ '_STR:0_' ] = auto_id
example# 7923
if True: pass
else :pass
example# 7924
attrs [ '_STR:0_' ] = self . html_initial_id
example# 7925
if not only_initial :pass
example# 7926
name = self . html_name
example# 7927
if True: pass
else :pass
example# 7928
name = self . html_initial_name
example# 7936
@ property
def dummy(): pass
example# 7937
def data ( self ) :pass
example# 7939
def value ( self ) :pass
example# 7940
if not self . form . is_bound :pass
example# 7941
data = self . form . initial . get ( self . name , self . field . initial )
example# 7942
if callable ( data ) :pass
example# 7943
data = data ( )
example# 7944
if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :pass
example# 7946
if True: pass
else :pass
example# 7948
return self . field . prepare_value ( data )
example# 7950
contents = contents or self . label
example# 7951
if label_suffix is None :pass
example# 7952
label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
example# 7953
if label_suffix and contents and contents [ - 1 ] not in _ ( '_STR:0_' ) :pass
example# 7955
widget = self . field . widget
example# 7956
id_ = widget . attrs . get ( '_STR:0_' ) or self . auto_id
example# 7957
if id_ :pass
example# 7958
id_for_label = widget . id_for_label ( id_ )
example# 7959
if id_for_label :pass
example# 7960
attrs = dict ( attrs or { } , ** { '_STR:0_' : id_for_label } )
example# 7961
if self . field . required and hasattr ( self . form , '_STR:0_' ) :pass
example# 7962
attrs = attrs or { }
example# 7963
if '_STR:0_' in attrs :pass
example# 7964
attrs [ '_STR:0_' ] += ' ' + self . form . required_css_class
example# 7965
if True: pass
else :pass
example# 7966
attrs [ '_STR:0_' ] = self . form . required_css_class
example# 7967
attrs = flatatt ( attrs ) if attrs else ''
example# 7969
if True: pass
else :pass
example# 7970
contents = conditional_escape ( contents )
example# 7971
return mark_safe ( contents )
example# 7973
if hasattr ( extra_classes , '_STR:0_' ) :pass
example# 7974
extra_classes = extra_classes . split ( )
example# 7975
extra_classes = set ( extra_classes or [ ] )
example# 7976
if self . errors and hasattr ( self . form , '_STR:0_' ) :pass
example# 7977
extra_classes . add ( self . form . error_css_class )
example# 7978
if self . field . required and hasattr ( self . form , '_STR:0_' ) :pass
example# 7979
extra_classes . add ( self . form . required_css_class )
example# 7980
return ' ' . join ( extra_classes )
example# 7981
@ property
def dummy(): pass
example# 7982
def is_hidden ( self ) :pass
example# 7983
return self . field . widget . is_hidden
example# 7984
@ property
def dummy(): pass
example# 7985
def auto_id ( self ) :pass
example# 7986
auto_id = self . form . auto_id
example# 7987
if auto_id and '%s' in smart_text ( auto_id ) :pass
example# 7988
return smart_text ( auto_id ) % self . html_name
example# 7989
if True: pass
elif auto_id :pass
example# 7990
return self . html_name
example# 7991
return ''
example# 7992
@ property
def dummy(): pass
example# 7993
def id_for_label ( self ) :pass
example# 7994
widget = self . field . widget
example# 7995
id_ = widget . attrs . get ( '_STR:0_' ) or self . auto_id
example# 7996
return widget . id_for_label ( id_ )
example# 7997
from __future__ import unicode_literals
example# 7998
from django . core . exceptions import ValidationError
example# 7999
from django . forms import Form
example# 8000
from django . forms . fields import IntegerField , BooleanField
example# 8001
from django . forms . utils import ErrorList
example# 8002
from django . forms . widgets import HiddenInput
example# 8004
from django . utils . functional import cached_property
example# 8005
from django . utils . safestring import mark_safe
example# 8006
from django . utils import six
example# 8007
from django . utils . six . moves import xrange
example# 8008
from django . utils . translation import ungettext , ugettext as _
example# 8009
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' )
example# 8010
TOTAL_FORM_COUNT = '_STR:0_'
example# 8011
INITIAL_FORM_COUNT = '_STR:0_'
example# 8012
MIN_NUM_FORM_COUNT = '_STR:0_'
example# 8013
MAX_NUM_FORM_COUNT = '_STR:0_'
example# 8014
ORDERING_FIELD_NAME = '_STR:0_'
example# 8015
DELETION_FIELD_NAME = '_STR:0_'
example# 8016
DEFAULT_MIN_NUM = 0
example# 8017
DEFAULT_MAX_NUM = 1000
example# 8018
class ManagementForm ( Form ) :pass
example# 8020
self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
example# 8021
self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
example# 8026
class BaseFormSet ( object ) :pass
example# 8028
self . is_bound = data is not None or files is not None
example# 8029
self . prefix = prefix or self . get_default_prefix ( )
example# 8030
self . auto_id = auto_id
example# 8031
self . data = data or { }
example# 8032
self . files = files or { }
example# 8033
self . initial = initial
example# 8034
self . error_class = error_class
example# 8035
self . _errors = None
example# 8036
self . _non_form_errors = None
example# 8037
def __str__ ( self ) :pass
example# 8038
return self . as_table ( )
example# 8039
def __iter__ ( self ) :pass
example# 8040
return iter ( self . forms )
example# 8041
def __getitem__ ( self , index ) :pass
example# 8042
return self . forms [ index ]
example# 8043
def __len__ ( self ) :pass
example# 8044
return len ( self . forms )
example# 8045
def __bool__ ( self ) :pass
example# 8046
return True
example# 8047
def __nonzero__ ( self ) :pass
example# 8048
return type ( self ) . __bool__ ( self )
example# 8049
@ property
def dummy(): pass
example# 8050
def management_form ( self ) :pass
example# 8051
if self . is_bound :pass
example# 8053
if not form . is_valid ( ) :pass
example# 8055
if True: pass
else :pass
example# 8057
return form
example# 8058
def total_form_count ( self ) :pass
example# 8059
if self . is_bound :pass
example# 8060
return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
example# 8061
if True: pass
else :pass
example# 8062
initial_forms = self . initial_form_count ( )
example# 8063
total_forms = max ( initial_forms , self . min_num ) + self . extra
example# 8065
total_forms = initial_forms
example# 8067
total_forms = self . max_num
example# 8068
return total_forms
example# 8069
def initial_form_count ( self ) :pass
example# 8070
if self . is_bound :pass
example# 8071
return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
example# 8072
if True: pass
else :pass
example# 8073
initial_forms = len ( self . initial ) if self . initial else 0
example# 8074
return initial_forms
example# 8075
@ cached_property
def dummy(): pass
example# 8076
def forms ( self ) :pass
example# 8078
return forms
example# 8081
if self . is_bound :pass
example# 8082
defaults [ '_STR:0_' ] = self . data
example# 8083
defaults [ '_STR:0_' ] = self . files
example# 8084
if self . initial and '_STR:0_' not in kwargs :pass
example# 8085
try :pass
except: pass
example# 8086
defaults [ '_STR:0_' ] = self . initial [ i ]
example# 8087
try: pass
except IndexError :pass
example# 8088
pass
example# 8089
if i >= self . initial_form_count ( ) and i >= self . min_num :pass
example# 8090
defaults [ '_STR:0_' ] = True
example# 8091
defaults . update ( kwargs )
example# 8092
form = self . form ( ** defaults )
example# 8093
self . add_fields ( form , i )
example# 8094
return form
example# 8095
@ property
def dummy(): pass
example# 8096
def initial_forms ( self ) :pass
example# 8097
return self . forms [ : self . initial_form_count ( ) ]
example# 8098
@ property
def dummy(): pass
example# 8099
def extra_forms ( self ) :pass
example# 8100
return self . forms [ self . initial_form_count ( ) : ]
example# 8101
@ property
def dummy(): pass
example# 8102
def empty_form ( self ) :pass
example# 8104
self . add_fields ( form , None )
example# 8105
return form
example# 8106
@ property
def dummy(): pass
example# 8107
def cleaned_data ( self ) :pass
example# 8108
if not self . is_valid ( ) :pass
example# 8109
raise AttributeError ( '_STR:0_' % self . __class__ . __name__ )
example# 8110
return [ form . cleaned_data for form in self . forms ]
example# 8111
@ property
def dummy(): pass
example# 8112
def deleted_forms ( self ) :pass
example# 8113
if not self . is_valid ( ) or not self . can_delete :pass
example# 8114
return [ ]
example# 8115
if not hasattr ( self , '_STR:0_' ) :pass
example# 8116
self . _deleted_form_indexes = [ ]
example# 8118
form = self . forms [ i ]
example# 8119
if i >= self . initial_form_count ( ) and not form . has_changed ( ) :pass
example# 8120
continue
example# 8121
if self . _should_delete_form ( form ) :pass
example# 8122
self . _deleted_form_indexes . append ( i )
example# 8123
return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
example# 8124
@ property
def dummy(): pass
example# 8125
def ordered_forms ( self ) :pass
example# 8126
if not self . is_valid ( ) or not self . can_order :pass
example# 8127
raise AttributeError ( '_STR:0_' % self . __class__ . __name__ )
example# 8128
if not hasattr ( self , '_STR:0_' ) :pass
example# 8129
self . _ordering = [ ]
example# 8131
form = self . forms [ i ]
example# 8132
if i >= self . initial_form_count ( ) and not form . has_changed ( ) :pass
example# 8133
continue
example# 8134
if self . can_delete and self . _should_delete_form ( form ) :pass
example# 8135
continue
example# 8137
def compare_ordering_key ( k ) :pass
example# 8138
if k [ 1 ] is None :pass
example# 8141
self . _ordering . sort ( key = compare_ordering_key )
example# 8142
return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
example# 8143
@ classmethod
def dummy(): pass
example# 8144
def get_default_prefix ( cls ) :pass
example# 8145
return '_STR:0_'
example# 8146
def non_form_errors ( self ) :pass
example# 8147
if self . _non_form_errors is None :pass
example# 8148
self . full_clean ( )
example# 8149
return self . _non_form_errors
example# 8150
@ property
def dummy(): pass
example# 8151
def errors ( self ) :pass
example# 8152
if self . _errors is None :pass
example# 8153
self . full_clean ( )
example# 8154
return self . _errors
example# 8155
def total_error_count ( self ) :pass
example# 8156
return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
example# 8157
def _should_delete_form ( self , form ) :pass
example# 8158
return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
example# 8159
def is_valid ( self ) :pass
example# 8160
if not self . is_bound :pass
example# 8161
return False
example# 8162
forms_valid = True
example# 8163
self . errors
example# 8165
form = self . forms [ i ]
example# 8166
if self . can_delete :pass
example# 8167
if self . _should_delete_form ( form ) :pass
example# 8168
continue
example# 8169
forms_valid &= form . is_valid ( )
example# 8170
return forms_valid and not self . non_form_errors ( )
example# 8171
def full_clean ( self ) :pass
example# 8172
self . _errors = [ ]
example# 8173
self . _non_form_errors = self . error_class ( )
example# 8174
if not self . is_bound :pass
example# 8175
return
example# 8177
form = self . forms [ i ]
example# 8178
self . _errors . append ( form . errors )
example# 8179
try :pass
except: pass
example# 8180
if ( self . validate_max and  self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max :pass
example# 8182
if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :pass
example# 8184
self . clean ( )
example# 8185
try: pass
except ValidationError as e :pass
example# 8186
self . _non_form_errors = self . error_class ( e . error_list )
example# 8187
def clean ( self ) :pass
example# 8188
pass
example# 8189
def has_changed ( self ) :pass
example# 8190
return any ( form . has_changed ( ) for form in self )
example# 8192
if self . can_order :pass
example# 8193
if index is not None and index < self . initial_form_count ( ) :pass
example# 8195
if True: pass
else :pass
example# 8197
if self . can_delete :pass
example# 8199
def add_prefix ( self , index ) :pass
example# 8200
return '_STR:0_' % ( self . prefix , index )
example# 8201
def is_multipart ( self ) :pass
example# 8202
if self . forms :pass
example# 8203
return self . forms [ 0 ] . is_multipart ( )
example# 8204
if True: pass
else :pass
example# 8205
return self . empty_form . is_multipart ( )
example# 8206
@ property
def dummy(): pass
example# 8207
def media ( self ) :pass
example# 8208
if self . forms :pass
example# 8209
return self . forms [ 0 ] . media
example# 8210
if True: pass
else :pass
example# 8211
return self . empty_form . media
example# 8212
def as_table ( self ) :pass
example# 8213
forms = ' ' . join ( form . as_table ( ) for form in self )
example# 8214
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
example# 8215
def as_p ( self ) :pass
example# 8216
forms = ' ' . join ( form . as_p ( ) for form in self )
example# 8217
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
example# 8218
def as_ul ( self ) :pass
example# 8219
forms = ' ' . join ( form . as_ul ( ) for form in self )
example# 8220
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
example# 8222
if min_num is None :pass
example# 8223
min_num = DEFAULT_MIN_NUM
example# 8224
if max_num is None :pass
example# 8225
max_num = DEFAULT_MAX_NUM
example# 8226
absolute_max = max_num + DEFAULT_MAX_NUM
example# 8228
return type ( form . __name__ + str ( '_STR:0_' ) , ( formset , ) , attrs )
example# 8229
def all_valid ( formsets ) :pass
example# 8230
valid = True
example# 8231
for formset in formsets :pass
example# 8232
if not formset . is_valid ( ) :pass
example# 8233
valid = False
example# 8234
return valid
example# 8235
from __future__ import unicode_literals
example# 8236
from collections import OrderedDict
example# 8237
import warnings
example# 8238
from django . core . exceptions import (  ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )
example# 8239
from django . forms . fields import Field , ChoiceField
example# 8240
from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
example# 8241
from django . forms . formsets import BaseFormSet , formset_factory
example# 8242
from django . forms . utils import ErrorList
example# 8243
from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
example# 8244
from django . utils import six
example# 8245
from django . utils . deprecation import RemovedInDjango19Warning
example# 8246
from django . utils . encoding import smart_text , force_text
example# 8247
from django . utils . text import get_text_list , capfirst
example# 8248
from django . utils . translation import ugettext_lazy as _ , ugettext
example# 8249
__all__ = (  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
example# 8250
ALL_FIELDS = '_STR:7_'
example# 8252
from django . db import models
example# 8253
opts = instance . _meta
example# 8254
cleaned_data = form . cleaned_data
example# 8255
file_field_list = [ ]
example# 8256
for f in opts . fields :pass
example# 8257
if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :pass
example# 8258
continue
example# 8259
if fields is not None and f . name not in fields :pass
example# 8260
continue
example# 8261
if exclude and f . name in exclude :pass
example# 8262
continue
example# 8263
if isinstance ( f , models . FileField ) :pass
example# 8264
file_field_list . append ( f )
example# 8265
if True: pass
else :pass
example# 8267
for f in file_field_list :pass
example# 8269
return instance
example# 8271
if construct :pass
example# 8273
opts = instance . _meta
example# 8274
if form . errors :pass
example# 8275
raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
example# 8277
cleaned_data = form . cleaned_data
example# 8278
for f in opts . many_to_many + opts . virtual_fields :pass
example# 8279
if not hasattr ( f , '_STR:0_' ) :pass
example# 8280
continue
example# 8281
if fields and f . name not in fields :pass
example# 8282
continue
example# 8283
if exclude and f . name in exclude :pass
example# 8284
continue
example# 8285
if f . name in cleaned_data :pass
example# 8287
if commit :pass
example# 8288
instance . save ( )
example# 8290
if True: pass
else :pass
example# 8292
return instance
example# 8294
from django . db . models . fields . related import ManyToManyField
example# 8295
opts = instance . _meta
example# 8296
data = { }
example# 8297
for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :pass
example# 8298
if not getattr ( f , '_STR:0_' , False ) :pass
example# 8299
continue
example# 8300
if fields and f . name not in fields :pass
example# 8301
continue
example# 8302
if exclude and f . name in exclude :pass
example# 8303
continue
example# 8304
if isinstance ( f , ManyToManyField ) :pass
example# 8305
if instance . pk is None :pass
example# 8306
data [ f . name ] = [ ]
example# 8307
if True: pass
else :pass
example# 8308
qs = f . value_from_object ( instance )
example# 8309
if qs . _result_cache is not None :pass
example# 8310
data [ f . name ] = [ item . pk for item in qs ]
example# 8311
if True: pass
else :pass
example# 8313
if True: pass
else :pass
example# 8314
data [ f . name ] = f . value_from_object ( instance )
example# 8315
return data
example# 8317
field_list = [ ]
example# 8318
ignored = [ ]
example# 8319
opts = model . _meta
example# 8320
from django . db . models . fields import Field as ModelField
example# 8321
sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
example# 8322
for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :pass
example# 8323
if not getattr ( f , '_STR:0_' , False ) :pass
example# 8324
continue
example# 8325
if fields is not None and f . name not in fields :pass
example# 8326
continue
example# 8327
if exclude and f . name in exclude :pass
example# 8328
continue
example# 8329
kwargs = { }
example# 8330
if widgets and f . name in widgets :pass
example# 8331
kwargs [ '_STR:0_' ] = widgets [ f . name ]
example# 8332
if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :pass
example# 8333
kwargs [ '_STR:0_' ] = True
example# 8334
if labels and f . name in labels :pass
example# 8335
kwargs [ '_STR:0_' ] = labels [ f . name ]
example# 8336
if help_texts and f . name in help_texts :pass
example# 8337
kwargs [ '_STR:0_' ] = help_texts [ f . name ]
example# 8338
if error_messages and f . name in error_messages :pass
example# 8339
kwargs [ '_STR:0_' ] = error_messages [ f . name ]
example# 8340
if formfield_callback is None :pass
example# 8341
formfield = f . formfield ( ** kwargs )
example# 8342
if True: pass
elif not callable ( formfield_callback ) :pass
example# 8343
raise TypeError ( '_STR:0_' )
example# 8344
if True: pass
else :pass
example# 8346
if formfield :pass
example# 8348
if True: pass
else :pass
example# 8349
ignored . append ( f . name )
example# 8350
field_dict = OrderedDict ( field_list )
example# 8351
if fields :pass
example# 8353
return field_dict
example# 8354
class ModelFormOptions ( object ) :pass
example# 8355
def __init__ ( self , options = None ) :pass
example# 8356
self . model = getattr ( options , '_STR:0_' , None )
example# 8357
self . fields = getattr ( options , '_STR:0_' , None )
example# 8358
self . exclude = getattr ( options , '_STR:0_' , None )
example# 8359
self . widgets = getattr ( options , '_STR:0_' , None )
example# 8360
self . localized_fields = getattr ( options , '_STR:0_' , None )
example# 8361
self . labels = getattr ( options , '_STR:0_' , None )
example# 8362
self . help_texts = getattr ( options , '_STR:0_' , None )
example# 8363
self . error_messages = getattr ( options , '_STR:0_' , None )
example# 8364
class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :pass
example# 8366
formfield_callback = attrs . pop ( '_STR:0_' , None )
example# 8368
if bases == ( BaseModelForm , ) :pass
example# 8369
return new_class
example# 8370
opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , '_STR:0_' , None ) )
example# 8372
value = getattr ( opts , opt )
example# 8373
if isinstance ( value , six . string_types ) and value != ALL_FIELDS :pass
example# 8374
msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('_STR:3_',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
example# 8375
raise TypeError ( msg )
example# 8376
if opts . model :pass
example# 8377
if opts . fields is None and opts . exclude is None :pass
example# 8378
raise ImproperlyConfigured (  "Creating a ModelForm without either the 'fields' attribute "  "or the '_STR:1_' attribute is prohibited; form %s "  "needs updating." % name  )
example# 8379
if opts . fields == ALL_FIELDS :pass
example# 8380
opts . fields = None
example# 8382
none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]
example# 8383
missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
example# 8384
if missing_fields :pass
example# 8385
message = '_STR:0_'
example# 8386
message = message % ( '_STR:0_' . join ( missing_fields ) ,  opts . model . __name__ )
example# 8387
raise FieldError ( message )
example# 8388
fields . update ( new_class . declared_fields )
example# 8389
if True: pass
else :pass
example# 8390
fields = new_class . declared_fields
example# 8391
new_class . base_fields = fields
example# 8392
return new_class
example# 8393
class BaseModelForm ( BaseForm ) :pass
example# 8394
def __init__ ( self , data = None , files = None , auto_id = '_STR:0_' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :pass
example# 8395
opts = self . _meta
example# 8396
if opts . model is None :pass
example# 8397
raise ValueError ( '_STR:0_' )
example# 8398
if instance is None :pass
example# 8399
self . instance = opts . model ( )
example# 8400
object_data = { }
example# 8401
if True: pass
else :pass
example# 8402
self . instance = instance
example# 8404
if initial is not None :pass
example# 8405
object_data . update ( initial )
example# 8406
self . _validate_unique = False
example# 8408
for field_name in self . fields :pass
example# 8409
formfield = self . fields [ field_name ]
example# 8410
if hasattr ( formfield , '_STR:0_' ) :pass
example# 8411
limit_choices_to = formfield . limit_choices_to
example# 8412
if limit_choices_to is not None :pass
example# 8413
if callable ( limit_choices_to ) :pass
example# 8414
limit_choices_to = limit_choices_to ( )
example# 8415
formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
example# 8416
def _get_validation_exclusions ( self ) :pass
example# 8417
exclude = [ ]
example# 8418
for f in self . instance . _meta . fields :pass
example# 8419
field = f . name
example# 8420
if field not in self . fields :pass
example# 8421
exclude . append ( f . name )
example# 8422
if True: pass
elif self . _meta . fields and field not in self . _meta . fields :pass
example# 8423
exclude . append ( f . name )
example# 8424
if True: pass
elif self . _meta . exclude and field in self . _meta . exclude :pass
example# 8425
exclude . append ( f . name )
example# 8426
if True: pass
elif field in self . _errors . keys ( ) :pass
example# 8427
exclude . append ( f . name )
example# 8428
if True: pass
else :pass
example# 8429
form_field = self . fields [ field ]
example# 8430
field_value = self . cleaned_data . get ( field , None )
example# 8431
if not f . blank and not form_field . required and field_value in form_field . empty_values :pass
example# 8432
exclude . append ( f . name )
example# 8433
return exclude
example# 8434
def clean ( self ) :pass
example# 8435
self . _validate_unique = True
example# 8436
return self . cleaned_data
example# 8438
opts = self . _meta
example# 8439
for field , messages in errors . error_dict . items ( ) :pass
example# 8440
if ( field == NON_FIELD_ERRORS and opts . error_messages and  NON_FIELD_ERRORS in opts . error_messages ) :pass
example# 8441
error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
example# 8442
if True: pass
elif field in self . fields :pass
example# 8443
error_messages = self . fields [ field ] . error_messages
example# 8444
if True: pass
else :pass
example# 8445
continue
example# 8446
for message in messages :pass
example# 8447
if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :pass
example# 8448
message . message = error_messages [ message . code ]
example# 8450
def _post_clean ( self ) :pass
example# 8451
opts = self . _meta
example# 8452
exclude = self . _get_validation_exclusions ( )
example# 8453
construct_instance_exclude = list ( exclude )
example# 8454
for name , field in self . fields . items ( ) :pass
example# 8455
if isinstance ( field , InlineForeignKeyField ) :pass
example# 8456
if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :pass
example# 8457
construct_instance_exclude . append ( name )
example# 8458
exclude . append ( name )
example# 8460
try :pass
except: pass
example# 8462
try: pass
except ValidationError as e :pass
example# 8463
self . _update_errors ( e )
example# 8464
if self . _validate_unique :pass
example# 8465
self . validate_unique ( )
example# 8466
def validate_unique ( self ) :pass
example# 8467
exclude = self . _get_validation_exclusions ( )
example# 8468
try :pass
except: pass
example# 8469
self . instance . validate_unique ( exclude = exclude )
example# 8470
try: pass
except ValidationError as e :pass
example# 8471
self . _update_errors ( e )
example# 8473
if self . instance . pk is None :pass
example# 8474
fail_message = '_STR:0_'
example# 8475
if True: pass
else :pass
example# 8476
fail_message = 'changed'
example# 8478
save . alters_data = True
example# 8480
pass
example# 8481
def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :pass
example# 8482
attrs = { '_STR:0_' : model }
example# 8483
if fields is not None :pass
example# 8484
attrs [ '_STR:0_' ] = fields
example# 8485
if exclude is not None :pass
example# 8486
attrs [ '_STR:0_' ] = exclude
example# 8487
if widgets is not None :pass
example# 8488
attrs [ '_STR:0_' ] = widgets
example# 8489
if localized_fields is not None :pass
example# 8490
attrs [ '_STR:0_' ] = localized_fields
example# 8491
if labels is not None :pass
example# 8492
attrs [ '_STR:0_' ] = labels
example# 8493
if help_texts is not None :pass
example# 8494
attrs [ '_STR:0_' ] = help_texts
example# 8495
if error_messages is not None :pass
example# 8496
attrs [ '_STR:0_' ] = error_messages
example# 8498
if hasattr ( form , '_STR:0_' ) :pass
example# 8500
Meta = type ( str ( '_STR:0_' ) , parent , attrs )
example# 8501
class_name = model . __name__ + str ( '_STR:0_' )
example# 8503
if ( getattr ( Meta , '_STR:0_' , None ) is None and  getattr ( Meta , '_STR:1_' , None ) is None ) :pass
example# 8504
raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
example# 8506
class BaseModelFormSet ( BaseFormSet ) :pass
example# 8507
model = None
example# 8509
self . queryset = queryset
example# 8510
self . initial_extra = kwargs . pop ( '_STR:0_' , None )
example# 8512
defaults . update ( kwargs )
example# 8513
super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
example# 8514
def initial_form_count ( self ) :pass
example# 8515
if not ( self . data or self . files ) :pass
example# 8516
return len ( self . get_queryset ( ) )
example# 8517
return super ( BaseModelFormSet , self ) . initial_form_count ( )
example# 8519
if not hasattr ( self , '_STR:0_' ) :pass
example# 8521
return self . _object_dict . get ( pk )
example# 8523
while field . rel is not None :pass
example# 8524
field = field . rel . get_related_field ( )
example# 8525
return field . to_python
example# 8527
if self . is_bound and i < self . initial_form_count ( ) :pass
example# 8528
pk_key = '_STR:0_' % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
example# 8529
pk = self . data [ pk_key ]
example# 8530
pk_field = self . model . _meta . pk
example# 8531
to_python = self . _get_to_python ( pk_field )
example# 8532
pk = to_python ( pk )
example# 8533
kwargs [ '_STR:0_' ] = self . _existing_object ( pk )
example# 8534
if i < self . initial_form_count ( ) and '_STR:0_' not in kwargs :pass
example# 8535
kwargs [ '_STR:0_' ] = self . get_queryset ( ) [ i ]
example# 8536
if i >= self . initial_form_count ( ) and self . initial_extra :pass
example# 8537
try :pass
except: pass
example# 8538
kwargs [ '_STR:0_' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
example# 8539
try: pass
except IndexError :pass
example# 8540
pass
example# 8542
def get_queryset ( self ) :pass
example# 8543
if not hasattr ( self , '_STR:0_' ) :pass
example# 8544
if self . queryset is not None :pass
example# 8545
qs = self . queryset
example# 8546
if True: pass
else :pass
example# 8547
qs = self . model . _default_manager . get_queryset ( )
example# 8548
if not qs . ordered :pass
example# 8549
qs = qs . order_by ( self . model . _meta . pk . name )
example# 8550
self . _queryset = qs
example# 8551
return self . _queryset
example# 8553
return form . save ( commit = commit )
example# 8555
return form . save ( commit = commit )
example# 8557
if not commit :pass
example# 8558
self . saved_forms = [ ]
example# 8560
for form in self . saved_forms :pass
example# 8563
return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
example# 8564
save . alters_data = True
example# 8565
def clean ( self ) :pass
example# 8566
self . validate_unique ( )
example# 8567
def validate_unique ( self ) :pass
example# 8568
all_unique_checks = set ( )
example# 8569
all_date_checks = set ( )
example# 8570
forms_to_delete = self . deleted_forms
example# 8571
valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
example# 8572
for form in valid_forms :pass
example# 8573
exclude = form . _get_validation_exclusions ( )
example# 8574
unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )
example# 8575
all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
example# 8576
all_date_checks = all_date_checks . union ( set ( date_checks ) )
example# 8577
errors = [ ]
example# 8578
for uclass , unique_check in all_unique_checks :pass
example# 8579
seen_data = set ( )
example# 8580
for form in valid_forms :pass
example# 8581
row_data = ( form . cleaned_data [ field ]  for field in unique_check if field in form . cleaned_data )
example# 8582
row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_STR:0_' ) else d  for d in row_data )
example# 8583
if row_data and None not in row_data :pass
example# 8584
if row_data in seen_data :pass
example# 8585
errors . append ( self . get_unique_error_message ( unique_check ) )
example# 8586
form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
example# 8587
for field in unique_check :pass
example# 8588
if field in form . cleaned_data :pass
example# 8589
del form . cleaned_data [ field ]
example# 8590
seen_data . add ( row_data )
example# 8591
for date_check in all_date_checks :pass
example# 8592
seen_data = set ( )
example# 8593
uclass , lookup , field , unique_for = date_check
example# 8594
for form in valid_forms :pass
example# 8595
if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :pass
example# 8596
if lookup == '_STR:0_' :pass
example# 8597
date = form . cleaned_data [ unique_for ]
example# 8599
if True: pass
else :pass
example# 8600
date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )
example# 8601
data = ( form . cleaned_data [ field ] , ) + date_data
example# 8602
if data in seen_data :pass
example# 8603
errors . append ( self . get_date_error_message ( date_check ) )
example# 8604
form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
example# 8605
del form . cleaned_data [ field ]
example# 8606
seen_data . add ( data )
example# 8607
if errors :pass
example# 8608
raise ValidationError ( errors )
example# 8611
return ugettext ( '_STR:0_' ) % {  "field" : unique_check [ 0 ] ,  }
example# 8612
if True: pass
else :pass
example# 8615
return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
example# 8616
def get_form_error ( self ) :pass
example# 8617
return ugettext ( '_STR:0_' )
example# 8619
self . changed_objects = [ ]
example# 8620
self . deleted_objects = [ ]
example# 8621
if not self . initial_forms :pass
example# 8622
return [ ]
example# 8623
saved_instances = [ ]
example# 8624
forms_to_delete = self . deleted_forms
example# 8625
for form in self . initial_forms :pass
example# 8626
obj = form . instance
example# 8627
if form in forms_to_delete :pass
example# 8628
if obj . pk is None :pass
example# 8629
continue
example# 8630
self . deleted_objects . append ( obj )
example# 8631
if commit :pass
example# 8632
obj . delete ( )
example# 8633
if True: pass
elif form . has_changed ( ) :pass
example# 8636
if not commit :pass
example# 8637
self . saved_forms . append ( form )
example# 8638
return saved_instances
example# 8640
self . new_objects = [ ]
example# 8641
for form in self . extra_forms :pass
example# 8642
if not form . has_changed ( ) :pass
example# 8643
continue
example# 8644
if self . can_delete and self . _should_delete_form ( form ) :pass
example# 8645
continue
example# 8647
if not commit :pass
example# 8648
self . saved_forms . append ( form )
example# 8649
return self . new_objects
example# 8651
from django . db . models import AutoField , OneToOneField , ForeignKey
example# 8652
self . _pk_field = pk = self . model . _meta . pk
example# 8653
def pk_is_not_editable ( pk ) :pass
example# 8654
return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
example# 8655
if pk_is_not_editable ( pk ) or pk . name not in form . fields :pass
example# 8656
if form . is_bound :pass
example# 8657
pk_value = form . instance . pk
example# 8658
if True: pass
else :pass
example# 8659
try :pass
except: pass
example# 8660
if index is not None :pass
example# 8661
pk_value = self . get_queryset ( ) [ index ] . pk
example# 8662
if True: pass
else :pass
example# 8663
pk_value = None
example# 8664
try: pass
except IndexError :pass
example# 8665
pk_value = None
example# 8666
if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :pass
example# 8667
qs = pk . rel . to . _default_manager . get_queryset ( )
example# 8668
if True: pass
else :pass
example# 8669
qs = self . model . _default_manager . get_queryset ( )
example# 8670
qs = qs . using ( form . instance . _state . db )
example# 8671
if form . _meta . widgets :pass
example# 8672
widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
example# 8673
if True: pass
else :pass
example# 8674
widget = HiddenInput
example# 8677
def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :pass
example# 8678
meta = getattr ( form , '_STR:0_' , None )
example# 8679
if meta is None :pass
example# 8680
meta = type ( str ( '_STR:0_' ) , ( object , ) , { } )
example# 8681
if ( getattr ( meta , '_STR:0_' , fields ) is None and  getattr ( meta , '_STR:1_' , exclude ) is None ) :pass
example# 8682
raise ImproperlyConfigured (  "Calling modelformset_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
example# 8683
form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
example# 8684
FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
example# 8685
FormSet . model = model
example# 8686
return FormSet
example# 8687
class BaseInlineFormSet ( BaseModelFormSet ) :pass
example# 8689
if instance is None :pass
example# 8690
self . instance = self . fk . rel . to ( )
example# 8691
if True: pass
else :pass
example# 8692
self . instance = instance
example# 8693
self . save_as_new = save_as_new
example# 8694
if queryset is None :pass
example# 8695
queryset = self . model . _default_manager
example# 8696
if self . instance . pk is not None :pass
example# 8697
qs = queryset . filter ( ** { self . fk . name : self . instance } )
example# 8698
if True: pass
else :pass
example# 8699
qs = queryset . none ( )
example# 8701
def initial_form_count ( self ) :pass
example# 8702
if self . save_as_new :pass
example# 8703
return 0
example# 8704
return super ( BaseInlineFormSet , self ) . initial_form_count ( )
example# 8707
if self . save_as_new :pass
example# 8708
form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
example# 8709
form . data [ form . add_prefix ( self . fk . name ) ] = None
example# 8710
setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
example# 8711
return form
example# 8712
@ classmethod
def dummy(): pass
example# 8713
def get_default_prefix ( cls ) :pass
example# 8714
from django . db . models . fields . related import RelatedObject
example# 8717
obj = form . save ( commit = False )
example# 8718
pk_value = getattr ( self . instance , self . fk . rel . field_name )
example# 8719
setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , '_STR:0_' , pk_value ) )
example# 8720
if commit :pass
example# 8721
obj . save ( )
example# 8724
return obj
example# 8727
if self . _pk_field == self . fk :pass
example# 8728
name = self . _pk_field . name
example# 8729
kwargs = { '_STR:0_' : True }
example# 8730
if True: pass
else :pass
example# 8731
name = self . fk . name
example# 8732
kwargs = {  '_STR:0_' : getattr ( form . fields . get ( name ) , '_STR:0_' , capfirst ( self . fk . verbose_name ) )  }
example# 8733
if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :pass
example# 8734
kwargs [ '_STR:0_' ] = self . fk . rel . field_name
example# 8736
if form . _meta . fields :pass
example# 8737
if isinstance ( form . _meta . fields , tuple ) :pass
example# 8738
form . _meta . fields = list ( form . _meta . fields )
example# 8739
form . _meta . fields . append ( self . fk . name )
example# 8741
unique_check = [ field for field in unique_check if field != self . fk . name ]
example# 8742
return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
example# 8744
from django . db . models import ForeignKey
example# 8745
opts = model . _meta
example# 8746
if fk_name :pass
example# 8747
fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
example# 8748
if len ( fks_to_parent ) == 1 :pass
example# 8749
fk = fks_to_parent [ 0 ]
example# 8750
if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :pass
example# 8751
raise ValueError (  '_STR:0_'  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
example# 8752
if True: pass
elif len ( fks_to_parent ) == 0 :pass
example# 8753
raise ValueError (  '_STR:0_'  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
example# 8754
if True: pass
else :pass
example# 8755
fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
example# 8757
fk = fks_to_parent [ 0 ]
example# 8758
if True: pass
elif len ( fks_to_parent ) == 0 :pass
example# 8759
if can_fail :pass
example# 8760
return
example# 8761
raise ValueError (  '_STR:0_'  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
example# 8762
if True: pass
else :pass
example# 8763
raise ValueError (  '_STR:0_'  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
example# 8764
return fk
example# 8765
def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :pass
example# 8767
if fk . unique :pass
example# 8768
max_num = 1
example# 8769
kwargs = {  '_STR:0_' : form ,  '_STR:1_' : formfield_callback ,  '_STR:2_' : formset ,  '_STR:3_' : extra ,  '_STR:4_' : can_delete ,  '_STR:5_' : can_order ,  '_STR:6_' : fields ,  '_STR:7_' : exclude ,  '_STR:8_' : min_num ,  '_STR:9_' : max_num ,  '_STR:10_' : widgets ,  '_STR:11_' : validate_min ,  '_STR:12_' : validate_max ,  '_STR:13_' : localized_fields ,  '_STR:14_' : labels ,  '_STR:15_' : help_texts ,  '_STR:16_' : error_messages ,  }
example# 8771
FormSet . fk = fk
example# 8772
return FormSet
example# 8773
class InlineForeignKeyField ( Field ) :pass
example# 8774
widget = HiddenInput
example# 8775
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 8777
self . parent_instance = parent_instance
example# 8778
self . pk_field = kwargs . pop ( "pk_field" , False )
example# 8779
self . to_field = kwargs . pop ( "to_field" , None )
example# 8780
if self . parent_instance is not None :pass
example# 8781
if self . to_field :pass
example# 8782
kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
example# 8783
if True: pass
else :pass
example# 8784
kwargs [ "initial" ] = self . parent_instance . pk
example# 8785
kwargs [ "required" ] = False
example# 8788
if value in self . empty_values :pass
example# 8789
if self . pk_field :pass
example# 8790
return None
example# 8791
return self . parent_instance
example# 8792
if self . to_field :pass
example# 8793
orig = getattr ( self . parent_instance , self . to_field )
example# 8794
if True: pass
else :pass
example# 8795
orig = self . parent_instance . pk
example# 8798
return self . parent_instance
example# 8800
return False
example# 8801
class ModelChoiceIterator ( object ) :pass
example# 8803
self . field = field
example# 8804
self . queryset = field . queryset
example# 8805
def __iter__ ( self ) :pass
example# 8806
if self . field . empty_label is not None :pass
example# 8808
if self . field . cache_choices :pass
example# 8809
if self . field . choice_cache is None :pass
example# 8810
self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
example# 8811
for choice in self . field . choice_cache :pass
example# 8812
yield choice
example# 8813
if True: pass
else :pass
example# 8814
for obj in self . queryset . all ( ) :pass
example# 8815
yield self . choice ( obj )
example# 8816
def __len__ ( self ) :pass
example# 8820
class ModelChoiceField ( ChoiceField ) :pass
example# 8821
default_error_messages = {  '_STR:1_' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
example# 8822
def __init__ ( self , queryset , empty_label = '_STR:0_' , cache_choices = None ,  required = True , widget = None , label = None , initial = None ,  help_text = '' , to_field_name = None , limit_choices_to = None ,  * args , ** kwargs ) :pass
example# 8823
if required and ( initial is not None ) :pass
example# 8824
self . empty_label = None
example# 8825
if True: pass
else :pass
example# 8826
self . empty_label = empty_label
example# 8827
if cache_choices is not None :pass
example# 8829
if True: pass
else :pass
example# 8830
cache_choices = False
example# 8831
self . cache_choices = cache_choices
example# 8833
self . queryset = queryset
example# 8834
self . limit_choices_to = limit_choices_to
example# 8835
self . choice_cache = None
example# 8836
self . to_field_name = to_field_name
example# 8838
result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
example# 8839
result . queryset = result . queryset
example# 8840
return result
example# 8841
def _get_queryset ( self ) :pass
example# 8842
return self . _queryset
example# 8844
self . _queryset = queryset
example# 8845
self . widget . choices = self . choices
example# 8846
queryset = property ( _get_queryset , _set_queryset )
example# 8848
return smart_text ( obj )
example# 8849
def _get_choices ( self ) :pass
example# 8850
if hasattr ( self , '_STR:0_' ) :pass
example# 8851
return self . _choices
example# 8852
return ModelChoiceIterator ( self )
example# 8853
choices = property ( _get_choices , ChoiceField . _set_choices )
example# 8855
if hasattr ( value , '_STR:0_' ) :pass
example# 8856
if self . to_field_name :pass
example# 8857
return value . serializable_value ( self . to_field_name )
example# 8858
if True: pass
else :pass
example# 8859
return value . pk
example# 8860
return super ( ModelChoiceField , self ) . prepare_value ( value )
example# 8862
if value in self . empty_values :pass
example# 8863
return None
example# 8864
try :pass
except: pass
example# 8865
key = self . to_field_name or '_STR:0_'
example# 8866
value = self . queryset . get ( ** { key : value } )
example# 8867
try: pass
except ( ValueError , self . queryset . model . DoesNotExist ) :pass
example# 8869
return value
example# 8873
initial_value = initial if initial is not None else ''
example# 8874
data_value = data if data is not None else ''
example# 8875
return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
example# 8876
class ModelMultipleChoiceField ( ModelChoiceField ) :pass
example# 8877
widget = SelectMultiple
example# 8878
hidden_widget = MultipleHiddenInput
example# 8880
def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :pass
example# 8881
super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
example# 8883
if not value :pass
example# 8884
return [ ]
example# 8885
to_py = super ( ModelMultipleChoiceField , self ) . to_python
example# 8886
return [ to_py ( val ) for val in value ]
example# 8888
if self . required and not value :pass
example# 8890
if True: pass
elif not self . required and not value :pass
example# 8891
return self . queryset . none ( )
example# 8892
if not isinstance ( value , ( list , tuple ) ) :pass
example# 8894
key = self . to_field_name or '_STR:0_'
example# 8895
for pk in value :pass
example# 8896
try :pass
except: pass
example# 8897
self . queryset . filter ( ** { key : pk } )
example# 8898
try: pass
except ValueError :pass
example# 8900
qs = self . queryset . filter ( ** { '%s__in' % key : value } )
example# 8901
pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
example# 8902
for val in value :pass
example# 8903
if force_text ( val ) not in pks :pass
example# 8905
self . run_validators ( value )
example# 8906
return qs
example# 8908
if ( hasattr ( value , '_STR:0_' ) and  not isinstance ( value , six . text_type ) and  not hasattr ( value , '_STR:1_' ) ) :pass
example# 8909
return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
example# 8910
return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
example# 8912
if initial is None :pass
example# 8913
initial = [ ]
example# 8914
if data is None :pass
example# 8915
data = [ ]
example# 8916
if len ( initial ) != len ( data ) :pass
example# 8917
return True
example# 8918
initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
example# 8919
data_set = set ( force_text ( value ) for value in data )
example# 8920
return data_set != initial_set
example# 8921
def modelform_defines_fields ( form_class ) :pass
example# 8922
return ( form_class is not None and (  hasattr ( form_class , '_STR:0_' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
example# 8923
import warnings
example# 8924
from django . utils . deprecation import RemovedInDjango19Warning
example# 8926
from django . forms . utils import *
example# 8927
from __future__ import unicode_literals
example# 8928
import json
example# 8929
import sys
example# 8930
try :pass
except: pass
example# 8931
from collections import UserList
example# 8932
try: pass
except ImportError :pass
example# 8933
from UserList import UserList
example# 8934
from django . conf import settings
example# 8936
from django . utils . html import format_html , format_html_join , escape
example# 8937
from django . utils import timezone
example# 8938
from django . utils . translation import ugettext_lazy as _
example# 8939
from django . utils import six
example# 8940
from django . core . exceptions import ValidationError
example# 8941
def flatatt ( attrs ) :pass
example# 8942
boolean_attrs = [ ]
example# 8943
for attr , value in list ( attrs . items ( ) ) :pass
example# 8944
if value is True :pass
example# 8945
boolean_attrs . append ( ( attr , ) )
example# 8946
del attrs [ attr ]
example# 8947
if True: pass
elif value is False :pass
example# 8948
del attrs [ attr ]
example# 8951
class ErrorDict ( dict ) :pass
example# 8952
def as_data ( self ) :pass
example# 8953
return { f : e . as_data ( ) for f , e in self . items ( ) }
example# 8955
return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )
example# 8956
def as_ul ( self ) :pass
example# 8957
if not self :pass
example# 8958
return ''
example# 8960
def as_text ( self ) :pass
example# 8961
output = [ ]
example# 8962
for field , errors in self . items ( ) :pass
example# 8963
output . append ( '* %s' % field )
example# 8964
output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
example# 8965
return '\n' . join ( output )
example# 8966
def __str__ ( self ) :pass
example# 8967
return self . as_ul ( )
example# 8969
class ErrorList ( UserList , list ) :pass
example# 8971
super ( ErrorList , self ) . __init__ ( initlist )
example# 8972
if error_class is None :pass
example# 8973
self . error_class = '_STR:0_'
example# 8974
if True: pass
else :pass
example# 8975
self . error_class = 'errorlist {}' . format ( error_class )
example# 8976
def as_data ( self ) :pass
example# 8977
return ValidationError ( self . data ) . error_list
example# 8979
errors = [ ]
example# 8980
for error in self . as_data ( ) :pass
example# 8981
message = list ( error ) [ 0 ]
example# 8983
return errors
example# 8985
return json . dumps ( self . get_json_data ( escape_html ) )
example# 8986
def as_ul ( self ) :pass
example# 8987
if not self . data :pass
example# 8988
return ''
example# 8990
def as_text ( self ) :pass
example# 8991
return '\n' . join ( '* %s' % e for e in self )
example# 8992
def __str__ ( self ) :pass
example# 8993
return self . as_ul ( )
example# 8994
def __repr__ ( self ) :pass
example# 8995
return repr ( list ( self ) )
example# 8996
def __contains__ ( self , item ) :pass
example# 8997
return item in list ( self )
example# 8998
def __eq__ ( self , other ) :pass
example# 8999
return list ( self ) == other
example# 9000
def __ne__ ( self , other ) :pass
example# 9001
return list ( self ) != other
example# 9002
def __getitem__ ( self , i ) :pass
example# 9003
error = self . data [ i ]
example# 9004
if isinstance ( error , ValidationError ) :pass
example# 9005
return list ( error ) [ 0 ]
example# 9006
return force_text ( error )
example# 9007
def from_current_timezone ( value ) :pass
example# 9008
if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :pass
example# 9009
current_timezone = timezone . get_current_timezone ( )
example# 9010
try :pass
except: pass
example# 9011
return timezone . make_aware ( value , current_timezone )
example# 9012
try: pass
except Exception :pass
example# 9013
message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  '_STR:1_'  )
example# 9016
return value
example# 9017
def to_current_timezone ( value ) :pass
example# 9018
if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :pass
example# 9019
current_timezone = timezone . get_current_timezone ( )
example# 9021
return value
example# 9022
from __future__ import unicode_literals
example# 9023
import copy
example# 9024
from itertools import chain
example# 9025
from django . conf import settings
example# 9026
from django . forms . utils import flatatt , to_current_timezone
example# 9027
from django . utils . datastructures import MultiValueDict , MergeDict
example# 9029
from django . utils . html import conditional_escape , format_html
example# 9030
from django . utils . translation import ugettext_lazy
example# 9031
from django . utils . safestring import mark_safe
example# 9032
from django . utils import formats , six
example# 9033
from django . utils . six . moves . urllib . parse import urljoin
example# 9034
__all__ = (  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , '_STR:5_' , '_STR:6_' , '_STR:7_' ,  '_STR:8_' , '_STR:9_' , '_STR:10_' ,  '_STR:11_' , '_STR:12_' , '_STR:13_' , '_STR:14_' , '_STR:15_' , '_STR:16_' ,  '_STR:17_' , '_STR:18_' , '_STR:19_' , '_STR:20_' ,  '_STR:21_' , '_STR:22_' ,  '_STR:23_' , '_STR:24_' ,  )
example# 9037
class Media ( object ) :pass
example# 9039
if media :pass
example# 9040
media_attrs = media . __dict__
example# 9041
if True: pass
else :pass
example# 9042
media_attrs = kwargs
example# 9043
self . _css = { }
example# 9044
self . _js = [ ]
example# 9045
for name in MEDIA_TYPES :pass
example# 9046
getattr ( self , '_STR:0_' + name ) ( media_attrs . get ( name , None ) )
example# 9047
def __str__ ( self ) :pass
example# 9048
return self . render ( )
example# 9049
def render ( self ) :pass
example# 9050
return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , '_STR:0_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )
example# 9051
def render_js ( self ) :pass
example# 9053
def render_css ( self ) :pass
example# 9054
media = sorted ( self