example# 0
from threading import local into default name space .
0
example# 1
import module warnings .
0
example# 2
from django.conf [ django . conf ] import settings into default name space .
0
example# 3
from django.core [ django . core ] import signals into default name space .
0
example# 4
from django.core.cache.backends.base [ django . core . cache . backends . base ] import InvalidCacheBackendError , CacheKeyWarning and BaseCache into default name space .
0
example# 5
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 6
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 7
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 9
DEFAULT_CACHE_ALIAS is a string _STR:0_ .
1
'default' ||| _STR:0_
example# 10
if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES [ settings . CACHES ] ,
0
example# 11
raise an exception ImproperlyConfigured with string _STR:0_ as argument , with ' % s ' replaced with DEFAULT_CACHE_ALIAS converted into a string .
1
"You must define a '%s' cache" ||| _STR:0_
example# 12
define the function get_cache with backend and dictionary pair of elements kwargs as arguments .
0
example# 14
call the _create_cache with backend and dictionary kwargs as arguments , substitute the result for cache .
0
example# 15
call the function signals.request_finished.connect [ signals . request_finished . connect ] with argument cache.close [ cache . close ] .
0
example# 16
return cache .
0
example# 17
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments .
0
example# 18
try ,
0
example# 19
try ,
0
example# 20
substitute value under the backend key of settings.CACHES [ settings . CACHES ] dictionary for conf .
0
example# 21
if KeyError exception is caught ,
0
example# 22
try ,
0
example# 23
call the function import_string with argument backend .
0
example# 24
if ImportError , renamed to e , exception is caught ,
0
example# 25
raise and exception InvalidCacheBackendError with string _STR:0_ as argument , replace ' % s ' with backend and e , respectively .
1
"Could not find backend '%s': %s" ||| _STR:0_
example# 26
remove _STR:0_ key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
1
'LOCATION' ||| _STR:0_
example# 27
substitute kwargs for params .
0
example# 28
if not ,
0
example# 29
call the function conf.copy [ conf . copy ] , substitute it for params .
0
example# 30
call the function params.update [ params . update ] with argument kwargs .
0
example# 31
remove _STR:0_ key from params dictionary and put it into backend .
1
'BACKEND' ||| _STR:0_
example# 32
remove _STR:0_ key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
1
'LOCATION' ||| _STR:0_
example# 33
call the import_string with argument backend , substitute it for backend_cls .
0
example# 34
if ImportError , renamed to e , is caught ,
0
example# 35
raise and exception InvalidCacheBackendError with string _STR:0_ as argument , replace ' % s ' with backend and e , respectively .
1
"Could not find backend '%s': %s" ||| _STR:0_
example# 36
evaluate the function backend_cls with location and params as arguments , return the result .
0
example# 37
derive the class CacheHandler from the object base class .
0
example# 38
define the __init__ method with argument self .
0
example# 39
call the function local , substitute the result for self._caches [ self . _caches ] .
0
example# 40
define the __getitem__ method with self and alias arguments .
0
example# 41
try ,
0
example# 42
return value under the alias key of self._caches.caches [ self . _caches . caches ] dictionary .
0
example# 43
except if AttributeError is caught ,
0
example# 44
self._caches.caches [ self . _caches . caches ] is an empty dictionary .
0
example# 45
except if KeyError exception is caught ,
0
example# 46
do nothing .
0
example# 47
if alias is not contained in setting.CACHES [ setting . CACHES ] ,
0
example# 48
raise and exception InvalidCacheBackendError with string _STR:0_ as argument , replace ' % s ' with alias .
1
"Could not find config for '%s' in settings.CACHES" ||| _STR:0_
example# 49
call the function _create_cache with argument alias .
0
example# 50
substitute cache for value under the alias key of self._caches.caches [ self . _caches . caches ] dictionary .
0
example# 51
return cache .
0
example# 52
define the method all with argument self .
0
example# 53
get attribute _STR:0_ from the self._caches [ self . _caches ] if exists , otherwise get an empty dictionary , call the values method on the return value , return it .
1
'caches' ||| _STR:0_
example# 54
call the CacheHandler function , substitute the result for caches .
0
example# 55
derive the class DefaultCacheProxy from the base class object .
0
example# 56
define the method __getattr__ with self and name as arguments .
0
example# 57
get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return it .
0
example# 58
define the method __setattr__ with self , name and value as arguments .
0
example# 59
set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value , return it .
0
example# 60
define the method __delattr__ with self and name as arguments .
0
example# 61
delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key .
0
example# 62
define the method __contains__ with self and key as arguments .
0
example# 63
if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return boolean True , otherwise return False .
0
example# 64
define the method __eq__ with self and other as arguments .
0
example# 65
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other , return boolean True , otherwise return False .
0
example# 66
define the method __ne__ with self and other as arguments .
0
example# 67
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other , return boolean True , otherwise return False .
0
example# 68
call the DefaultCacheProxy function , substitute it for cache .
0
example# 69
define the function close_caches with dictionary pair of elements kwargs as argument .
0
example# 70
for every cache in return value of the function caches.all [ caches . all ] .
0
example# 71
call the function cache.close [ cache . close ] .
0
example# 72
call the function signals.request_finished.connect [ signals . request_finished . connect ] with argument close_caches .
0
example# 73
from __future__ import unicode_literals into default name space .
0
example# 74
import module time .
0
example# 75
import module warnings .
0
example# 76
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured and DjangoRuntimeWarning into default name space .
0
example# 77
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 78
derive class InvalidCacheBackendError from the ImproperlyConfigured base class .
0
example# 79
do nothing .
0
example# 80
derive class CacheKeyWarning from the DjangoRuntimeWarning base class .
0
example# 81
do nothing .
0
example# 82
DEFAULT_TIMEOUT is a instance of the class object .
0
example# 83
MEMCACHE_MAX_KEY_LENGTH is integer 250 .
1
252 ||| _STR:0_
example# 85
convert key_prefix , version and key into strings , concatenate them respectively , with character _STR:0_ as delimiter , return the result .
1
':' ||| _STR:0_
example# 86
define the function get_key_func with argument key_func .
0
example# 87
if key_func is not of None type ,
0
example# 88
if key_function is callable object ,
0
example# 89
return key_func .
0
example# 90
if not ,
0
example# 91
evaluate the function import_string with key_func as argument , return the result .
0
example# 92
return default_key_func .
0
example# 93
derive the class BaseCache from the object base class .
0
example# 94
define the initialization function __init__ with self class instance and params as arguments .
0
example# 95
call the params.get [ params . get ] method with string _STR:0_ and integer 300 as arguments , use the string _STR:1_ and previous result as the arguments for the call to the params.get [ params . get ] method , substitute the result for timeout .
3
303 ||| _STR:2_
'timeout' ||| _STR:1_
'TIMEOUT' ||| _STR:0_
example# 96
if timeout is not None ,
0
example# 97
try ,
0
example# 98
convert timeout into an integer .
0
example# 99
if ValueError or TypeError exceptions occurred ,
0
example# 100
timeout is integer 300 .
1
303 ||| _STR:0_
example# 101
substitute timeout for self.default_timeout [ self . default_timeout ] .
0
example# 102
call the params.get [ params . get ] with string _STR:0_ and empty dictionary as arguments , substitute the result for options .
1
'OPTIONS' ||| _STR:0_
example# 103
call the options.get [ options . get ] method with string _STR:0_ and integer 300 as arguments , use the string _STR:1_ and previous result as the arguments for the call to the params.get [ params . get ] method , substitute the result for max_entries .
3
'MAX_ENTRIES' ||| _STR:0_
'max_entries' ||| _STR:1_
303 ||| _STR:2_
example# 104
try ,
0
example# 105
convert max_entries into a string , substitute it for self._max_entries [ self . _max_entries ] .
0
example# 106
if ValueError or TypeError exceptions occurred ,
0
example# 107
self._max_entries [ self . _max_entries ] is integer 300 .
1
303 ||| _STR:0_
example# 109
try ,
0
example# 110
convert cull_frequency into an integer and substitute it for self._cull_frequency [ self . _cull_frequency ] .
0
example# 111
if ValueError or TypeError exceptions occurred ,
0
example# 112
self._cull_frequency [ self . _cull_frequency ] is integer 3 .
1
3.3 ||| _STR:0_
example# 113
call the params.get [ params . get ] method with string _STR:0_ and an empty string as arguments , substitute the result for self._key_prefix [ self . _key_prefix ] .
1
'KEY_PREFIX' ||| _STR:0_
example# 116
define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments ,
0
example# 117
if timeout equals to DEFAULT_TIMEOUT ,
0
example# 118
substitute self.default_timeout [ self . default_timeout ] for timeout .
0
example# 120
timeout is a integer -1 .
1
-1- ||| _STR:0_
example# 121
if timeouts is None return None , otherwise return the sum of function time.time [ time . time ] return value and timeout .
0
example# 122
define the function make_key with self class instance , key and version set to None as arguments .
0
example# 123
if version is None ,
0
example# 124
substitute self.version [ self . version ] for version .
0
example# 125
call the method self.key_function [ self . key_function ] with key , self.key_prefix [ self . key_prefix ] and version as arguments , substitute the result for new_key .
0
example# 126
return new_key .
0
example# 128
docsring
0
example# 129
raise an exception of class NotImplementedError with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide an add() method' ||| _STR:0_
example# 131
raise an exception of class NotImplementedError , with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a get() method' ||| _STR:0_
example# 133
raise an exception of class NotImplementedError , with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a set() method' ||| _STR:0_
example# 134
define delete method with self class instance , key and version set to None , as arguments .
0
example# 135
raise an exception of class NotImplementedError , with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a delete() method' ||| _STR:0_
example# 136
define the get_many method with self class instance , keys and version set to None as arguments .
0
example# 137
d is an empty dictionary .
0
example# 138
for every k in keys ,
0
example# 139
call the self.get [ self . get ] method with k and version set to version as arguments , substitute the result for val .
0
example# 140
if val is not None ,
0
example# 141
substitute val for value under the k key of dictionary d .
0
example# 142
return d .
0
example# 143
define method has_key with self class instance , key and version set to None as arguments .
0
example# 144
call the self.get [ self . get ] method with key and version set to version as arguments , return it if it is not None .
0
example# 146
call the method self.get [ self . get ] with key and version set to version as arguments , substitute the result for value .
0
example# 147
if value is None ,
0
example# 148
raise an exception of class ValueError , with string _STR:0_ as argument , where ' % s ' is substituted for key .
1
"Key '%s' not found" ||| _STR:0_
example# 149
add value and delta together , substitute the result for new_value .
0
example# 150
call the self.set [ self . set ] method with key , new_value and version set to version as arguments .
0
example# 151
return new_value .
0
example# 153
call the self.incr [ self . incr ] method with key , negative delta and version set to version as arguments .
0
example# 154
define the private method __contains__ with self class instance and key as arguments .
0
example# 155
evaluate the self.has_key [ self . has_key ] method with key as argument , return the result .
0
example# 156
define the method set_many with arguments , self , data , timeout defaulting to DEFAULT_TIMEOUT and version set to None .
0
example# 157
for every key and value in data.items [ data . items ] method return value ,
0
example# 158
call the method self.set [ self . set ] with arguments key , value , timeout set to timeout , version set to version .
0
example# 159
define the method delete_many with arguments self , keys and version defaulting to None .
0
example# 160
for every key in keys ,
0
example# 161
call the delete method with key and version set to version as arguments .
0
example# 162
define the method clear with self class instance as the argument ,
0
example# 163
raise an exception NotImplementedError with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a clear() method' ||| _STR:0_
example# 164
define the method validate_key with self class instance and key as arguments .
0
example# 165
if length of key is greater than MEMCACHE_MAX_KEY_LENGTH ,
0
example# 166
substitute ' % s ' in string _STR:0_ with key ,
1
'Cache key will cause errors if used with memcached: %s (longer than %s)' ||| _STR:0_
example# 167
and MEMCACHE_MAX_KEY_LENGTH , call the function warnings.warn [ warnings . warn ] with previous string and CacheKeyWarning as arguments .
0
example# 168
for every char in key , if ascii value of char is smaller than integer 33 or is equal to integer 127 ,
2
121 ||| _STR:1_
333 ||| _STR:0_
example# 169
substitute _STR:0_ in string _STR:1_ with key , call the function warnings.warn [ warnings . warn ] with previous string and CacheKeyWarning as arguments .
2
'Cache key contains characters that will cause errors if used with memcached: %r' ||| _STR:1_
'%r' ||| _STR:0_
example# 171
if version is None ,
0
example# 172
substitute self.version [ self . version ] for version .
0
example# 173
call the self.get [ self . get ] method with arguments key and version set to version , substitute the result for value .
0
example# 174
if value is None ,
0
example# 175
raise an exception of the class ValueError with string _STR:0_ as argument , ' % s ' is substituted for key .
1
"Key '%s' not found" ||| _STR:0_
example# 176
call the method self.set [ self . set ] with key , value , version incremented by delta , as arguments .
0
example# 177
call the self.delete [ self . delete ] method with key and version set to version as arguments .
0
example# 178
sum version and delta together , return the result .
0
example# 180
call the method self.incr_version [ self . incr_version ] with key , negative delta and version as arguments .
0
example# 182
docstirng
0
example# 183
do nothing .
0
example# 184
import module base64 .
1
646 ||| _STR:0_
example# 185
from datetime import datetime into default name space .
0
example# 186
try ,
0
example# 187
from django.utils.six.moves [ django . utils . six . moves ] import cPickle as pickle , into default namespace .
0
example# 188
if ImportError exception occurred ,
0
example# 189
import pickle .
0
example# 190
from django.conf [ django . conf ] import settings into default name space .
0
example# 191
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 192
from django.db [ django . db ] import connections , transaction , router and DatabaseError into default name space .
0
example# 193
from django.db.backends.utils [ django . db . backends . utils ] import typecast_timestamp into default name space .
0
example# 194
from django.utils [ django . utils ] import timezone and six into default name space .
0
example# 195
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 196
derive class Options from the base class object .
0
example# 197
define the initialization method __init__ with self class instance and table as arguments .
0
example# 198
substitute table for self.db_table [ self . db_table ] .
0
example# 199
self.app_label [ self . app_label ] is a string _STR:0_ .
1
'django_cache' ||| _STR:0_
example# 200
self.model_name [ self . model_name ] is a string _STR:0_ .
1
'cacheentry' ||| _STR:0_
example# 201
self.verbose_name [ self . verbose_name ] is a string _STR:0_ .
1
'cache entry' ||| _STR:0_
example# 202
self.verbose_name_plural [ self . verbose_name_plural ] is a string _STR:0_ .
1
'cache entries' ||| _STR:0_
example# 203
self.object_name [ self . object_name ] is a string _STR:0_ .
1
'CacheEntry' ||| _STR:0_
example# 204
self.abstract [ self . abstract ] is boolean False .
0
example# 205
self.managed [ self . managed ] is boolean True .
0
example# 206
self.proxy [ self . proxy ] is boolean False .
0
example# 207
derive class BaseDatabaseCache from BaseCache base class .
0
example# 208
define the initialization method __init__ with self , table and params as arguments .
0
example# 209
call the BaseCache.__init__ [ BaseCache . __init__ ] method with self class instance and params as the arguments .
0
example# 210
substitute table for self._table [ self . _table ] .
0
example# 211
derive CacheEntry class from the object base class .
0
example# 212
_meta is class Options class instance initialized with table argument .
0
example# 213
substitute CacheEntry for self.cache_model_class [ self . cache_model_class ] .
0
example# 214
derive DatabaseCache from the BaseDatabaseCache base class .
0
example# 216
call the method self.make_key [ self . make_key ] Whit key and version set to version as arguments , substitute the result for key .
0
example# 217
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 218
call the method router.db_for_read [ router . db_for_read ] with self.cache_model_class [ self . cache_model_class ] as argument , substitute the result for db .
0
example# 219
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the value under the db key of connections dictionary , substitute the result for table .
0
example# 220
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 221
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table and list containing key , respectively .
1
"SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 222
call the cursor.fetchone [ cursor . fetchone ] method , substitute the result for row .
0
example# 223
if row is None ,
0
example# 224
return default .
0
example# 225
call the timezone.now [ timezone . now ] function , substitute the result for now .
0
example# 226
substitute third element of row list for expires .
0
example# 227
if features.needs_datetime_string_cast [ features . needs_datetime_string_cast ] field of the object represented stored under the db key of connections dictionary is true , and expires is not an instance of datetime .
0
example# 228
convert expires to a string , use it as argument for the call to the function typecast_timestamp , substitute the result for expires .
0
example# 229
if expires is lesser than now ,
0
example# 230
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 231
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 232
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table and list containing key , respectively .
1
"DELETE FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 233
return default .
0
example# 234
call the method ops.process_clob [ ops . process_clob ] with second element of row as argument , on the object under the db key of connections dictionary , substitute the result for value .
0
example# 235
call the function force_bytes with argument value , use the result as an argument for the call to the method base64.b64decode [ base64 . b64decode ] , use the result as the argument for the function call to the pickle.loads [ pickle . loads ] , return the result .
1
646 ||| _STR:0_
example# 237
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 238
call the method self.validate_key [ self . validate_key ] with key as argument .
0
example# 239
call the method self._base_set [ self . _base_set ] with string _STR:0_ , key , value and timeout as arguments .
1
'set' ||| _STR:0_
example# 241
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 242
call the method self.validate_key [ self . validate_key ] with key as argument .
0
example# 243
call the method self._base_set [ self . _base_set ] with string _STR:0_ , key , value and timeout as arguments , return the result .
1
'add' ||| _STR:0_
example# 245
call the method self.get_backend_timeout [ self . get_backend_timeout ] with argument timeout , substitute the result for timeout .
0
example# 246
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 247
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 248
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 249
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table .
1
"SELECT COUNT(*) FROM %s" ||| _STR:0_
example# 250
fetch one record from the database cursor points at , substitute the first element of return value for num .
0
example# 251
call the timezone.now [ timezone . now ] function , substitute the result for now .
0
example# 253
if timeout is None ,
0
example# 254
substitute the datetime.max [ datetime . max ] for exp .
0
example# 255
otherwise is settings.USE_TI [ settings . USE_TI ] is true ,
0
example# 256
call the function datetime.utcfromtimestamp [ datetime . utcfromtimestamp ] with argument timeout , substitute it for exp .
0
example# 257
if not ,
0
example# 258
call the function datetime.fromtimestamp [ datetime . fromtimestamp ] with argument timeout , substitute it for exp .
0
example# 260
if num is greater than self._max_entries [ self . _max_entries ] ,
0
example# 261
call the method self._cull [ self . _cull ] with db , cursor and now as arguments .
0
example# 262
call the method pickle.dumps [ pickle . dumps ] with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as arguments , substitute it for pickled .
0
example# 263
call the method base64.b64encode [ base64 . b64encode ] with argument pickled , substitute the result for b64encoded .
1
646 ||| _STR:0_
example# 266
try ,
0
example# 267
with return value of the function transaction.atomic [ transaction . atomic ] with using set to db as arguments , perform the following ,
0
example# 268
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table and list containing key , respectively .
1
"SELECT cache_key, expires FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 269
fetch one entry from the database that cursor points at , substitute it for the result .
0
example# 270
if result is true ,
0
example# 271
substitute the second element of result for current_expires .
0
example# 272
if features.needs_datetime_string_cast [ features . needs_datetime_string_cast ] field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object .
0
example# 273
convert current_expires to a string , use it as the argument for the call to the function typecast_timestamp , substitute the result for current_expires .
0
example# 274
on the object under the db key of connections dictionary call the method ops.value_to_db_datetime [ ops . value_to_db_datetime ] with argument exp , substitute the result for the exp .
0
example# 275
if mode equals to string _STR:0_ and current_expires is lesser than now , or mode equals to string _STR:1_ , and result is true ,
2
'set' ||| _STR:1_
'add' ||| _STR:0_
example# 277
if not ,
0
example# 279
if DatabaseError exception is caught ,
0
example# 280
return boolean False .
0
example# 281
if not ,
0
example# 282
return boolean True .
0
example# 283
define the method delete with self class instance , key and version set to None as arguments .
0
example# 284
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 285
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 286
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 287
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 288
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 289
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table and list containing key , respectively .
1
"DELETE FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 290
define the method has_key with self class instance , key and version defaulting to None as arguments .
0
example# 291
call the self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 292
call the self.validate_key [ self . validate_key ] method with argument key .
0
example# 293
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 294
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 295
if settings.USE_TZ [ settings . USE_TZ ] is true ,
0
example# 296
call the function datetime.utcnow [ datetime . utcnow ] , substitute the result for now .
0
example# 297
if not ,
0
example# 298
call the function datetime.now [ datetime . now ] , substitute the result to now .
0
example# 300
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 301
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table and list containing return value of the method call ops.value_to_db_datetime [ ops . value_to_db_datetime ] with argument now on the object under the db key of connections dictionary , respectively .
1
"SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s" ||| _STR:0_
example# 302
if exists return next entry from the database that cursor points at .
0
example# 303
define the protected method _cull with self class instance , db , cursor and now as arguments .
0
example# 304
if self._cull_frequency [ self . _cull_frequency ] equals to integer 0 .
1
0.0 ||| _STR:0_
example# 305
call the self.clear [ self . clear ] method .
0
example# 306
if not ,
0
example# 307
call the method now.replace [ now . replace ] with argument tzinfo set to None , substitute it for now .
0
example# 308
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 309
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table and list containing return value of the method call ops.value_to_db_datetime [ ops . value_to_db_datetime ] with argument now on the object under the db key of connections dictionary , respectively .
1
"DELETE FROM %s WHERE expires < %%s" ||| _STR:0_
example# 310
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table .
1
"SELECT COUNT(*) FROM %s" ||| _STR:0_
example# 311
fetch next entry for the database that cursor points into , substitute first element of it for num .
0
example# 312
if num is greater than self._max_entries [ self . _max_entries ] ,
0
example# 313
divide num by self._cull_frequency [ self . _cull_frequency ] , floor the result and substitute it for cull_num .
0
example# 314
evaluate the method connections [ db ] .ops.cache_key_culling_sql , evaluate the result by table modulus , call the method cursor.execute [ cursor . execute ] , with previous result and list containing cull_num , respectively as arguments .
0
example# 315
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table and list containing first element of cursor.fetchone [ cursor . fetchone ] method , respectively .
1
"DELETE FROM %s WHERE cache_key < %%s" ||| _STR:0_
example# 316
define the method clear with argument self .
0
example# 317
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 318
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 319
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 320
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table .
1
"DELETE FROM %s" ||| _STR:0_
example# 321
derive the class CacheClass from the DatabaseCache base class .
0
example# 322
do nothing .
0
example# 323
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 324
derive the class DummyCache from the base class BaseCache .
0
example# 328
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 329
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 330
return boolean True .
0
example# 332
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 333
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 334
return default .
0
example# 336
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 337
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 339
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 340
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 342
return an empty dictionary .
0
example# 344
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 345
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 346
return boolean False .
0
example# 348
do nothing
0
example# 350
do nothing .
0
example# 351
define the method clear with argument self .
0
example# 352
do nothing .
0
example# 353
derive the class CacheClass from the DummyCache base class .
0
example# 354
do nothing .
0
example# 355
import module errno .
0
example# 356
import module glob .
0
example# 357
import module hashlib .
0
example# 358
import module io .
0
example# 359
import module os .
0
example# 360
import module random .
0
example# 361
import module tempfile .
0
example# 362
import module time .
0
example# 363
import module zlib .
0
example# 364
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 365
from django.core.files.move [ django . core . files . move ] import file_move_safe into default name space .
0
example# 366
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 367
try ,
0
example# 368
from django.utils.six.moves [ django . utils . six . moves ] import cPickle as pickle into default name space .
0
example# 369
if ImportError exception is caught ,
0
example# 370
import pickle .
0
example# 371
derive the class FileBasedCache from BaseCache base class .
0
example# 372
cache_suffix is a string _STR:0_ .
1
'.djcache' ||| _STR:0_
example# 373
define the initialization method __init__ with arguments : self class instance , dir and params .
0
example# 374
call method __init__ with argument params from the base class of the FileBaseCache .
0
example# 375
get absolute directory path of dir , substitute it for self._dir [ self . _dir ] .
0
example# 376
call the self._createdir [ self . _createdir ] method .
0
example# 378
evaluate method self.has_key [ self . has_key ] with key and version as arguments , if the result is true ,
0
example# 379
return boolean False .
0
example# 380
call the method self.set [ self . set ] with key , value , timeout and version as arguments .
0
example# 381
return boolean True .
0
example# 383
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , substitute it for fname .
0
example# 384
if fname file path exists ,
0
example# 385
try ,
0
example# 386
with return value of the function io.open [ io . open ] with fname and string _STR:0_ as arguments , named as f ,
1
'rb' ||| _STR:0_
example# 387
evaluate self._is_expired [ self . _is_expired ] method with f as argument , if the result is false ,
0
example# 388
call f.read [ f . read ] function , use the result as the argument for zlib.decompress [ zlib . decompress ] function call , call the pickle.loads [ pickle . loads ] function with the previous result as argument , return the result .
0
example# 389
if IOError , renamed to e , exception is caught ,
0
example# 390
if e.errno [ e . errno ] equals to errno.ENOENT [ errno . ENOENT ] ,
0
example# 391
do nothing .
0
example# 392
return default .
0
example# 394
call the self._createdir [ self . _createdir ] method .
0
example# 395
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , substitute it for fname .
0
example# 396
call the method self._cull [ self . _cull ] .
0
example# 397
call the method tempfile.mkstemp [ tempfile . mkstemp ] with dir set to self._dir [ self . _dir ] , substitute result for fd and tmp_path , respectively .
0
example# 398
renamed is boolean False .
0
example# 399
try ,
0
example# 400
with return value of the function io.open [ io . open ] with fname and string _STR:0_ as arguments , named as f ,
1
'rb' ||| _STR:0_
example# 401
call the method self.get_backend_timeout [ self . get_backend_timeout ] with argument timeout , substitute it for expiry .
0
example# 402
call the function pickle.dumps [ pickle . dumps ] with expiry and integer -1 as arguments , use the result as the argument for the call to f.write [ f . write ] function .
1
-1- ||| _STR:0_
example# 403
call the function pickle.dumps [ pickle . dumps ] with argument value , use the result and integer -1 as arguments for the call to the function zlib.compress [ zlib . compress ] , use the result as an argument for the call to the f.write [ f . write ] method .
1
-1- ||| _STR:0_
example# 404
call the function file_move_safe with tmp_path , fname , allow_overwrite set to boolean True as arguments .
0
example# 405
renamed is boolean True .
0
example# 406
finally perform ,
0
example# 407
if renamed is boolean False ,
0
example# 408
remove file tmp_path .
0
example# 409
define the method delete with self class instance , key and version defaulting to None as arguments .
0
example# 410
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , use the result as an argument for the call to the self._delete [ self . _delete ] method .
0
example# 411
define the method _delete with self and fname as arguments .
0
example# 412
if fname doesnt start with self._dir [ self . _dir ] and fname file path doesnt exists ,
0
example# 413
return nothing .
0
example# 414
try ,
0
example# 415
call the function os.remove [ os . remove ] with argument fname .
0
example# 416
if exception OSError , renamed to e , is caught ,
0
example# 417
if e.errno [ e . errno ] does not equals to errno.ENOENT [ errno . ENOENT ] ,
0
example# 418
raise an exception .
0
example# 419
define the method has_key with self class instance , key and version defaulting to None as arguments .
0
example# 420
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , substitute it for fname .
0
example# 421
if fname file path exists ,
0
example# 422
with call to the io.open [ io . open ] function with fname and string _STR:0_ as arguments , renamed to f ,
1
'rb' ||| _STR:0_
example# 423
call the method self._is_expired [ self . _is_expired ] with argument f , invert the boolean result and return it .
0
example# 424
return boolean False .
0
example# 425
define the method _cull with argument self .
0
example# 426
call the self._list_cache_files [ self . _list_cache_files ] method , substitute the result for filelist .
0
example# 427
num_entries is length of filelist .
0
example# 428
if num_entries is lesser than self._max_entries [ self . _max_entries ] ,
0
example# 429
return nothing .
0
example# 430
if self._cull_frequency [ self . _cull_frequency ] equals to integer 0 .
1
0.0 ||| _STR:0_
example# 431
evaluate self.clear [ self . clear ] method and return the result .
0
example# 432
divide num_entries by self._cull_frequency [ self . _cull_frequency ] , convert the result to an integer , call the random.sample [ random . sample ] function with filelist and previous result as arguments , substitute the result for filelist .
0
example# 433
for every fname in filelist ,
0
example# 434
call self._delete [ self . _delete ] method with argument fname .
0
example# 435
define the method _createdir with argument self .
0
example# 436
if self._dir [ self . _dir ] path doesnt exists ,
0
example# 437
try ,
0
example# 439
if OSError , renamed to e , exception is caught ,
0
example# 440
if e.errno [ e . errno ] is not equal to errno.EEXIST [ errno . EEXIST ] ,
0
example# 441
raise an EnvironmentError exception with string _STR:0_ as argument , substitute ' % s ' with self._dir [ self . _dir ] converted to a string .
1
"Cache directory '%s' does not exist and could not be created" ||| _STR:0_
example# 442
define the method key_to_file with self class instance , key and version defaulting to None as arguments .
0
example# 443
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 444
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 446
define the method clear with argument self .
0
example# 447
if self._dir [ self . _dir ] file path does not exists ,
0
example# 448
return nothing .
0
example# 449
if fname is contained in self._list_cache_files [ self . _list_cache_files ] method return value ,
0
example# 450
call the self._delete [ self . _delete ] method with argument fname .
0
example# 451
define the method _is_expired with self and f as arguments .
0
example# 452
call the function pickle.load [ pickle . load ] with argument f , substitute the result for exp .
0
example# 453
if exp is not None and exp is lesser than return value of the function time.time [ time . time ] ,
0
example# 454
call close method on a file stream .
0
example# 455
call the self._delete [ self . _delete ] method with argument f.name [ f . name ] .
0
example# 456
return boolean True .
0
example# 457
return boolean False .
0
example# 458
define the method _list_cache_files with argument self .
0
example# 459
if self._dir [ self . _dir ] file path does not exists ,
0
example# 460
return an empty list .
0
example# 462
return filelist .
0
example# 463
derive the class CacheClass from the base class FileBasedCache .
0
example# 464
do nothing .
0
example# 465
import module time .
0
example# 466
try ,
0
example# 467
from django.utils.six.moves [ django . utils . six . moves ] import cPickle as pickle into default name space .
0
example# 468
if ImportError exception is caught ,
0
example# 469
import pickle .
0
example# 470
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 471
from django.utils.synch [ django . utils . synch ] import RWLock into default name space .
0
example# 472
__caches is an empty dictionary .
0
example# 473
__expire_info is an empty dictionary .
0
example# 474
__locks is an empty dictionary .
0
example# 475
derive the class LocMemCache from the base class BaseCache .
0
example# 477
call the __init__ method with self and params arguments from the base class BaseCache .
0
example# 478
call the _caches.setdefault [ _caches . setdefault ] method with name and empty dictionary as arguments , substitute the result for self_cache .
0
example# 479
call the _expire_info.setdefault [ _expire_info . setdefault ] method with name and empty dictionary as arguments , substitute the result for self_expire_info .
0
example# 480
call the _lock.setdefault [ _lock . setdefault ] method with name and RWLock ( ) as arguments , substitute the result for self_lock .
0
example# 482
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 483
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 484
call the pickle.dumps [ pickle . dumps ] function with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as arguments .
0
example# 485
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 486
evaluate self._has_expired [ self . _has_expired ] with argument key , if the result is True ,
0
example# 487
call the method self._set [ self . _set ] with key , pickled and timeout as arguments .
0
example# 488
return boolean True .
0
example# 489
return boolean False .
0
example# 491
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 492
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 493
substitute None for pickled .
0
example# 494
call the self._lock.reader [ self . _lock . reader ] method , with the result perform the following ,
0
example# 495
evaluate the method self._has_expired [ self . _has_expired ] with argument key , if it as False ,
0
example# 496
substitute value under the key key of self._cache [ self . _cache ] dictionary for pickled .
0
example# 497
if pickled is not None .
0
example# 498
try ,
0
example# 499
evaluate pickle.loads [ pickle . loads ] with argument pickled , return the result .
0
example# 500
if pickle.PickleError [ pickle . PickleError ] exception is caught ,
0
example# 501
return default .
0
example# 502
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 503
try ,
0
example# 504
delete the value under key key of self._cache [ self . _cache ] dictionary .
0
example# 505
delete the value under key key of self._expire_info [ self . _expire_info ] .
0
example# 506
if KeyError exception is caught ,
0
example# 507
do nothing .
0
example# 508
return default .
0
example# 510
if length of self._cache [ self . _cache ] is greater or equal to self._max_entries [ self . _max_entries ] ,
0
example# 511
call the self._cull [ self . _cull ] method .
0
example# 512
substitute value for the value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 513
call the self.get_backend_timeout [ self . get_backend_timeout ] with argument timeout , substitute it for the value under the key key of self._expire_info [ self . _expire_info ] dictionary .
0
example# 515
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 516
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 517
call the function pickle.dumps [ pickle . dumps ] with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as the arguments , substitute the result for pickled .
0
example# 518
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 519
call the method self._set [ self . _set ] with key , pickled and timeout as arguments .
0
example# 521
call the self.get [ self . get ] method with key and version set to version as arguments , substitute the result for value .
0
example# 522
if value is None ,
0
example# 523
raise an ValueError exception with string _STR:0_ as argument , substitute ' % s ' with key converted into a string .
1
"Key '%s' not found" ||| _STR:0_
example# 524
new_value is a sum of value and delta .
0
example# 525
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 526
call the function pickle.dumps [ pickle . dumps ] with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as the arguments , substitute the result for pickled .
0
example# 527
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 528
substitute pickled for value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 529
return new_value .
0
example# 530
define the method has_key with self class instance , key and version defaulting to None as arguments .
0
example# 531
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 532
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 533
call the self._lock.reader [ self . _lock . reader ] method , with the result perform the following ,
0
example# 534
if call to the _has_expired method with argument key evaluates to boolean False ,
0
example# 535
return boolean True .
0
example# 536
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 537
try ,
0
example# 538
delete the value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 539
delete the value under the key key of self._expire_info [ self . _expire_info ] dictionary .
0
example# 540
if KeyError exception is caught ,
0
example# 541
do nothing .
0
example# 542
return boolean False .
0
example# 543
define the method _has_expired with self and key as arguments .
0
example# 544
call the method self._expire_info.get [ self . _expire_info . get ] with key and integer -1 as arguments , substitute the result for exp .
1
-1- ||| _STR:0_
example# 545
if exp is None or exp is greater than the return value of the call to the function time.time [ time . time ] ,
0
example# 546
return boolean False .
0
example# 547
return boolean True .
0
example# 548
define the method _cull with argument self .
0
example# 549
if self._cull_frequency [ self . _cull_frequency ] equals to integer 0 .
1
0.0 ||| _STR:0_
example# 550
call self.clear [ self . clear ] method .
0
example# 551
if not ,
0
example# 552
for every i and k in enumerated values of self._cache [ self . _cache ] , if i is divisible by self._cull_frequency [ self . _cull_frequency ] , append k to doomed list .
0
example# 553
for every k in doomed ,
0
example# 554
call the method self._delete [ self . _delete ] with argument k .
0
example# 555
define the method _delete with arguments self and key .
0
example# 556
try ,
0
example# 557
delete the value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 558
if KeyError exception is caught ,
0
example# 559
do nothing .
0
example# 560
try ,
0
example# 561
delete the value under the key key of the self._expire_info [ self . _expire_info ] dictionary .
0
example# 562
if KeyError exception is caught ,
0
example# 563
do nothing .
0
example# 564
define the method delete with self class instance , key and version defaulting to None as arguments .
0
example# 565
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 566
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 567
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 568
call the method self._delete [ self . _delete ] with argument key .
0
example# 569
define the method clear with argument self .
0
example# 570
call the method self._cache.clear [ self . _cache . clear ] .
0
example# 571
call the method self._expire_info.clear [ self . _expire_info . clear ] .
0
example# 572
derive the class CacheClass from the base class LocMemCache .
0
example# 573
do nothing .
0
example# 574
import module time .
0
example# 575
import module pickle .
0
example# 576
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 577
from django.utils [ django . utils ] import six into default name space .
0
example# 578
from django.utils.deprecation [ django . utils . deprecation ] import RenameMethodsBase and RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 579
from django.utils.encoding [ django . utils . encoding ] import force_str into default name space .
0
example# 580
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 581
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class .
0
example# 583
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache .
0
example# 584
define the method __init__ with , self , server , params , library , value_not_found_exception as arguments .
0
example# 585
call the initialization method with argument params for the base class of the BaseMemcachedCache class .
0
example# 586
if server is an instance of six.string_types [ six . string_types ] ,
0
example# 587
split server with _STR:0_ as delimiter , substitute the result for self._servers [ self . _servers ] .
1
';' ||| _STR:0_
example# 588
if not ,
0
example# 589
substitute server for self._servers [ self . _servers ] .
0
example# 590
substitute value_not_found_exception for self.LibraryValueNotFoundException [ self . LibraryValueNotFoundException ] .
0
example# 591
substitute library for self._lib [ self . _lib ] .
0
example# 592
call the params.get [ params . get ] function with string _STR:0_ and None as arguments , substitute the result for self._options [ self . _options ] .
1
'OPTIONS' ||| _STR:0_
example# 593
property decorator ,
0
example# 594
define the method _cache with argument self .
0
example# 595
if self object has an attribute _STR:0_ ,
1
'_client' ||| _STR:0_
example# 596
call the self._lib.Client [ self . _lib . Client ] with argument self._servers [ self . _servers ] , substitute the result for self._client [ self . _client ] .
0
example# 597
return self._client [ self . _client ] .
0
example# 598
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments .
0
example# 599
if timeout equals to DEFAULT_TIMEOUT ,
0
example# 600
substitute self.default_timeout [ self . default_timeout ] for timeout .
0
example# 601
if timeout is None ,
0
example# 602
return integer 0 .
1
0.0 ||| _STR:0_
example# 604
timeout is a integer -1 .
1
-1- ||| _STR:0_
example# 605
if timeout is greater than integer 2592000 ,
1
252 ||| _STR:0_
example# 606
convert return value of the function time.time [ time . time ] to an integer , increment timeout by it .
0
example# 607
convert timeout into an integer , return it .
0
example# 608
define the method make_key with self class instance , key and version defaulting to None as arguments .
0
example# 609
call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache , use it as an argument for the call to the function force_str , return the result .
0
example# 611
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 612
call the method self._cache.add [ self . _cache . add ] with key , value , self.get_backend_timeout [ self . get_backend_timeout ] ( timeout ) as arguments .
0
example# 614
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 615
call the self._cache.get [ self . _cache . get ] method with argument key , substitute the result for val .
0
example# 616
if val is None ,
0
example# 617
return default .
0
example# 618
return val .
0
example# 620
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 621
call the method self._cache.set [ self . _cache . set ] with key , value , self.get_backend_timeout [ self . get_backend_timeout ] ( timeout ) as arguments .
0
example# 622
define the method delete with self , key and version set to None as arguments .
0
example# 623
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 624
call the method self._cache.delete [ self . _cache . delete ] with argument key .
0
example# 625
define the method get_many with self class instance , keys and version defaulting to None as arguments .
0
example# 627
call the method self._cache.get_multi [ self . _cache . get_multi ] with argument new_keys , substitute the result for ret .
0
example# 628
if ret is true .
0
example# 629
_ is an empty dictionary .
0
example# 630
zip together new_keys and keys , convert it to dictionary , assign it to m .
0
example# 631
for every k and v in return value of the ret.items [ ret . items ] function ,
0
example# 632
substitute v for value under the k-th element of m key of _ dictionary .
0
example# 633
substitute _ for ret .
0
example# 634
return ret .
0
example# 635
define the method close with self and dictionary pairs of elements kwargs .
0
example# 636
call the method self._cache.disconnect_all [ self . _cache . disconnect_all ] .
0
example# 638
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 640
evaluate the method self._cache.decr [ self . _cache . decr ] with key and negative delta as arguments , return the result .
0
example# 641
try ,
0
example# 642
call the method self._cache.incr [ self . _cache . incr ] with key and delta as arguments , substitute the result for val .
0
example# 643
if self.LibraryValueNotFoundException [ self . LibraryValueNotFoundException ] exception is caught ,
0
example# 644
val is None .
0
example# 645
if val is None ,
0
example# 646
raise an ValueError exception with string _STR:0_ as argument , substitute ' % s ' for key .
1
"Key '%s' not found" ||| _STR:0_
example# 647
return val .
0
example# 649
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 650
if delta is smaller than integer 0 .
1
0.0 ||| _STR:0_
example# 651
evaluate the method self._cache.incr [ self . _cache . incr ] with key and negative delta as arguments , return the result .
0
example# 652
try ,
0
example# 653
call the method self._cache.decr [ self . _cache . decr ] with key and delta as arguments , substitute the result for val .
0
example# 654
if self.LibraryValueNotFoundException [ self . LibraryValueNotFoundException ] exception is caught ,
0
example# 655
val is None .
0
example# 656
if val is None ,
0
example# 657
raise an ValueError exception with string _STR:0_ as argument , substitute ' % s ' for key .
1
"Key '%s' not found" ||| _STR:0_
example# 658
return val .
0
example# 659
define the method set_many with self , data , timeout set to DEFAULT_TIMEOUT and version set to None as arguments .
0
example# 660
safe_data is an empty dictionary .
0
example# 661
for every key and value in data.items [ data . items ] function return value ,
0
example# 662
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 663
substitute value for value under the key key of safe_data dictionary .
0
example# 664
call the method self._cache.set_multi [ self . _cache . set_multi ] with safe_data , self.get_backend_timeout [ self . get_backend_timeout ] ( timeout ) as arguments .
0
example# 665
define the function delete_many with self , keys and version set to None as arguments .
0
example# 666
l is lambda function with argument x , that calls the method self.make_key [ self . make_key ] with x and version set to version as arguments .
0
example# 667
call the method self_cache.delete_multi [ self_cache . delete_multi ] with argument list containing keys mapped through function l .
0
example# 668
define the method clear with argument self .
0
example# 669
call the method self._cache_flush_all [ self . _cache_flush_all ] .
0
example# 670
derive the class MemcachedCache from the BaseMemcachedCache base class .
0
example# 671
define the method __init__ with argument self , server and params .
0
example# 672
import memcache .
0
example# 673
call method __init__ from the base class of the class MemcachedCache with arguments : server , params , library set to memcache and value_not_found_exception set to ValueError .
0
example# 674
property decorator ,
0
example# 675
define the method _cache with self class instance as an argument .
0
example# 676
if attribute _STR:0_ of the self object is None ,
1
'_client' ||| _STR:0_
example# 677
call the method self._lib.Client [ self . _lib . Client ] with self._servers [ self . _servers ] and pickleProtocol set to pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as arguments , substitute the result for self._client [ self . _client ] .
0
example# 678
return self._client [ self . _client ] .
0
example# 679
derive the class PyLibMCCache from BaseMemcachedCache base class .
0
example# 680
define the method __init__ with self , server and params as arguments .
0
example# 681
import pylibmc .
0
example# 682
call method __init__ from the base class of the class PyLibMCCache with arguments : server , params , library set to pylibmc and value_not_found_exception set to pylibmc.NotFound [ pylibmc . NotFound ] .
0
example# 683
decorator cached_property ,
0
example# 684
define the method _cache with argument self .
0
example# 685
call the method self._lib.Client [ self . _lib . Client ] with argument self._servers [ self . _servers ] .
0
example# 686
if self._options [ self . _options ] exists ,
0
example# 687
substitute self._options [ self . _options ] for client.behaviors [ client . behaviors ] .
0
example# 688
return client .
0
example# 689
from __future__ import unicode_literals into default name space .
0
example# 690
import module hashlib .
0
example# 691
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 692
from django.utils.http [ django . utils . http ] import urlquote into default name space .
0
example# 693
TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string _STR:0_ .
1
'template.cache.%s.%s' ||| _STR:0_
example# 694
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments .
0
example# 695
if vary_on is None ,
0
example# 696
vary_on is an empty tuple .
0
example# 697
call the function urlquote with argument var for every var in vary_on , join the results into a string separated by _STR:0_ , substitute it for key .
1
':' ||| _STR:0_
example# 699
substitute ' % s ' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest [ args . hexdigest ] ( ) , respectively , return the result .
0
example# 700
from __future__ import unicode_literals into default name space .
0
example# 701
from .messages import CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR and CRITICAL into default name space .
0
example# 702
from .registry import register , run_checks , tag_exists and Tags into default name space .
0
example# 705
import module django.core.checks.model_checks [ django . core . checks . model_checks ] .
0
example# 706
__all__ is a list containing next strings , _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ ,
6
'Error' ||| _STR:4_
'Info' ||| _STR:2_
'Critical' ||| _STR:5_
'Debug' ||| _STR:1_
'CheckMessage' ||| _STR:0_
'Warning' ||| _STR:3_
example# 707
from __future__ import unicode_literals into default name space .
0
example# 708
from django.apps [ django . apps ] import apps into default name space .
0
example# 709
from .. import Warning , register and Tags into default name space .
0
example# 710
decorator register with argument Tags.compatibility [ Tags . compatibility ] .
0
example# 712
errors is an empty list
0
example# 713
call the function _check_test_runner with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend [ errors . extend ] .
0
example# 714
call the function _check_boolean_field_default_value with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend [ errors . extend ] .
0
example# 715
return errors .
0
example# 716
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments .
0
example# 717
from django.conf [ django . conf ] import settings into default name space .
0
example# 718
weight is an integer 0 .
1
0.0 ||| _STR:0_
example# 719
if call to the settings.is_overridden [ settings . is_overridden ] with string _STR:0_ evaluates to boolean False .
1
'TEST_RUNNER' ||| _STR:0_
example# 720
try ,
0
example# 721
settings.SITE_ID [ settings . SITE_ID ] .
0
example# 722
increment weight by integer 2 .
1
2.2 ||| _STR:0_
example# 723
if AttributeError exception is caught ,
0
example# 724
do nothing .
0
example# 725
try ,
0
example# 726
settings.BASE_DIR [ settings . BASE_DIR ] .
0
example# 727
if AttributeError exception is caught ,
0
example# 728
increment weight by integer 2 .
1
2.2 ||| _STR:0_
example# 729
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if it evaluates to boolean True ,
1
'TEMPLATE_LOADERS' ||| _STR:0_
example# 730
increment weight by integer 2 .
1
2.2 ||| _STR:0_
example# 731
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if it evaluates to boolean True ,
1
'MANAGERS' ||| _STR:0_
example# 732
increment weight by integer 2 .
1
2.2 ||| _STR:0_
example# 733
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if it evaluates to boolean True ,
1
'ADMINS' ||| _STR:0_
example# 734
increment weight by integer 2 .
1
2.2 ||| _STR:0_
example# 735
if string _STR:0_ is not contained in settings.MIDDLEWARE_CLASSES [ settings . MIDDLEWARE_CLASSES ] set ,
1
'django.middleware.clickjacking.XFrameOptionsMiddleware' ||| _STR:0_
example# 736
increment weight by integer 2 .
1
2.2 ||| _STR:0_
example# 739
if not ,
0
example# 740
return an empty list .
0
example# 741
define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments .
0
example# 742
from django.db [ django . db ] import models into default name space .
0
example# 743
append field to problem_fields list for every model in apps.get_models [ apps . get_models ] with argument kwargs dictionary , only if app_configs is None ,
0
example# 745
from __future__ import unicode_literals into default name space .
0
example# 746
from .. import Warning , register and Tags into default name space .
0
example# 747
decorator register with argument Tags.compatibility [ Tags . compatibility ] .
0
example# 749
errors is an empty list .
0
example# 750
call the function _check_middleware_classes with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend [ errors . extend ] .
0
example# 751
return errors .
0
example# 752
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments .
0
example# 753
from django.conf [ django . conf ] import settings into default name space .
0
example# 754
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if the result is boolean False ,
1
'MIDDLEWARE_CLASSES' ||| _STR:0_
example# 756
if not ,
0
example# 757
return an empty list .
0
example# 758
from __future__ import unicode_literals into default name space .
0
example# 760
DEBUG is integer 10 .
1
101 ||| _STR:0_
example# 761
INFO is integer 20 .
1
202 ||| _STR:0_
example# 762
WARNING is integer 30 .
1
303 ||| _STR:0_
example# 763
ERROR is integer 40 .
1
404 ||| _STR:0_
example# 764
CRITICAL is integer 50 .
1
505 ||| _STR:0_
example# 766
derive class CheckMessage from object base class .
0
example# 767
define initialization method __init__ with self class instance , level , msg , hint defaulting to None , obj defaulting to None and if defaulting to None as arguments .
0
example# 768
if level is not an integer raise an error with message string _STR:0_ .
1
"The first argument should be level." ||| _STR:0_
example# 769
substitute level for self.level [ self . level ] .
0
example# 770
substitute msg for self.msg [ self . msg ] .
0
example# 771
substitute hint for self.hint [ self . hint ] .
0
example# 772
substitute obj for self.obj [ self . obj ] .
0
example# 773
substitute id for self.id [ self . id ] .
0
example# 774
define private method __eq__ with self class instance and other as arguments .
0
example# 775
if for all attr in list of attributes _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ and _STR:4_ , self and other have the same attribute attr , return boolean True , otherwise return boolean False .
5
'msg' ||| _STR:1_
'hint' ||| _STR:2_
'id' ||| _STR:4_
'level' ||| _STR:0_
'obj' ||| _STR:3_
example# 776
define private method __ne__ with self class instance and other as arguments .
0
example# 777
if self equals to other return boolean False , otherwise return True .
0
example# 778
define private method __str__ with argument self .
0
example# 779
from django.db [ django . db ] import models into default name space .
0
example# 780
if self.obj [ self . obj ] is None ,
0
example# 781
obj is a string _STR:0_ .
1
"?" ||| _STR:0_
example# 782
otherwise if self.object [ self . object ] is an instance of the models.base.ModelBase [ models . base . ModelBase ] class ,
0
example# 783
substitute self.obj [ self . obj ] for model .
0
example# 784
substitute model._meta.app_label [ model . _meta . app_label ] for app .
0
example# 785
convert app and model._meta.object_name [ model . _meta . object_name ] to strings , join them with separating _STR:0_ character , substitute it for obj .
1
'.' ||| _STR:0_
example# 786
if not ,
0
example# 787
call the function force_str with argument self.obj [ self . obj ] , substitute the result for obj .
0
example# 788
if self.id [ self . id ] exists , convert self.id [ self . id ] to a string , surround it with round brackets , substitute id for it , otherwise id is an empty string .
0
example# 789
if self.hint [ self . hint ] exists , replace ' % s ' in a string _STR:0_ with value of self.hint [ self . hint ] , substitute it for hint , otherwise hint is an empty string .
1
"\n\tHINT: %s" ||| _STR:0_
example# 790
replace all ' % s ' from string _STR:0_ with values of obj , id , self.msg [ self . msg ] and hint , respectively , return the result .
1
"%s: %s%s%s" ||| _STR:0_
example# 791
define private method __repr__ with argument self .
0
example# 792
in the string _STR:0_ , replace ' % s ' with the name of the type of this class instance , replace all the _STR:1_ with self.level [ self . level ] , self.msg [ self . msg ] , self.hint [ self . hint ] . self.obj [ self . obj ] and self.id [ self . id ] , respectively , return the result .
2
'%r' ||| _STR:1_
"<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" ||| _STR:0_
example# 793
define the method is_serious with argument self .
0
example# 794
return boolean True if self.level [ self . level ] is greater than or equals to ERROR , otherwise return boolean False .
0
example# 795
define the method is_silence with argument self .
0
example# 796
from django.conf [ django . conf ] import settings into default name space .
0
example# 797
if self.id [ self . id ] is contained in settings.SILENCED_SYSTEM_CHECKS [ settings . SILENCED_SYSTEM_CHECKS ] return boolean True , False otherwise .
0
example# 798
derive the class Debug from base class CheckMessage .
0
example# 799
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 801
derive the class Info from base class CheckMessage .
0
example# 802
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 804
derive the class Warning from base class CheckMessage .
0
example# 805
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 807
derive the class Error from base class CheckMessage .
0
example# 808
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 810
derive the class Critical from base class CheckMessage .
0
example# 811
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 813
from __future__ import unicode_literals into default name space .
0
example# 814
from itertools import chain into default name space .
0
example# 815
import module types .
0
example# 816
from django.apps [ django . apps ] import apps into default name space .
0
example# 817
from . import Error , Tags and register into default name space .
0
example# 818
decorator register with Tags.models [ Tags . models ] as an argument .
0
example# 819
define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments .
0
example# 820
call the model.check [ model . check ] method with unpacked dictionary kwargs for every model in return value of function apps.get_models [ apps . get_models ] , only if app_configs is None ot model._meta.app_config [ model . _meta . app_config ] is contained in app_configs , error is a list containing all the previous elements .
0
example# 821
chain all errors elements into a list , return it .
0
example# 822
decorator register with Tags.models [ Tags . models ] and Tags.signals [ Tags . signals ] as arguments .
0
example# 823
define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments ,
0
example# 824
from django.db [ django . db ] import models into default name space .
0
example# 825
errors is an empty list .
0
example# 826
for name in attributes of models_signals object ,
0
example# 827
get models.signals [ models . signals ] name attribute , store it in obj .
0
example# 828
if obj is instance of models.signals.ModelSignal [ models . signals . ModelSignal ] class ,
0
example# 829
for every reference and receivers in return value of the call of obj.unresolved_references.items [ obj . unresolved_references . items ] method ,
0
example# 830
for every receiver , _ and _ in receivers ,
0
example# 831
if receiver is an instance of types.FunctionType [ types . FunctionType ] type ,
0
example# 832
description is a string _STR:0_ replaced by value of receiver.__name__ [ receiver . __name__ ] .
1
"The '%s' function" ||| _STR:0_
example# 833
if not ,
0
example# 834
description is a string _STR:0_ with ' % s ' replaced by value of receiver.__class__.__name__ [ receiver . __class__ . __name__ ] .
1
"An instance of the '%s' class" ||| _STR:0_
example# 836
return errors .
0
example# 837
from __future__ import unicode_literals into default name space .
0
example# 838
from itertools import chain into default name space .
0
example# 839
from django.utils.itercompat [ django . utils . itercompat ] import is_iterable into default name space .
0
example# 840
derive the class Tags with base class object .
0
example# 841
admin is a string _STR:0_
1
'admin' ||| _STR:0_
example# 842
compatibility is a string _STR:0_ .
1
'compatibility' ||| _STR:0_
example# 843
models is a string _STR:0_
1
'models' ||| _STR:0_
example# 844
signal is a string _STR:0_
1
'signals' ||| _STR:0_
example# 845
derive the class CheckRegistry with object as base class .
0
example# 846
define initialization method __init__ with argument self .
0
example# 847
self.registered_checks [ self . registered_checks ] is an empty list .
0
example# 848
define the method register with self ans unpacked list tags as arguments .
0
example# 849
define the method inner with argument check .
0
example# 850
replace tags for check.tags [ check . tags ] .
0
example# 851
if check is not contained in self.registered_checks [ self . registered_checks ] .
0
example# 852
call the method self.registered_checks.append [ self . registered_checks . append ] with argument check .
0
example# 853
return check .
0
example# 854
return inner .
0
example# 855
define the method run_checks with self class instance , app_configs defaulting to None , tags defaulting to None as argument .
0
example# 856
errors is an empty list .
0
example# 857
if tags is not None .
0
example# 858
append check to checks list , for every check in self.register_checks [ self . register_checks ] , if check has an attribute _STR:0_ and check.tags [ check . tags ] and tags set intersection is a non empty set .
1
'tags' ||| _STR:0_
example# 859
if not .
0
example# 860
substitute self.registered_checks [ self . registered_checks ] for checks .
0
example# 861
for every check in checks ,
0
example# 862
call the check function with argument app_config set to app_config , substitute the result for new_errors .
0
example# 863
if new_errors is not an iterable object raise an error with error message _STR:0_ , with ' % s ' replaced by value of check .
1
"The function %r did not return a list. All functions registered with the checks registry must return a list." ||| _STR:0_
example# 864
call the method errors.extend [ errors . extend ] with argument new_errors .
0
example# 865
return errors .
0
example# 866
define the method tag_exists with self class instance and tag as arguments .
0
example# 867
return boolean True if tag is contained in self.tags_available [ self . tags_available ] method return value , return False otherwise .
0
example# 868
define the method tags_available with argument self .
0
example# 869
append check.tags [ check . tags ] into a list for every check in self.registered_checks [ self . registered_checks ] if check has _STR:0_ attribute , put the elements into a set and return it .
1
'tags' ||| _STR:0_
example# 870
call the function CheckRegistry , substitute the result for registry .
0
example# 871
substitute registry.register [ registry . register ] for register .
0
example# 872
substitute registry.run_checks [ registry . run_checks ] for run_checks .
0
example# 873
substitute registry.tag_exists [ registry . tag_exists ] for tag_exists .
0
example# 874
from __future__ import unicode_literals into default name space .
0
example# 875
from django.conf [ django . conf ] import settings into default name space .
0
example# 876
from django.middleware.csrf [ django . middleware . csrf ] import get_token into default name space .
0
example# 877
from django.utils [ django . utils ] import six into default name space .
0
example# 878
from django.utils.encoding [ django . utils . encoding ] import smart_text into default name space .
0
example# 879
from django.utils.functional [ django . utils . functional ] import lazy into default name space .
0
example# 880
define the function csrf with an argument request .
0
example# 881
define the function _get_val .
0
example# 882
call the function get_token with an argument request , substitute the result for token .
0
example# 883
if token is None ,
0
example# 884
return string _STR:0_ .
1
'NOTPROVIDED' ||| _STR:0_
example# 885
if not ,
0
example# 886
call the smart_text function with an argument token , return the result .
0
example# 887
call the function lazy with arguments _get_val and six.text_type [ six . text_type ] , substitute the result for _get_val .
0
example# 889
define the function debug with an argument request .
0
example# 890
context_extras is an empty dictionary .
0
example# 891
if settings.DEBUG [ settings . DEBUG ] is true and value of the request.META [ request . META ] dictionary under the _STR:0_ key is contained in settings.INTERNAL_IPS [ settings . INTERNAL_IPS ] ,
1
'REMOTE_ADDR' ||| _STR:0_
example# 892
value under the _STR:0_ key of the context_extras dictionary is boolean True .
1
'debug' ||| _STR:0_
example# 893
from django.db [ django . db ] import connection into default name space .
0
example# 894
substitute connection.queries [ connection . queries ] for value under the _STR:0_ key of the context_extras dictionary .
1
'debug' ||| _STR:0_
example# 895
return context_extras .
0
example# 896
define the function i18n with an argument request .
1
181 ||| _STR:0_
example# 897
from django.utils [ django . utils ] import translation into default name space .
0
example# 898
context_extras is an empty dictionary .
0
example# 899
substitute settings.LANGUAGES [ settings . LANGUAGES ] for the value under the _STR:0_ key of the context_extras dictionary .
1
'LANGUAGES' ||| _STR:0_
example# 900
call the translation.get_language [ translation . get_language ] function , substitute the result for the value under the _STR:0_ key of the context_extras dictionary .
1
'LANGUAGE_CODE' ||| _STR:0_
example# 901
call the translation.get_language_bidi [ translation . get_language_bidi ] function , substitute the result for the value under the _STR:0_ key of the context_extras dictionary .
1
'LANGUAGE_BIDI' ||| _STR:0_
example# 902
return context_extras .
0
example# 903
define the function tz with an argument request .
0
example# 904
from django.utils [ django . utils ] import timezone into default name space .
0
example# 906
define the function static with an argument request .
0
example# 908
define the function media with an argument request .
0
example# 910
define the function request with an argument request .
0
example# 912
from functools import reduce into default name space .
0
example# 913
import module operator .
0
example# 914
from django.utils [ django . utils ] import six into default name space .
0
example# 915
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 916
derive the class DjangoRuntimeWarning from the RuntimeWarning base class .
0
example# 917
do nothing .
0
example# 918
derive the class AppRegistryNotReady from the Exception base class .
0
example# 919
do nothing .
0
example# 920
derive the class ObjectDoesNotExist from the Exception base class .
0
example# 921
silent_variable_failure is an boolean True .
0
example# 922
derive the class MultipleObjectsReturned from the Exception base class .
0
example# 923
do nothing .
0
example# 924
derive the class SuspiciousOperation from the Exception base class .
0
example# 925
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class .
0
example# 926
do nothing .
0
example# 927
derive the class SuspiciousFileOperation from the SuspiciousOperation base class .
0
example# 928
do nothing .
0
example# 929
derive the class DisallowedHost from the SuspiciousOperation base class .
0
example# 930
do nothing .
0
example# 931
derive the class DisallowedRedirect from the SuspiciousOperation base class .
0
example# 932
do nothing .
0
example# 933
derive the class PermissionDenied from the Exception base class .
0
example# 934
do nothing .
0
example# 935
derive the class ViewDoesNotExist from the Exception base class .
0
example# 936
do nothing .
0
example# 937
derive the class MiddlewareNotUsed from the Exception base class .
0
example# 938
do nothing .
0
example# 939
derive the class ImproperlyConfigured from the Exception base class .
0
example# 940
do nothing .
0
example# 941
derive the class FieldError from the Exception base class .
0
example# 942
do nothing .
0
example# 943
NON_FIELD_ERRORS is an string _STR:0_ .
1
'__all__' ||| _STR:0_
example# 944
derive the class ValidationError from the Exception base class .
0
example# 946
call the __init__ method from the base class of the class ValidationError with arguments message , code and params .
0
example# 947
if message is an instance of ValidationError class ,
0
example# 948
if message has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 949
substitute message.error_dict [ message . error_dict ] for message .
0
example# 951
substitute message.error_list [ message . error_list ] for message .
0
example# 952
if not ,
0
example# 953
substitute message.message [ message . message ] , message.code [ message . code ] , message.params [ message . params ] for message , code and params , respectively .
0
example# 954
if message is an instance of dict type ,
0
example# 955
self.error_dict [ self . error_dict ] is an empty dictionary .
0
example# 956
for every field , messages in return value of the message.items [ message . items ] method ,
0
example# 957
if messages is not an instance of the ValidationError class ,
0
example# 958
messages is an instance of the ValidationError class created with an argument messages .
0
example# 959
substitute messages.error_list [ messages . error_list ] for the value under the field key of the self.error_dict [ self . error_dict ] dictionary .
0
example# 960
otherwise if message is an instance of the list type .
0
example# 961
self.error_list [ self . error_list ] is an empty list .
0
example# 962
for every message is message ,
0
example# 963
if message is not an instance of the ValidationError class ,
0
example# 964
message is an instance of the ValidationError class created with an argument message .
0
example# 965
extend the self.error_list [ self . error_list ] list with message.error_list [ message . error_list ] .
0
example# 966
if not ,
0
example# 967
substitute message for self.message [ self . message ] .
0
example# 968
substitute code for self.code [ self . code ] .
0
example# 969
substitute params for self.params [ self . params ] .
0
example# 970
substitute list containing element self for self.error_list [ self . error_list ] .
0
example# 971
property getter decorator ,
0
example# 972
define the method message_dict with an argument self .
0
example# 973
get attribute _STR:0_ from the self object .
1
'error_dict' ||| _STR:0_
example# 974
convert object self to a dictionary , return it .
0
example# 975
property getter decorator ,
0
example# 976
define the messages with an argument self .
0
example# 977
if self has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 978
call the operator.add [ operator . add ] on the values of the self object converted into a dictionary , until it is reduced to a single value , return it .
0
example# 979
convert self to a list and return it .
0
example# 980
define the method update_error_dict with arguments self and error_dict .
0
example# 981
if self has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 982
for every field , error_list in self.error_dict.items [ self . error_dict . items ] method return value ,
0
example# 984
if not ,
0
example# 986
return error_dict .
0
example# 987
define the method __iter__ with an argument self .
0
example# 988
if self has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 989
for every field , errors in self.error_dict.items [ self . error_dict . items ] method return value ,
0
example# 990
yield field and ValidationError object converted to an list , created with an argument errors .
0
example# 991
if not ,
0
example# 992
for every error in self.error_list [ self . error_list ] ,
0
example# 993
substitute error.message [ error . message ] for message .
0
example# 994
if error.params [ error . params ] is true ,
0
example# 995
divide message by error.params [ error . params ] , substitute the residue of the division for message .
0
example# 996
call the force_text with an argument message , yield the result .
0
example# 997
define the method __str__ with an argument self .
0
example# 998
if self has an attribute _STR:0_ ,
1
'error_dict' ||| _STR:0_
example# 999
return the printable representation of the self object converted to a dictionary .
0
example# 1000
return the printable representation of the self object converted to a list .
0
example# 1001
define the method __repr__ with an argument self .
0
example# 1002
return the string _STR:0_ , replace ' % s ' with self .
1
'ValidationError(%s)' ||| _STR:0_
example# 1003
from django.core.files.base [ django . core . files . base ] import File into default name space .
0
example# 1004
__all__ is an list containing a string _STR:0_ .
1
'File' ||| _STR:0_
example# 1005
from __future__ import unicode_literals into default name space .
0
example# 1006
import module os .
0
example# 1007
from io import BytesIO , StringIO and UnsupportedOperation into default name space .
0
example# 1008
from django.utils.encoding [ django . utils . encoding ] import smart_text into default name space .
0
example# 1009
from django.core.files.utils [ django . core . files . utils ] import FileProxyMixin into default name space .
0
example# 1010
from django.utils [ django . utils ] import six into default name space .
0
example# 1013
derive the class File from the FileProxyMixin base class .
0
example# 1015
define the method __init__ with self class instance , file , and name defaulting to None as arguments .
0
example# 1016
substitute file for self.file [ self . file ] .
0
example# 1017
if name is None ,
0
example# 1018
get _STR:0_ attribute from the file object , if it doesnt exists use None , substitute it for name .
1
'name' ||| _STR:0_
example# 1019
substitute name for self.name [ self . name ] .
0
example# 1020
if file object has an attribute _STR:0_ ,
1
'mode' ||| _STR:0_
example# 1021
substitute file.mode [ file . mode ] for self.mode [ self . mode ] .
0
example# 1022
define the method __str__ with argument self .
0
example# 1023
evaluate the function smart_text with argument self.name [ self . name ] , if exists , or an empty string , if not , return the result .
0
example# 1024
define the method __repr__ with argument self .
0
example# 1025
substitute ' % s ' in string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] and self , if exists , or string _STR:1_ if it doesnt , return it .
2
'None' ||| _STR:1_
'<%s: %s>' ||| _STR:0_
example# 1026
define the method __bool__ with argument self .
0
example# 1027
convert self.name [ self . name ] into an boolean , return it .
0
example# 1028
define the method __nonzero__ with argument self .
0
example# 1029
call the __bool__ method with argument self , on the return value of the type function with argument self , return the result .
0
example# 1030
define the method __len__ with argument self .
0
example# 1031
return self.size [ self . size ] .
0
example# 1032
define the method _get_size_from_underlying_file with argument self .
0
example# 1033
if self.file [ self . file ] has an attribute _STR:0_ ,
1
'size' ||| _STR:0_
example# 1034
return self.file.size [ self . file . size ] .
0
example# 1035
if self.file [ self . file ] has an attribute _STR:0_ ,
1
'name' ||| _STR:0_
example# 1036
try ,
0
example# 1037
call the os.path.getsize [ os . path . getsize ] function with argument self.file.name [ self . file . name ] , return the result .
0
example# 1038
if OSError or TypeError errors occurred .
0
example# 1039
do nothing .
0
example# 1040
if self.file [ self . file ] has an attribute _STR:0_ and an attribute _STR:1_ ,
2
'seek' ||| _STR:1_
'tell' ||| _STR:0_
example# 1041
get the position of the self.file [ self . file ] file pointer , substitute it for pos .
0
example# 1042
position the file self.file [ self . file ] pointer at the end .
0
example# 1043
get the position of the file self.file [ self . file ] pointer , substitute it for size .
0
example# 1044
position file self.file [ self . file ] pointer at the pos position .
0
example# 1045
return size .
0
example# 1046
raise an AttributeError exception with string _STR:0_ as argument .
1
"Unable to determine the file's size." ||| _STR:0_
example# 1047
define the method _get_size with argument self .
0
example# 1048
if self has an attribute _STR:0_ .
1
'_size' ||| _STR:0_
example# 1049
return self._size [ self . _size ] .
0
example# 1050
call the method self._get_size_from_underlying_file [ self . _get_size_from_underlying_file ] , substitute the result for self._size [ self . _size ] .
0
example# 1051
return self._size [ self . _size ] .
0
example# 1052
define the method _set_size with arguments self and size .
0
example# 1053
substitute size for self._size [ self . _size ] .
0
example# 1054
size is a property object with _get_size as getter method and _set_size as setter method .
0
example# 1055
define the method _get_closed with argument self .
0
example# 1056
if self.file [ self . file ] is false or self.file.closed [ self . file . closed ] is true , return boolean true , otherwise return boolean false .
0
example# 1057
closed is a property object with _get_closed as a getter method .
0
example# 1058
define the method chunks with arguments self and chunk_size defaulting to None .
0
example# 1059
if chunk_size is false ,
0
example# 1060
substitute the self.DEFAULT_CHUNK_SIZE [ self . DEFAULT_CHUNK_SIZE ] for chunk_size .
0
example# 1061
try ,
0
example# 1062
position the file pointer at the beginning of self file .
0
example# 1063
if AttributeError or UnsupportedOperation exception occurred .
0
example# 1064
do nothing .
0
example# 1065
endless loop ,
0
example# 1066
call the self.read [ self . read ] method with argument chunk_size , substitute the result for data .
0
example# 1067
if data is false ,
0
example# 1068
break from the smallest enclosing loop .
0
example# 1069
yield one element of data iterable .
0
example# 1070
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None .
0
example# 1071
if chunk_size is false ,
0
example# 1072
substitute self.DEFAULT_CHUNK_SIZE [ self . DEFAULT_CHUNK_SIZE ] for chunk_size .
0
example# 1073
if self.size [ self . size ] is greater than chunk_size , return boolean True , otherwise return boolean False .
0
example# 1074
define the method __iter__ with argument self .
0
example# 1075
buffer_ is None .
0
example# 1076
for every chunk in return value of the method self.chunks [ self . chunks ] ,
0
example# 1077
evaluate the function BytesIO with argument chunk , substitute it for chunk_buffer .
0
example# 1078
for every line in chunk_buffer ,
0
example# 1079
if buffer_ is true ,
0
example# 1080
increment line by buffer_ .
0
example# 1081
buffer_ is None .
0
example# 1082
if last element of line is newline or carriage return character ,
0
example# 1083
yield one element of line iterable .
0
example# 1084
if not ,
0
example# 1085
substitute line for buffer_ .
0
example# 1086
if buffer_ is not None ,
0
example# 1087
yield one element from the buffer_ iterable .
0
example# 1088
define the method __enter__ with argument self .
0
example# 1089
return self .
0
example# 1090
define the method __exit__ with self , exc_type , exc_value and tb as arguments .
0
example# 1091
close the file self .
0
example# 1092
define the method open with arguments self and mode defaulting to None .
0
example# 1093
if file self is not closed ,
0
example# 1094
position the file pointer at the beginning of self file .
0
example# 1095
otherwise if self.name [ self . name ] exists and self.name [ self . name ] file path exists ,
0
example# 1096
open the file self.name [ self . name ] in mode or self.mode [ self . mode ] mode , whichever exists , assign the file handler to self.file [ self . file ] .
0
example# 1097
if not ,
0
example# 1098
raise an ValueError exception with string _STR:0_ as an argument .
1
"The file cannot be reopened." ||| _STR:0_
example# 1099
define the method close with argument self .
0
example# 1100
call the method self.file.close [ self . file . close ] .
0
example# 1102
derive the class ContentFile from File base class .
0
example# 1103
define the method __init__ with arguments self , content and name defaulting to None .
0
example# 1105
substitute StringIO for stream_class if content is an instance of six.text_type [ six . text_type ] , otherwise substitute BytesIO for stream_class .
0
example# 1106
if not ,
0
example# 1107
substitute BytesIO for stream_class .
0
example# 1108
call the function force_bytes with argument content , substitute it for content .
0
example# 1109
call the __init__ method with stream_class ( content ) and name set to name arguments , from the base class of the ContentFile class .
0
example# 1110
substitute length of content for self.size [ self . size ] .
0
example# 1111
define the method __str__ with argument self .
0
example# 1112
return a string _STR:0_ .
1
'Raw content' ||| _STR:0_
example# 1113
define the method __bool__ with argument self .
0
example# 1114
return boolean True .
0
example# 1115
define the method __nonzero__ with argument self .
0
example# 1116
evaluate the method type ( self ) .__bool__ with argument self , return the result .
0
example# 1117
define the method open with arguments self and mode set to None .
0
example# 1118
call the self.seek [ self . seek ] method with argument integer 0 .
1
0.0 ||| _STR:0_
example# 1119
define the method close with argument self .
0
example# 1120
do nothing .
0
example# 1121
import module zlib .
0
example# 1122
from django.core.files [ django . core . files ] import File into default name space .
0
example# 1123
derive class ImageFile from the base class File .
0
example# 1124
define method _get_width with self class instance as the argument .
0
example# 1125
return the first element of the return value of the call to the self._det_image_dimensions [ self . _det_image_dimensions ] method .
0
example# 1126
get property attribute _get_width , and substitute it for width .
0
example# 1127
define method _get_height with self class instance as the argument .
0
example# 1128
return the second element of the return value of the call to the self._det_image_dimensions [ self . _det_image_dimensions ] method .
0
example# 1129
get property attribute _get_height , and substitute it for width .
0
example# 1130
define the method _get_image_dimensions with self class instance as the argument .
0
example# 1131
if self does not have an attribute named _STR:0_ .
1
'_dimensions_cache' ||| _STR:0_
example# 1132
substitute self.closed [ self . closed ] for close .
0
example# 1133
call the method self.open [ self . open ] ( )
0
example# 1134
evaluate the method get_image_dimensions with self class instance and close set to close as the arguments , substitute the result for self._dimensions_cache [ self . _dimensions_cache ] .
0
example# 1135
return self._dimensions_cache [ self . _dimensions_cache ] .
0
example# 1136
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments .
0
example# 1137
from PIL module import ImageFile as PillowImageFile .
0
example# 1138
p is image parser object , set by calling the PillowImageFile.Parser [ PillowImageFile . Parser ] method .
0
example# 1139
if file_or_path has an attribute _STR:0_ ,
1
'read' ||| _STR:0_
example# 1140
substitute file_or_path for file .
0
example# 1141
get the position in bytes from the start of the file , store it in file_pos .
0
example# 1142
set the file position pointer at the beginning .
0
example# 1143
if not ,
0
example# 1144
open file named file_or_path for reading , store the file object handle in file .
0
example# 1145
close is boolean True .
0
example# 1146
try ,
0
example# 1147
chunk_size is an integer 1024 .
1
101 ||| _STR:0_
example# 1148
endless while loop ,
0
example# 1149
read chunk_size bytes from file and store it in data .
0
example# 1150
if data is empty .
0
example# 1151
break from the endless loop .
0
example# 1152
try ,
0
example# 1153
feed data to the parser p .
0
example# 1154
if zlib.error [ zlib . error ] as e exception is raised ,
0
example# 1155
if e.args [ e . args ] list first element starts with string _STR:0_ ,
2
-5- ||| _STR:1_
"Error -5" ||| _STR:0_
example# 1156
do nothig .
0
example# 1157
if not ,
0
example# 1158
raise an exception .
0
example# 1159
if p.image [ p . image ] is not empty ,
0
example# 1160
return size of the image that was fed to the parser p .
0
example# 1161
double the chunk size .
0
example# 1162
return None .
0
example# 1163
execute regardless of the exception being raised ,
0
example# 1164
if close is True ,
0
example# 1165
close file file .
0
example# 1166
if not ,
0
example# 1167
set the file position pointer at file_pos .
0
example# 1168
import module os .
0
example# 1169
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ and _STR:4_ .
5
'LOCK_SH' ||| _STR:1_
'lock' ||| _STR:3_
'LOCK_EX' ||| _STR:0_
'LOCK_NB' ||| _STR:2_
'unlock' ||| _STR:4_
example# 1170
define the _fd function with argument f .
0
example# 1171
return result of the f.fileno [ f . fileno ] method if f has an _STR:0_ attribute , otherwise return f .
1
'fileno' ||| _STR:0_
example# 1172
if os.name [ os . name ] equals to _STR:0_ ,
1
'nt' ||| _STR:0_
example# 1173
import msvcrt .
0
example# 1174
from ctypes import sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll and byref into default name space .
1
646 ||| _STR:0_
example# 1175
from ctypes.wintypes [ ctypes . wintypes ] import BOOL , DWORD and HANDLE into default name space .
0
example# 1176
LOCK_SH is a integer 0 .
1
0.0 ||| _STR:0_
example# 1177
LOCK_NB is a hexadecimal 1 .
1
1.1 ||| _STR:0_
example# 1178
LOCK_EX is a hexadecimal 2 .
1
2.2 ||| _STR:0_
example# 1179
if size of c_ulong does not equals to size of c_void_p ,
0
example# 1180
substitute c_int64 for ULONG_PTR .
1
646 ||| _STR:0_
example# 1181
if not ,
0
example# 1182
substitute c_ulong for ULONG_PTR .
0
example# 1183
substitute c_void_p for PVOID .
0
example# 1184
derive the class _OFFSET from the Structure base class .
0
example# 1186
derive the class _OFFSET_UNION from the Union base class .
0
example# 1187
_anonymous_ is a list containing one string : _STR:0_ .
1
'_offset' ||| _STR:0_
example# 1189
derive the class OVERLAPPED from the Structure base class .
0
example# 1190
_anonymous_ is a list containing one string : _STR:0_ .
1
'_offset_union' ||| _STR:0_
example# 1192
call the function POINTER with argument OVERLAPPED , substitute the result for LPOVERLAPPED .
0
example# 1193
substitute windll.kernel32.LockFileEx [ windll . kernel32 . LockFileEx ] for LockFileEx .
1
323 ||| _STR:0_
example# 1194
substitute BOOL for LockFileEx.restype [ LockFileEx . restype ] .
0
example# 1196
substitute windll.kernel32.UnlockFileEx [ windll . kernel32 . UnlockFileEx ] for UnlockFileEx .
1
323 ||| _STR:0_
example# 1197
substitute BOOL for UnlockFileEx.restype [ UnlockFileEx . restype ] .
0
example# 1199
define the function lock with arguments f and flags .
0
example# 1200
call the function msvcrt.get_osfhandle [ msvcrt . get_osfhandle ] with return value of the _fd ( f ) function as argument , substitute the result for hfile .
0
example# 1201
call the OVERLAPPED function , substitute the result for overlapped .
0
example# 1203
convert ret to a boolean , return it .
0
example# 1204
define the function unlock with argument f .
0
example# 1205
call the function msvcrt.get_osfhandle [ msvcrt . get_osfhandle ] with return value of the _fd ( f ) function as argument , substitute the result for hfile .
0
example# 1206
call the OVERLAPPED function , substitute the result for overlapped .
0
example# 1208
convert ret to a boolean , return it .
0
example# 1209
if not ,
0
example# 1210
try ,
0
example# 1211
import fcntl .
0
example# 1212
substitute fcntl.LOCK_SH [ fcntl . LOCK_SH ] for LOCK_SH .
0
example# 1213
substitute fcntl.LOCK_NB [ fcntl . LOCK_NB ] for LOCK_NB .
0
example# 1214
substitute fcntl.LOCK_EX [ fcntl . LOCK_EX ] for LOCK_EX .
0
example# 1215
if ImportError or AttributeError exception occurred ,
0
example# 1216
LOCK_EX , LOCK_SH and LOCK_NB are all equal to integer 0 .
1
0.0 ||| _STR:0_
example# 1217
define the function lock with arguments f and flags .
0
example# 1218
return boolean False .
0
example# 1219
define the function unlock with argument f .
0
example# 1220
return boolean True .
0
example# 1221
if not ,
0
example# 1222
define the function lock with arguments f and flags .
0
example# 1223
call the function fcntl.flock [ fcntl . flock ] with return value of the _fd ( f ) function and flags as arguments , substitute the result for ret .
0
example# 1225
define the function unlock with argument f .
0
example# 1226
all the function fcntl.flock [ fcntl . flock ] with return value of the _fd ( f ) function and fcntl.LOCK_UN [ fcntl . LOCK_UN ] as arguments , substitute the result for ret .
0
example# 1228
import module os .
0
example# 1229
from django.core.files [ django . core . files ] import locks into default name space .
0
example# 1230
try ,
0
example# 1231
from shutil import copystat into default name space .
0
example# 1232
if ImportError exception occurred ,
0
example# 1233
import stat .
0
example# 1234
define the function copystat with arguments src and dst .
0
example# 1235
call the os.stat [ os . stat ] function with argument src , substitute the result for st .
0
example# 1236
call the function stat.S_IMODE [ stat . S_IMODE ] with argument st.st_mode [ st . st_mode ] , substitute the result for mode .
0
example# 1237
if os has an attribute _STR:0_ ,
1
'utime' ||| _STR:0_
example# 1239
if os has an attribute _STR:0_ ,
1
'chmod' ||| _STR:0_
example# 1240
call the function os.chmod [ os . chmod ] with arguments dst and mode .
0
example# 1241
__all__ is a list containing a string _STR:0_ .
1
'file_move_safe' ||| _STR:0_
example# 1242
define the function _samefile with arguments src and dst .
0
example# 1243
if os.path [ os . path ] has an attribute _STR:0_ ,
1
'samefile' ||| _STR:0_
example# 1244
try ,
0
example# 1245
call the os.path.samefile [ os . path . samefile ] with arguments src and dst , return the result .
0
example# 1246
if exception OSError occurred ,
0
example# 1247
return boolean False .
0
example# 1248
if file path of src and dst files are the same , return boolean True , otherwise return boolean False .
0
example# 1250
if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True ,
0
example# 1251
return nothing .
0
example# 1252
try ,
0
example# 1253
if allow_overwrite is boolean False and call to the os.access [ os . access ] function with arguments new_file_name and os.F_OK [ os . F_OK ] evaluates to boolean True ,
0
example# 1254
raise an IOError exception with string _STR:0_ as argument , where ' % s ' is replaced by new_file_name .
1
"Destination file %s exists and allow_overwrite is False" ||| _STR:0_
example# 1255
call the os.rename [ os . rename ] function with arguments old_file_name and new_file_name .
0
example# 1256
return nothing .
0
example# 1257
if OSError exception is caught ,
0
example# 1258
do nothing .
0
example# 1259
open file old_file_name in read bytes mode , with file descriptor as f ,
0
example# 1261
try ,
0
example# 1262
call the function locks.lock [ locks . lock ] with arguments fd and locks.LOCK_EX [ locks . LOCK_EX ] .
0
example# 1263
current_chunk is None .
0
example# 1264
as long as current_chunk is not an empty string ,
0
example# 1265
read chunk_size bytes from the old_file file , substitute the result for current_chunk .
0
example# 1266
write current_chunk to file fd .
0
example# 1267
finally perform ,
0
example# 1268
call the function locks.unlock [ locks . unlock ] with fd as argument .
0
example# 1269
close the file fd .
0
example# 1270
call the function copystat with old_file_name and new_file_name as arguments .
0
example# 1271
tr ,
0
example# 1272
remove the old_file_name file .
0
example# 1273
if OSError , renamed to e , is caught ,
0
example# 1274
if attribute _STR:0_ of object e is not equal to integer 32 and if _STR:1_ attribute is not equal to integer 13 ,
4
'winerror' ||| _STR:0_
323 ||| _STR:2_
131 ||| _STR:3_
'errno' ||| _STR:1_
example# 1275
raise an exception .
0
example# 1276
import module os .
0
example# 1277
import module errno .
0
example# 1278
import module itertools .
0
example# 1279
from datetime import datetime into default name space .
0
example# 1280
from django.conf [ django . conf ] import settings into default name space .
0
example# 1281
from django.core.exceptions [ django . core . exceptions ] import SuspiciousFileOperation into default name space .
0
example# 1282
from django.core.files [ django . core . files ] import locks and File into default name space .
0
example# 1283
from django.core.files.move [ django . core . files . move ] import file_move_safe into default name space .
0
example# 1284
from django.utils.encoding [ django . utils . encoding ] import force_text and filepath_to_uri into default name space .
0
example# 1285
from django.utils.functional [ django . utils . functional ] import LazyObject into default name space .
0
example# 1286
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1287
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urljoin into default name space .
0
example# 1288
from django.utils.text [ django . utils . text ] import get_valid_filename into default name space .
0
example# 1289
from django.utils._os [ django . utils . _os ] import safe_join and abspathu into default name space .
0
example# 1290
from django.utils.deconstruct [ django . utils . deconstruct ] import deconstructible into default name space .
0
example# 1291
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ .
4
'Storage' ||| _STR:0_
'FileSystemStorage' ||| _STR:1_
'DefaultStorage' ||| _STR:2_
'default_storage' ||| _STR:3_
example# 1292
derive the class Storage from the object base class .
0
example# 1293
define the method open with arguments self , name and mode defaulting to string _STR:0_ .
1
'rb' ||| _STR:0_
example# 1294
call the self._open [ self . _open ] method with name and mode arguments , return the result .
0
example# 1295
define the method save with arguments self , name and content .
0
example# 1296
if name is None ,
0
example# 1297
substitute content.name [ content . name ] for name .
0
example# 1298
if content has an _STR:0_ attribute ,
1
'chunks' ||| _STR:0_
example# 1299
content is a File object instance created with content argument .
0
example# 1300
call the method self.get_available_name [ self . get_available_name ] with argument name , substitute it for name .
0
example# 1301
call the method self._save [ self . _save ] with arguments name and content , substitute it for name .
0
example# 1302
replace all the strings _STR:0_/ ' in the string name , use it as an argument for the call to the force_text function , return the result .
1
'\\' with ' ||| _STR:0_
example# 1303
define the method det_valid_name with arguments self and name .
0
example# 1304
call the get_valid_filename with argument name , return the result .
0
example# 1305
define the method get_available_name with arguments self and name .
0
example# 1306
call the os.path.split [ os . path . split ] with argument name , assign the result to the dir_name and file_name respectively .
0
example# 1307
call the os.path.splitext [ os . path . splitext ] with argument file_name , assign the result to the file_root and file_ext respectively .
0
example# 1309
as long as self.exists [ self . exists ] function with argument name evaluates to boolean True ,
0
example# 1310
substitute ' % s ' in string _STR:0_ with : file_root , next ( count ) and file_ext , join the dir_name and previous string into a valid file path , substitute it for name .
1
"%s_%s%s" ||| _STR:0_
example# 1311
return name .
0
example# 1312
define the method path with arguments self and name .
0
example# 1313
raise an NotImplementedError exception with argument string _STR:0_ .
1
"This backend doesn't support absolute paths." ||| _STR:0_
example# 1314
define the method delete with arguments self and name .
0
example# 1315
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a delete() method' ||| _STR:0_
example# 1316
define the method exists with arguments self and name .
0
example# 1317
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide an exists() method' ||| _STR:0_
example# 1318
define the method listdir with arguments self and path .
0
example# 1319
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a listdir() method' ||| _STR:0_
example# 1320
define the method size with arguments self and name .
0
example# 1321
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a size() method' ||| _STR:0_
example# 1322
define the method url with arguments self and name .
0
example# 1323
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a url() method' ||| _STR:0_
example# 1324
define the method accessed_time with arguments self and name .
0
example# 1325
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide an accessed_time() method' ||| _STR:0_
example# 1326
define the method created_time with arguments self and name .
0
example# 1327
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a created_time() method' ||| _STR:0_
example# 1328
define the method modified_time with arguments self and name .
0
example# 1329
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a modified_time() method' ||| _STR:0_
example# 1330
decorator deconstructible ,
0
example# 1331
derive the class FileSystemStorage from the Storage base class .
0
example# 1333
if location is None ,
0
example# 1334
substitute the settings.MEDIA_ROOT [ settings . MEDIA_ROOT ] for location .
0
example# 1335
substitute the location for self.base_location [ self . base_location ] .
0
example# 1336
substitute the return value of the function abspathu with self.base_location [ self . base_location ] as argument for self.location [ self . location ] .
0
example# 1337
if base_url is None ,
0
example# 1338
substitute settings.MEDIA_URL [ settings . MEDIA_URL ] for base_url .
0
example# 1339
otherwise if base_url does not ends with _STR:0_ character ,
1
'/' ||| _STR:0_
example# 1340
append character _STR:0_ to the base_url .
1
'/' ||| _STR:0_
example# 1341
substitute base_url for self.base_url [ self . base_url ] .
0
example# 1342
self.file_permissions_mode [ self . file_permissions_mode ] is a tuple containing : file_permissions_mode if file_permissions_mode is not None , or settings.FILE_UPLOAD_PERMISSIONS [ settings . FILE_UPLOAD_PERMISSIONS ] if it is .
0
example# 1343
self.directory_permissions_mode [ self . directory_permissions_mode ] is a tuple containing : directory_permissions_mode if directory_permissions_mode is not None , or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS [ settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS ] if it is .
0
example# 1344
define the method _open with arguments self , name and mode defaulting to string _STR:0_ .
1
'rb' ||| _STR:0_
example# 1345
call the function self.path [ self . path ] with argument name , use it and mode as arguments for the call to the function open , use it as an argument for creatinon of a File object instance , return it .
0
example# 1346
define the method _save with arguments self , name and content .
0
example# 1347
substitute result of the self.path [ self . path ] function with argument name for full_path .
0
example# 1348
call the function os.path.dirname [ os . path . dirname ] with argument full_path , substitute the result for directory .
0
example# 1349
if call to the function os.path.exists [ os . path . exists ] with argument directory evaluates to boolean False ,
0
example# 1350
try ,
0
example# 1351
if self.directory_permissions_mode [ self . directory_permissions_mode ] is not None ,
0
example# 1353
try ,
0
example# 1354
call the os.makedirs [ os . makedirs ] function with directory and self.directory_permissions_mode [ self . directory_permissions_mode ] as arguments .
0
example# 1355
finally perform ,
0
example# 1356
call the os.umask [ os . umask ] function with argument old_umask .
0
example# 1357
if not ,
0
example# 1358
call the function os.makedirs [ os . makedirs ] with argument directory .
0
example# 1359
if exception OSError , renamed to e , occurred ,
0
example# 1360
if e.errno [ e . errno ] is not equal to errno.EEXIST [ errno . EEXIST ] ,
0
example# 1361
raise an exception .
0
example# 1362
if directory is not an directory ,
0
example# 1363
raise an IOError exception with argument string _STR:0_ , where ' % s ' is replaced by directory .
1
"%s exists and is not a directory." ||| _STR:0_
example# 1364
endless loop ,
0
example# 1365
try ,
0
example# 1366
if content has an attribute _STR:0_ ,
1
'temporary_file_path' ||| _STR:0_
example# 1367
call the function file_move_safe with content.temporary_file_path [ content . temporary_file_path ] function result and full_path .
0
example# 1368
if not ,
0
example# 1371
_file is None .
0
example# 1372
try ,
0
example# 1373
call the function locks.lock [ locks . lock ] with fd and locks.LOCK_EX [ locks . LOCK_EX ] as arguments .
0
example# 1374
for every chunk in content.chunks [ content . chunks ] function return value ,
0
example# 1375
if _file is None ,
0
example# 1376
mode is a string _STR:0_ is chunk is instance of the type bytes , otherwise mode is a string _STR:1_ .
2
'wt' ||| _STR:1_
'wb' ||| _STR:0_
example# 1377
call the function os.fdopen [ os . fdopen ] with arguments fd and mode , substitute it for _file .
0
example# 1378
write the chunk to the file _file .
0
example# 1379
finally perform ,
0
example# 1380
call the function locks.unlock [ locks . unlock ] with argument fd .
0
example# 1381
if _file is not None ,
0
example# 1382
close the _file file .
0
example# 1383
if not ,
0
example# 1384
close fd file .
0
example# 1385
if OSError , renamed to e , is caught ,
0
example# 1386
if e.errno [ e . errno ] equals to errno.EEXIST [ errno . EEXIST ] ,
0
example# 1387
call the method self.get_available_name [ self . get_available_name ] with argument name , substitute the result for name .
0
example# 1388
call the method self.path [ self . path ] with argument name , substitute the result for full_path .
0
example# 1389
if not ,
0
example# 1390
raise an exception .
0
example# 1391
if not ,
0
example# 1392
break from the smallest enclosing loop .
0
example# 1393
if self.file_permissions_mode [ self . file_permissions_mode ] is not None ,
0
example# 1394
call the function os.chmod [ os . chmod ] with arguments full_path and self.file_permissions_mode [ self . file_permissions_mode ] .
0
example# 1395
return name .
0
example# 1396
define the method delete with arguments self and name .
0
example# 1397
if name is boolean False raise an assert error with message string _STR:0_ .
1
"The name argument is not allowed to be empty." ||| _STR:0_
example# 1398
call the self.path [ self . path ] with argument name , substitute it for name .
0
example# 1399
if os.path.exists [ os . path . exists ] function with argument name , evaluates to boolean True ,
0
example# 1400
try ,
0
example# 1401
call the os.remove [ os . remove ] function with argument name .
0
example# 1402
if OSError , renamed to e , is caught ,
0
example# 1403
if e.errno [ e . errno ] equals to errno.EEXIST [ errno . EEXIST ] ,
0
example# 1404
raise an exception .
0
example# 1405
define the method exists with arguments self and name .
0
example# 1406
call the self.path [ self . path ] function with argument name , use the result as the argument for the call to the os.path.exists [ os . path . exists ] function , return the result .
0
example# 1407
define the method listdir with arguments self and path .
0
example# 1408
call the self.path [ self . path ] function with argument path , substitute it for path .
0
example# 1409
directories , files are empty lists .
0
example# 1410
for every entry in os.listdir [ os . listdir ] function return value called with the argument path ,
0
example# 1411
join path and entry into a file path , if it exists ,
0
example# 1412
append entry to the directories list .
0
example# 1413
if not ,
0
example# 1414
append entry to files list .
0
example# 1415
return directories and files .
0
example# 1416
define the method path with arguments self and name .
0
example# 1417
try ,
0
example# 1418
call the safe_join function with arguments self.location [ self . location ] and name , substitute it for path .
0
example# 1419
if ValueError exception is caught ,
0
example# 1420
raise an SuspiciousFileOperation exception with string _STR:0_ as argument , replace ' % s ' with name .
1
"Attempted access to '%s' denied." ||| _STR:0_
example# 1421
call the os.path.normpath [ os . path . normpath ] with argument path , return the result .
0
example# 1422
define the method size with arguments self and name .
0
example# 1423
call the self.path [ self . path ] with argument name , use the result as an argument for the call to the os.path.getsize [ os . path . getsize ] function , return the result .
0
example# 1424
define the method url with arguments self and name .
0
example# 1425
if self.base_url [ self . base_url ] is None ,
0
example# 1426
raise an ValueError with string _STR:0_ as argument .
1
"This file is not accessible via a URL." ||| _STR:0_
example# 1427
call the urljoin function with arguments : self.base_url [ self . base_url ] and result of the call to the function filepath_to_uri with argument name , return the result .
0
example# 1428
define the method accessed_time with arguments self and name .
0
example# 1429
call the function self.path [ self . path ] with argument name , use the result as an argument for the call to the function os.path.getatime [ os . path . getatime ] , use the result as an argument for the call to the function datetime.fromtimestamp [ datetime . fromtimestamp ] , return the result .
0
example# 1430
define the method created_time with arguments self and name .
0
example# 1431
call the function self.path [ self . path ] with argument name , use the result as an argument for the call to the function os.path.getctime [ os . path . getctime ] , use the result as an argument for the call to the function datetime.fromtimestamp [ datetime . fromtimestamp ] , return the result .
0
example# 1432
define the method modified_time with arguments self and name .
0
example# 1433
call the function self.path [ self . path ] with argument name , use the result as an argument for the call to the function os.path.getmtime [ os . path . getmtime ] , use the result as an argument for the call to the function datetime.fromtimestamp [ datetime . fromtimestamp ] , return the result .
0
example# 1434
define the function get_storage_class with argument import_path=None defaulting to None .
0
example# 1435
call the import_string with argument : import_path if exists or settings.DEFAULT_FILE_STORAGE [ settings . DEFAULT_FILE_STORAGE ] , if not , return the result .
0
example# 1436
derive the class DefaultStorage from the LazyObject base class .
0
example# 1437
define the _setup method with argument self .
0
example# 1438
call the function that is the return value of get_storage_class method , substitute the result for self._wrapped [ self . _wrapped ] .
0
example# 1439
call the DefaultStorage method , substitute the result for default_storage .
0
example# 1440
import module os .
0
example# 1441
import module tempfile .
0
example# 1442
from django.core.files.utils [ django . core . files . utils ] import FileProxyMixin into default name space .
0
example# 1443
__all__ is a tuple , containing strings _STR:0_ and _STR:1_ .
2
'NamedTemporaryFile' ||| _STR:0_
'gettempdir' ||| _STR:1_
example# 1444
if module os field name equals to string _STR:0_ ,
1
'nt' ||| _STR:0_
example# 1445
derive class TemporaryFile from the base class FileProxyMixin .
0
example# 1446
define method __init__ with self class instance , mode string _STR:0_ , bufsize set to integer -1 , suffix and prefix set to empty strig , dir set to None as the arguments .
2
-1- ||| _STR:1_
'w+b' ||| _STR:0_
example# 1447
call the method tmpfile.mkstemp [ tmpfile . mkstemp ] with suffix set to suffix , prefix set to prefix and dir set to dir , store the result in the fd and name , respective .
0
example# 1448
substitute name for self.name [ self . name ] .
0
example# 1449
call the os.fdopen [ os . fdopen ] function with fd , mode and bufsize as the arguments , assign the file handle object to self.file [ self . file ] .
0
example# 1450
substitute False for self.close_called [ self . close_called ] .
0
example# 1451
substitute os.unlink [ os . unlink ] for unlink .
0
example# 1452
define the method close with self class instance as the argument .
0
example# 1453
if self.close_called [ self . close_called ] is False ,
0
example# 1454
substitute True for self.close_called [ self . close_called ] .
0
example# 1455
try ,
0
example# 1456
close the file object .
0
example# 1457
if OSError or IOError exceptions were raised ,
0
example# 1458
do nothing .
0
example# 1459
try ,
0
example# 1460
call the method unlink on self with self.name [ self . name ] as the argument .
0
example# 1461
if OSError exception was raised ,
0
example# 1462
do nothing .
0
example# 1463
property decorator , to be called by property built-in function .
0
example# 1464
define the method closed with self as the argument .
0
example# 1465
return self.file.closed [ self . file . closed ] .
0
example# 1466
define __del__ method with self as the argument .
0
example# 1467
call the method close on self .
0
example# 1468
define __enter__ method with self as the argument .
0
example# 1469
call the file.__enter__ [ file . __enter__ ] method on self .
0
example# 1470
return self .
0
example# 1471
define method __exit__ with self , exc , value and tb as the arguments .
0
example# 1472
call the file.__exit__ [ file . __exit__ ] method on self with exc , value and tb as the arguments .
0
example# 1473
substitute TemporaryFile for NamedTemporaryFile .
0
example# 1474
if not ,
0
example# 1475
substitute tempfile.NamedTemporaryFile [ tempfile . NamedTemporaryFile ] for NamedTemporaryFile .
0
example# 1476
substitute tempfile.gettempdir [ tempfile . gettempdir ] for gettempdir .
0
example# 1477
import module errno .
0
example# 1478
import module os .
0
example# 1479
from io import BytesIO into default name space .
0
example# 1480
from django.conf [ django . conf ] import settings into default name space .
0
example# 1481
from django.core.files.base [ django . core . files . base ] import File into default name space .
0
example# 1482
from django.core.files [ django . core . files ] import temp as tempfile into default name space .
0
example# 1483
from django.utils.encoding [ django . utils . encoding ] import force_str into default name space .
0
example# 1484
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ .
4
'SimpleUploadedFile' ||| _STR:3_
'UploadedFile' ||| _STR:0_
'TemporaryUploadedFile' ||| _STR:1_
'InMemoryUploadedFile' ||| _STR:2_
example# 1485
derive the UploadedFile class from the File base class .
0
example# 1488
call the __init__ method with arguments file and name , from the base class of the UploadedFile class .
0
example# 1489
substitute size for self.size [ self . size ] .
0
example# 1490
substitute content_type for self.content_type [ self . content_type ] .
0
example# 1491
substitute charset for self.charset [ self . charset ] .
0
example# 1492
substitute content_type_extra for self.content_type_extra [ self . content_type_extra ] .
0
example# 1493
define the method __repr__ with argument self .
0
example# 1494
substitute ' % s ' from string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] , self.name [ self . name ] and self.content_type [ self . content_type ] , respectively , use it as an argument for the call to the function force_str , return the result .
1
"<%s: %s (%s)>" ||| _STR:0_
example# 1495
define the method _get_name with argument self .
0
example# 1496
return self._name [ self . _name ] .
0
example# 1497
define the method _set_name with arguments self and name .
0
example# 1498
if name is not None ,
0
example# 1499
call the function os.path.basename [ os . path . basename ] with argument name , substitute the result for name .
0
example# 1500
if length of name is greater than integer 255 ,
1
252 ||| _STR:0_
example# 1501
call the os.path.splitex [ os . path . splitex ] with argument name , assign the result to name and ext , respectively .
0
example# 1502
substitute the first 255 elements of ext for ext .
1
252 ||| _STR:0_
example# 1503
subtract length of the ext from the integer 255 , take first elements of the name list up to the previous result index , append ext to the end of it , substitute the resulting list for name .
1
252 ||| _STR:0_
example# 1504
substitute name for self._name [ self . _name ] .
0
example# 1505
name is a property object with _get_name as a getter method and _set_name as a setter method .
0
example# 1506
derive the TemporaryUploadedFile class from the UploadedFile base class .
0
example# 1508
if settings.FILE_UPLOAD_TEMP_DIR [ settings . FILE_UPLOAD_TEMP_DIR ] is true ,
0
example# 1509
call the method tempfile.NamedTemporaryFile [ tempfile . NamedTemporaryFile ] with arguments : suffix set to string _STR:0_ and dir set to settings.FILE_UPLOAD_TEMP_DIR [ settings . FILE_UPLOAD_TEMP_DIR ] .
1
'.upload' ||| _STR:0_
example# 1510
if not ,
0
example# 1511
call the method tempfile.NamedTemporaryFile [ tempfile . NamedTemporaryFile ] with argument suffix set to string _STR:0_ .
1
'.upload' ||| _STR:0_
example# 1512
call the method __init__ from the base class of the TemporaryUploadedFile class with arguments : file , name , content_type , size , charset and content_type_extra .
0
example# 1513
define the method temporary_file_path with argument self .
0
example# 1514
return self.file.name [ self . file . name ] .
0
example# 1515
define the method close with argument self .
0
example# 1516
try ,
0
example# 1517
call the self.file.close [ self . file . close ] method , return the result .
0
example# 1518
if OSError , renamed to e , exception is caught ,
0
example# 1519
if e.errno [ e . errno ] is not equal to errno.ENOENT [ errno . ENOENT ] ,
0
example# 1520
raise an exception .
0
example# 1521
derive the InMemoryUploadedFile class from the UploadedFile base class .
0
example# 1524
substitute field_name for self.field_name [ self . field_name ] .
0
example# 1525
define the method open with arguments self and mode set to None .
0
example# 1526
set the file pointer at the beginning of the self.file [ self . file ] file .
0
example# 1527
define the method chunks with arguments self ad chunk_size set to None .
0
example# 1528
set the file pointer at the beginning of the self.file [ self . file ] file .
0
example# 1529
read the whole self file and yield it as a generator return value .
0
example# 1530
define the method multiple_chunks with arguments self and hunk_size set to None .
0
example# 1531
return boolean False .
0
example# 1532
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class .
0
example# 1534
if content is empty , substitute it for an empty string .
0
example# 1536
decorator classmethod .
0
example# 1537
define the method from_dict with argument cls and file_dict .
0
example# 1539
from __future__ import unicode_literals into default name space .
0
example# 1540
from io import BytesIO into default name space .
0
example# 1541
from django.conf [ django . conf ] import settings into default name space .
0
example# 1542
from django.core.files.uploadedfile [ django . core . files . uploadedfile ] import TemporaryUploadedFile and InMemoryUploadedFile into default name space .
0
example# 1544
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1545
__all__ is a string containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ and _STR:7_ .
8
'UploadFileException' ||| _STR:0_
'TemporaryFileUploadHandler' ||| _STR:4_
'load_handler' ||| _STR:6_
'MemoryFileUploadHandler' ||| _STR:5_
'SkipFile' ||| _STR:2_
'StopFutureHandlers' ||| _STR:7_
'FileUploadHandler' ||| _STR:3_
'StopUpload' ||| _STR:1_
example# 1546
derive the class UploadFileException from the Exception base class .
0
example# 1547
do nothing .
0
example# 1549
derive the class StopUpload from the UploadFileException base class .
0
example# 1550
define the method __init__ with arguments self and connection_reset defaulting to boolean False .
0
example# 1551
substitute connection_reset for self.connection_reset [ self . connection_reset ] .
0
example# 1552
define the method __str__ with argument self .
0
example# 1553
if self.connection_reset [ self . connection_reset ] is true ,
0
example# 1554
return string _STR:0_ .
1
'StopUpload: Halt current upload.' ||| _STR:0_
example# 1555
if not ,
0
example# 1556
return string _STR:0_ .
1
'StopUpload: Consume request data, then halt.' ||| _STR:0_
example# 1557
derive the class SkipFile from the UploadFileException base class .
0
example# 1558
do nothing .
0
example# 1559
derive the class StopFutureHandlers from the UploadFileException base class .
0
example# 1560
do nothing .
0
example# 1561
derive the class FileUploadHandler from the object base class .
0
example# 1563
define the method __init__ with arguments self and request defaulting to None .
0
example# 1564
self.file_name [ self . file_name ] is None .
0
example# 1565
self.content_type [ self . content_type ] is None .
0
example# 1566
self.content_length [ self . content_length ] is None .
0
example# 1567
self.charset [ self . charset ] is None .
0
example# 1568
self.content_type_extra [ self . content_type_extra ] is None .
0
example# 1569
self.request [ self . request ] is None .
0
example# 1570
define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None .
0
example# 1571
do nothing .
0
example# 1572
define the method new_file with arguments : self , field_name , file_name , content_type , content_length , charset set to None ,
0
example# 1573
substitute field_name for self.field_name [ self . field_name ] .
0
example# 1574
substitute file_name for self.file_name [ self . file_name ] .
0
example# 1575
substitute content_type for self.content_type [ self . content_type ] .
0
example# 1576
substitute content_length for self.content_length [ self . content_length ] .
0
example# 1577
substitute charset for self.charset [ self . charset ] .
0
example# 1578
substitute content_type_extra for self.content_type_extra [ self . content_type_extra ] .
0
example# 1579
define the method receive_data_chunk with arguments : self , raw_data and start .
0
example# 1580
raise an NotImplementedError with argument string _STR:0_ .
1
'subclasses of FileUploadHandler must provide a receive_data_chunk() method' ||| _STR:0_
example# 1581
define the method file_complete with arguments : self and file_size .
0
example# 1582
raise an NotImplementedError with argument string _STR:0_ .
1
'subclasses of FileUploadHandler must provide a file_complete() method' ||| _STR:0_
example# 1583
define the method upload_complete with argument self .
0
example# 1584
do nothing .
0
example# 1585
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class .
0
example# 1586
define the method __init__ with arguments self , argument list args and dictionary of arguments kwargs .
0
example# 1587
call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments : unpacked list args , and unpacked dictionary kwargs .
0
example# 1588
define the method new_file with arguments : self , file_name , unpacked list args and unpacked dictionary kwargs .
0
example# 1589
call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments : file_name , unpacked list args and unpacked dictionary kwargs .
0
example# 1591
define the method receive_data_chunk with arguments : self , raw_data and start .
0
example# 1592
call the method self.file.write [ self . file . write ] with argument raw_data .
0
example# 1593
define the method file_complete with arguments self and file_size .
0
example# 1594
position the file pointer at the start of the self.file [ self . file ] file .
0
example# 1595
substitute file_size for self.file.size [ self . file . size ] .
0
example# 1596
return self.file [ self . file ] .
0
example# 1597
derive the class MemoryFileUploadHandler from the FileUploadHandler base class .
0
example# 1598
define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None .
0
example# 1599
if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE [ settings . FILE_UPLOAD_MAX_MEMORY_SIZE ] ,
0
example# 1600
self.activated [ self . activated ] is boolean False .
0
example# 1601
if not ,
0
example# 1602
self.activated [ self . activated ] is boolean True .
0
example# 1603
define the method new_file with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 1604
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments : unpacked list args and unpacked list kwargs .
0
example# 1605
if self.activated [ self . activated ] is boolean True ,
0
example# 1606
call the function BytesIO , substitute the result for self.file [ self . file ] .
0
example# 1607
raise an exception StopFutureHandlers .
0
example# 1608
define the function receive_data_chunk with arguments self , raw_data and start .
0
example# 1609
if self.activated [ self . activated ] is boolean True ,
0
example# 1610
write raw_data to self.file [ self . file ] file .
0
example# 1611
if not ,
0
example# 1612
return raw_data .
0
example# 1613
define the function file_complete with arguments self and file_size .
0
example# 1614
if self.activated [ self . activated ] is boolean False ,
0
example# 1615
return nothing .
0
example# 1616
set file pointer at the beginning of the self.file [ self . file ] file .
0
example# 1617
initialize the object of a InMemoryUploadedFile class with arguments : file set to self.file [ self . file ] , field_name set to self.field_name [ self . field_name ] , name set to self.file_name [ self . file_name ] , content_type set to self.content_type [ self . content_type ] , size set to file_size , charset set to self.charset [ self . charset ] , and content_type_extra set to self.content_type_extra [ self . content_type_extra ] , return it .
0
example# 1618
define the function load_handler with arguments : path , unpacked list args and unpacked dictionary kwargs .
0
example# 1619
call the import_string with arguments path , call the return function with arguments : unpacked list args and unpacked dictionary kwargs , return the result .
0
example# 1620
derive class FileProxyMixin from the base class object , making it a new-style class .
0
example# 1621
define lambda function that returns self.file.encoding [ self . file . encoding ] field , use it as an argument for property function , put the result in encoding .
0
example# 1622
define lambda function that returns self.file.fileno [ self . file . fileno ] field , use it as an argument for property function , put the result in fileno .
0
example# 1623
define lambda function that returns self.file.flush [ self . file . flush ] field , use it as an argument for property function , put the result in flush .
0
example# 1624
define lambda function that returns self.file.isatty [ self . file . isatty ] field , use it as an argument for property function , put the result in isatty .
0
example# 1625
define lambda function that returns self.file.newlines [ self . file . newlines ] field , use it as an argument for property function , put the result in newlines .
0
example# 1626
define lambda function that returns self.file.read [ self . file . read ] field , use it as an argument for property function , put the result in read .
0
example# 1627
define lambda function that returns self.file.readinto [ self . file . readinto ] field , use it as an argument for property function , put the result in readinto .
0
example# 1628
define lambda function that returns self.file.readline [ self . file . readline ] field , use it as an argument for property function , put the result in readline .
0
example# 1629
define lambda function that returns self.file.readlines [ self . file . readlines ] field , use it as an argument for property function , put the result in readlines .
0
example# 1630
define lambda function that returns self.file.seek [ self . file . seek ] field , use it as an argument for property function , put the result in seek .
0
example# 1631
define lambda function that returns self.file.softspace [ self . file . softspace ] field , use it as an argument for property function , put the result in softspace .
0
example# 1632
define lambda function that returns self.file.tell [ self . file . tell ] field , use it as an argument for property function , put the result in tell .
0
example# 1633
define lambda function that returns self.file.truncate [ self . file . truncate ] field , use it as an argument for property function , put the result in truncate .
0
example# 1634
define lambda function that returns self.file.write [ self . file . write ] field , use it as an argument for property function , put the result in write .
0
example# 1635
define lambda function that returns self.file.writelines [ self . file . writelines ] field , use it as an argument for property function , put the result in writelines .
0
example# 1636
define lambda function that returns self.file.xreadlines [ self . file . xreadlines ] field , use it as an argument for property function , put the result in xreadlines .
0
example# 1637
define iterator method __iter__ with self as the argument .
0
example# 1638
return iterator object based on the self.file [ self . file ] collection object .
0
example# 1639
from __future__ import unicode_literals into default name space .
0
example# 1640
import module logging .
0
example# 1641
import module sys .
0
example# 1642
import module types .
0
example# 1643
from django import http into default name space .
0
example# 1644
from django.conf [ django . conf ] import settings into default name space .
0
example# 1645
from django.core [ django . core ] import urlresolvers into default name space .
0
example# 1646
from django.core [ django . core ] import signals into default name space .
0
example# 1647
from django.core.exceptions [ django . core . exceptions ] import MiddlewareNotUsed , PermissionDenied and SuspiciousOperation into default name space .
0
example# 1648
from django.db [ django . db ] import connections and transaction into default name space .
0
example# 1649
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 1650
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1651
from django.utils [ django . utils ] import six into default name space .
0
example# 1652
from django.views [ django . views ] import debug into default name space .
0
example# 1653
call the function logging.getLogger [ logging . getLogger ] with string _STR:0_ as the argument , assign the return object handle to logger .
1
'django.request' ||| _STR:0_
example# 1654
derive class BaseHandler , derive from the base class object , making this a new style class .
0
example# 1655
response_fixes is a list with http.fix_location_header [ http . fix_location_header ] and http.conditional_content_removal [ http . conditional_content_removal ] as elements .
0
example# 1656
define initialization method __init__ , with self class instance as the argument .
0
example# 1657
set class fields _request_middleware , _view_middleware , _template_response_middleware , _response_middleware and _exception_middleware to None .
0
example# 1658
define method load_middleware with class instance self as the argument .
0
example# 1659
self._view_middleware [ self . _view_middleware ] is an empty list .
0
example# 1660
self._template_response_middleware [ self . _template_response_middleware ] is an empty list .
0
example# 1661
_response_middleware is an empty list .
0
example# 1662
exception_middleware is an empty list .
0
example# 1663
request_middleware is an empty list .
0
example# 1664
for every middleware_path in settings.MIDDLEWARE_CLASSES [ settings . MIDDLEWARE_CLASSES ] :
0
example# 1665
evaluate the function import_string with middleware_path as argument , substitute the result for my_class .
0
example# 1666
try ,
0
example# 1667
call the mw_class function , store the result in the mw_instance .
0
example# 1668
if MiddlewareNotUsed exception is raised ,
0
example# 1669
skip this iteration of he smallest enclosing loop .
0
example# 1670
if mw_instance has an attribute named _STR:0_ .
1
'process_request' ||| _STR:0_
example# 1671
append mw_instance.process_request [ mw_instance . process_request ] at the end of request_middleware .
0
example# 1672
if mw_instance has an attribute named _STR:0_ .
1
'process_view' ||| _STR:0_
example# 1673
append mw_instance.process_view [ mw_instance . process_view ] at the end of self._view_middleware [ self . _view_middleware ] .
0
example# 1674
if mw_instance has an attribute named _STR:0_ .
1
'process_template_response' ||| _STR:0_
example# 1675
insert mw_instance.process_template_response [ mw_instance . process_template_response ] at the beginning of self._template_response_middleware [ self . _template_response_middleware ] .
0
example# 1676
if mw_instance has an attribute named _STR:0_ .
1
'process_response' ||| _STR:0_
example# 1677
insert mw_instance.process_response [ mw_instance . process_response ] at the beginning of self._response_middleware [ self . _response_middleware ] .
0
example# 1678
if mw_instance has an attribute named _STR:0_ .
1
'process_exception' ||| _STR:0_
example# 1679
insert mw_instance.process_exception [ mw_instance . process_exception ] at the beginning of self._exception_middleware [ self . _exception_middleware ] .
0
example# 1680
substitute self._request_middleware [ self . _request_middleware ] for request_middleware .
0
example# 1681
define the method make_view_atomic , with self class instance and view as the arguments .
0
example# 1682
get attribute _STR:0_ from the view object , if the attribute doesnt exist return the empty set , substitute the result for non_atomic_requests .
1
'_non_atomic_requests' ||| _STR:0_
example# 1683
call the method connections.all [ connections . all ] ( ) , perform the following for every db in the result ,
0
example# 1684
if value under the key 'ATOMIC_REQUESTS of db.settings_dic [ db . settings_dic ] dictionary is True and db.alias [ db . alias ] is not present in the non_atomic_requests ,
0
example# 1685
call the function transaction.atomic [ transaction . atomic ] , with using set to db.alias [ db . alias ] as the argument , return value is a function which is called , with the argument view , store the result in the view .
0
example# 1686
return view
0
example# 1687
define method get_exception_response , with self class instance , request , resolver and status_code as the arguments .
0
example# 1688
try ,
0
example# 1689
call the function resolver.resolve_error_handler [ resolver . resolve_error_handler ] with status_code as an argument , assign the result to the callback and param_dict , respectively .
0
example# 1690
call the callback function with request and dictionary argument param_dict as the arguments , substitute it for response .
0
example# 1691
if an exception occurred ,
0
example# 1692
call the method signals.got_request_exception.send [ signals . got_request_exception . send ] with the sender set to the type of this class , and request set to request as the arguments .
0
example# 1693
call the method self.handle_uncaught_exception [ self . handle_uncaught_exception ] with request , resolver and return value of the function sys.exec_info [ sys . exec_info ] as the arguments .
0
example# 1694
return response
0
example# 1695
define the method get_response , with self class instance and request as the arguments .
0
example# 1696
substitute settings.ROOT_URLCONF [ settings . ROOT_URLCONF ] for urlconf .
0
example# 1697
call the method urlresolvers.set_urlconf [ urlresolvers . set_urlconf ] with urlconf as the argument .
0
example# 1698
call the method urlresolvers.RegexURLResolver [ urlresolvers . RegexURLResolver ] with raw literal string _STR:0_ and urlconf as the arguments , substitute the result for resolver .
1
'^/' ||| _STR:0_
example# 1699
try ,
0
example# 1700
set response to None .
0
example# 1701
for every middleware_method in self._request_middleware [ self . _request_middleware ] ,
0
example# 1702
call the middleware_method with the request as an argument , substitute the result for response .
0
example# 1703
if response is True ,
0
example# 1704
breaks from the smallest enclosing loop execution .
0
example# 1705
if response is None ,
0
example# 1706
if request has an attribute named _STR:0_ ,
1
'urlconf' ||| _STR:0_
example# 1707
substitute request.urlconf [ request . urlconf ] for urlconf .
0
example# 1708
call the function urlresolvers.set_urlconf [ urlresolvers . set_urlconf ] with urlconf as the argument .
0
example# 1709
call the method urlresolvers.RegexURLResolver [ urlresolvers . RegexURLResolver ] with raw literal string _STR:0_ and urlconf as the arguments , substitute the result for resolver .
1
'^/' ||| _STR:0_
example# 1710
call to the resolver.resolve [ resolver . resolve ] method with request.path_info [ request . path_info ] as an argument .
0
example# 1711
assign the values to the callback , callback_args , callback_kwargs , respectively , from the resolver_match tuple .
0
example# 1712
substitute resolver_match for request.resolver_match [ request . resolver_match ] .
0
example# 1713
for every middleware_method in self._view_middleware [ self . _view_middleware ] ,
0
example# 1714
call the middleware_method with request , callback , callback_args and callback_kwargs as the arguments , substitute the result for response .
0
example# 1715
if response is True ,
0
example# 1716
break from the smallest enclosing loop execution .
0
example# 1717
if response is None ,
0
example# 1718
call the method self.make_view_atomic [ self . make_view_atomic ] with callback as the argument , substitute the result for the wrapped_callback .
0
example# 1719
try ,
0
example# 1720
call the function wrapped_callback with request , list or arguments callback_args and dictionary arguments callback_kwargs , as the arguments , substitute the result for response .
0
example# 1721
if Exception , renamed to e , exception is caught ,
0
example# 1722
for every middleware_method in self._exception_middleware [ self . _exception_middleware ] ,
0
example# 1723
call the middleware_method with request and e as the arguments , substitute the result for response .
0
example# 1724
if response is True ,
0
example# 1725
break from the smallest enclosing loop execution .
0
example# 1726
if response is None ,
0
example# 1727
raise the exception .
0
example# 1728
if response is None ,
0
example# 1729
if callback is of instance types.FunctionType [ types . FunctionType ] ,
0
example# 1730
get the name of the callback , substitute it for view_name .
0
example# 1731
if not ,
0
example# 1732
get the name of the type of the callback , append the string _STR:0_ to it , substitute it for view_name .
1
'.__call__' ||| _STR:0_
example# 1733
substitute the ' % s ' in the string _STR:0_ , with the name of the module callback is in and the view_name , respectively , use it as the argument for the ValueError exception raise .
1
"The view %s.%s didn't return an HttpResponse object. It returned None instead." ||| _STR:0_
example# 1734
if response has an attribute named _STR:0_ and response.render [ response . render ] is a callable function ,
1
'render' ||| _STR:0_
example# 1735
for every middleware_method in self._template_response_middleware [ self . _template_response_middleware ] ,
0
example# 1736
call the function middleware_method with the request and response as the arguments , assign the result to response .
0
example# 1737
if response is None ,
0
example# 1738
replace ' % s ' in the string _STR:0_ ,
1
"%s.process_template_response didn't return an HttpResponse object. It returned None instead." ||| _STR:0_
example# 1739
with name of the class type of the middleware_method instance , use it as the argument for call to the ValueError exception raise . call the response.render [ response . render ] ( ) method and assign the return to the response .
0
example# 1741
substitute ' % s ' in _STR:0_ with request.path [ request . path ] , extra is an dictionary with two pairs of elements _STR:1_ with value _STR:2_ ,
3
404 ||| _STR:2_
'Not Found: %s' ||| _STR:0_
'status_code' ||| _STR:1_
example# 1742
and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning [ logger . warning ] function . if settings.DEBUG [ settings . DEBUG ] is True ,
0
example# 1744
if not ,
0
example# 1745
call the method self.get_exception_response [ self . get_exception_response ] with request , resolver and integer _STR:0_ as the arguments , assign the result to response .
1
404 ||| _STR:0_
example# 1746
if exception PermissionDenied is caught ,
0
example# 1747
substitute ' % s ' in _STR:0_ with request.path [ request . path ] , extra is an dictionary with two pairs of elements , _STR:1_ with value 403 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning [ logger . warning ] function .
3
404 ||| _STR:2_
'Forbidden (Permission denied): %s' ||| _STR:0_
'status_code' ||| _STR:1_
example# 1748
call the method self.get_exception_response [ self . get_exception_response ] with request , resolver and integer 403 as the arguments , assign the result to response .
1
404 ||| _STR:0_
example# 1749
if exception SuspiciousOperation as e is caught ,
0
example# 1750
substitute ' % s ' in _STR:0_ with the name of the type of the class object e , use it as the argument for the call to the , function logging.getLogger [ logging . getLogger ] , assign the result to the security_logger .
1
'django.security.%s' ||| _STR:0_
example# 1751
evaluate the function force_text with e as an argument , extra is an dictionary with two pair of elements , _STR:0_ with integer value of 400 and _STR:1_ with value request , respectively use the previous to call the function security_logger.error [ security_logger . error ] .
3
404 ||| _STR:2_
'request' ||| _STR:1_
'status code' ||| _STR:0_
example# 1752
if settings.DEBUG [ settings . DEBUG ] is True ,
0
example# 1753
evaluate the function debug.technical_500_response [ debug . technical_500_response ] with request , evaluated value of function sys.exc_info [ sys . exc_info ] as a list , status code set to integer 400 , return the result .
2
404 ||| _STR:1_
505 ||| _STR:0_
example# 1754
call the method self.get_exception_response [ self . get_exception_response ] with the request , resolver and integer 400 as the arguments , substitute the result for response .
1
404 ||| _STR:0_
example# 1755
if SystemExit exception is caught ,
0
example# 1756
raise an exception .
0
example# 1757
otherwise if any other exception is caught ,
0
example# 1758
call the method signals.got_request_exception.send [ signals . got_request_exception . send ] with sender set to type of the self class instance and request set to request .
0
example# 1759
call to the self.handle_uncaught_exception [ self . handle_uncaught_exception ] method with request , resolver and value of the evaluated function sys.exec_info [ sys . exec_info ] , as the arguments , substitute the result for response .
0
example# 1760
try ,
0
example# 1761
for every middleware_method in self._response_middleware [ self . _response_middleware ] ,
0
example# 1762
call the function middleware_method with request and response as the arguments , substitute the result for response .
0
example# 1763
if response is None , substitute ' % s ' is `` % s.process_response [ s . process_response ] did n't return an HttpResponse object .
0
example# 1764
It returned None instead . `` , with the name of the type of the self class instance of the middleware_method , raise the ValueError with the previous as the argument .
0
example# 1765
call the method self.apply_response_fixes [ self . apply_response_fixes ] with the request and response as the arguments , substitute the result for response .
0
example# 1766
if any exception is caught ,
0
example# 1767
call the signals.got_request_exception.send [ signals . got_request_exception . send ] method with sender set to type of the self class instance and request set to request .
0
example# 1768
call to the self.handle_uncaught_exception [ self . handle_uncaught_exception ] method with request , resolver and value of the evaluated function sys.exec_info [ sys . exec_info ] , as the arguments , substitute the result for response .
0
example# 1769
append the request to the end of the protected class member response._closable_objects [ response . _closable_objects ] .
0
example# 1770
return response .
0
example# 1771
define the method handle_uncaught_exception with self class instance , request , resolver and exec_info as arguments .
0
example# 1772
if settings.DEBUG_PROPAGATE_EXCEPTIONS [ settings . DEBUG_PROPAGATE_EXCEPTIONS ] is True ,
0
example# 1773
raise an exception .
0
example# 1774
substitute ' % s ' in _STR:0_ with request.path [ request . path ] , exc_info set to exc_info , extra is an dictionary with two pairs of elements _STR:1_ with value 500 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.error [ logger . error ] function .
3
505 ||| _STR:2_
'Internal Server Error: %s' ||| _STR:0_
'status_code' ||| _STR:1_
example# 1775
if settings.DEBUG [ settings . DEBUG ] is True ,
0
example# 1776
evaluate debug.technical_500_response [ debug . technical_500_response ] with request and list of arguments exec_info , return the result .
1
505 ||| _STR:0_
example# 1777
if resolver.urlconf_module [ resolver . urlconf_module ] is None :
0
example# 1778
call the function reraise from the module six , with list of arguments exec_info .
0
example# 1779
call the resolver.resolve_error_handler [ resolver . resolve_error_handler ] with integer 500 as the argument , assign the resulting tuple elements to the callback , and param_dict , respectively .
1
505 ||| _STR:0_
example# 1780
evaluate the function callback with request and dictionary of parameters param_dict as the arguments , return the result .
0
example# 1781
define the method apply_response_fixes with self class instance , request and response as the arguments .
0
example# 1782
for every func in self.response_fixes [ self . response_fixes ] ,
0
example# 1783
call the function func with request and response as arguments , assign the result to response .
0
example# 1784
return response .
0
example# 1785
from __future__ import unicode_literals into default name space .
0
example# 1786
import module cgi .
0
example# 1787
import module codecs .
0
example# 1788
import module logging .
0
example# 1789
import module sys .
0
example# 1790
from io import BytesIO into default name space .
0
example# 1791
from threading import Lock into default name space .
0
example# 1792
import module warnings .
0
example# 1793
from django import http into default name space .
0
example# 1794
from django.conf [ django . conf ] import settings into default name space .
0
example# 1795
from django.core [ django . core ] import signals into default name space .
0
example# 1796
from django.core.handlers [ django . core . handlers ] import base into default name space .
0
example# 1797
from django.core.urlresolvers [ django . core . urlresolvers ] import set_script_prefix into default name space .
0
example# 1798
from django.utils [ django . utils ] import datastructures into default name space .
0
example# 1799
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 1800
from django.utils.encoding [ django . utils . encoding ] import force_str and force_text into default name space .
0
example# 1801
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 1802
from django.utils [ django . utils ] import six into default name space .
0
example# 1803
from django.http.response [ django . http . response ] import REASON_PHRASES as STATUS_CODE_TEXT # NOQA into default name space .
0
example# 1804
call logging.getLogger [ logging . getLogger ] method with string _STR:0_ as argument , store the result in logger .
1
'django.request' ||| _STR:0_
example# 1806
derive class LimitedStream from the object base class , making it a new-style class .
0
example# 1807
def initialization method __init__ with self class instance , stream , limit and buf_size set to integer value of the product 64*1024*1024 .
2
101 ||| _STR:1_
646 ||| _STR:0_
example# 1808
substitute stream for self.stream [ self . stream ] .
0
example# 1809
substitute limit for self.remaining [ self . remaining ] .
0
example# 1810
substitute empty bytes string for self.buffer [ self . buffer ] .
0
example# 1811
substitute buf_size for self.buf_size [ self . buf_size ] .
0
example# 1812
define the method _read_limited with self class instance and size set to None as arguments .
0
example# 1813
if size is None or size is greater than self.remaining [ self . remaining ] ,
0
example# 1814
substitute self.remaining [ self . remaining ] for size .
0
example# 1815
if size equals to integer zero .
0
example# 1816
return empty bytes string .
0
example# 1817
read size number of bytes from self.stream [ self . stream ] stream , store the result in the result .
0
example# 1818
decrement self.remaining [ self . remaining ] by length of result .
0
example# 1819
return result .
0
example# 1820
define the method read with self class instance and size set to None as arguments .
0
example# 1821
if size is None ,
0
example# 1822
add self.buffer [ self . buffer ] and self._read_limited [ self . _read_limited ] method return value together , store it in result .
0
example# 1823
substitute empty bytes string for self.buffer [ self . buffer ] .
0
example# 1824
otherwise if size is less than length of self.buffer [ self . buffer ] ,
0
example# 1825
substitute first size elements of self.buffer [ self . buffer ] for result .
0
example# 1826
truncate first size number of elements of self.buffer [ self . buffer ] .
0
example# 1827
if not ,
0
example# 1828
call the method self.read_limited [ self . read_limited ] with length of self.buffer [ self . buffer ] subtracted from size as argument , add result to self.buffer [ self . buffer ] , store it in result .
0
example# 1829
substitute empty bytes string for self.buffer [ self . buffer ] .
0
example# 1830
return result .
0
example# 1831
define method readline with self class instance and size set to None .
0
example# 1832
while newline character is not contained in self.buffer [ self . buffer ] and , size is None or length of self.buffer [ self . buffer ] is less than size ,
0
example# 1833
if size is not zero ,
0
example# 1834
call the self._read_limiter [ self . _read_limiter ] with length of self.buffer [ self . buffer ] subtracted from size as argument , store the result into chunk .
0
example# 1835
if not ,
0
example# 1836
call the method self._read_limited [ self . _read_limited ] , store the return value into chunk .
0
example# 1837
if chunk is empty ,
0
example# 1838
break the execution of the smallest enclosing loop .
0
example# 1839
increment self.buffer [ self . buffer ] by chunk .
0
example# 1840
call the function BytesIO with self.buffer [ self . buffer ] as argument , store the result is sio .
0
example# 1841
if size is not empty ,
0
example# 1842
call the sio.readline [ sio . readline ] method with size as an argument , substitute the result for line .
0
example# 1843
if not ,
0
example# 1844
call the sio.readline [ sio . readline ] method , substitute the result for line .
0
example# 1845
call the sio.read [ sio . read ] method , substitute the result for self.buffer [ self . buffer ] .
0
example# 1846
return line .
0
example# 1847
derive the class WSGIRequest from base class http.HttpRequest [ http . HttpRequest ] .
0
example# 1848
define the initialization method __init__ with self class instance and environ as arguments .
0
example# 1849
call the get_script_name function with environ as argument , substitute the result for script_name .
0
example# 1850
call the get_path_info function with environ as argument , substitute the result for path_info .
0
example# 1851
if path_info is empty ,
0
example# 1852
path_info is a character _STR:0_ .
1
'/' ||| _STR:0_
example# 1853
substitute environ for self.environ [ self . environ ] .
0
example# 1854
substitute path_info for self.path_info [ self . path_info ] .
0
example# 1855
strip trailing _STR:0_ from the script_name string , remove first occurrence of _STR:0_ in path_info string , append second result to the first , separated with _STR:0_ , assign the result to self.path [ self . path ] .
1
'/' ||| _STR:0_
example# 1856
substitute environ for self.META [ self . META ] .
0
example# 1857
assign path_info to the value under the _STR:0_ key of the self.META [ self . META ] dictionary .
1
'PATH_INFO' ||| _STR:0_
example# 1858
assign script_name to the value under the _STR:0_ key of the self.META [ self . META ] dictionary .
1
'SCRIP_NAME' ||| _STR:0_
example# 1859
convert value under the _STR:0_ key of the environ dictionary to uppercase , substitute it for self.method [ self . method ] .
1
'REQUEST_METHOD' ||| _STR:0_
example# 1860
get the value under the _STR:0_ key of environ dictionary , if the key doesnt exist get the empty string , use it to call the cgi.parse_header [ cgi . parse_header ] method , assign the result to the _ and content_params respectively .
1
'CONTENT_TYPE' ||| _STR:0_
example# 1861
if string _STR:0_ is contained in content_params ,
1
'charset' ||| _STR:0_
example# 1862
try ,
0
example# 1863
get the value under the _STR:0_ key of content_params dictionary , use it to call the codec.lookup [ codec . lookup ] method .
1
'charset' ||| _STR:0_
example# 1864
if exception LookupError is caught ,
0
example# 1865
do nothing .
0
example# 1866
if not ,
0
example# 1867
get the value under the _STR:0_ key of content_params dictionary , substitute it for self.encoding [ self . encoding ] .
1
'charset' ||| _STR:0_
example# 1868
self._post_parse_error [ self . _post_parse_error ] is boolean False .
0
example# 1869
try ,
0
example# 1870
convert value under the _STR:0_ key of the environ dictionary to an integer , substitute it for content_length .
1
'CONTENT_LENGTH' ||| _STR:0_
example# 1871
if exception ValueError or TypeError is caught ,
0
example# 1872
content_length is integer 0 .
1
0.0 ||| _STR:0_
example# 1873
self._stream [ self . _stream ] is a class instance of a LimitedStream class , initialized with self.environ [ self . environ ] dictionary value under the _STR:0_ key , and content_length .
1
'wsgi.input' ||| _STR:0_
example# 1874
self._read_started [ self . _read_started ] is boolean False .
0
example# 1875
self.resolver_match [ self . resolver_match ] is None .
0
example# 1876
define the method _get_scheme with self class instance as argument .
0
example# 1877
return value under the _STR:0_ key of self.environ [ self . environ ] dictionary .
1
'wsgi.url_scheme' ||| _STR:0_
example# 1878
define the method _get_request with self class instance as argument .
0
example# 1880
if self does not have an _STR:0_ attribute ,
1
'_request' ||| _STR:0_
example# 1881
call the datastructures.MergeDict [ datastructures . MergeDict ] with self.POST [ self . POST ] and self.GET [ self . GET ] as arguments , assign the result to self._request [ self . _request ] .
0
example# 1882
return self._request [ self . _request ] .
0
example# 1883
decorator cached_property .
0
example# 1884
define method GET with self class instance as an argument .
0
example# 1885
call the get_bytes_from_wsgi function with self.environ [ self . environ ] , string _STR:0_ and empty string as arguments , substitute the return value for raw_query_string .
1
'QUERY_STRING' ||| _STR:0_
example# 1886
evaluate the http.QueryDict [ http . QueryDict ] method with raw_query_string and encoding set to self._encoding [ self . _encoding ] as arguments , return the result .
0
example# 1887
def _get_post method with self class instance as the argument .
0
example# 1888
if self does not has an _STR:0_ attribute .
1
'_post' ||| _STR:0_
example# 1889
call the self._load_post_and_files [ self . _load_post_and_files ] method .
0
example# 1890
return self._post [ self . _post ] .
0
example# 1891
define the _set_post method with self class instance and post as the arguments .
0
example# 1892
substitute post for self._post [ self . _post ] .
0
example# 1893
decorator cached_property .
0
example# 1894
define COOKIES method with self as the argument .
0
example# 1895
call get_str_from_wsgi function with self.environ [ self . environ ] , string _STR:0_ and empty string as arguments , substitute it for raw_cookie .
1
'HTTP_COOKIE' ||| _STR:0_
example# 1896
evaluate the function http.parse_cookie [ http . parse_cookie ] with raw_cookie as an argument , return the result .
0
example# 1897
define _get_files method with self class instance as the argument .
0
example# 1898
if self does not have _STR:0_ attribute ,
1
'_files' ||| _STR:0_
example# 1899
call the method self._load_post_and_files [ self . _load_post_and_files ] .
0
example# 1900
return self._files [ self . _files ] .
0
example# 1901
_get_post is a getter function and _set_post is a setter function for POST attribute of this class .
0
example# 1902
_get_files is getter function for FILES attribute of this class .
0
example# 1903
_get_request is getter function for REQUEST attribute of this class .
0
example# 1904
derive the WSGIHandler class from the base class base.BaseHandler [ base . BaseHandler ] .
0
example# 1905
evaluate function Lock ( ) assign the result to initLock .
0
example# 1906
substitute WSGIRequest for request_class .
0
example# 1907
define private method __call__ with self class instance , environ and start_response as the arguments .
0
example# 1908
if self._request_middleware [ self . _request_middleware ] is None ,
0
example# 1909
with self.initLock [ self . initLock ] ,
0
example# 1910
try ,
0
example# 1911
if self._request_middleware [ self . _request_middleware ] is None ,
0
example# 1912
call the self.load_middleware [ self . load_middleware ] method .
0
example# 1913
if exception is caught ,
0
example# 1914
self._request_middleware [ self . _request_middleware ] is None .
0
example# 1915
re raise an exception .
0
example# 1916
call the get_script_name function with environ as argument , use the result as an argument for call to the set_script_prefix function .
0
example# 1917
call the signals.request_started.send [ signals . request_started . send ] method with sender set to self.__class__ [ self . __class__ ] as argument .
0
example# 1918
try ,
0
example# 1919
call the self.request_class [ self . request_class ] method with environ as an argument , substitute the result for request .
0
example# 1920
if UnicodeDecodeError exception is caught ,
0
example# 1921
call the logger.warning [ logger . warning ] method with string _STR:0_ , exec_info set to sys.exec_info [ sys . exec_info ] ( ) and dictionary extra with one entry _STR:1_ is integer 400 , as arguments .
3
404 ||| _STR:2_
'Bad Request (UnicodeDecodeError)' ||| _STR:0_
'status_code' ||| _STR:1_
example# 1922
call the http.HttpResponseBadRequest [ http . HttpResponseBadRequest ] function , assign the result to the response .
0
example# 1923
if not ,
0
example# 1924
call the self.get_response [ self . get_response ] with request as the argument , substitute the result for response .
0
example# 1925
substitute self.__class__ [ self . __class__ ] for response._handler_class [ response . _handler_class ] .
0
example# 1926
replace ' % s ' in the string _STR:0_ with response.status_code [ response . status_code ] and response.reason_phrase [ response . reason_phrase ] , respectively , substitute it for status .
1
'%s %s' ||| _STR:0_
example# 1927
convert to k and v to strings for every k and v in return value of the response.item [ response . item ] method , response_headers is a list containing all the above iteration elements .
0
example# 1928
for every c in return value of the method response.cookies.values [ response . cookies . values ] ,
0
example# 1929
convert _STR:0_ to a string and convert the return value of method c.output [ c . output ] ( header=_STR:1_ ) call to a string , format the previous in a tuple , append the tuple to the response_headers .
2
'' ||| _STR:1_
'Set-Cookie' ||| _STR:0_
example# 1930
call the start_response function with force_str ( status ) method return value and response_headers as arguments .
0
example# 1931
return response .
0
example# 1932
define the get_path_info function with environ as the argument .
0
example# 1933
call the function get_bytes_from_wsgi with environ , string _STR:0_ and character _STR:1_ as arguments , substitute the result for path_info .
2
'/' ||| _STR:1_
'PATH_INFO' ||| _STR:0_
example# 1935
define get_script_name function with environ as an argument .
0
example# 1936
if settings.FORCE_SCRIPT_NAME [ settings . FORCE_SCRIPT_NAME ] is not None ,
0
example# 1937
evaluate the force_text function with settings.FORCE_SCRIPT_NAME [ settings . FORCE_SCRIPT_NAME ] as argument , return the result .
0
example# 1938
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for script_url .
1
'SCRIPT_URL' ||| _STR:0_
example# 1939
if script_url is false ,
0
example# 1940
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for script_url .
1
'REDIRECT_URL' ||| _STR:0_
example# 1941
if script_url is true ,
0
example# 1942
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for path_info .
1
'PATH_INFO' ||| _STR:0_
example# 1943
take all but the length of path_info last elements of script_url , substitute it for script_name .
0
example# 1944
if not ,
0
example# 1945
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for script_name .
1
'SCRIPT_NAME' ||| _STR:0_
example# 1947
define the function get_bytes_from_wsgi with environ , key and default as arguments .
0
example# 1948
convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the , default string value , substitute it for value .
0
example# 1950
define the get_str_from_wsgi function with environ , key and default as arguments .
0
example# 1951
convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the , default string value , substitute it for value .
0
example# 1953
from __future__ import unicode_literals into default name space .
0
example# 1954
from django.conf [ django . conf ] import settings into default name space .
0
example# 1955
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1956
from django.core.mail.utils [ django . core . mail . utils ] import CachedDnsName and DNS_NAME into default name space .
0
example# 1957
from django.core.mail.message [ django . core . mail . message ] import EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart , DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError and forbid_multi_line_headers into default name space .
0
example# 1958
__all__ is a list of strings , _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ , _STR:11_ , _STR:12_ , _STR:13_ and _STR:14_ .
15
'mail_managers' ||| _STR:14_
'get_connection' ||| _STR:10_
'SafeMIMEMultipart' ||| _STR:5_
'mail_admins' ||| _STR:13_
'send_mail' ||| _STR:11_
'forbid_multi_line_headers' ||| _STR:9_
'DEFAULT_ATTACHMENT_MIME_TYPE' ||| _STR:6_
'EmailMultiAlternatives' ||| _STR:3_
'send_mass_mail' ||| _STR:12_
'BadHeaderError' ||| _STR:8_
'SafeMIMEText' ||| _STR:4_
'DNS_NAME' ||| _STR:1_
'CachedDnsName' ||| _STR:0_
'make_msgid' ||| _STR:7_
'EmailMessage' ||| _STR:2_
example# 1959
define function get_connection with backend set to None , fail_silently set to boolean False and dictionary kwds as arguments .
0
example# 1960
call the function import_string with backend if exists or settings.EMAIL_BACKEND [ settings . EMAIL_BACKEND ] if not , store the result into klass .
0
example# 1961
call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments , return the result .
0
example# 1962
define send_mail funtion with subject , message , from_email , recipient_list , fail_silently set to boolean False ,
0
example# 1963
if connection exists dont modify it , if not call get_connection function with username set to auth_user , password set to auth_password , fail_silently set to fail_silently as arguments , assign it to connection .
0
example# 1964
call the EmailMultiAlternatives function with , subject , message , from_email , recipient_list and connection set to connection , as arguments , assign the result to mail .
0
example# 1965
if html_message is True ,
0
example# 1966
call the mail.attach_alternative [ mail . attach_alternative ] method with html_message and string _STR:0_ as arguments .
1
'text/html' ||| _STR:0_
example# 1967
return the evaluated result of the mail.send [ mail . send ] method .
0
example# 1968
define the function send_mass_mail with , datatuple , fail_silently set to False , auth_user set to None , auth_password set to None ,
0
example# 1969
if connection exists dont change it , if not call the get_connection function with username set to auth_user , password set to auth_password , fail_silently set to fail_silently as arguments , assign the result to connection .
0
example# 1970
call the EmailMessage function wit subject , message , sender , recipient and connection set to connection , for every subject , message , sender and recipient in datatuple , store the results in the messages list .
0
example# 1971
return evaluated result of the method connection.send_messages [ connection . send_messages ] with messages as argument .
0
example# 1972
define the function mail_admins with subject , message , fails_silently set to boolean False , connection set to None ,
0
example# 1973
if settings.ADMINS [ settings . ADMINS ] is false ,
0
example# 1974
return nothing .
0
example# 1975
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX [ settings . EMAIL_SUBJECT_PREFIX ] and subject converted to strings and concatenated , message , settings.SERVER_EMAIL [ settings . SERVER_EMAIL ] , list of second elements of a for every a in settings.Managers [ settings . Managers ] and connection set to connection , as arguments , assign the result to mail .
0
example# 1976
if html_message is true ,
0
example# 1977
call method mail.attach_alternative [ mail . attach_alternative ] as html_message and string _STR:0_ as arguments .
1
'text/hmtl' ||| _STR:0_
example# 1978
call the mail.send [ mail . send ] method with fail_silently=fail_silently as argument .
0
example# 1979
define the function mail_managers with subject , message , fails_silently set to boolean False , connection set to None ,
0
example# 1980
if settings.MANAGERS [ settings . MANAGERS ] does not exist ,
0
example# 1981
return nothing .
0
example# 1982
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX [ settings . EMAIL_SUBJECT_PREFIX ] and subject converted to strings and concatenated , message , settings.SERVER_EMAIL [ settings . SERVER_EMAIL ] , list of second elements of a for every a in settings.Managers [ settings . Managers ] and connection set to connection , as arguments , assign the result to mail .
0
example# 1983
if html_message is true ,
0
example# 1984
call the mail.attach_alternative [ mail . attach_alternative ] method with html_message and string _STR:0_ as arguments .
1
'text/html' ||| _STR:0_
example# 1985
call the mail.send [ mail . send ] method with fail_silently set to fail_silently as argument .
0
example# 1986
derive the class BaseEmailBackend from the object base class .
0
example# 1987
define the method __init__ with arguments : self , fail_silently set to boolean False and unpacked dictionary kwargs .
0
example# 1988
substitute fail_silently for self.fail_silently [ self . fail_silently ] .
0
example# 1989
define the method open with argument self .
0
example# 1990
do nothing .
0
example# 1991
define the method close with argument self .
0
example# 1992
do nothing
0
example# 1993
define the method __enter__ with argument self .
0
example# 1994
call the method self.open [ self . open ] .
0
example# 1995
return self .
0
example# 1996
define the method __exit__ with arguments : self , exc_type , exc_value and traceback .
0
example# 1997
call the method self.close [ self . close ] .
0
example# 1998
define the method send_messages with arguments self and email_messages .
0
example# 1999
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of BaseEmailBackend must override send_messages() method' ||| _STR:0_
example# 2000
import module sys .
0
example# 2001
import module threading .
0
example# 2002
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2003
from django.utils [ django . utils ] import six into default name space .
0
example# 2004
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2005
define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 2006
pop the value under the _STR:0_ key of the kwargs dictionary , if it exists replace it for self.stream [ self . stream ] , if not replace sys.stdout [ sys . stdout ] for self.stream [ self . stream ] .
1
'stream' ||| _STR:0_
example# 2007
call the method threading.RLock [ threading . RLock ] , substitute the result for self._lock [ self . _lock ] .
0
example# 2008
call the __init__ method from the base class of the EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 2009
define the method write_message with arguments self and message .
0
example# 2010
call the method message.message [ message . message ] , substitute the result for msg .
0
example# 2011
call the method msg.as_bytes [ msg . as_bytes ] , substitute the result for msg_data .
0
example# 2013
if method msg.get_charset [ msg . get_charset ] evaluates to true , call the get_output_charset method on the return value of the msg.get_charset [ msg . get_charset ] method , substitute the result for charset , otherwise if it is false , substitute the string _STR:0_ for charset .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 2014
call the method msg_data.decode [ msg_data . decode ] with argument charset , substitute the result for msg_data .
0
example# 2015
call the method self.stream.write [ self . stream . write ] with argument string _STR:0_ , with ' % s ' replaced with msg_data .
1
'%s\n' ||| _STR:0_
example# 2016
write 79 _STR:0_ characters into self.stream [ self . stream ] file stream .
2
797 ||| _STR:1_
'-' ||| _STR:0_
example# 2017
write a newline into a self.stream [ self . stream ] file stream .
0
example# 2018
define the method send_messages with arguments self and email_messages .
0
example# 2019
if email_messages is false ,
0
example# 2020
return .
0
example# 2021
msg_count is an integer 0 .
1
0.0 ||| _STR:0_
example# 2022
call the method self._lock [ self . _lock ] , with the result ,
0
example# 2023
try ,
0
example# 2024
call the method self.open [ self . open ] , substitute the result for stream_created .
0
example# 2025
for every message in email_messages ,
0
example# 2026
call the method self.write_message [ self . write_message ] with argument message .
0
example# 2027
call the method self.stream.flush [ self . stream . flush ] .
0
example# 2028
increment msg_count by one .
0
example# 2029
if stream_created is true ,
0
example# 2030
call the method self.close [ self . close ] .
0
example# 2031
if Exception exception is caught ,
0
example# 2032
if self.fail_silently [ self . fail_silently ] is boolean False ,
0
example# 2033
raise an exception .
0
example# 2034
return msg_count .
0
example# 2035
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2036
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2037
define the method send_messages with arguments self and email_messages .
0
example# 2038
create list out of email_messages , return the length of the list .
0
example# 2039
import module datetime .
0
example# 2040
import module os .
0
example# 2041
from django.conf [ django . conf ] import settings into default name space .
0
example# 2042
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 2043
from django.core.mail.backends.console [ django . core . mail . backends . console ] import EmailBackend as ConsoleEmailBackend into default name space .
0
example# 2044
from django.utils [ django . utils ] import six into default name space .
0
example# 2045
derive the class EmailBackend from the ConsoleEmailBackend base class .
0
example# 2046
define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 2047
self._fname [ self . _fname ] is None .
0
example# 2048
if _STR:0_ is contained in kwargs ,
1
'file_path' ||| _STR:0_
example# 2049
pop the value under the _STR:0_ key of kwargs dictionary , substitute it for self.file_path [ self . file_path ] .
1
'file_path' ||| _STR:0_
example# 2050
if not ,
0
example# 2051
get _STR:0_ from the settings , if it exists , substitute it for self.file_path [ self . file_path ] , if not substitute None for self.file_path [ self . file_path ] .
1
'EMAIL_FILE_PATH' ||| _STR:0_
example# 2052
if self.file_path [ self . file_path ] is not an instance of six.string_types [ six . string_types ] ,
0
example# 2053
raise an ImproperlyConfigured exception with argument string _STR:0_ , replace _STR:1_ with self.file_path [ self . file_path ] .
2
'Path for saving emails is invalid: %r' ||| _STR:0_
'%r' ||| _STR:1_
example# 2054
call the os.path.abspath [ os . path . abspath ] with argument self.file_path [ self . file_path ] , substitute the result for self.file_path [ self . file_path ] .
0
example# 2055
if self.file_path [ self . file_path ] file path exists and it is not a directory ,
0
example# 2056
raise an ImproperlyConfigured exception with argument string _STR:0_ , replace ' % s ' with self.file_path [ self . file_path ] .
1
'Path for saving email messages exists, but is not a directory: %s' ||| _STR:0_
example# 2057
otherwise if self.file_path [ self . file_path ] file path doesnt exists ,
0
example# 2058
try ,
0
example# 2059
call the os.makedirs [ os . makedirs ] with argument self.file_path [ self . file_path ] .
0
example# 2060
if OSError , renamed to err , is caught ,
0
example# 2061
raise an ImproperlyConfigured exception with argument string _STR:0_ , replace ' % s ' with self.file_path [ self . file_path ] and err , respectively .
1
'Could not create directory for saving email messages: %s (%s)' ||| _STR:0_
example# 2062
if self.file_path [ self . file_path ] file is not writable ,
0
example# 2063
raise an ImproperlyConfigured exception with argument string _STR:0_ , replace ' % s ' with self.file_path [ self . file_path ] .
1
'Could not write to directory: %s' ||| _STR:0_
example# 2064
set value under the _STR:0_ key of kwargs dictionary to None .
1
'stream' ||| _STR:0_
example# 2065
call the __init__ method of the base class of the EmailBackend class with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 2066
define the method write_message with arguments self and message .
0
example# 2067
call the as_bytes method on the return value of the message.message [ message . message ] method append to it _STR:0_ character , use it as the argument for the call to the self.stream.write [ self . stream . write ] method .
1
'\n' ||| _STR:0_
example# 2068
write 79 _STR:0_ characters into self.stream [ self . stream ] file stream .
2
797 ||| _STR:1_
'-' ||| _STR:0_
example# 2069
write a newline character into self.stream [ self . stream ] file stream .
0
example# 2070
define the method _get_filename with argument self .
0
example# 2071
if self._fname [ self . _fname ] is None :
0
example# 2072
call the strftime function with argument string _STR:0_ on the return value of the function datetime.datetime.now [ datetime . datetime . now ] , substitute the result for timestamp .
1
"%Y%m%d-%H%M%S" ||| _STR:0_
example# 2073
fname is a string _STR:0_ , with ' % s ' replaced by timestamp and absolute value of the return value of the function id with argument self , respectively .
1
"%s-%s.log" ||| _STR:0_
example# 2074
join self.file_path [ self . file_path ] and fname into a valid file path , substitute it for self._fname [ self . _fname ] .
0
example# 2075
return self._fname [ self . _fname ] .
0
example# 2076
define the method open with argument self .
0
example# 2077
if self.stream [ self . stream ] is None :
0
example# 2078
open the file in mode _STR:0_ and with file name obtained by calling the self._get_filename [ self . _get_filename ] method .
1
'ab' ||| _STR:0_
example# 2079
return boolean True .
0
example# 2080
return boolean True .
0
example# 2081
define the method close with argument self .
0
example# 2082
try ,
0
example# 2083
if self.stream [ self . stream ] is not None ,
0
example# 2084
call the self.stream.close [ self . stream . close ] function .
0
example# 2085
finally perform ,
0
example# 2086
self.stream [ self . stream ] is None .
0
example# 2087
from django.core [ django . core ] import mail into default name space .
0
example# 2088
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2089
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2090
define the method __init__ with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 2091
call the method __init__ from the base class of EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 2092
if mail doesnt have an _STR:0_ attribute ,
1
'outbox' ||| _STR:0_
example# 2093
mail.outbox [ mail . outbox ] is an empty list .
0
example# 2094
define the method send_messages with arguments self and messages .
0
example# 2095
msg_count is integer 0 .
1
0.0 ||| _STR:0_
example# 2096
for every message in messages ,
0
example# 2097
call the method message.message [ message . message ] .
0
example# 2098
increment mes_count by one .
0
example# 2099
call the method mail.outbox.extend [ mail . outbox . extend ] with messages .
0
example# 2100
return msg_count .
0
example# 2101
import module smtplib .
0
example# 2102
import module ssl .
0
example# 2103
import module threading .
0
example# 2104
from django.conf [ django . conf ] import settings into default name space .
0
example# 2105
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2106
from django.core.mail.utils [ django . core . mail . utils ] import DNS_NAME into default name space .
0
example# 2107
from django.core.mail.message [ django . core . mail . message ] import sanitize_address into default name space .
0
example# 2108
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2109
define the method __init__ with arguments : self , host set to None , port set to None , username set to None , password set to None , use_tls set to None , fail_silently set to False , use_ssl set to None , timeout set to None and unpacked dictionary kwargs .
0
example# 2110
call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently .
0
example# 2111
if host exists substitute it for self.host [ self . host ] , if not substitute settings.EMAIL_HOST [ settings . EMAIL_HOST ] for self.host [ self . host ] .
0
example# 2112
if port exists substitute it for self.host [ self . host ] , if not substitute settings.EMAIL_PORT [ settings . EMAIL_PORT ] for self.port [ self . port ] .
0
example# 2113
if username is None substitute settings.EMAIL_HOST_USER [ settings . EMAIL_HOST_USER ] for self.username [ self . username ] , if not substitute username for self.username [ self . username ] .
0
example# 2114
if password is None substitute settings.EMAIL_HOST_PASSWORD [ settings . EMAIL_HOST_PASSWORD ] for self.username [ self . username ] , if not substitute password for self.password [ self . password ] .
0
example# 2115
if use_tls is None substitute settings.EMAIL_USE_TLS [ settings . EMAIL_USE_TLS ] for self.username [ self . username ] , if not substitute use_tls for self.use_tls [ self . use_tls ] .
0
example# 2116
if use_ssl is None substitute settings.EMAIL_USE_SSL [ settings . EMAIL_USE_SSL ] for self.username [ self . username ] , if not substitute use_ssl for self.use_ssl [ self . use_ssl ] .
0
example# 2117
substitute timeout for self.timeout [ self . timeout ] .
0
example# 2118
if self.use_ssl [ self . use_ssl ] and self.use_tls [ self . use_tls ] are boolean True ,
0
example# 2119
raise an ValueError exception with argument string _STR:0_ .
1
"EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True." ||| _STR:0_
example# 2120
self.connection [ self . connection ] is None .
0
example# 2121
call the method threading.RLock [ threading . RLock ] , substitute the result for self._lock [ self . _lock ] .
0
example# 2122
define the method open with argument self .
0
example# 2123
if self.connection [ self . connection ] is true ,
0
example# 2124
return boolean False ,
0
example# 2125
substitute smtplib.SMTP_SSL [ smtplib . SMTP_SSL ] for connection_class if self.use_ssl [ self . use_ssl ] is true , if not substitute smtplib.SMTP [ smtplib . SMTP ] for connection_class .
0
example# 2127
if self.timeout [ self . timeout ] is not None ,
0
example# 2128
set value under the _STR:0_ key of the connection_params to self.timeout [ self . timeout ] .
1
'timeout' ||| _STR:0_
example# 2129
try ,
0
example# 2130
self.connection [ self . connection ] is a instance of a class contained in connection_class , instantiated with arguments : self.host [ self . host ] , self.port [ self . port ] , and unpacked dictionary connection_params .
0
example# 2131
if self.use_ssl [ self . use_ssl ] and self.use_tls [ self . use_tls ] are false ,
0
example# 2132
call the method self.connection.ehlo [ self . connection . ehlo ] .
0
example# 2133
call the method self.connection.starttls [ self . connection . starttls ] .
0
example# 2134
call the method self.connection.ehlo [ self . connection . ehlo ] .
0
example# 2135
if self.username [ self . username ] and self.password [ self . password ] are true ,
0
example# 2136
call the method self.connection.login [ self . connection . login ] with arguments self.username [ self . username ] and self.password [ self . password ] .
0
example# 2137
return boolean True .
0
example# 2138
if smtplib.SMTPException [ smtplib . SMTPException ] exception is caught ,
0
example# 2139
if self.fail_silently [ self . fail_silently ] is boolean False ,
0
example# 2140
raise an exception .
0
example# 2141
define the method close with argument self .
0
example# 2142
if self.connection [ self . connection ] is None ,
0
example# 2143
return nothing .
0
example# 2144
try ,
0
example# 2145
try ,
0
example# 2146
call the method self.connection.quit [ self . connection . quit ] .
0
example# 2147
if ssl.SSLError [ ssl . SSLError ] or smtplib.SMTPServerDisconnected [ smtplib . SMTPServerDisconnected ] exception occurred ,
0
example# 2148
call the method self.connection.close [ self . connection . close ] .
0
example# 2149
if smtplib.SMTPException [ smtplib . SMTPException ] exception is caught ,
0
example# 2150
if self.fail_silently [ self . fail_silently ] is boolean True ,
0
example# 2151
return nothing .
0
example# 2152
raise an exception .
0
example# 2153
finally perform ,
0
example# 2154
self.connection [ self . connection ] is None .
0
example# 2155
define the method send_messages with arguments self and email_message .
0
example# 2156
if email_messages is false ,
0
example# 2157
return nothing .
0
example# 2158
call the method self._lock [ self . _lock ] , with the return value ,
0
example# 2159
call the method self.open [ self . open ] , substitute the result for the new_conn_created .
0
example# 2160
if self.connection [ self . connection ] is false ,
0
example# 2161
return nothing .
0
example# 2162
num_sent is an integer 0 .
1
0.0 ||| _STR:0_
example# 2163
for every message in email_messages :
0
example# 2164
call the method self._send [ self . _send ] with argument message , substitute the result for sent .
0
example# 2165
if sent is true ,
0
example# 2166
increment num_sent by one .
0
example# 2167
if new_conn_created is true ,
0
example# 2168
call the self.close [ self . close ] method .
0
example# 2169
return num_sent .
0
example# 2170
define the method _send with arguments self and email_message .
0
example# 2171
call the email_message.recipients [ email_message . recipients ] method , if it evaluates to false ,
0
example# 2172
return boolean False .
0
example# 2173
call the function sanitize_address with arguments email_message.from_email [ email_message . from_email ] and email_message.encoding [ email_message . encoding ] , substitute the result for from_email .
0
example# 2174
call the function sanitize_address with arguments addr and email_message.encoding [ email_message . encoding ] , for every addr in return value of the function email_message.recipients [ email_message . recipients ] , store the results in a recipients list .
0
example# 2175
call the function email_message.message [ email_message . message ] , substitute the result for message .
0
example# 2176
try ,
0
example# 2177
call the method self.connection.sendmail [ self . connection . sendmail ] with arguments : from_email , recipients and return value of the function message.as_bytes [ message . as_bytes ] .
0
example# 2178
if smtplib.SMTPException [ smtplib . SMTPException ] exception is caught ,
0
example# 2179
if self.fail_silently [ self . fail_silently ] is false ,
0
example# 2180
raise an exception .
0
example# 2181
return boolean False .
0
example# 2182
return boolean True .
0
example# 2183
from __future__ import unicode_literals into default name space .
0
example# 2184
import module mimetypes .
0
example# 2185
import module os .
0
example# 2186
import module random .
0
example# 2187
import module sys .
0
example# 2188
import module time .
0
example# 2189
from email import charset as Charset , encoders as Encoders , message_from_string and generator .
0
example# 2190
from email.message [ email . message ] import Message into default name space .
0
example# 2191
from email.mime.text [ email . mime . text ] import MIMEText into default name space .
0
example# 2192
from email.mime.multipart [ email . mime . multipart ] import MIMEMultipart into default name space .
0
example# 2193
from email.mime.base [ email . mime . base ] import MIMEBase into default name space .
0
example# 2194
from email.mime.message [ email . mime . message ] import MIMEMessage into default name space .
0
example# 2195
from email.header [ email . header ] import Header into default name space .
0
example# 2196
from email.utils [ email . utils ] import formatdate , getaddresses , formataddr and parseaddr into default name space .
0
example# 2197
from django.conf [ django . conf ] import settings into default name space .
0
example# 2198
from django.core.mail.utils [ django . core . mail . utils ] import DNS_NAME into default name space .
0
example# 2199
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 2200
from django.utils [ django . utils ] import six into default name space .
0
example# 2203
DEFAULT_ATTACHMENT_MIME_TYPE is a string _STR:0_ .
1
'application/octet-stream' ||| _STR:0_
example# 2204
derive the class BadHeaderError from the ValueError base class .
0
example# 2205
do nothing .
0
example# 2206
define the function make_msgid with argument idstring set to None .
0
example# 2207
call the function time.time [ time . time ] , substitute the result for timeval .
0
example# 2208
call the function time.gmtime [ time . gmtime ] with argument timeval , use string _STR:0_ and the previous result as an argument for the call to the time.strftime [ time . strftime ] function , substitute the result for utcdate .
1
'%Y%m%d%H%M%S' ||| _STR:0_
example# 2209
try ,
0
example# 2210
call the function os.getpid [ os . getpid ] , substitute it for pid .
0
example# 2211
if AttributeError exception is caught ,
0
example# 2212
pid is integer 1 .
1
1.1 ||| _STR:0_
example# 2213
call the function random.randrange [ random . randrange ] with argument integer 100000 , substitute the result for randint .
1
101 ||| _STR:0_
example# 2214
if idstring is None ,
0
example# 2215
idstring is an empty string .
0
example# 2216
if not ,
0
example# 2217
append idstring to the _STR:0_ character , substitute it for idstring .
1
'.' ||| _STR:0_
example# 2218
substitute DNS_NAME for idhost .
0
example# 2219
msgid is a string _STR:0_ , replace ' % s ' with utcdate , pid , randint , idstring and idhost , respectively .
1
'<%s.%s.%s%s@%s>' ||| _STR:0_
example# 2220
return msgid .
0
example# 2221
ADDRESS_HEADERS is a set containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ and _STR:10_ .
11
'cc' ||| _STR:4_
'resent-sender' ||| _STR:7_
'resent-from' ||| _STR:6_
'to' ||| _STR:3_
'sender' ||| _STR:1_
'reply-to' ||| _STR:2_
'resent-bcc' ||| _STR:10_
'bcc' ||| _STR:5_
'resent-cc' ||| _STR:9_
'from' ||| _STR:0_
'resent-to' ||| _STR:8_
example# 2222
define the function forbid_multi_line_headers with arguments : name , val and encoding .
0
example# 2223
if encoding does not exists substitute it for settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] .
0
example# 2224
call the function force_text with argument val , substitute it for val .
0
example# 2225
if characters _STR:0_ or _STR:1_ are contained in val ,
2
'\r' ||| _STR:1_
'\n' ||| _STR:0_
example# 2226
raise an BadHeaderError exception with argument string _STR:0_ , where _STR:1_ are replaced by val and name , respectively .
2
'%r' ||| _STR:1_
"Header values can't contain newlines (got %r for header %r)" ||| _STR:0_
example# 2227
try ,
0
example# 2228
call the method val.encode [ val . encode ] with argument string _STR:0_ .
1
'ascii' ||| _STR:0_
example# 2229
if UnicodeEncodeError exception is caught ,
0
example# 2230
convert name to lower case , if it is contained in ADDRESS_HEADERS , s
0
example# 2231
call the function sanitize_address with arguments addr and encoding , for every addr in return value of the getadresses function with tuple containing val as argument , join all the results into a string separated by _STR:0_ , substitute the result for val .
1
', ' ||| _STR:0_
example# 2232
if not ,
0
example# 2233
call the encode function on the Header class instance , created with arguments val and encoding , substitute the result for val .
0
example# 2234
if not ,
0
example# 2235
if name converted to lower case equals to string _STR:0_ ,
1
'subject' ||| _STR:0_
example# 2236
call the encode function on the Header class instance , created with argument val , substitute the result for val .
0
example# 2237
return name converted to a string and val .
0
example# 2238
define the function sanitize_address with arguments addr and encoding .
0
example# 2239
if addr is a instance of six.string_types [ six . string_types ] ,
0
example# 2240
call the parseaddr function with return value of the force_text with argument addr , as argument , substitute the result for addr .
0
example# 2241
nm and addr are addr .
0
example# 2242
try ,
0
example# 2243
call the encode function on the Header class instance , created with arguments nm and encoding , substitute the result for nm .
0
example# 2244
if UnicodeEncodeError exception is caught ,
0
example# 2245
call the encode function on the Header class instance , created with arguments nm and string _STR:0_ , substitute the result for nm .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 2246
try ,
0
example# 2247
call the addr.encode [ addr . encode ] method with string _STR:0_ as an argument .
1
'ascii' ||| _STR:0_
example# 2248
if UnicodeEncodeError exception is caught ,
0
example# 2249
if character _STR:0_ is contained in addr ,
1
'@' ||| _STR:0_
example# 2251
instantiate Header class with localpart and encoding , convert it to a string , substitute the result for localpart .
0
example# 2252
call the decode function with argument string _STR:0_ on the return value of the method domain.encode [ domain . encode ] with argument string _STR:1_ substitute the result for domain .
2
'ascii' ||| _STR:0_
'idna' ||| _STR:1_
example# 2253
join localpart and domain in a string separated by _STR:0_ character , substitute it for addr .
1
'@' ||| _STR:0_
example# 2254
if not ,
0
example# 2255
call the encode function on the Header class instance , created with arguments addr and encoding , substitute the result for addr .
0
example# 2257
derive the class MIMEMixin .
0
example# 2258
define the method as_string with arguments self and unixfrom set to boolean False .
0
example# 2259
fp is a instance of a class six.StringIO [ six . StringIO ] .
0
example# 2260
g is an instance of a class generator.Generator [ generator . Generator ] called with fp and mangle_from_ set to False .
0
example# 2261
call the method g.flatten [ g . flatten ] with arguments self and unixfrom set to unixfrom .
0
example# 2262
call the method fp.getvalue [ fp . getvalue ] , return the result .
0
example# 2264
substitute as_string for as_bytes .
0
example# 2265
if not ,
0
example# 2266
define the method as_bytes with arguments self and unixfrom set to boolean False .
0
example# 2267
fp is a instance of a class six.BytesIO [ six . BytesIO ] .
0
example# 2268
g is an instance of a class generator.BytesGenerator [ generator . BytesGenerator ] called with fp and mangle_from_ set to False .
0
example# 2269
call the method g.flatten [ g . flatten ] with arguments self and unixfrom set to unixfrom .
0
example# 2270
call the method fp.getvalue [ fp . getvalue ] , return the result .
0
example# 2271
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class .
0
example# 2272
define the method __setitem__ with arguments self , name and val .
0
example# 2274
call the method MIMEMessage.__setitem__ [ MIMEMessage . __setitem__ ] with arguments self , name and val .
0
example# 2275
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class .
0
example# 2276
define the __init__ method with arguments : self , text , subtype and charset .
0
example# 2277
substitute charset for self.encoding [ self . encoding ] .
0
example# 2278
if charset equals to string _STR:0_ ,
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 2280
delete the value under the _STR:0_ key of self dictionary .
1
'Content-Transfer-Encoding' ||| _STR:0_
example# 2285
if not ,
0
example# 2287
call the method self.replace_header [ self . replace_header ] with argument string _STR:0_ , _STR:1_ , where ' % s ' symbols are replaced by : subtype and charset , respectively .
2
'text/%s; charset="%s"' ||| _STR:1_
'Content-Type' ||| _STR:0_
example# 2288
if not ,
0
example# 2290
define the method __setitem__ with arguments self , name and val .
0
example# 2292
call the method MIMEText.__setitem__ [ MIMEText . __setitem__ ] with arguments self , name and val .
0
example# 2293
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class .
0
example# 2295
substitute encoding for self.encoding [ self . encoding ] .
0
example# 2297
define the method __setitem__ with arguments self , name and val .
0
example# 2299
call the method MIMEMultipart.__setitem__ [ MIMEMultipart . __setitem__ ] with arguments self , name and val .
0
example# 2300
derive the class EmailMessage from the object base class .
0
example# 2301
content_subtype is a string _STR:0_ .
1
'plain' ||| _STR:0_
example# 2302
mixed_subtype is a string _STR:0_ .
1
'mixed' ||| _STR:0_
example# 2303
encoding is None .
0
example# 2304
define the method __init__ with 10 arguments : self , subject set to an empty string , body set to an empty string ,
1
101 ||| _STR:0_
example# 2305
if to is true ,
0
example# 2306
if to is not an six.string_types [ six . string_types ] instance raise an error with message string _STR:0_ .
1
'"to" argument must be a list or tuple' ||| _STR:0_
example# 2307
put to into a list , assign it to self.to [ self . to ] .
0
example# 2308
if not ,
0
example# 2309
self.to [ self . to ] is an empty list .
0
example# 2310
if cc is true ,
0
example# 2311
if cc is not an six.string_types [ six . string_types ] instance raise an error with message string _STR:0_ .
1
'"cc" argument must be a list or tuple' ||| _STR:0_
example# 2312
put cc into a list , assign it to self.cc [ self . cc ] .
0
example# 2313
if not ,
0
example# 2314
self.cc [ self . cc ] is an empty list .
0
example# 2315
if bcc is true ,
0
example# 2316
if bcc is not an six.string_types [ six . string_types ] instance raise an error with message string _STR:0_ .
1
'"bcc" argument must be a list or tuple' ||| _STR:0_
example# 2317
put bcc into a list , assign it to self.bcc [ self . bcc ] .
0
example# 2318
if not ,
0
example# 2319
self.bcc [ self . bcc ] is an empty list .
0
example# 2320
if from_email exists substitute from_email for self.from_email [ self . from_email ] , if not substitute settings.DEFAULT_FROM_EMAIL [ settings . DEFAULT_FROM_EMAIL ] for self.from_email [ self . from_email ] .
0
example# 2321
substitute subject for self.subject [ self . subject ] .
0
example# 2322
substitute body for self.body [ self . body ] .
0
example# 2323
if attachments exists substitute it for self.attachments [ self . attachments ] , if not attachments is an empty list .
0
example# 2324
if headers exists substitute it for self.extra_headers [ self . extra_headers ] , if not extra_headers is an empty dictionary .
0
example# 2325
substitute connection for self.connection [ self . connection ] .
0
example# 2326
define the method get_connection with arguments self and fail_silently set to boolean False .
0
example# 2327
from django.core.mail [ django . core . mail ] import get_connection into default name space .
0
example# 2328
if self.connection [ self . connection ] is false ,
0
example# 2329
call the function get_connection with argument fail_silently set to fail_silently , substitute it for self.connection [ self . connection ] .
0
example# 2330
return self.connection [ self . connection ] .
0
example# 2331
define the method message with argument self .
0
example# 2332
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2333
msg is a instance of a SafeMIMEText class created with arguments : self.body [ self . body ] , self.content_subtype [ self . content_subtype ] and encoding .
0
example# 2334
call the self._create_message [ self . _create_message ] method with argument msg , substitute it for msg .
0
example# 2335
substitute self.subject [ self . subject ] for value under the _STR:0_ key of msg dictionary .
1
'Subject' ||| _STR:0_
example# 2336
call the method self.extra_headers.get [ self . extra_headers . get ] with string _STR:0_ and self.from_email [ self . from_email ] as arguments , substitute the result for value under the _STR:0_ key of msg dictionary .
1
'From' ||| _STR:0_
example# 2337
call the method self.extra_headers.get [ self . extra_headers . get ] with arguments : string _STR:0_ and joined string from self.to [ self . to ] elements separated by _STR:1_ , substitute the result for value under the _STR:0_ key of msg dictionary .
2
', ' ||| _STR:1_
'To' ||| _STR:0_
example# 2338
if self.cc [ self . cc ] is true ,
0
example# 2339
join elements of self.cc [ self . cc ] into a string separated by _STR:0_ , substitute the result for value under the _STR:1_ key of msg dictionary .
2
'Cc' ||| _STR:1_
', ' ||| _STR:0_
example# 2340
call the key.lower [ key . lower ] method for every key in self.extra_headers [ self . extra_headers ] , join the results into a header_names .
0
example# 2341
if _STR:0_ is not in header_names ,
1
'date' ||| _STR:0_
example# 2342
call the formatdate function , substitute it for value under the _STR:0_ key of msg dictionary .
1
'Date' ||| _STR:0_
example# 2343
if message-id ' is not in header_names ,
0
example# 2344
call the make_msgid function , substitute it for value under the _STR:0_ key of msg dictionary .
1
'Message-ID' ||| _STR:0_
example# 2345
for every name and value in return value of the method self.extra_headers.items [ self . extra_headers . items ] ,
0
example# 2346
convert name to lower case if it equals to string _STR:0_ or 'to ,
1
'from' ||| _STR:0_
example# 2347
skip this loop execution ,
0
example# 2348
substitute value for value under name key of msg dictionary .
0
example# 2349
return msg .
0
example# 2350
define the method recipients with argument self .
0
example# 2351
add together self.to [ self . to ] , self.cc [ self . cc ] and self.bcc [ self . bcc ] , return the result .
0
example# 2352
define the method send with arguments self and fail_silently set to boolean False .
0
example# 2353
call the method self.recipients [ self . recipients ] , if it evaluates to false ,
0
example# 2354
return an integer 0 .
1
0.0 ||| _STR:0_
example# 2355
call the method self.get_connection [ self . get_connection ] with argument fail_silently , on the result call the method send_messages with one argument : list containing self , return the result .
0
example# 2357
if filename is an instance of MIMEBase ,
0
example# 2358
if content is not None raise an error .
0
example# 2359
if mimetype is not None raise an error .
0
example# 2360
append filename to the self.attachments [ self . attachments ] list .
0
example# 2361
if not ,
0
example# 2362
if content is not None raise an error .
0
example# 2364
define the method attach_file with arguments self , path and mimetype set to None .
0
example# 2365
call the os.path.basename [ os . path . basename ] with path as argument , substitute the result for filename .
0
example# 2366
open file named path in _STR:0_ mode , with file descriptor as f ,
1
'rb' ||| _STR:0_
example# 2367
read the whole file f , substitute the result for content .
0
example# 2368
call the method self.attach [ self . attach ] with arguments filename , content and mimetype .
0
example# 2369
define the method _create_message with arguments self and msg .
0
example# 2370
call the method self._create_attachments [ self . _create_attachments ] with argument msg , return the result .
0
example# 2371
define the method _create_attachments with arguments self and msg .
0
example# 2372
if self.attachments [ self . attachments ] is true ,
0
example# 2373
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2374
substitute msg for body_msg .
0
example# 2375
msg is an instance of a class SafeMIMEMultipart , created with arguments : _subtype set to self.mixed_subtype [ self . mixed_subtype ] and encoding set to encoding .
0
example# 2376
if self.body [ self . body ] is true ,
0
example# 2377
call the method msg.attach [ msg . attach ] with an argument body_msg .
0
example# 2378
for every attachment in self.attachments [ self . attachments ] ,
0
example# 2379
if attachment is an instance of MIMEBase ,
0
example# 2380
call the method msg.attach [ msg . attach ] with an argument attachment .
0
example# 2381
if not ,
0
example# 2382
call the method self._create_attachment [ self . _create_attachment ] with an unpacked list attachment as an argument , use the result as an argument for the call to the msg.attach [ msg . attach ] method .
0
example# 2383
return msg .
0
example# 2384
define the method _create_mime_attachment with arguments self , content and mimetype .
0
example# 2386
if basetype equals a string _STR:0_ ,
1
'text' ||| _STR:0_
example# 2387
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2388
attachment is an instance of a class SafeMIMEText , created with arguments : content , subtype and encoding .
0
example# 2389
otherwise if basetype equals a string _STR:0_ and subtype equals a string _STR:1_ ,
3
'rfc822' ||| _STR:1_
'message' ||| _STR:0_
828 ||| _STR:2_
example# 2390
if content is an instance of a EmailMessage class ,
0
example# 2391
call the method content.message [ content . message ] , substitute the result for content .
0
example# 2392
otherwise if content is not an instance of Message class ,
0
example# 2393
call the message_from_string function with an argument content , substitute the result for content .
0
example# 2394
attachment is an instance of a class SafeMIMEMessage , created with the arguments content and subtype .
0
example# 2395
if not ,
0
example# 2396
attachment is an instance of a class MIMEBase , created with the arguments basetype and subtype .
0
example# 2397
call the method attachment.set_payload [ attachment . set_payload ] with an argument content .
0
example# 2398
call the method Encoders.encode_base64 [ Encoders . encode_base64 ] with an argument attachment .
1
646 ||| _STR:0_
example# 2399
return attachment .
0
example# 2401
if mimetype is None ,
0
example# 2402
call the mimetypes.guess_type [ mimetypes . guess_type ] with an argument filename , assign the result to the mimetype and _ , respectively .
0
example# 2403
if mimetype is None ,
0
example# 2404
substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype .
0
example# 2405
call the method self._create_mime_attachment [ self . _create_mime_attachment ] with the arguments content and mimetype , substitute the result for attachment .
0
example# 2406
if filename is true ,
0
example# 2407
try ,
0
example# 2408
call the method filename.encode [ filename . encode ] with an argument string _STR:0_
1
'ascii' ||| _STR:0_
example# 2409
if UnicodeEncodeError exception is caught ,
0
example# 2411
call the method filename.encode [ filename . encode ] with an argument string _STR:0_ , substitute the result for filename .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 2414
return attachment .
0
example# 2415
derive the class EmailMultiAlternatives from the EmailMessage base class .
0
example# 2416
alternative_subtype is a string _STR:0_ .
1
'alternative' ||| _STR:0_
example# 2417
define the method __init__ with 11 arguments : self , subject set to an empty string , body set to an empty string ,
1
111 ||| _STR:0_
example# 2419
if alternatives exists substitute it for self.alternatives [ self . alternatives ] , if not self.alternatives [ self . alternatives ] is an empty list .
0
example# 2420
define the method attach_alternative with arguments self , content and mimetype .
0
example# 2421
if content is None , raise an error .
0
example# 2422
if mimetype is None , raise an error .
0
example# 2424
define the method _create_message with arguments self and msg .
0
example# 2425
call the method self._create_alternatives [ self . _create_alternatives ] with an argument msg , use it as an argument for the call to the self._create_attachments [ self . _create_attachments ] method , return the result .
0
example# 2426
define the method _create_alternatives with arguments self and msg .
0
example# 2427
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2428
if self.alternatives [ self . alternatives ] is true ,
0
example# 2429
substitute msg for body_msg .
0
example# 2430
msg is an instance of a class SafeMIMEMultipart , created with the arguments : _subtype set to self.alternative_subtype [ self . alternative_subtype ] and encoding set to encoding .
0
example# 2431
if self.body [ self . body ] is true ,
0
example# 2432
call the msg.attach [ msg . attach ] with an argument body_msg .
0
example# 2433
for every alternative in self.alternatives [ self . alternatives ] ,
0
example# 2434
call the method self._create_mime_attachment [ self . _create_mime_attachment ] with unpacked list alternative as an argument , use the result as an argument for the call to the msg.attach [ msg . attach ] method .
0
example# 2435
return msg .
0
example# 2436
import module socket .
0
example# 2437
derive class CachedDnsName from the object base class .
0
example# 2438
define the method __str__ with argument self .
0
example# 2439
evaluate the self.get_fqdn [ self . get_fqdn ] method , return the result .
0
example# 2440
define the method get_fqdn with argument self .
0
example# 2441
if self doesnt have an attribute _STR:0_ ,
1
'_fqdn' ||| _STR:0_
example# 2442
call the function socket.getfqdn [ socket . getfqdn ] , substitute the result for self._fqdn [ self . _fqdn ] .
0
example# 2443
return self._fqdn [ self . _fqdn ] .
0
example# 2444
DNS_NAME is a instance of CachedDnsName class .
0
example# 2445
from __future__ import unicode_literals into default name space .
0
example# 2446
import module collections .
0
example# 2447
from importlib import import_module into default name space .
0
example# 2448
import module os .
0
example# 2449
import module sys .
0
example# 2450
import module django .
0
example# 2451
from django.apps [ django . apps ] import apps into default name space .
0
example# 2452
from django.conf [ django . conf ] import settings into default name space .
0
example# 2453
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 2454
from django.core.management.base [ django . core . management . base ] import BaseCommand , CommandError , CommandParser and handle_default_options into default name space .
0
example# 2455
from django.core.management.color [ django . core . management . color ] import color_style into default name space .
0
example# 2456
from django.utils [ django . utils ] import lru_cache into default name space .
0
example# 2457
from django.utils [ django . utils ] import six into default name space .
0
example# 2458
define the function find_commands with an argument management_dir .
0
example# 2459
join management_dir and string _STR:0_ into a file path name , substitute it for command_dir .
1
'commands' ||| _STR:0_
example# 2460
try ,
0
example# 2462
if OSError exception is caught ,
0
example# 2463
return an empty list .
0
example# 2464
define the function load_command_class with arguments : app_name and name .
0
example# 2465
replace ' % s ' in string _STR:0_ with app_name and name , respectively , use it as an result for the call to the import_module function , substitute the result for module .
1
'%s.management.commands.%s' ||| _STR:0_
example# 2466
return an instance of the module.Command [ module . Command ] class .
0
example# 2467
decorator lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None .
0
example# 2468
define the function get_commands .
0
example# 2469
commands is an dictionary containing elements : string _STR:0_ for every name in the function find_commands return value , called with first element of __path__ as an argument .
1
'django.core' ||| _STR:0_
example# 2470
if settings.configured [ settings . configured ] is false ,
0
example# 2471
return commands .
0
example# 2472
for every app_config in reversed list created out of the return value of the function apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 2473
join app_config.path [ app_config . path ] and string _STR:0_ into a file path , substitute it for path .
1
'management' ||| _STR:0_
example# 2474
call the method commands.update [ commands . update ] , with an argument dictionary containing entries : app_config_name for name , for every name in return value of the function find_commands , called with an argument path .
0
example# 2475
return commands .
0
example# 2477
try ,
0
example# 2478
call the function get_commands , substitute the value under the name key of the return value , for app_name .
0
example# 2479
if KeyError exception is caught ,
0
example# 2480
raise an CommandError exception with an argument string _STR:0_ , with _STR:1_ replaced by name .
2
"Unknown command: %r" ||| _STR:0_
'%r' ||| _STR:1_
example# 2481
if app_name is an instance of BaseCommand ,
0
example# 2482
substitute app_namefor command .
0
example# 2483
if not ,
0
example# 2484
call the function load_command_class with arguments : app_name and name , substitute the result for command .
0
example# 2485
all the method command.create_parser [ command . create_parser ] with arguments : empty and name , substitute the result for parser .
0
example# 2486
if command.use_argparse [ command . use_argparse ] is true ,
0
example# 2487
call the method parser.parse_args [ parser . parse_args ] with an argument args set to args , substitute the result for defaults .
0
example# 2488
create dictionary out of the unpacked dictionary options , using defaults._get_kwargs [ defaults . _get_kwargs ] as a mapping function , substitute the result for defaults .
0
example# 2489
if not ,
0
example# 2490
call the method parser.parse_args [ parser . parse_args ] with an arguments args set to an empty list , assign the result for defaults and _ , respectively .
0
example# 2491
create dictionary out of the unpacked dictionary options , using defaults.__dict__ [ defaults . __dict__ ] as a mapping function , substitute the result for defaults .
0
example# 2492
call the command.execute [ command . execute ] method with arguments : unpacked list args and unpacked dictionary defaults , return the result .
0
example# 2493
derive the class ManagementUtility from object base class .
0
example# 2494
define the method __init__ with arguments : self class instance and argv set to None .
0
example# 2495
if argv is true , substitue it for self.argv [ self . argv ] , if not substitute sys.argv [ sys . argv ] for self.argv [ self . argv ] .
0
example# 2496
call the function os.path.basename [ os . path . basename ] with first element of self.argv [ self . argv ] as an argument , substitute the result for self.prog_name [ self . prog_name ] .
0
example# 2497
self.settings_exception [ self . settings_exception ] is None .
0
example# 2498
define the method main_help_text with arguments : self class instance and commands_only set to boolean False .
0
example# 2499
if commands_only is true ,
0
example# 2500
call the function get_commands , call the method keys on the result , substitute sorted result for usage .
0
example# 2501
if not ,
0
example# 2503
call the method collections.defaultdict [ collections . defaultdict ] with a argument : lambda function without arguments that returns an empty list , substitute the result for commands_dict .
0
example# 2504
for every name and app in return value of the function six.iteritems [ six . iteritems ] calle with return argument of function get_commands as an arugment ,
0
example# 2505
if app equals a string _STR:0_ ,
1
'django.core' ||| _STR:0_
example# 2506
app is a string _STR:0_
1
'django' ||| _STR:0_
example# 2507
if not ,
0
example# 2508
call the method app.rpartition [ app . rpartition ] with an argument _STR:0_ , substitute last element of the result for app .
1
'.' ||| _STR:0_
example# 2509
append name to the value of under the app key of the commands_dict .
0
example# 2510
call the color_style function , substitute the result for style .
0
example# 2511
for every app in sorted return value of the commands_dict.keys [ commands_dict . keys ] function ,
0
example# 2512
append an empty string to usage .
0
example# 2513
call the style.NOTICE [ style . NOTICE ] method with an argument string _STR:0_ , where ' % s ' is replaced with app , append the result to usage .
1
"[%s]" ||| _STR:0_
example# 2514
for every name in sorted value under the app key of the commands_dict dictionary ,
0
example# 2515
append string _STR:0_ , where ' % s ' is replaced by name to the usage .
1
"    %s" ||| _STR:0_
example# 2516
if self.settings_exception [ self . settings_exception ] is not None ,
0
example# 2517
call the method style.NOTICE [ style . NOTICE ] with an argument string _STR:0_ , where ' % s ' is replaced by self.settings_exception [ self . settings_exception ] , append the result to usage .
1
"Note that only Django core commands are listed as settings are not properly configured (error: %s)." ||| _STR:0_
example# 2518
join usage elements in a string separated by newline characters , return it .
0
example# 2519
define the method fetch_command , with arguments self and subcommand .
0
example# 2520
call the function get_commands , substitute it for commands .
0
example# 2521
try ,
0
example# 2522
substitute value under the subcommand key of the commands dictionary for app_name .
0
example# 2523
if KeyError exception is caught ,
0
example# 2524
call settings.INSTALLED_APPS [ settings . INSTALLED_APPS ] .
0
example# 2525
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ , where _STR:1_ is replaced with subcommand and ' % s ' is replaced with self.prog_name [ self . prog_name ] .
2
"Unknown command: %r\nType '%s help' for usage.\n" ||| _STR:0_
'%r' ||| _STR:1_
example# 2526
call the function sys.exit [ sys . exit ] with an argument integer 1 .
1
1.1 ||| _STR:0_
example# 2527
if app_name is an instance of BaseCommands .
0
example# 2528
substitute app_name for klass .
0
example# 2529
if not ,
0
example# 2530
call the function load_command_class with arguments app_name and subcommand , substitute the result for klass .
0
example# 2531
return klass .
0
example# 2532
define the method autocomplete with an argument self .
0
example# 2533
if string _STR:0_ is not contained in os.environ [ os . environ ] ,
1
'DJANGO_AUTO_COMPLETE' ||| _STR:0_
example# 2534
return nothing .
0
example# 2535
slit by whitespace the value under the _STR:0_ key of the os.environ [ os . environ ] dictionary , substitute the result without the first element for cwords .
1
'COMP_WORDS' ||| _STR:0_
example# 2536
convert to an integer value under the _STR:0_ key of the os.environ [ os . environ ] dictionary , substitute it for cword .
1
'COMP_CWORD' ||| _STR:0_
example# 2537
try ,
0
example# 2539
if IndexError exception is caugh ,
0
example# 2540
curr is an empty string .
0
example# 2541
call the function get_commands , convert the result to a list , append string _STR:0_ to it , substitute it for subcommands .
1
'help' ||| _STR:0_
example# 2544
filter all the subcommands element through the lambda function with an argument x , that evaluates the method x.startswith [ x . startswith ] , with an argument curr , sort the result and join it in a list separated with blank spaces , print it to the standard output .
0
example# 2545
otherwise if first element of cwords is contanied in subcommands and is not equal to string _STR:0_ ,
1
'help' ||| _STR:0_
example# 2546
call the method self.fetch_command [ self . fetch_command ] with first element of cwords as an argument , substitute it for subcommand_cls .
0
example# 2547
if first element of cwords equals a string _STR:0_ ,
1
'runfcgi' ||| _STR:0_
example# 2548
from django.core.servers.fastcgi [ django . core . servers . fastcgi ] import FASTCGI_OPTIONS into default namespace ,
0
example# 2551
try ,
0
example# 2552
call the method apps.get_app_configs [ apps . get_app_configs ] , substitute the result for app_configs .
0
example# 2554
if ImportError exception is caught ,
0
example# 2555
do nothing .
0
example# 2557
if subcommand_cls.use_argparse [ subcommand_cls . use_argparse ] is true ,
0
example# 2562
split x by character _STR:0_ and append first element of the result to the prev_opts list . for every opt in options , if first element of opt is not contained in prev_opts , append opt to the list , substitute it for options .
1
'=' ||| _STR:0_
example# 2564
for every option in options ,
0
example# 2565
substitute first element of options for opt_label .
0
example# 2566
if second element of options is true ,
0
example# 2567
append _STR:0_ to opt_label .
1
'=' ||| _STR:0_
example# 2568
print opt_label to the standard output .
0
example# 2570
define the method execute with an argument self ,
0
example# 2571
try ,
0
example# 2572
substitute first element of self.argv [ self . argv ] for subcommand .
0
example# 2573
if IndexError exception is caught ,
0
example# 2574
subcommand is a string _STR:0_ .
1
'help' ||| _STR:0_
example# 2576
call the method parser.add_argument [ parser . add_argument ] with an argument string _STR:0_ .
1
'--settings' ||| _STR:0_
example# 2577
call the method parser.add_argument [ parser . add_argument ] with an argument string _STR:0_ .
1
'--pythonpath' ||| _STR:0_
example# 2578
call the method parser.add_argument [ parser . add_argument ] with arguments : string _STR:0_ and nargs set to _STR:1_ .
2
'*' ||| _STR:1_
'args' ||| _STR:0_
example# 2579
try ,
0
example# 2580
call the method parser.parse_known_args [ parser . parse_known_args ] wiht an argument self.argv [ self . argv ] , without the first two elements , assign the result for options , and args , respectively .
0
example# 2581
call the method handle_default_options with an argument options .
0
example# 2582
if CommandError exception is caught ,
0
example# 2583
do nothing .
0
example# 2584
no_settings_commands is a list containing entries : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ and _STR:8_ .
9
'--help' ||| _STR:2_
'startproject' ||| _STR:8_
'startapp' ||| _STR:7_
'version' ||| _STR:1_
'-h' ||| _STR:4_
'help' ||| _STR:0_
'compilemessages' ||| _STR:5_
'--version' ||| _STR:3_
'makemessages' ||| _STR:6_
example# 2585
try ,
0
example# 2586
call the settings.INSTALLED_APPS [ settings . INSTALLED_APPS ] .
0
example# 2587
if ImproperlyConfigured renamed to exc , exception is caught ,
0
example# 2588
substitute exc for self.settings_exception [ self . settings_exception ] ,
0
example# 2589
if subcommand is contained in no_settings_commands ,
0
example# 2590
call the method settings.configure [ settings . configure ] .
0
example# 2591
if settings.configured [ settings . configured ] is true ,
0
example# 2592
call the method django.setup [ django . setup ] .
0
example# 2593
call the method self.autocomplete [ self . autocomplete ] .
0
example# 2594
if subcommand equals to a string _STR:0_ .
1
'help' ||| _STR:0_
example# 2595
if string _STR:0_ is contained in args ,
1
'--commands' ||| _STR:0_
example# 2596
call the method self.main_help_text [ self . main_help_text ] with an argument commands_only set to boolean True , append new line to it , write it to sys.stdout [ sys . stdout ] .
0
example# 2598
call the method self.main_help_text [ self . main_help_text ] append new line to it , write it to sys.stdout [ sys . stdout ] .
0
example# 2599
if not ,
0
example# 2601
otherwise if subcommand equals a string _STR:0_ or self.argv [ self . argv ] , without the first element equals a list containing a string _STR:1_
2
'version' ||| _STR:0_
'--version' ||| _STR:1_
example# 2602
call the method django.get_version [ django . get_version ] append new line to it , write it to sys.stdout [ sys . stdout ] .
0
example# 2604
and a list containing a string _STR:0_ , call the method self.main_help_text [ self . main_help_text ] , append new line to it , write it to sys.stdout [ sys . stdout ] .
1
'-h' ||| _STR:0_
example# 2605
if not ,
0
example# 2606
call the method self.fetch_command [ self . fetch_command ] with an argument command , call the method run_from_argv on the result with an argument self.argv [ self . argv ] .
0
example# 2607
define the function execute_from_command_line with an argument argv set to None .
0
example# 2608
utility is a instance of ManagementUtility class , created with an argument argv .
0
example# 2609
call the method utility.execute [ utility . execute ] .
0
example# 2610
from __future__ import unicode_literals into default name space .
0
example# 2611
import module os .
0
example# 2612
import module sys .
0
example# 2613
import module warnings .
0
example# 2614
from argparse import ArgumentParser into default name space .
0
example# 2615
from optparse import OptionParser into default name space .
0
example# 2616
import module django .
0
example# 2617
from django.core [ django . core ] import checks into default name space .
0
example# 2618
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 2619
from django.core.management.color [ django . core . management . color ] import color_style and no_style into default name space .
0
example# 2620
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space .
2
202 ||| _STR:1_
191 ||| _STR:0_
example# 2621
from django.utils.encoding [ django . utils . encoding ] import force_st into default name space .
0
example# 2622
derive the class CommandError from the base class Exception .
0
example# 2623
do nothing .
0
example# 2624
derive the CommandParser class from the ArgumentParser base class .
0
example# 2625
define the method __init__ with arguments : self , cmd and unpacked dictionary kwargs .
0
example# 2626
substitute cmd for self.cmd [ self . cmd ] .
0
example# 2627
call the method __init__ from the base class of the CommandParser class , with unpacked dictionary kwargs as argument .
0
example# 2629
if self.cmd [ self . cmd ] has an attribute _STR:0_ and next statement is not true : args is true or any arg doesnt start with _STR:1_ for arg in args ,
2
'-' ||| _STR:1_
'missing_args_message' ||| _STR:0_
example# 2630
call the method self.error [ self . error ] with an argument self.cmd.missing_args_message [ self . cmd . missing_args_message ] .
0
example# 2631
call the parse_args method with arguments args and namespace , from the base class of the CommandParser class .
0
example# 2632
define the method error with arguments self and message .
0
example# 2633
if self.cmd._called_from_command_line [ self . cmd . _called_from_command_line ] is true ,
0
example# 2634
call the method error with an argument message , from the base class of the class CommandParser .
0
example# 2635
if not ,
0
example# 2636
raise an CommandError exception with an argument string _STR:0_ , with ' % s ' replaced by message .
1
"Error: %s" ||| _STR:0_
example# 2637
define the function handle_default_options with an argument options .
0
example# 2638
if options.settings [ options . settings ] is true ,
0
example# 2639
substitute options.settings [ options . settings ] for value under the _STR:0_ key of the os.environ [ os . environ ] dictionary .
1
'DJANGO_SETTINGS_MODULE' ||| _STR:0_
example# 2640
if options.pythonpath [ options . pythonpath ] is true ,
0
example# 2641
insert options.pythonpath [ options . pythonpath ] at the beginning of sys.path [ sys . path ] .
0
example# 2642
derive the OutputWrapper class from the object base class .
0
example# 2644
substitute out for self._out [ self . _out ] .
0
example# 2645
substitute None for self.style_func [ self . style_func ] .
0
example# 2646
if out has an _STR:0_ argument and return value of the function out.isatty [ out . isatty ] is true ,
1
'isatty' ||| _STR:0_
example# 2647
substitute style_func for self.style_func [ self . style_func ] .
0
example# 2648
substitute ending for self.ending [ self . ending ] .
0
example# 2649
define the method __getattr__ with arguments self and name .
0
example# 2650
get name attribute of the self._out [ self . _out ] object , return it .
0
example# 2652
if ending is None substitute self.ending [ self . ending ] for ending .
0
example# 2653
if ending is true and msg doesnt end with ending ,
0
example# 2654
append ending to msg .
0
example# 2656
call the function style_func with an argument msg , use the result as an argument for the call to the function force_str , use the result as an argument for the call to the function self._out.write [ self . _out . write ] .
0
example# 2657
derive the BaseCommand class from the object base class .
0
example# 2658
options_list is an empty tuple .
0
example# 2659
help is an empty string .
0
example# 2660
args is an empty string .
0
example# 2661
_called_from_command_line is boolean False .
0
example# 2662
can_import_settings is boolean True .
0
example# 2663
output_transaction is boolean False .
0
example# 2664
leave_locale_alone is boolean False .
0
example# 2665
define the method __init__ with an argument self .
0
example# 2666
call the function color_style , substitute the result for self.style [ self . style ] .
0
example# 2667
if self has an _STR:0_ attribute , has_old_option is boolean True , otherwise it is boolean False .
1
'requires_model_validation' ||| _STR:0_
example# 2668
if self has an _STR:0_ attribute , has_new_option is boolean True , otherwise it is boolean False .
1
'requires_system_checks' ||| _STR:0_
example# 2669
if has_old_option is true ,
0
example# 2671
if has_old_option and has_new_option are both true ,
0
example# 2672
raise an ImproperlyConfigured exception wiht an argument string _STR:0_
1
'Command %s defines both "requires_model_validation" ' ||| _STR:0_
example# 2673
_STR:0_ , replace ' % s ' for self.__class__.__name__ [ self . __class__ . __name__ ] . call the method self.requires_system_checks [ self . requires_system_checks ] with an argument : self.requires_system_checks [ self . requires_system_checks ] if has_new_option is true , or if it is false , but has_old_option is true use self.requires_model_validation [ self . requires_model_validation ] , if they are both false use boolean True as an argument .
1
'and "requires_system_checks", which is illegal. Use only "requires_system_checks".' ||| _STR:0_
example# 2674
property decorator ,
0
example# 2675
define the method use_argparse with an argument self ,
0
example# 2676
convert self.option_list [ self . option_list ] into a boolean , return the inverted value .
0
example# 2677
define the method get_version with an arguments self .
0
example# 2678
call the function django.get_version [ django . get_version ] , return the result .
0
example# 2679
define the method usage with arguments self and subcommand .
0
example# 2680
substitute ' % s ' in the string _STR:0_ with subcommand and self.args [ self . args ] , respectively , substitute it for usage .
1
'%%prog %s [options] %s' ||| _STR:0_
example# 2681
if self.help [ self . help ] is true ,
0
example# 2683
if not ,
0
example# 2684
return usage .
0
example# 2686
if self.use_argparse [ self . use_argparse ] is false ,
0
example# 2688
parser is an instance of the object OptionParser , created with arguments : prog set to prog_name , usage set to return value of the method self.usage [ self . usage ] called with an argument subcommand , version set to return value of the method self.get_version [ self . get_version ] .
0
example# 2694
for every opt in self.option_list [ self . option_list ] ,
0
example# 2695
call the method parser.add_option [ parser . add_option ] with an argument opt .
0
example# 2696
if not ,
0
example# 2704
if self.args [ self . args ] is true ,
0
example# 2706
call the method self.add_arguments [ self . add_arguments ] with an argument parser .
0
example# 2707
return parser
0
example# 2708
define the method add_arguments with an argument self and parser .
0
example# 2709
do nothing
0
example# 2711
call the method self.create_parser [ self . create_parser ] with arguments prog_name and subcommand .
0
example# 2712
call the method parser.print_help [ parser . print_help ] .
0
example# 2713
define the method run_from_argv with arguments self and argv .
0
example# 2714
self._called_from_command_line [ self . _called_from_command_line ] is boolean True .
0
example# 2715
call the method self.create_parser [ self . create_parser ] with first and second element of argv , substitute the result for parser .
0
example# 2716
if self.use_argparse [ self . use_argparse ] is true ,
0
example# 2718
call the function vars with an argument options , substitute the result for cmd_options .
0
example# 2719
if _STR:0_ is contained in options ,
1
'args' ||| _STR:0_
example# 2720
substitute options.args [ options . args ] for args .
0
example# 2721
delete value under the _STR:0_ key of the cmd_options dictionary .
1
'args' ||| _STR:0_
example# 2722
if not ,
0
example# 2723
args is an empty tuple .
0
example# 2724
if not ,
0
example# 2726
call the function vars with an argument options , substitute the result for cmd_options .
0
example# 2727
call the function handle_default_options with an argument options .
0
example# 2728
try ,
0
example# 2730
if Exception , renamed to e , exception is caught ,
0
example# 2731
if options.traceback [ options . traceback ] is true or e is not CommandError instance ,
0
example# 2732
raise an exception .
0
example# 2733
if it exists , get _STR:0_ attribute of self , substitute it for stderr , if not , stderr is an instance of OutputWrapper class , created with arguments sys.stderr [ sys . stderr ] and self.style.ERROR [ self . style . ERROR ] .
1
'stderr' ||| _STR:0_
example# 2734
replace ' % s ' in string _STR:0_ with e.__class__.__name__ [ e . __class__ . __name__ ] and e , respectively , write it to the stderr stream .
1
'%s: %s' ||| _STR:0_
example# 2735
call the function sys.exit [ sys . exit ] with an argument integer 1 .
1
1.1 ||| _STR:0_
example# 2737
self.stdout [ self . stdout ] is an instance of OutputWrapper class created with an argument : value under the _STR:0_ key of the options dictionary , if the key doesnt exists use sys.stdout [ sys . stdout ] as an argument .
1
'stdout' ||| _STR:0_
example# 2738
if value under the _STR:0_ key of the options dictionary .
1
'no_color' ||| _STR:0_
example# 2739
call the function no_style , substitute the result for self.style [ self . style ] .
0
example# 2740
self.stderr [ self . stderr ] is an OutputWrapper object instance , created with value under the _STR:0_ key of the options dictionary as an argument , if the key doesnt exists use sys.stderr [ sys . stderr ] as an argument .
1
'stderr' ||| _STR:0_
example# 2741
if not ,
0
example# 2743
if self.can_import_settings [ self . can_import_settings ] is true ,
0
example# 2744
from django.conf [ django . conf ] import settings into default namespace ,
0
example# 2745
saved_locale is None .
0
example# 2746
if self.leave_locale_alone [ self . leave_locale_alone ] is false ,
0
example# 2747
if self.can_import_settings [ self . can_import_settings ] is false ,
0
example# 2748
raise an CommandError exception with an argument string , _STR:0_ _STR:1_ , replace ' % s ' with self.leave_locale_alone [ self . leave_locale_alone ] and self.can_import_settings [ self . can_import_settings ] .
2
"Incompatible values of 'leave_locale_alone' " ||| _STR:0_
"(%s) and 'can_import_settings' (%s) command options." ||| _STR:1_
example# 2749
from django.utils [ django . utils ] import translation into default namespace .
0
example# 2750
call the method translation.get_language [ translation . get_language ] , substitute th result for saved_locale .
0
example# 2751
call the method translation.activate [ translation . activate ] with an argument string _STR:0_ .
1
'en-us' ||| _STR:0_
example# 2752
try ,
0
example# 2753
if self.requires_system_checks [ self . requires_system_checks ] is true and values under the _STR:0_ and _STR:1_ keys of the options dictionary are false ,
2
'skip_checks' ||| _STR:1_
'skip_validation' ||| _STR:0_
example# 2754
call the method self.check [ self . check ] ,
0
example# 2756
if output is true ,
0
example# 2757
if self.output_transaction [ self . output_transaction ] is true ,
0
example# 2758
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default namespace .
0
example# 2759
get the value under the _STR:0_ key of the options dictionary , if it doesnt exists use the DEFAULT_DB_ALIAS to address an element from the connections list , substitute it for connection .
1
'database' ||| _STR:0_
example# 2760
call the method connection.ops.start_transaction_sql [ connection . ops . start_transaction_sql ] , if it evaluates to true ,
0
example# 2761
call the method connection.ops.start_transaction_sql [ connection . ops . start_transaction_sql ] , use the result as an argument for the call to the method self.style.SQL_KEYWORD [ self . style . SQL_KEYWORD ] , write the result to the self.stdout [ self . stdout ] stream .
0
example# 2762
write output to self.stdout [ self . stdout ] stream .
0
example# 2763
if self.output_transaction [ self . output_transaction ] is true ,
0
example# 2764
call the method connection.ops.end_transaction_sql [ connection . ops . end_transaction_sql ] , use the result as the argument for the call to the method self.style.SQL_KEYWORD [ self . style . SQL_KEYWORD ] , append the result to the _STR:0_ string , write it to self.stdout [ self . stdout ] .
1
'\n' ||| _STR:0_
example# 2765
finally perform ,
0
example# 2766
if saved_locale is not None ,
0
example# 2767
call the method translation.activate [ translation . activate ] with an argument saved_locale .
0
example# 2769
if app_config is None ,
0
example# 2770
app_configs is not None .
0
example# 2771
if not ,
0
example# 2772
app_configs is a list containing app_config .
0
example# 2776
msg is an empty string .
0
example# 2777
visible_issue_count is an integer 0 .
1
0.0 ||| _STR:0_
example# 2778
if all_issues is true ,
0
example# 2779
append e to debugs list for every e in all_issues , if e.level [ e . level ] is lesser than checks.INFO [ checks . INFO ] and result of the method e.is_silenced [ e . is_silenced ] in false .
0
example# 2780
append e to infos list for every e in all_issues , if checks.INFO [ checks . INFO ] is lesser or equal to e.level [ e . level ] , and e.level [ e . level ] is lesser than checks.WARNING [ checks . WARNING ] and result of the method e.is_silenced [ e . is_silenced ] in false .
0
example# 2781
append e to warnings list for every e in all_issues , if checks.WARNING [ checks . WARNING ] is lesser than or equal to e.level [ e . level ] , and e.level [ e . level ] is lesser than checks.WARNING [ checks . WARNING ] and result of the method e.is_silenced [ e . is_silenced ] in false .
0
example# 2782
append e to errors list for every e in all_issues , if checks.ERROR [ checks . ERROR ] is lesser than or equal to e.level [ e . level ] , and e.level [ e . level ] is lesser than checks.CRITICAL [ checks . CRITICAL ] .
0
example# 2783
append e to criticals list for every e in all_issues , if checks.CRITICAL [ checks . CRITICAL ] is lesser than or equal to e.level [ e . level ] .
0
example# 2785
infos , _STR:0_ for every issues and group_name in sorted_issues ,
1
'INFOS' ||| _STR:0_
example# 2786
if issues is true ,
0
example# 2787
increment visible_issue_count for length of issues .
0
example# 2788
if e.is_serious [ e . is_serious ] method evaluates to true , call the function color_style , on the result call the method ERROR with result of the force_str called with an argument e , if not call the function color_style on the result call the method ERROR with result of the force_str called with an argument e , for every e in issues , formatted is a tuple containing the previous result .
0
example# 2789
sort elements formatted , join them in the list separated with newline character , substitute the result for formatted .
0
example# 2790
substitute ' % s ' in the string _STR:0_ , with group_name and formatted , substitute the result for msg .
1
'\n%s:\n%s\n' ||| _STR:0_
example# 2791
if msg is true ,
0
example# 2792
replace ' % s ' in string _STR:0_ with msg , substitute it for msg .
1
"System check identified some issues:\n%s" ||| _STR:0_
example# 2793
if display_num_errors is true ,
0
example# 2794
if msg is true ,
0
example# 2795
append newline character to msg .
0
example# 2797
if any element in the return value of the e.is_serious [ e . is_serious ] method is true , and if return value of the method e.is_silenced [ e . is_silenced ] is false , for every e in all_issues .
0
example# 2798
raise an CommandError with argument msg ,
0
example# 2799
otherwise if msg and visible_issue_count are true ,
0
example# 2800
write msg to self.stderr [ self . stderr ] stream .
0
example# 2801
otherwise if msg is true ,
0
example# 2802
write msg to self.stderr [ self . stderr ] stream .
0
example# 2804
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'subclasses of BaseCommand must provide a handle() method' ||| _STR:0_
example# 2805
derive the AppCommand class from the BaseCommand base class .
0
example# 2806
missing_args_message is an string _STR:0_ .
1
"Enter at least one application label." ||| _STR:0_
example# 2807
define the method add_arguments with self and parser as arguments .
0
example# 2810
from django.apps [ django . apps ] import apps into default name space .
0
example# 2811
try ,
0
example# 2812
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_lable , for every app_label in app_labels , append the results to app_configs list .
0
example# 2813
if LookupError or ImportError , renamed to e , exceptions are caught ,
0
example# 2814
raise an CommandError with an argument string _STR:0_ , with ' % s ' replaced by e .
1
"%s. Are you sure your INSTALLED_APPS setting is correct?" ||| _STR:0_
example# 2815
output is an empty list .
0
example# 2816
for eery app_config in app_configs ,
0
example# 2817
call the self.handle_app_config [ self . handle_app_config ] method with app_config and options as arguments , substitute the result for app_output .
0
example# 2818
if app_output is true ,
0
example# 2819
append app_output to output .
0
example# 2820
join elements of output into a string , separated by newline characters , return it .
0
example# 2822
try ,
0
example# 2823
substitute self.handle_app [ self . handle_app ] for handle_app .
0
example# 2824
if AttributeError exception is caught ,
0
example# 2825
raise an NotImplementedError with an argument string _STR:0_ .
1
"Subclasses of AppCommand must provide a handle_app_config() method." ||| _STR:0_
example# 2826
if not ,
0
example# 2828
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 2829
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced by app_config.label [ app_config . label ] .
1
"AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module." ||| _STR:0_
example# 2831
derive the LabelCommand class from the BaseCommand base class .
0
example# 2832
label is a string _STR:0_
1
'label' ||| _STR:0_
example# 2833
substitute string _STR:0_ , with ' % s ' replaced by label , for missing_args_message .
1
"Enter at least one %s." ||| _STR:0_
example# 2834
define the method add_arguments with arguments self and parser .
0
example# 2837
output is an empty list .
0
example# 2838
for every label in labels ,
0
example# 2840
if label_output is true ,
0
example# 2841
append label_output to output .
0
example# 2842
join output into a string , separated by newline characters , return it .
0
example# 2844
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'subclasses of LabelCommand must provide a handle_label() method' ||| _STR:0_
example# 2845
derive the NoArgsCommand class from the BaseCommand base class .
0
example# 2846
args is an empty string .
0
example# 2847
define the method __init__ with an argument self .
0
example# 2849
call the __init__ method from the base class of the NoArgsCommand class .
0
example# 2851
if args is true ,
0
example# 2852
raise an CommandError exception with an argument string _STR:0_ .
1
"Command doesn't accept any arguments" ||| _STR:0_
example# 2853
call the self.handle_noargs [ self . handle_noargs ] method with with unpacked dictionary options as argument , return the result .
0
example# 2855
raise an NotImplementedError with an argument string _STR:0_ .
1
'subclasses of NoArgsCommand must provide a handle_noargs() method' ||| _STR:0_
example# 2856
import module os .
0
example# 2857
import module sys .
0
example# 2858
from django.utils [ django . utils ] import termcolors into default name space .
0
example# 2859
define the function supports_color , without arguments .
0
example# 2860
substitute sys.platform [ sys . platform ] for plat .
0
example# 2861
evaluate the logic expression , plat does not equals to string _STR:0_ , and plat does not equals to string _STR:1_ or string _STR:2_ is in os.environ [ os . environ ] , substitute the evaluated boolean for supported_platform .
4
'Pocket PC' ||| _STR:0_
'ANICON' ||| _STR:2_
'win32' ||| _STR:1_
323 ||| _STR:3_
example# 2862
if sys.stdout [ sys . stdout ] has an attribute named _STR:0_ and call to the sys.stdout.isatty [ sys . stdout . isatty ] returns boolean True , substitute True for is_a_tty .
1
'isatty' ||| _STR:0_
example# 2863
if supported_platform is False or is_a_tty is False ,
0
example# 2864
return boolean False .
0
example# 2865
return boolean True .
0
example# 2866
define function color_style , without input arguments .
0
example# 2867
call the function supports_color , if evaluates to False ,
0
example# 2868
substitute return value of function no_style for style .
0
example# 2869
if not ,
0
example# 2870
get the value under the key _STR:0_ of os.environ [ os . environ ] dictionary , if key doesnt exists return empty string , assign the result to DJANGO_COLORS .
1
'DJANGO_COLORS' ||| _STR:0_
example# 2871
call the function termcolors.parse_color_setting [ termcolors . parse_color_setting ] with DJANGO_COLORS as an argument , assign the result to color_settings .
0
example# 2872
if color_setting is True ,
0
example# 2873
define class dummy .
0
example# 2874
do nothing .
0
example# 2875
style is an instance of the dummy class .
0
example# 2876
for every role in termcolors.PALETTES [ termcolors . PALETTES ] list at the index termcolors.NOCOLOR_PALETTE [ termcolors . NOCOLOR_PALETTE ] ,
0
example# 2877
assign the value of the dictionary color_settings under the key role to format , if key doesnt exist assign the empty dictionary .
0
example# 2878
sets the role attribute of the style object to the value of the call to the termcolors.make_style [ termcolors . make_style ] function with dictionary format as an argument .
0
example# 2879
substitute style.ERROR [ style . ERROR ] for style.ERROR_OUTPUT [ style . ERROR_OUTPUT ] .
0
example# 2880
if not ,
0
example# 2881
substitute return value of function no_style for style .
0
example# 2882
return style .
0
example# 2883
define function no_style , without input arguments .
0
example# 2884
define class dummy .
0
example# 2885
define private method __getattr__ with self class instance and attr as the arguments .
0
example# 2886
create lambda identity function which returns x for input parameter x , return the function .
0
example# 2887
return an instance of a dummy class .
0
example# 2888
from __future__ import unicode_literals into default name space .
0
example# 2889
from django.apps [ django . apps ] import apps into default name space .
0
example# 2890
from django.core [ django . core ] import checks into default name space .
0
example# 2891
from django.core.checks.registry [ django . core . checks . registry ] import registry into default name space .
0
example# 2892
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 2893
derive the class Command from the BaseCommand base class .
0
example# 2894
help is a string _STR:0_ .
1
"Checks the entire Django project for potential problems." ||| _STR:0_
example# 2895
requires_system_checks is boolean False .
0
example# 2896
define the method add_arguments with arguments self and parser .
0
example# 2900
define method handle with arguments self , unapcked list app_labels and unpacked dictionary options .
0
example# 2901
if value under the _STR:0_ key of options dictionay is true ,
1
'list_tags' ||| _STR:0_
example# 2902
call the method registry.tags_available [ registry . tags_available ] , sort the result and join it into a string , separate by newlines , write it to self.stdout [ self . stdout ] .
0
example# 2903
return nothing .
0
example# 2904
if app_labels is true ,
0
example# 2905
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label , for every app_label in app_labels , append the results to a list , substitute the resulting list for app_config .
0
example# 2906
if not ,
0
example# 2907
app_configs is None .
0
example# 2908
get the value under the _STR:0_ key of the options dictionary , if it exists substitute it for tags , if not , tags is None .
1
'tags' ||| _STR:0_
example# 2909
if tags exists and if all elements in the return value of the method checks.tag_exists [ checks . tag_exists ] called with an argument tag ,
0
example# 2910
for every tag in tags , are false , for every tag in tags , if return value of the method checks.tag_exists [ checks . tag_exists ] called with an argument tag , evaluates to false , use tag as an argument to call the iterator method next , substitute the result for invalid_tag .
0
example# 2911
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with invalid_tag .
1
'There is no system check with the "%s" tag.' ||| _STR:0_
example# 2912
call the method self.check [ self . check ] with arguments : app_configs set to app_configs , tags set to tags , display_num_errors set to boolean True .
0
example# 2913
from __future__ import unicode_literals into default name space .
0
example# 2914
import module codecs .
0
example# 2915
import module glob .
0
example# 2916
import module os .
0
example# 2917
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 2918
from django.core.management.utils [ django . core . management . utils ] import find_command and popen_wrapper into default name space .
0
example# 2919
from django.utils._os [ django . utils . _os ] import npath and upath into default name space .
0
example# 2920
define the function has_bom with fn as argument .
0
example# 2921
open the file fn in read mode , with file descriptor as f ,
0
example# 2923
evaluate the boolean expression , if first three characters of sample equals to string of bytes '\xef\xbb\xbf\ ' , of if sample starts with codecs.BOM_UTF16_LE [ codecs . BOM_UTF16_LE ] or sample starts with codecs.BOM_UTF16_BE [ codecs . BOM_UTF16_BE ] , return the evaluated boolean expression .
1
161 ||| _STR:0_
example# 2924
define the function is_writable with path as argument ,
0
example# 2925
try ,
0
example# 2926
with open file path in append mode ,
0
example# 2927
call the os.utime [ os . utime ] unction , with path and None as arguments .
0
example# 2928
if IOError or OSError exceptions occurred ,
0
example# 2929
return boolean False .
0
example# 2930
return boolean True .
0
example# 2931
derive class Command from base class BaseCommand .
0
example# 2932
help is string _STR:0_ .
1
'Compiles .po files to .mo files for use with builtin gettext support.' ||| _STR:0_
example# 2933
requires_system_checks is boolean False .
0
example# 2934
leave_locale_alone is boolean True .
0
example# 2935
program is string _STR:0_
1
'msgfmt' ||| _STR:0_
example# 2936
program_options is list containing string _STR:0_ .
1
'--check-format' ||| _STR:0_
example# 2937
define method add_arguments with self class instance and parser as arguments .
0
example# 2938
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , string _STR:1_ , dest set to string _STR:2_ , action set to string _STR:3_ , default as an empty list and help as an string _STR:4_ .
5
'locale' ||| _STR:2_
'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.' ||| _STR:4_
'--locale' ||| _STR:0_
'append' ||| _STR:3_
'-l' ||| _STR:1_
example# 2939
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , string _STR:1_ , dest set to string _STR:2_ , action set to string _STR:3_ , default as an empty list and help as an string _STR:4_ .
5
'Locales to exclude. Default is none. Can be used multiple times.' ||| _STR:4_
'-x' ||| _STR:1_
'append' ||| _STR:3_
'exclude' ||| _STR:2_
'--exclude' ||| _STR:0_
example# 2940
define the handle method with self class instance and dictionary **options as arguments .
0
example# 2941
get the value under the key _STR:0_ of the options dictionary , substitute it for locale .
1
'locale' ||| _STR:0_
example# 2942
get the value under the key _STR:0_ of the options dictionary , substitute it for exclude .
1
'exclude' ||| _STR:0_
example# 2943
get the value under the key _STR:0_ of the options dictionary , convert it to an integer , substitute it for exclude .
1
'exclude' ||| _STR:0_
example# 2944
if evaluation of the function find_command with self.program [ self . program ] as argument equals to None ,
0
example# 2945
raise CommandError exception , with sring _STR:0_ as argument , substitute ' % s ' with self.program [ self . program ] .
2
0.0 ||| _STR:1_
"Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." ||| _STR:0_
example# 2946
basedirs is a list containing tuple with strings , _STR:0_ and _STR:1_ .
2
'conf/locale' ||| _STR:0_
'locale' ||| _STR:1_
example# 2947
if value under the _STR:0_ key of os.environ [ os . environ ] dictionary exists .
1
'DJANGO_SETTINGS_MODULE' ||| _STR:0_
example# 2948
from django.conf [ django . conf ] import settings into default name space .
0
example# 2949
call function update with path as the argument , for every path in settings.LOCALE_PATHS [ settings . LOCALE_PATHS ] , extend basedirs list with previous items .
0
example# 2950
create a list out of basedir elements for which function os.path.isdir [ os . path . isdir ] returns true , apply the os.path.abspath [ os . path . abspath ] function on every element , and put the results in a list , basedir is set of previous list elements .
0
example# 2951
if basedirs is empty ,
0
example# 2952
raise CommandError exception with string _STR:0_ , as argument .
1
"This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified." ||| _STR:0_
example# 2953
all_locales is an empty string .
0
example# 2954
for every basedir in basedirs ,
0
example# 2955
locale_dirs is a list of elements from the list of path names that maths the basedir path with _STR:0_ wild card characters for which call to the os.path.isdir [ os . path . isdir ] returned true , assign it to locale_dirs .
1
'/*' ||| _STR:0_
example# 2956
extend all_locales list with the elements of locale_dirs list on which os.path.basename [ os . path . basename ] function was applied .
0
example# 2957
take locale or all_locales , whichever is not empty , respectively , and substitute it for locales .
0
example# 2958
locales is relative complement of set exclude in set locales .
0
example# 2959
for every basedir in basedirs ,
0
example# 2960
if locales in not empty ,
0
example# 2961
join basedir , l and string _STR:0_ into a path separated by _STR:1_ for every l in locales , assign the list to dirs .
2
'/' ||| _STR:1_
'LC_MESSAGES' ||| _STR:0_
example# 2962
if not ,
0
example# 2963
dirs is a list containing basedir .
0
example# 2964
locations is an empty list .
0
example# 2965
for every ldir in dirs ,
0
example# 2966
for dirpath , dirnames and filenames , respectively , in directory tree tuple starting from the ldir ,
0
example# 2967
extend locations with tuple containing dirpath and f , for every f in filenames , only if it ends with string _STR:0_ .
1
'.po' ||| _STR:0_
example# 2968
if locations is not empty ,
0
example# 2969
call the self.compile_messages [ self . compile_messages ] with locations as argument ,
0
example# 2970
define compile_messages method with self class instance and locations as a arguments .
0
example# 2971
for every i and tuple containing dirpath and f , in enumerated list of locations ,
0
example# 2973
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument , replacing all the occurrences of ' % s ' with f and dirpath , respectively .
1
'processing file %s in %s\n' ||| _STR:0_
example# 2974
po_path is a string containing joined directory path from dirpath and f .
0
example# 2975
evaluate function has_bom with po_path as argument .
0
example# 2976
raise CommandError exception with string _STR:0_ , with ' % s ' replaced with po_path , as argument .
2
-8- ||| _STR:1_
"The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM." ||| _STR:0_
example# 2977
call os.path.splitext [ os . path . splitext ] function with po_path as argument , substitute the first element of the result for base_path .
0
example# 2979
call the self.stderr.write [ self . stderr . write ] , with string _STR:0_ as argument , with ' % s ' replaced by dirpath .
1
"The po files under %s are in a seemingly not writable location. mo files will not be updated/created." ||| _STR:0_
example# 2980
return nothing .
0
example# 2981
extend self.program [ self . program ] list with self.program_options [ self . program_options ] , string _STR:0_ ,
1
'-o' ||| _STR:0_
example# 2982
return value of the npath function with string _STR:0_ appended to the base_path as argument , and return value of the npath function with string _STR:1_ appended to the base_path as argument , substitute it for args . call the popen_wrapper with args as the argument , assign the result to the output , errors and status , respectively .
2
'.mo' ||| _STR:0_
'.po' ||| _STR:1_
example# 2983
if status is True ,
0
example# 2984
if errors is True ,
0
example# 2985
msg is a string _STR:0_ , with ' % s ' replaced by self.program [ self . program ] and errors .
1
"Execution of %s failed: %s" ||| _STR:0_
example# 2986
if not ,
0
example# 2987
msg is a string _STR:0_ , with ' % s ' replaced by self.program [ self . program ] .
1
"Execution of %s failed" ||| _STR:0_
example# 2988
raise CommandError exception with msg as argument .
0
example# 2989
from django.conf [ django . conf ] import settings into default name space .
0
example# 2990
from django.core.cache [ django . core . cache ] import caches into default name space .
0
example# 2991
from django.core.cache.backends.db [ django . core . cache . backends . db ] import BaseDatabaseCache into default name space .
0
example# 2992
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 2993
from django.db [ django . db ] import connections , router , transaction , models and DEFAULT_DB_ALIAS into default name space .
0
example# 2994
from django.db.utils [ django . db . utils ] import DatabaseError into default name space .
0
example# 2995
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 2996
derive the class Command from the BaseCommand base class .
0
example# 2997
help is an string _STR:0_ .
1
"Creates the tables needed to use the SQL cache backend." ||| _STR:0_
example# 2998
requires_system_checks is boolean False .
0
example# 2999
define the method add_arguments with arguments self and parser .
0
example# 3002
Defaults to the _STR:0_ database . ' define the method handle with arguments self , unpacked list tablenames and unpacked dictionary options .
1
"default" ||| _STR:0_
example# 3003
get value under the _STR:0_ key of the options dictionary , substitute it for db .
1
'database' ||| _STR:0_
example# 3004
get the value under the _STR:0_ key of the options dictionary , convet it to an integer and substitute for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3005
if length of tablenames is greater than zero ,
0
example# 3006
for every tablename in tablenames ,
0
example# 3007
call the method self.create_table [ self . create_table ] with arguments : db and tablename .
0
example# 3008
if not ,
0
example# 3009
for every cache_alias in settings.CACHES [ settings . CACHES ] ,
0
example# 3010
substitute value under the cache_alias key of the caches dictionary for cache .
0
example# 3011
if cache is an instance of BaseDatabaseCache ,
0
example# 3012
all the method self.create_table [ self . create_table ] with arguments : db and cache._table [ cache . _table ] .
0
example# 3013
define the method create_table with arguments self , database and tablename .
0
example# 3014
cache is an instance of BaseDatabaseCache class , created with arguments : tablename and an empty dictionary .
0
example# 3016
return nothing .
0
example# 3017
substitute value under the database key of the connections dictionary for connection .
0
example# 3018
if tablename is contained in return value of the method connection.introspection.table_names [ connection . introspection . table_names ] ,
0
example# 3020
replace ' % s ' in string _STR:0_ with tablename , write it to the self.stdout [ self . stdout ] stream .
1
"Cache table '%s' already exists." ||| _STR:0_
example# 3021
return nothing .
0
example# 3024
index_output is an empty list .
0
example# 3025
substitute connection.ops.quote_name [ connection . ops . quote_name ] for qn .
0
example# 3026
for every f in fields ,
0
example# 3028
if f.null [ f . null ] is false , append string append _STR:0_ to field_output , otherwise append _STR:1_ to field_output .
2
"NOT NULL" ||| _STR:0_
"NULL" ||| _STR:1_
example# 3029
if f.primary_key [ f . primary_key ] is true ,
0
example# 3030
append string _STR:0_ to field_output .
1
"PRIMARY KEY" ||| _STR:0_
example# 3031
otherwise if f.unique [ f . unique ] is true ,
0
example# 3032
append string _STR:0_ to field_output .
1
"UNIQUE" ||| _STR:0_
example# 3033
if f.db_index [ f . db_index ] is true ,
0
example# 3034
if f.unique [ f . unique ] is true , substitute _STR:0_ for unique , otherwise unique is an empty string .
1
"UNIQUE " ||| _STR:0_
example# 3035
replace ' % s ' in string _STR:0_ with : unique , return value of the function qn called with an argument :
1
"CREATE %sINDEX %s ON %s (%s);" ||| _STR:0_
example# 3036
a string _STR:0_ , where ' % s ' is replaced with tablename and f.name [ f . name ] , respectively , return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name [ f . name ] . join field_output elements into a string , separated by whitespaces , append it to table_output .
1
'%s_%s' ||| _STR:0_
example# 3037
full_statement is a list containing : string _STR:0_ , where % s is replaced by result of the function qn called with an argument tablename .
1
"CREATE TABLE %s (" ||| _STR:0_
example# 3038
for every i and line in enumerated iterable table_output ,
0
example# 3039
replace % s in string _STR:0_ with : line and character _STR:1_ if i is lesser than length of table_output decremented by one , or with an empty string if its not , append the resulting string to full_statement .
2
'    %s%s' ||| _STR:0_
',' ||| _STR:1_
example# 3040
append string _STR:0_ to full_statement .
1
');' ||| _STR:0_
example# 3041
evaluate method transaction.atomic [ transaction . atomic ] with arguments : using set to database and savepoint set to connection.features.can_rollback_ddl [ connection . features . can_rollback_ddl ] ,
0
example# 3042
with the result , evaluate method connection.cursor [ connection . cursor ] , with return value as curs ,
0
example# 3043
try ,
0
example# 3044
join full_statement into a string , separated by newlines , use it as an argument for the call to the method curs.execute [ curs . execute ] .
0
example# 3045
if DatabaseError , renamed to e , exception is caught ,
0
example# 3046
raise an CommandError with an argument string _STR:0_ , replace ' % s ' with : tablename and return value of the function force_text called with an argument e , respectively .
1
"Cache table '%s' could not be created.\nThe error was: %s." ||| _STR:0_
example# 3047
for every statement in index_output ,
0
example# 3048
execute statement on the database that curs points to .
0
example# 3050
replace ' % s ' in string _STR:0_ with tablename , write it to self.stdout [ self . stdout ] .
1
"Cache table '%s' created." ||| _STR:0_
example# 3051
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3052
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 3053
derive the class Command from the BaseCommand base class .
0
example# 3054
help is a tuple containing a string _STR:0_ .
1
"Runs the command-line client for specified database, or the default database if none is provided." ||| _STR:0_
example# 3055
requires_system_checks is boolean False .
0
example# 3056
define the method add_arguments with self and parser .
0
example# 3057
call the method parser.add_argument [ parser . add_argument ] with arguments : string _STR:0_ , action set to string _STR:1_ , dest set to string _STR:2_ , default set to DEFAULT_DB_ALIAS and help set to string _STR:3_ .
4
'--database' ||| _STR:0_
'database' ||| _STR:2_
'store' ||| _STR:1_
'Nominates a database onto which to open a shell. Defaults to the "default" database.' ||| _STR:3_
example# 3058
define the method handle with arguments self and unpacked dictionary options .
0
example# 3059
get the value under the _STR:0_ key of the options dictionary , use it as a key to access the element under the connections dictionary , substitute it for connection .
1
'database' ||| _STR:0_
example# 3060
try ,
0
example# 3061
call the method connection.client.runshell [ connection . client . runshell ] .
0
example# 3062
if OSError exception is caught ,
0
example# 3063
raise an CommandError exception with an argument string _STR:0_ ,
1
'You appear not to have the %r program installed or on your path.' ||| _STR:0_
example# 3064
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 3066
return dictionary created out of tuple elements k and printable representation of v , for every k and v in return value of the method module.__dict__.items [ module . __dict__ . items ] , only if result of the method omittable called with an argument k is false .
0
example# 3067
derive the class Command from the BaseCommand base class .
0
example# 3068
requires_system_checks is boolean False .
0
example# 3071
Default values are prefixed by _STR:0_ . ' define the method handle with arguments self and unpacked dictionary options .
1
"###" ||| _STR:0_
example# 3072
from django.conf [ django . conf ] import settings , global_settings into default name space .
0
example# 3073
call the method settings._setup [ settings . _setup ] .
0
example# 3074
call the function module_to_dict with an argument settings._wrapped [ settings . _wrapped ] , substitute it for user_settings .
0
example# 3075
call the function module_to_dict with an argument global_settings , substitute it for default_settings .
0
example# 3076
output is an empty string .
0
example# 3077
for every key in sorted list of user_settings ,
0
example# 3078
if key is not contained in default_settings ,
0
example# 3079
replace ' % s ' in string _STR:0_ with key and value under the key key of the user_setting dictionary , append it to the output .
1
"%s = %s  ###" ||| _STR:0_
example# 3080
otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary ,
0
example# 3081
replace ' % s ' in string _STR:0_ with key and value under the key key of the user_setting dictionary , append it to the output .
1
"%s = %s" ||| _STR:0_
example# 3082
otherwise if value under the key _STR:0_ of the options dictionary is true ,
1
'all' ||| _STR:0_
example# 3083
replace ' % s ' in string _STR:0_ with key and value under the key key of the user_setting dictionary , append it to the output .
1
"### %s = %s" ||| _STR:0_
example# 3084
join elements of the output into a string , separated by newlies , return the string .
0
example# 3085
import module warnings .
0
example# 3086
from collections import OrderedDict into default name space .
0
example# 3087
from django.apps [ django . apps ] import apps into default name space .
0
example# 3088
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3089
from django.core [ django . core ] import serializers into default name space .
0
example# 3090
from django.db [ django . db ] import router and DEFAULT_DB_ALIAS into default name space .
0
example# 3091
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 3092
derive the class Command from the BaseCommand base class .
0
example# 3093
help is a tuple containing a string _STR:0_ _STR:1_ .
2
"Output the contents of the database as a fixture of the given " ||| _STR:0_
"format (using each model's default manager unless --all is specified)." ||| _STR:1_
example# 3094
define the method add_arguments with arguments self and parser .
0
example# 3106
define the method handle with arguments self , unpacked list app_labels and unpacked dictionary options .
0
example# 3107
get the value under the _STR:0_ key of the options dictionary , substitute the result for format .
1
'format' ||| _STR:0_
example# 3108
get the value under the _STR:0_ key of the options dictionary , substitute the result for indent .
1
'indent' ||| _STR:0_
example# 3109
get the value under the _STR:0_ key of the options dictionary , substitute the result for database .
1
'database' ||| _STR:0_
example# 3110
get the value under the _STR:0_ key of the options dictionary , substitute the result for exclude .
1
'exclude' ||| _STR:0_
example# 3111
get the value under the _STR:0_ key of the options dictionary , substitute the result for output .
1
'output' ||| _STR:0_
example# 3112
get the value under the _STR:0_ key of the options dictionary , substitute the result for traceback .
1
'traceback' ||| _STR:0_
example# 3113
get the value under the _STR:0_ key of the options dictionary , substitute the result for use_natural_keys .
1
'use_natural_keys' ||| _STR:0_
example# 3114
if use_natural_keys is true ,
0
example# 3115
call the function warnings.warn [ warnings . warn ] with an argument string _STR:0_ , and RemovedInDjango19Warning .
2
191 ||| _STR:1_
"``--natural`` is deprecated; use ``--natural-foreign`` instead." ||| _STR:0_
example# 3116
get the value under the _STR:0_ key of the options dictionary , substitute the result for use_natural_foreign_keys .
1
' use_natural_foreign_keys' ||| _STR:0_
example# 3117
get the value under the _STR:0_ key of the options dictionary , substitute the result for use_natural_primary_keys .
1
'use_natural_primary_keys' ||| _STR:0_
example# 3118
get the value under the _STR:0_ key of the options dictionary , substitute the result for use_base_manager .
1
'use_base_manager' ||| _STR:0_
example# 3119
get the value under the _STR:0_ key of the options dictionary , substitute the result for pks .
1
'primary_keys' ||| _STR:0_
example# 3120
if pks is true ,
0
example# 3121
split string pks by _STR:0_ , substitute the result for primary_keys .
1
',' ||| _STR:0_
example# 3122
if not ,
0
example# 3123
primary_keys is an empty list .
0
example# 3124
excluded_apps is an empty set .
0
example# 3125
excluded_models is an empty set .
0
example# 3126
for every exclude in excludes ,
0
example# 3127
if _STR:0_ is contained in exclude ,
1
'.' ||| _STR:0_
example# 3128
try ,
0
example# 3129
call the method apps.get_model [ apps . get_model ] with exclude as an argument , substitute it for model .
0
example# 3130
if LookupError exception is caught ,
0
example# 3131
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with exclude .
1
'Unknown model in excludes: %s' ||| _STR:0_
example# 3132
add model to excluded_models set .
0
example# 3133
if not ,
0
example# 3134
try ,
0
example# 3135
call the method apps.get_app_config [ apps . get_app_config ] with an argument exclude , substitute the result for app_config .
0
example# 3136
if LookupError exception is caught ,
0
example# 3137
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with exclude .
1
'Unknown app in excludes: %s' ||| _STR:0_
example# 3138
add app_config to excluded_apps set .
0
example# 3140
if primary_keys is true ,
0
example# 3141
raise an CommandError exception with an argument string _STR:0_ .
1
"You can only use --pks option with one model" ||| _STR:0_
example# 3142
app_list is an instance of OrderedDict class , created with an argument a tuple containing elements : app_config and None , for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] , only if app_config.models_module [ app_config . models_module ] is not None , and app_config is not contained in excluded_apps .
0
example# 3143
if not ,
0
example# 3145
raise an CommandError exception with an argument string _STR:0_ .
1
"You can only use --pks option with one model" ||| _STR:0_
example# 3146
app_list is an instance of a class OrderedDict .
0
example# 3147
for every label in app_labels ,
0
example# 3148
try ,
0
example# 3149
split label by _STR:0_ , assign the result to app_label and model_label , respectively .
1
'.' ||| _STR:0_
example# 3150
try ,
0
example# 3151
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label , substitute the result for app_config .
0
example# 3152
if LookupError exception is caught ,
0
example# 3153
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with exclude .
1
'Unknown app in excludes: %s' ||| _STR:0_
example# 3154
if app_config.models_module [ app_config . models_module ] is None or app_config is contained in excluded_apps ,
0
example# 3155
skip this loop iteration .
0
example# 3156
try ,
0
example# 3157
call the method app_config.get_model [ app_config . get_model ] with an argument model_label , substitute the result for model .
0
example# 3158
if LookupError exception is caught ,
0
example# 3159
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with app_label and model_label , respectively .
1
'Unknown model: %s' ||| _STR:0_
example# 3161
if app_list_value is not None ,
0
example# 3162
if mode is not contained in app_list_value ,
0
example# 3163
append model to app_list_value .
0
example# 3164
if ValueError exception is caught ,
0
example# 3165
if primary_keys is true ,
0
example# 3166
raise an CommandError exception with an argument string _STR:0_ .
1
"You can only use --pks option with one model" ||| _STR:0_
example# 3167
substitute label for app_label .
0
example# 3168
try ,
0
example# 3169
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label , substitute the result for app_config .
0
example# 3170
if LookupError exception is caught ,
0
example# 3171
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with app_label .
1
'Unknown application: %s' ||| _STR:0_
example# 3172
if app_config.models_module [ app_config . models_module ] is None or app_config is contained in excluded_apps
0
example# 3173
skip this loop iteration .
0
example# 3174
value under the app_config key of the app_list is None .
0
example# 3175
if format is not contained in return value of the method serializers.get_public_serializer_formats [ serializers . get_public_serializer_formats ] ,
0
example# 3176
try ,
0
example# 3177
call the method serializers.get_serializer [ serializers . get_serializer ] with an argument format .
0
example# 3178
if serializers.SerializerDoesNotExist [ serializers . SerializerDoesNotExist ] exception is caught ,
0
example# 3179
do nothing .
0
example# 3180
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with format .
1
'Unknown serialization format: %s' ||| _STR:0_
example# 3181
define the function get_objects .
0
example# 3182
call the method app_list.items [ app_list . items ] , use the result as an argument for the call to the function sort_dependencies , for every model in result ,
0
example# 3183
if model is contained in excluded_models ,
0
example# 3184
skip this loop iteration .
0
example# 3185
if model._meta.proxy [ model . _meta . proxy ] is false and return value of the function router.allow_migrate [ router . allow_migrate ] called with arguments using and model is true ,
0
example# 3186
if use_base_manager is true ,
0
example# 3187
substitute model._base_manager [ model . _base_manager ] for objects .
0
example# 3188
if not ,
0
example# 3189
substitute model._default_manager [ model . _default_manager ] for objects .
0
example# 3190
call the method objects.using [ objects . using ] with an argument using , call the method order_by on the result with an argument model._meta.pk.name [ model . _meta . pk . name ] , substitute the result for queryset .
0
example# 3191
if primary_keys is true ,
0
example# 3192
call the method queryset.filter [ queryset . filter ] with an argument pk__in set to primary_keys , substitute the result for queryset .
0
example# 3193
for every obj in result of the method queryset.iterator [ queryset . iterator ] ,
0
example# 3194
yield obj , as an return value of the generator .
0
example# 3195
try ,
0
example# 3196
self.stdout.ending [ self . stdout . ending ] is None .
0
example# 3197
open the output file in writing mode if output is true , assign the file descriptor to stream , otherwise stream is None .
0
example# 3198
try ,
0
example# 3200
finally perform ,
0
example# 3201
if stream is true ,
0
example# 3202
close the file stream .
0
example# 3203
if Exception , renamed to e , exception is caught ,
0
example# 3204
if show_traceback is true ,
0
example# 3205
raise an exception .
0
example# 3206
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with e .
1
"Unable to serialize database: %s" ||| _STR:0_
example# 3207
define the function sort_dependencies with an argument app_list .
0
example# 3208
model_dependencies is an empty list .
0
example# 3209
models is an empty set .
0
example# 3210
for every app_config and model_list in app_list ,
0
example# 3211
if model_list is None ,
0
example# 3212
call the method app_config.get_models [ app_config . get_models ] , substitute the result fr model_list .
0
example# 3213
for every model in model_list ,
0
example# 3214
add model to models set .
0
example# 3215
if model has an _STR:0_ attribute ,
1
'natural_key' ||| _STR:0_
example# 3216
get _STR:0_ attribute of the model.natural_key [ model . natural_key ] , substitute it for deps , if the attribute doesnt exist , deps in an empty list .
1
'dependencies' ||| _STR:0_
example# 3217
if deps is true ,
0
example# 3218
for every dep in deps call the method apps.get_model [ apps . get_model ] with an argument dep , and append the result to the list , substitute it for deps .
0
example# 3219
if not ,
0
example# 3220
deps is an empty list .
0
example# 3221
for every field in model._meta.fields [ model . _meta . fields ] ,
0
example# 3222
if field.rel [ field . rel ] has an _STR:0_ attribute ,
1
'to' ||| _STR:0_
example# 3223
substitute field.rel.to [ field . rel . to ] with rel_model .
0
example# 3224
if rel_model has an attribute _STR:0_ and rel_model is not equal to model ,
1
'natural_key' ||| _STR:0_
example# 3225
append rel_model to deps .
0
example# 3226
for every field in model._meta.many_to_many [ model . _meta . many_to_many ] ,
0
example# 3227
if field.rel.through._meta.auto_created [ field . rel . through . _meta . auto_created ] is true ,
0
example# 3228
substitute field.rel.to [ field . rel . to ] for rel_model .
0
example# 3229
if rel_model has an _STR:0_ attribute and rel_model is not equal to model ,
1
'natural_key' ||| _STR:0_
example# 3230
append rel_model to deps .
0
example# 3232
call the methof model_dependencies.reverse [ model_dependencies . reverse ] .
0
example# 3233
model_list is an empty list .
0
example# 3234
while model_dependencies is true ,
0
example# 3235
skipped is an empty list .
0
example# 3236
changed is boolean False .
0
example# 3237
while model_dependencies is true ,
0
example# 3238
remove first element from model_dependencies , assign it to model and deps , respectively .
0
example# 3239
found is boolean True .
0
example# 3240
for every d in deps , if d is not contained in models and d is contained in model_list add boolean True to a tuple ,
0
example# 3241
otherwise add boolean False , for every candidate in the result perform following , if candidate is false ,
0
example# 3242
found is boolean False .
0
example# 3243
if found is true ,
0
example# 3244
append model to model_list .
0
example# 3245
changed is boolean True .
0
example# 3246
if not ,
0
example# 3248
if changed is false ,
0
example# 3249
raise an CommandError with argument : string _STR:0_ , where ' % s ' is replaced with : model._meta.app_label [ model . _meta . app_label ] and model._meta.object_name [ model . _meta . object_name ] joined into a string , with separator _STR:1_ , result joined into a string , separated by string _STR:2_ for every model and deps in sorted list of elements skipped sorted by key : return value of the lambda function with an argument obj , and result the __name__ field of the first element of obj .
3
"Can't resolve dependencies for %s in serialized app list." ||| _STR:0_
', ' ||| _STR:2_
'.' ||| _STR:1_
example# 3250
substitute skipped for model_dependencies .
0
example# 3251
return model_list .
0
example# 3252
import module sys .
0
example# 3253
from importlib import import_module into default name space .
0
example# 3254
from django.apps [ django . apps ] import apps into default name space .
0
example# 3255
from django.db [ django . db ] import connections , router , transaction and DEFAULT_DB_ALIAS into default name space .
0
example# 3256
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 3257
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3258
from django.core.management.color [ django . core . management . color ] import no_style into default name space .
0
example# 3259
from django.core.management.sql [ django . core . management . sql ] import sql_flush and emit_post_migrate_signal into default name space .
0
example# 3260
from django.utils.six.moves [ django . utils . six . moves ] import input into default name space .
0
example# 3261
from django.utils [ django . utils ] import six into default name space .
0
example# 3262
derive the class Command from the BaseCommand base class .
0
example# 3263
help is a tuple containing a string : _STR:0_ _STR:1_
2
'Removes ALL DATA from the database, including data added during ' ||| _STR:0_
'migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.' ||| _STR:1_
example# 3264
define the add_arguments with arguments self and parser .
0
example# 3268
define the method handle with arguments self and unpacked dictionary options .
0
example# 3269
substitute value under the _STR:0_ key of the options dictionary for database .
1
'database' ||| _STR:0_
example# 3270
substitute value under the database key of the connections dictionary for connection .
0
example# 3271
substitute value under the _STR:0_ key of the options dictionary for verbosity .
1
'verbosity' ||| _STR:0_
example# 3272
substitute value under the _STR:0_ key of the options dictionary for interactive .
1
'interactive' ||| _STR:0_
example# 3273
get the value _STR:0_ key of the options dictionary , if it exists substitute it for reset_sequences , otherwise reset_sequences is boolean True .
1
'reset_sequences' ||| _STR:0_
example# 3274
get the value _STR:0_ key of the options dictionary , if it exists substitute it for allow_cascade , otherwise allow_cascade is boolean False .
1
'allow_cascade' ||| _STR:0_
example# 3275
get the value _STR:0_ key of the options dictionary , if it exists substitute it for inhibit_post_migrate , otherwise inhibit_post_migrate is boolean False .
1
'inhibit_post_migrate' ||| _STR:0_
example# 3276
call the function no_style , substitute it for self.style [ self . style ] .
0
example# 3277
for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 3278
try ,
0
example# 3280
if ImportError exception is caught ,
0
example# 3281
do nothing .
0
example# 3283
if interactive is true ,
0
example# 3284
request user input from the standard input , assign it o confirm , with the query string : _STR:0__STR:1_ _STR:2_Type _STR:3_ to continue , or _STR:4_ to cancel : `` , where ' % s ' is replaced with value under the _STR:5_ key of the connection.settings_dict [ connection . settings_dict ] dictionary .
6
"This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state." ||| _STR:1_
"Are you sure you want to do this?" ||| _STR:2_
'yes' ||| _STR:3_
'NAME' ||| _STR:5_
"You have requested a flush of the database." ||| _STR:0_
'no' ||| _STR:4_
example# 3285
if not ,
0
example# 3286
confirm is a string _STR:0_ .
1
'yes' ||| _STR:0_
example# 3287
if confirm equals a string _STR:0_ ,
1
'yes' ||| _STR:0_
example# 3288
try ,
0
example# 3290
with the result , call the method connection.cursor [ connection . cursor ] , with the result as cursor ,
0
example# 3291
for every sql in sql_list ,
0
example# 3292
call the method cursor.execute [ cursor . execute ] with an argument sql .
0
example# 3293
if Exception , renamed to e , exception is caught , new_msg is a tuple containing a string : `` Database % s could n't be flushed .
0
example# 3294
Possible reasons : \n ''
0
example# 3296
if inhibit_post_migrate is false ,
0
example# 3297
call the method self.emit_post_migrate [ self . emit_post_migrate ] with arguments verbosity , interactive and database .
0
example# 3298
if value under the _STR:0_ key of the options dictionary is true ,
1
'load_initial_data' ||| _STR:0_
example# 3300
if not ,
0
example# 3301
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Flush cancelled.\n" ||| _STR:0_
example# 3302
class static method ,
0
example# 3303
define the method emit_post_migrate with arguments verbosity , interactive and database .
0
example# 3304
all_models is an empty list .
0
example# 3305
for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 3306
call the method router.get_migratable_models [ router . get_migratable_models ] with arguments app_config , database and include_auto_created set to boolean True , extend all_models list with the result .
0
example# 3308
from __future__ import unicode_literals into default name space .
0
example# 3309
from collections import OrderedDict into default name space .
0
example# 3310
import module keyword .
0
example# 3311
import module re .
0
example# 3312
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3313
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 3314
derive the class Command from the BaseCommand base class .
0
example# 3315
help is an string _STR:0_ .
1
"Introspects the database tables in the given database and outputs a Django model module." ||| _STR:0_
example# 3316
requires_system_checks is boolean False .
0
example# 3317
db_module is a string _STR:0_ .
1
'django.db' ||| _STR:0_
example# 3318
define the method add_arguments with arguments self and parser .
0
example# 3321
try ,
0
example# 3322
for every line in return value of the method self.handle_inspection [ self . handle_inspection ] called with an argument options ,
0
example# 3323
append new line to line , write it to self.stdout [ self . stdout ] stream .
0
example# 3324
if NotImplementedError exception is caught ,
0
example# 3325
raise an CommandError exception with an argument _STR:0_ .
1
"Database inspection isn't supported for the currently selected database backend." ||| _STR:0_
example# 3327
get value under the _STR:0_ key of the options dictionary , use it as a key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 3328
get the value under the _STR:0_ key of the options dictionary , substitute it for table_name_filter .
1
'table_name_filter' ||| _STR:0_
example# 3330
strip_prefix is a lambda function with an argument s , return value is s without the first element if s starts with string _STR:0_ ' , otherwise returns s .
1
'u' ||| _STR:0_
example# 3331
call the method connection.cursor [ connection . cursor ] , with the result as cursor ,
0
example# 3332
yield string _STR:0_ as the result .
1
"# This is an auto-generated Django model module." ||| _STR:0_
example# 3333
yield string _STR:0_ as the result .
1
"# You'll have to do the following manually to clean this up:" ||| _STR:0_
example# 3334
yield string _STR:0_ as the result .
1
"#   * Rearrange models' order" ||| _STR:0_
example# 3335
yield string _STR:0_ as the result .
1
"#   * Make sure each model has one field with primary_key=True" ||| _STR:0_
example# 3336
yield string _STR:0_ as the result .
1
"#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" ||| _STR:0_
example# 3337
yield string _STR:0_ as the result .
1
"# Feel free to rename the models, but don't rename db_table values or field names." ||| _STR:0_
example# 3338
yield string _STR:0_ as the result .
1
"#" ||| _STR:0_
example# 3339
yield string _STR:0_ as the result .
1
"# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" ||| _STR:0_
example# 3340
yield string _STR:0_ as the result .
1
"# into your database." ||| _STR:0_
example# 3341
yield string _STR:0_ as the result .
1
"from __future__ import unicode_literals" ||| _STR:0_
example# 3342
yield and empty string as the result .
0
example# 3343
yield string _STR:0_ % self.db_module [ self . db_module ] as the result , where `` % s '' is replaced with self.db_module [ self . db_module ] .
1
'from %s import models' ||| _STR:0_
example# 3344
known_models is an empty list .
0
example# 3345
for every table_name in return value of the method connection.introspection.table_names [ connection . introspection . table_names ] called with an argument cursor ,
0
example# 3346
if table_name_filter is not None and table_name_filter is callable object ,
0
example# 3347
call the function table_name_filter with an argument table_name , if it evaluates to true ,
0
example# 3348
skip this loop iteration ,
0
example# 3349
yield and empty string as the result .
0
example# 3350
yield and empty string as the result .
0
example# 3353
try ,
0
example# 3355
if NotImplementedError exception is caught ,
0
example# 3356
relations is an empty dictionary .
0
example# 3357
try ,
0
example# 3359
if NotImplementedError exception is caught ,
0
example# 3360
indexes is an empty dictionary .
0
example# 3361
used_column_names is an empty list .
0
example# 3362
for every i and row in enumerated result of the method connection.introspection.get_table_description [ connection . introspection . get_table_description ] called with arguments : cursor and table_name ,
0
example# 3363
comment_notes is an empty list .
0
example# 3364
extra_params is an instance of the class OrderedDict .
0
example# 3365
substitute first element of row for column_name .
0
example# 3366
if i is contained in relations , is_relation is boolean True , otherwise is_relation is boolean False .
0
example# 3368
add params to extra_params dictionary .
0
example# 3369
extend comment_notes list with notes .
0
example# 3370
append att_name to used_column_names list .
0
example# 3371
if column_name is contained in indexes ,
0
example# 3372
if value under the _STR:0_ key of the dictionary contained under the column_name key of the dictionary indexes is true ,
1
'primary_key' ||| _STR:0_
example# 3373
value under the _STR:0_ key of the extra_params dictionary is boolean True ,
1
'primary_key' ||| _STR:0_
example# 3374
otherwise if , if value under the _STR:0_ key of the dictionary contained under the column_name key of the dictionary indexes is true ,
1
'unique' ||| _STR:0_
example# 3375
value under the _STR:0_ key of the extra_params dictionary is boolean True ,
1
'unique' ||| _STR:0_
example# 3376
if is_relation is true ,
0
example# 3378
if rel_to is contained in known_models ,
0
example# 3379
append rel_to to string 'ForeignKey ( , substitute the result for field_type .
0
example# 3380
if not ,
0
example# 3381
append rel_to to string _STR:0_ '' to it , substitute the result for field_type .
1
'ForeignKey(, append character "' ||| _STR:0_
example# 3382
if not ,
0
example# 3384
add field_params to extra_params dictionary .
0
example# 3385
extend comment_notes list with field_notes .
0
example# 3386
append _STR:0_ to field_type .
1
'(' ||| _STR:0_
example# 3388
if field_type equals a string _STR:0_ ,
1
'AutoField(' ||| _STR:0_
example# 3389
skip this loop iteration .
0
example# 3390
otherwise if field_type equals a string _STR:0_ and connection.features.can_introspect_autofield [ connection . features . can_introspect_autofield ] is false ,
1
'IntegerField(' ||| _STR:0_
example# 3391
append string _STR:0_ to comment_notes .
1
'AutoField?' ||| _STR:0_
example# 3392
if seventh element of row is true ,
0
example# 3393
if field_type equals a string _STR:0_ ,
1
'BooleanField(' ||| _STR:0_
example# 3394
field_type is a string _STR:0_
1
'NullBooleanField(' ||| _STR:0_
example# 3395
if not ,
0
example# 3396
value under the _STR:0_ key of the extra_params dictionary is boolean True .
1
'blank' ||| _STR:0_
example# 3397
if field_type is not equal to string _STR:0_ or string _STR:1_ ,
2
'TextField(' ||| _STR:0_
'CharField(' ||| _STR:1_
example# 3398
value under the _STR:0_ key of the extra_params dictionary is boolean True .
1
'null' ||| _STR:0_
example# 3399
field_desc is a string _STR:0_ , where ' % s ' is replaced with : att_name , an empty string if _STR:1_ is contained in field_type , or with string _STR:2_ if it is not and field_type .
3
'models.' ||| _STR:2_
'%s = %s%s' ||| _STR:0_
'.' ||| _STR:1_
example# 3400
if extra_params is true ,
0
example# 3401
if field_desc doesnt end with _STR:0_ ,
1
'(' ||| _STR:0_
example# 3402
append string _STR:0_ to field_desc .
1
', ' ||| _STR:0_
example# 3403
in string _STR:0_ replace ' % s ' with k and return value of the function strip_prefix with an argument printable representation of v , for every k and v in return value of the extra_params.items [ extra_params . items ] method , join all results into a string separated by a string _STR:1_ , substitute it for field_desc .
2
'%s=%s' ||| _STR:0_
', ' ||| _STR:1_
example# 3404
append string _STR:0_ to field_desc .
1
')' ||| _STR:0_
example# 3405
if comment_notes is true ,
0
example# 3406
join elements of comment_notes into a string , separated by whitespaces , append it to the string _STR:0_ , append the result to field_desc .
1
' #' ||| _STR:0_
example# 3407
yield string _STR:0_ , where ' % s ' is replaced with field_desc .
1
'    %s' ||| _STR:0_
example# 3408
for meta_line in return value of the method self.get_meta [ self . get_meta ] called with an argument table_name .
0
example# 3409
yield meta_line as the result .
0
example# 3411
field_params is an empty dictionary .
0
example# 3412
field_notes is an empty list .
0
example# 3413
convert col_name to lowercase , substitute the result for new_name .
0
example# 3414
if new_name is not equal to col_name ,
0
example# 3415
append string _STR:0_ to field_notes .
1
'Field name made lowercase.' ||| _STR:0_
example# 3416
if is_relation ,
0
example# 3417
if new_name ends with string _STR:0_ ,
1
'_id' ||| _STR:0_
example# 3419
if not ,
0
example# 3420
substitute col_name for value under the _STR:0_ key of the field_params dictionary .
1
'db_column' ||| _STR:0_
example# 3423
append string _STR:0_ to field_notes .
1
'Field renamed to remove unsuitable characters.' ||| _STR:0_
example# 3426
replace all the occurrences of _STR:0_ with _STR:1_ in new_name .
2
'__' ||| _STR:0_
'_' ||| _STR:1_
example# 3428
append string _STR:0_ to field_notes .
1
"Field renamed because it contained more than one '_' in a row." ||| _STR:0_
example# 3429
if new_name starts with a string _STR:0_ ,
1
'_' ||| _STR:0_
example# 3430
convert new_name to a string and append it to string _STR:0_ , substitute the result for new_name .
1
'field' ||| _STR:0_
example# 3431
append string _STR:0_ to field_notes .
1
"Field renamed because it started with '_'." ||| _STR:0_
example# 3432
if new_name ends with a string _STR:0_ ,
1
'_' ||| _STR:0_
example# 3433
convert new_name to a string and append string _STR:0_ to it , substitute the result for new_name .
1
'field' ||| _STR:0_
example# 3434
append string _STR:0_ to field_notes .
1
"Field renamed because it ended with '_'." ||| _STR:0_
example# 3435
call the method keyword.iskeyword [ keyword . iskeyword ] with an argument new_name , if it evaluates to true ,
0
example# 3436
append string _STR:0_ to new_name .
1
'_field' ||| _STR:0_
example# 3437
append string _STR:0_ to field_notes .
1
"Field renamed because it was a Python reserved word." ||| _STR:0_
example# 3438
if first element of new_name is digit ,
0
example# 3439
convert new_name to a string and append it to string _STR:0_ , substitute the result for new_name .
1
'number_' ||| _STR:0_
example# 3440
append string _STR:0_ to field_notes .
1
"Field renamed because it wasn't a valid Python identifier." ||| _STR:0_
example# 3441
if new_name is contained in used_column_names ,
0
example# 3442
num is an integer 0 .
1
0.0 ||| _STR:0_
example# 3443
in string _STR:0_ , replace ' % s ' with new_name and _STR:1_ with num , while the result is contained in used_column_names ,
2
'%s_%d' ||| _STR:0_
'%d' ||| _STR:1_
example# 3444
increment num by one .
0
example# 3445
in string _STR:0_ , replace ' % s ' with new_name and _STR:1_ with num , substitute the result for new_name .
2
'%s_%d' ||| _STR:0_
'%d' ||| _STR:1_
example# 3446
append string _STR:0_ to field_notes .
1
"Field renamed because of name conflict." ||| _STR:0_
example# 3447
if col_name is not equal to new_name and field_notes is true ,
0
example# 3448
substitute col_name for value under the _STR:0_ key of the field_params dictionary .
1
'db_column' ||| _STR:0_
example# 3449
return new_name , field_params and field_notes .
0
example# 3451
field_params is an instance of a class OrderedDict .
0
example# 3452
field_notes is an empty list .
0
example# 3453
try ,
0
example# 3455
if KeyError exception is caught ,
0
example# 3456
field_type is a string _STR:0_ .
1
'TextField' ||| _STR:0_
example# 3457
append a string _STR:0_ to field_notes .
1
'This field type is a guess.' ||| _STR:0_
example# 3458
if field_type is a tuple ,
0
example# 3459
substitute field_type for field_type and new_params , respectively .
0
example# 3461
if field_type equals a string CharField ' and fourth element of row is true ,
0
example# 3462
convert fourth element of row to an integer , substitute it for value under the _STR:0_ key of the field_params .
1
'max_digits' ||| _STR:0_
example# 3463
if field_type equals a string _STR:0_ ,
1
'DecimalField' ||| _STR:0_
example# 3464
if fifth and sixth elements of row are None ,
0
example# 3465
append string _STR:0_ to field_notes .
1
'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' ||| _STR:0_
example# 3466
if fifth element of row is not None , substitute it for value under the _STR:0_ key of the field_params , otherwise , value under the _STR:0_ key of the field_params is integer 10 .
2
101 ||| _STR:1_
'max_digits' ||| _STR:0_
example# 3467
if sixth element of row is not None , substitute it for value under the _STR:0_ key of the field_params , otherwise , value under the _STR:0_ key of the field_params is integer 5 .
2
5.5 ||| _STR:1_
'decimal_places' ||| _STR:0_
example# 3468
if not
0
example# 3469
substitute fifth element of row for value under the _STR:0_ key of the field_params .
1
'max_digits' ||| _STR:0_
example# 3470
substitute sixth element of row for value under the _STR:0_ key of the field_params .
1
'decimal_places' ||| _STR:0_
example# 3471
return field_type , field_params and field_notes .
0
example# 3472
define the method get_meta with arguments self and table_name .
0
example# 3474
from __future__ import unicode_literals into default name space .
0
example# 3475
import module glob .
0
example# 3476
import module gzip .
0
example# 3477
import module os .
0
example# 3478
import module warnings .
0
example# 3479
import module zipfile .
0
example# 3480
from django.apps [ django . apps ] import apps into default name space .
0
example# 3481
from django.conf [ django . conf ] import settings into default name space .
0
example# 3482
from django.core [ django . core ] import serializers into default name space .
0
example# 3483
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3484
from django.core.management.color [ django . core . management . color ] import no_style into default name space .
0
example# 3485
from django.db [ django . db ] import connections , router , transaction , DEFAULT_DB_ALIAS , IntegrityError and DatabaseError into default name space .
0
example# 3486
from django.utils [ django . utils ] import lru_cache into default name space .
0
example# 3487
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 3488
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 3489
from django.utils._os [ django . utils . _os ] import upath into default name space .
0
example# 3490
from itertools import product into default name space .
0
example# 3491
try ,
0
example# 3492
import bz2 .
1
2.2 ||| _STR:0_
example# 3494
if ImportError exception is caught ,
0
example# 3496
derive the class Command from the BaseCommand base class .
0
example# 3497
help is an string _STR:0_ .
1
'Installs the named fixture(s) in the database.' ||| _STR:0_
example# 3498
missing_args_message is a tuple containing a string _STR:0_
1
"No database fixture specified. Please provide the " ||| _STR:0_
example# 3505
get the value under the _STR:0_ key of the options dictionary , substitute it for self.ignore [ self . ignore ] .
1
'ignore' ||| _STR:0_
example# 3506
get the value under the _STR:0_ key of the options dictionary , substitute it for self.database [ self . database ] .
1
'database' ||| _STR:0_
example# 3507
get the value under the _STR:0_ key of the options dictionary , substitute it for self.app_label [ self . app_label ] .
1
'app_label' ||| _STR:0_
example# 3508
get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.hide_empty [ self . hide_empty ] , if not , self.hide_empty [ self . hide_empty ] is boolean False .
1
'hide_empty' ||| _STR:0_
example# 3509
get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3510
call the method transaction.atomic [ transaction . atomic ] with an argument using set to self.using [ self . using ] , with the result ,
0
example# 3511
call the method self.loaddata [ self . loaddata ] with an argument fixture_labels .
0
example# 3512
call the method transaction.get_autocommit [ transaction . get_autocommit ] with an argument self.using [ self . using ] , if it evaluates to true ,
0
example# 3513
get the value under the self.using [ self . using ] key of the connections dictionary , call the method close on it .
0
example# 3515
get the value under the self.using [ self . using ] key of the connections dictionary , substitute it for connection .
0
example# 3516
self.fixture_count [ self . fixture_count ] is integer 0 .
1
0.0 ||| _STR:0_
example# 3517
self.loaded_object_count [ self . loaded_object_count ] is integer 0 .
1
0.0 ||| _STR:0_
example# 3518
self.fixture_object_count [ self . fixture_object_count ] is integer 0 .
1
0.0 ||| _STR:0_
example# 3519
self.models [ self . models ] is an empty set .
0
example# 3520
call the method serializers.get_public_serializer_formats [ serializers . get_public_serializer_formats ] , substitute the result for self.serialization_formats [ self . serialization_formats ] .
0
example# 3524
call the method connection.constraint_checks_disabled [ connection . constraint_checks_disabled ] , with the result perform ,
0
example# 3525
for every fixture_label in fixture_labels ,
0
example# 3526
call the method self.load_label [ self . load_label ] with an argument fixture_label .
0
example# 3527
for model in self.models [ self . models ] append model._meta.db_table [ model . _meta . db_table ] to a list , substitute the resulting list for table_names .
0
example# 3528
try ,
0
example# 3529
call the method connection.check_constraints [ connection . check_constraints ] with an arguments table_names set to table_names .
0
example# 3530
if Exception , renamed to e , exception is caught ,
0
example# 3532
raise an exception .
0
example# 3533
if self.loaded_object_count [ self . loaded_object_count ] is greater than zero ,
0
example# 3535
if sequence_sql is true ,
0
example# 3537
write a string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Resetting sequences\n" ||| _STR:0_
example# 3538
call the method connection.cursor [ connection . cursor ] , with the result renamed to cursor , perform the following ,
0
example# 3539
for every line in sequence_sql ,
0
example# 3540
call the method cursor.execute [ cursor . execute ] with an argument line .
0
example# 3543
do nothing .
0
example# 3544
otherwise if self.fixture_object_count [ self . fixture_object_count ] equals self.loaded_object_count [ self . loaded_object_count ] ,
0
example# 3545
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , where _STR:1_ is replaced with self.loaded_object_count [ self . loaded_object_count ] and self.fixture_count [ self . fixture_count ] , respectively .
2
"Installed %d object(s) from %d fixture(s)" ||| _STR:0_
'%d' ||| _STR:1_
example# 3546
if not ,
0
example# 3547
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , substitute _STR:1_ with self.loaded_object_count [ self . loaded_object_count ] , self.fixture_object_count [ self . fixture_object_count ] and self.fixture_count [ self . fixture_count ] .
2
"Installed %d object(s) (of %d) from %d fixture(s)" ||| _STR:0_
'%d' ||| _STR:1_
example# 3548
define the method load_label with self and fixture_label as arguments .
0
example# 3549
for every fixture_file , fixture_dir and fixture_name in return value of the method self.find_fixtures [ self . find_fixtures ] called with an argument fixture_label ,
0
example# 3550
call the function os.path.basename [ os . path . basename ] with an argument fixture_file , use the result as an argument for the call to the method , self.parse_name [ self . parse_name ] , assign the result to _ , ser_fmt and cmp_fmt , respectively .
0
example# 3551
get the value under the cmp_fmt key of the self.compression_formats [ self . compression_formats ] dictionary , assign it to open_method and mode .
0
example# 3552
call the function open_method with arguments : fixture_file and mode , substitute the result for fixture .
0
example# 3553
try ,
0
example# 3554
increment self.fixture_count [ self . fixture_count ] by one .
0
example# 3555
objects_in_fixture is integer 0 .
1
0.0 ||| _STR:0_
example# 3556
loaded_objects_in_fixture is integer 0 .
1
0.0 ||| _STR:0_
example# 3558
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , substitute ' % s ' with ser_fmt , fixture_name and return value of the function humanize called with an argument fixture_dir .
1
"Installing %s fixture '%s' from %s." ||| _STR:0_
example# 3560
for every obj in objects ,
0
example# 3561
increment objects_in_fixture by one .
0
example# 3563
increment loaded_objects_in_fixture by one .
0
example# 3564
add obj.object.__class__ [ obj . object . __class__ ] to self.models [ self . models ] set .
0
example# 3565
try ,
0
example# 3566
call the method obj.save [ obj . save ] with an argument using set to self.using [ self . using ] .
0
example# 3567
if DatabaseError or IntegrityError , renamed to e , exceptions are caught ,
0
example# 3568
e.args [ e . args ] is a tuple containing string `` Could not load % ( app_label ) s. % ( object_name ) s ( pk= % ( pk ) s ) : % ( error_msg ) s , where _STR:0_ is replaced for obj.object._meta.app_label [ obj . object . _meta . app_label ] , _STR:1_ is replaced with obj.object._meta.object_name [ obj . object . _meta . object_name ] , _STR:2_ is replaced with obj.object.pk [ obj . object . pk ] and _STR:3_ is replaced with result of the function force_text with an argument e .
4
'%(object_name)s' ||| _STR:1_
'%(error_msg)s' ||| _STR:3_
'%(pk)s' ||| _STR:2_
'%(app_label)s' ||| _STR:0_
example# 3569
raise an exceptions
0
example# 3570
increment self.loaded_object_count [ self . loaded_object_count ] by loaded_objects_in_fixture .
0
example# 3571
increment self.fixture_object_count [ self . fixture_object_count ] by objects_in_fixture .
0
example# 3572
if Exception , renamed to e , exception is caught ,
0
example# 3573
if e is not an instance of CommandError class ,
0
example# 3574
e.args [ e . args ] is a tuple containing string _STR:0_ , where ' % s ' is replaced with fixture_file , e .
1
"Problem installing fixture '%s': %s" ||| _STR:0_
example# 3575
raise an exception .
0
example# 3576
finally perform ,
0
example# 3577
call the method fixture.close [ fixture . close ] .
0
example# 3580
decorator method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None .
0
example# 3581
define the method find_fixtures with arguments : self and fixture_label .
0
example# 3582
call the method self.parse_name [ self . parse_name ] with an argument fixture_label , substitute the result for fixture_name , ser_fmt , cmp_fmt , respective .
0
example# 3584
call the method self.compression_formats.keys [ self . compression_formats . keys ] , convert it to list , substitute it for cmp_fmts if cmp_fmt is None , otherwise cmp_fmts is a list containing cmp_fmt .
0
example# 3585
call the method serializers.get_public_serializer_formats [ serializers . get_public_serializer_formats ] , substitute the result for ser_fmts if ser_fmt is None , otherwise ser_fmts is a list containing ser_fmt .
0
example# 3587
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , where ' % s ' is replaced with fixture_name .
1
"Loading '%s' fixtures..." ||| _STR:0_
example# 3588
if fixture_name is an absolute file path ,
0
example# 3589
call the method os.path.dirname [ os . path . dirname ] with an argument fixture_name , append it to a list , substitute resulting list for fixture_dirs .
0
example# 3590
call the method os.path.basename [ os . path . basename ] with an argument fixture_name , substitute the result for fixture_name .
0
example# 3591
if not ,
0
example# 3592
substitute self.fixture_dirs [ self . fixture_dirs ] for fixture_dirs .
0
example# 3593
if os.path.sep [ os . path . sep ] is contained in fixture_name ,
0
example# 3594
join dir_ and return value of the function os.path.dirname [ os . path . dirname ] called with an argument fixture_name into a valid file path , append it to a list , perform the previous for every dir_ in fixture_dirs , substitute the resulting list for fixture_dirs .
0
example# 3595
call the method os.path.basename [ os . path . basename ] with an argument fixture_name , substitute the result for fixture_name .
0
example# 3597
join fixture_name and suffix into a string , separated by _STR:0_ for every suffix in suffixes , put the results in set , substitute it for targets .
1
'.' ||| _STR:0_
example# 3598
fixture_files is an empty list .
0
example# 3599
for every fixture_dir in fixture_dirs ,
0
example# 3600
if self.verbosity [ self . verbosity ] is greater or equals to integer 2 .
1
2.2 ||| _STR:0_
example# 3601
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , where ' % s ' is replaced with result of the function humanize , called with an argument fixture_dir .
1
"Checking %s for fixtures..." ||| _STR:0_
example# 3602
fixture_files_in_dir is an empty list .
0
example# 3603
join fixture_dir , fixture_name with appended character _STR:0_ into a valid file path , use it as an argument for the call to the glob.iglob [ glob . iglob ] , for every candidate in result .
1
'*' ||| _STR:0_
example# 3604
call the method os.path.basename [ os . path . basename ] with an argument candidate , is result is contained in targets ,
0
example# 3607
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , where ' % s ' is replaced with fixture_name , and result of the function humanize called with an argument fixture_dir .
1
"No fixture '%s' in %s." ||| _STR:0_
example# 3609
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with : fixture_name and result of the function humanize called with an argument fixture_dir .
1
"Multiple fixtures named '%s' in %s. Aborting." ||| _STR:0_
example# 3610
extend fixture_files list with fixture_files_in_dir .
0
example# 3611
if fixture_name is not equal to string _STR:0_ and fixture_files is false ,
1
'initial_data' ||| _STR:0_
example# 3612
call the method warnings.warn [ warnings . warn ] with an argument string _STR:0_ where ' % s ' is replaced with fixture_name .
1
"No fixture named '%s' found." ||| _STR:0_
example# 3613
return fixture_files .
0
example# 3614
decorator cached_property ,
0
example# 3615
define the method fixture_dirs with an argument self .
0
example# 3616
dirs is an empty dictionary .
0
example# 3617
for ever app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 3618
if self.app_label [ self . app_label ] is true and app_config.label [ app_config . label ] is not equal to self.app_label [ self . app_label ] ,
0
example# 3619
skip this loop iteration .
0
example# 3620
join app_config.path [ app_config . path ] and string _STR:0_ into a valid file path , substitute it for app_dir .
1
'fixtures' ||| _STR:0_
example# 3621
if app_dir is a directory ,
0
example# 3622
append app_dir to dirs list .
0
example# 3623
convert settings.FIXTURE_DIRS [ settings . FIXTURE_DIRS ] to a list , extend dirs by it .
0
example# 3624
append an empty string to dirs list .
0
example# 3625
call the function os.path.realpath [ os . path . realpath ] with an argument d , use the result as an argument for the call to the function os.path.abspath [ os . path . abspath ] ,
0
example# 3626
use the result as an argument for the call to the upath function , for every d in dirs , append the results into a list , substitute the resulting list for dirs . return dirs .
0
example# 3627
define the method parse_name with arguments self and fixture_name .
0
example# 3630
substitute the last element of parts for cmp_fmt .
0
example# 3631
substitute the last element of parts for parts .
0
example# 3632
if not ,
0
example# 3633
cmp_fmt is None .
0
example# 3634
if length of parts is greater than integer 1 .
1
1.1 ||| _STR:0_
example# 3635
if last element of parts is contained in self.serialization_formats [ self . serialization_formats ] ,
0
example# 3636
substitute the last element of parts for ser_fmt .
0
example# 3637
substitute the last element of parts for parts .
0
example# 3638
if not ,
0
example# 3639
raise an CommandError with an argument string _STR:0_ , replace ' % s ' with : elements of last element of parts joined into a string and last element of parts .
1
"Problem installing fixture '%s': %s is not a known serialization format." ||| _STR:0_
example# 3640
if not ,
0
example# 3641
ser_fmt is None .
0
example# 3642
join elements of parts into a string , separated with _STR:0_ , substitute it for name .
1
'.' ||| _STR:0_
example# 3643
return name , ser_fmt and cmp_fmt .
0
example# 3644
derive class SingleZipReader for zipfile.ZipFile [ zipfile . ZipFile ] base class .
0
example# 3646
call the method zipfile.ZipFile.__init___ [ zipfile . ZipFile . __init___ ] with the arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 3648
raise an ValueError with an string _STR:0_ .
1
"Zip-compressed fixtures must contain one file." ||| _STR:0_
example# 3649
define the method read with an argument self .
0
example# 3651
define the function humanize with an argument dirname .
0
example# 3652
if dirname is true , return dirname converted to a string and surounded by single quotes , if not return string _STR:0_ .
1
'absolute path' ||| _STR:0_
example# 3653
from __future__ import unicode_literals into default name space .
0
example# 3654
import module fnmatch .
0
example# 3655
import module glob .
0
example# 3656
import module io .
0
example# 3657
import module os .
0
example# 3658
import module re .
0
example# 3659
import module sys .
0
example# 3660
from itertools import dropwhile into default name space .
0
example# 3661
import module django .
0
example# 3662
from django.core.management.base [ django . core . management . base ] import CommandError and BaseCommand into default name space .
0
example# 3663
from django.core.management.utils [ django . core . management . utils ] import handle_extensions , find_command and popen_wrapper into default name space .
0
example# 3664
from django.utils.encoding [ django . utils . encoding ] import force_st into default name space .
0
example# 3665
from django.utils.functional [ django . utils . functional ] import total_ordering into default name space .
0
example# 3666
from django.utils [ django . utils ] import six into default name space .
0
example# 3667
from django.utils.text [ django . utils . text ] import get_text_list into default name space .
0
example# 3668
from django.utils.jslex [ django . utils . jslex ] import prepare_js_for_gettext into default name space .
0
example# 3670
and result of the bitwise OR performed on the re.MULTILINE [ re . MULTILINE ] and re.DOTALL [ re . DOTALL ] operands , substitute the result for plural_forms_re/ STATUS_OK is integer 0 .
1
0.0 ||| _STR:0_
example# 3671
define the method check_programs with an argument unpacked list programs .
0
example# 3672
for every program in programs ,
0
example# 3673
call the function find_command with an argument program , if it evaluates to None ,
0
example# 3674
raise an CommandError exception with an argument _STR:0_ , where ' % s ' is replaced with program .
2
0.0 ||| _STR:1_
"Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." ||| _STR:0_
example# 3675
total_ordering decorator ,
0
example# 3676
derive the class TranslatableFile from the object class .
0
example# 3678
substitute file_name for self.file_name [ self . file_name ] .
0
example# 3679
substitute dirpath for self.dirpath [ self . dirpath ] .
0
example# 3680
substitute locale_dir for self.locale_dir [ self . locale_dir ] .
0
example# 3681
define the method __repr__with an argument self .
0
example# 3682
join self.dirpath [ self . dirpath ] and self.file [ self . file ] in a string , substitute with it ' % s ' in string _STR:0_ , return the result .
1
"<TranslatableFile: %s>" ||| _STR:0_
example# 3683
define the method __eq__ with self and other arguments :
0
example# 3684
if self.path [ self . path ] equals other.path [ other . path ] , return boolean True , if not return boolean False .
0
example# 3685
define the mehod __lt__ with self and other .
0
example# 3686
if self.path [ self . path ] is lesser than other.path [ other . path ] , return boolean True , otherwise return boolean False .
0
example# 3687
property decorator .
0
example# 3688
define the method path with an argument self .
0
example# 3689
join self.dirpath [ self . dirpath ] and self.file [ self . file ] into a file path , return it .
0
example# 3691
from django.conf [ django . conf ] import settings into default namespace .
0
example# 3692
from django.utils.translation [ django . utils . translation ] import templatize into default namespace .
0
example# 3694
substitute ' % s ' is string _STR:0_ with self.file [ self . file ] and self.dirpath [ self . dirpath ] , write it to command.stdout [ command . stdout ] .
1
'processing file %s in %s\n' ||| _STR:0_
example# 3695
call the method os.path.splitext [ os . path . splitext ] with an argument self.file [ self . file ] , assign the result to _ and file_ext .
0
example# 3696
if domain equals a string _STR:0_ and file_ext is contained in command.extensions [ command . extensions ] ,
1
'djangojs' ||| _STR:0_
example# 3697
is_templatized is boolean True .
0
example# 3698
join self.dirpath [ self . dirpath ] and self.file [ self . file ] into a file path , substitute it for orig_file .
0
example# 3699
call the function io.open [ io . open ] with orig_file and encoding set to settings.FILE_CHARSET [ settings . FILE_CHARSET ] , with the result renamed to fp ,
0
example# 3700
perform the following : call the method fp.read [ fp . read ] , substitute the result for src_data .
0
example# 3701
call the function prepare_js_for_gettext with an argument src_data , substitute it for src_data .
0
example# 3702
convert self.file [ self . file ] to a string and append _STR:0_ string to it , substitute the result for thefile .
1
'.c' ||| _STR:0_
example# 3703
join self.dirpath [ self . dirpath ] and thefile in a string , substitute the result for work_file .
0
example# 3705
with the result renamed to fp , perform the following : call the method fp.write [ fp . write ] with an arguments src_data .
0
example# 3707
append work_file to args .
0
example# 3708
otherwise if domains equals a string django_STR:0_.py [ django_STR:0_ . py ] ' or file_ext is contained in command.extensions [ command . extensions ] ,
1
' and, file_ext equals ' ||| _STR:0_
example# 3709
substitute self.file [ self . file ] for thefile .
0
example# 3710
join self.dirpath [ self . dirpath ] and self.file [ self . file ] into a file path , substitute it for orig_file .
0
example# 3711
if file_ext is contained in command.extensions [ command . extensions ] , is_templatized is boolean True , otherwise it is boolean False .
0
example# 3712
if is_templatized is true ,
0
example# 3714
with the result renamed to fp , perform the following : call the method fp.read [ fp . read ] , substitute the result for src_data .
0
example# 3715
convert self.file [ self . file ] to string and append string _STR:0_ to it , substitute the result for thefile .
1
'.py' ||| _STR:0_
example# 3718
and encoding set to string _STR:0_ as arguments , with the result renamed to fp , perform the following : call the method fp.write [ fp . write ] with an argument content .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 3719
join self.dirpath [ self . dirpath ] , thefile into a file path , substitute it for work_file .
0
example# 3721
append work_file to args .
0
example# 3722
if not ,
0
example# 3723
return nothing .
0
example# 3724
call the function popen_wrapper with argument args , assign the result to msgs , errors and status .
0
example# 3725
if errors is true ,
0
example# 3726
if status is not equal to STATUS_OK ,
0
example# 3727
if is_templatized is true ,
0
example# 3728
call the function os.unlink [ os . unlink ] with an argument work_file .
0
example# 3729
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' are replaced by sel.file [ sel . file ] and errors , respectively .
1
"errors happened while running xgettext on %s\n%s" ||| _STR:0_
example# 3731
call the method command.stdout.write [ command . stdout . write ] with an argument errors .
0
example# 3732
if msgs is true ,
0
example# 3734
call the method msgs.decode [ msgs . decode ] with an argument string _STR:0_ , substitute the result for msgs .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 3735
join into a file path : self.locale_dir [ self . locale_dir ] and string _STR:0_ appended to domain converted to string , substitute it for potfile .
1
'.pot' ||| _STR:0_
example# 3736
if is_templatized is true ,
0
example# 3737
if os.name [ os . name ] equals string _STR:0_ ,
1
'nt' ||| _STR:0_
example# 3738
append work_file to string _STR:0_ , substitute it for old .
1
'#: ' ||| _STR:0_
example# 3739
append orig_file to string _STR:0_ , substitute it for new .
1
'#: ' ||| _STR:0_
example# 3740
if not ,
0
example# 3741
append work_file to string _STR:0_ , substitute it for old .
1
'#: ' ||| _STR:0_
example# 3742
append orig_file to string _STR:0_ , substitute it for new .
1
'#: ' ||| _STR:0_
example# 3743
replace every occurrence of old for new in msgs , substitute the result for msgs .
0
example# 3745
if is_templatized is true ,
0
example# 3746
call the function os.unlink [ os . unlink ] with an argument work_file .
0
example# 3748
if potfile fie exists ,
0
example# 3750
if not ,
0
example# 3751
replace every occurrence of string _STR:0_ for string _STR:1_ in msgs , substitute the result for msgs .
3
'charset=CHARSET' ||| _STR:0_
'charset=UTF-8' ||| _STR:1_
-8- ||| _STR:2_
example# 3753
call the method fp.write [ fp . write ] with an argument msgs .
0
example# 3754
derive the class Command from the BaseCommands base class .
0
example# 3755
help is a string _STR:0_ _STR:1_ _STR:2_ _STR:3_ _STR:4_ .
5
"Runs over the entire source tree of the current directory and " ||| _STR:0_
"pulls out all strings marked for translation. It creates (or updates) a message " ||| _STR:1_
"--locale, --exclude or --all options." ||| _STR:4_
"file in the conf/locale (in the django tree) or locale (for projects and " ||| _STR:2_
"applications) directory.\n\nYou must run this command with one of either the " ||| _STR:3_
example# 3756
requires_system_checks is boolean False .
0
example# 3757
leave_locale_alone is boolean True
0
example# 3758
msgmerge_options is an list with elements : strings _STR:0_ and _STR:1_ .
2
'-q' ||| _STR:0_
'--previous' ||| _STR:1_
example# 3759
msguniq_options is an list with elements : string _STR:0_ .
2
-8- ||| _STR:1_
'--to-code=utf-8' ||| _STR:0_
example# 3760
msgattrib_options is an list with elements : string _STR:0_ .
1
'--no-obsolete' ||| _STR:0_
example# 3761
xgettext_options is an list with elements : strings _STR:0_ and _STR:1_ .
3
'--from-code=UTF-8' ||| _STR:0_
-8- ||| _STR:2_
'--add-comments=Translators' ||| _STR:1_
example# 3776
get the value under the _STR:0_ key of the options dictionary , substitute it for locale .
1
'locale' ||| _STR:0_
example# 3777
get the value under the _STR:0_ key of the options dictionary , substitute it for exclude .
1
'exclude' ||| _STR:0_
example# 3778
get the value under the _STR:0_ key of the options dictionary , substitute it for self.domain [ self . domain ] .
1
'domain' ||| _STR:0_
example# 3779
get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3780
get the value under the _STR:0_ key of the options dictionary , substitute it for process_all .
1
'all' ||| _STR:0_
example# 3781
get the value under the _STR:0_ key of the options dictionary , substitute it for extensions .
1
'extensions' ||| _STR:0_
example# 3782
get the value under the _STR:0_ key of the options dictionary , substitute it for self.symlinks [ self . symlinks ] .
1
'symlinks' ||| _STR:0_
example# 3783
get the value under the _STR:0_ key of the options dictionary , substitute it for ignore_patterns .
1
'ignore_patterns' ||| _STR:0_
example# 3784
get the value under the _STR:0_ key of the options dictionary , if it is true ,
1
'use_default_ignore_patterns' ||| _STR:0_
example# 3786
put elements of ignore_patterns into a set , substitute the length of it for self.ignore_patterns [ self . ignore_patterns ] .
0
example# 3787
get the value under the _STR:0_ key of the options dictionary , if it is true ,
1
'no_wrap' ||| _STR:0_
example# 3788
append list containing string _STR:0_ to self.msgmerge_options [ self . msgmerge_options ]
1
'--no-wrap' ||| _STR:0_
example# 3789
append list containing string _STR:0_ to self.msguniq_options [ self . msguniq_options ] .
1
'--no-wrap' ||| _STR:0_
example# 3790
append list containing string _STR:0_ to self.msgattrib_options [ self . msgattrib_options ] .
1
'--no-wrap' ||| _STR:0_
example# 3791
append list containing string _STR:0_ to self.xgettext_options [ self . xgettext_options ] .
1
'--no-wrap' ||| _STR:0_
example# 3792
get the value under the _STR:0_ key of the options dictionary , if it is true ,
1
'no_location' ||| _STR:0_
example# 3793
append list containing string _STR:0_ to self.msgmerge_options [ self . msgmerge_options ] .
1
'--no-location' ||| _STR:0_
example# 3794
append list containing string _STR:0_ to self.msguniq_options [ self . msguniq_options ] .
1
'--no-location' ||| _STR:0_
example# 3795
append list containing string _STR:0_ to self.msgattrib_options [ self . msgattrib_options ] .
1
'--no-location' ||| _STR:0_
example# 3796
append list containing string _STR:0_ to self.xgettext_options [ self . xgettext_options ] .
1
'--no-location' ||| _STR:0_
example# 3797
get the value under the _STR:0_ key of the options dictionary , substitute it for self.no_obsolete [ self . no_obsolete ] .
1
'no_obsolete' ||| _STR:0_
example# 3798
get the value under the _STR:0_ key of the options dictionary , substitute it for self.keep_pot [ self . keep_pot ] .
1
'keep_pot' ||| _STR:0_
example# 3799
if self.domain [ self . domain ] is not equal to string _STR:0_ or string _STR:1_ ,
2
'djangojs' ||| _STR:1_
'django' ||| _STR:0_
example# 3800
raise an CommandError exception with an argument string _STR:0_ .
1
"currently makemessages only supports domains 'django' and 'djangojs'" ||| _STR:0_
example# 3801
if self.domain [ self . domain ] equals to string _STR:0_ ,
1
'djangojs' ||| _STR:0_
example# 3802
if extensions is false , substitute it for exts , otherwise exts is a list containing string _STR:0_ .
1
'js' ||| _STR:0_
example# 3803
if not ,
0
example# 3805
call the function handle_extensions exts , substitute self.extensions [ self . extensions ] .
0
example# 3806
evaluate the boolean expression : locale is None and exclude is false and process_all is false ,
0
example# 3807
if the result is true or self.domain [ self . domain ] is not None , raise an CommandError exception with an argument string _STR:0_ , where ' % s ' are replaced by : return value of the function os.path.basename [ os . path . basename ] called with first element of sys.argv [ sys . argv ] as an argument , and second element of sys.argv [ sys . argv ] .
1
"Type '%s help %s' for usage information." ||| _STR:0_
example# 3808
from django.conf [ django . conf ] import settings into default namespace .
0
example# 3809
if settings.configured [ settings . configured ] ,
0
example# 3810
settings.USE_I18N [ settings . USE_I18N ] is boolean True .
1
181 ||| _STR:0_
example# 3811
if not ,
0
example# 3812
call the method settings.configure [ settings . configure ] with an argument USE_I18N set to boolean True .
1
181 ||| _STR:0_
example# 3814
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ ,
1
'examining files with the extensions: %s\n' ||| _STR:0_
example# 3816
self.locale_paths [ self . locale_paths ] is an empty list .
0
example# 3817
self.default_locale_path [ self . default_locale_path ] is None .
0
example# 3818
join _STR:0_ and _STR:1_ into a file path , if it is a directory ,
2
'locale' ||| _STR:1_
'conf' ||| _STR:0_
example# 3819
join _STR:0_ and _STR:1_ into a file path , use it as an argument for the call the method os.path.abspath [ os . path . abspath ] , put the results into a list , substitute self.locale_paths [ self . locale_paths ] for it .
2
'locale' ||| _STR:1_
'conf' ||| _STR:0_
example# 3820
substitute first element of self.locale_paths [ self . locale_paths ] for self.default_locale_path [ self . default_locale_path ] .
0
example# 3821
self.invoked_for_django [ self . invoked_for_django ] is boolean True .
0
example# 3822
if not ,
0
example# 3823
convert settings.LOCALE_PATHS [ settings . LOCALE_PATHS ] into a list and extend list self.locale_paths [ self . locale_paths ] with it .
0
example# 3824
if _STR:0_ is a directory ,
1
'locale' ||| _STR:0_
example# 3825
call the function os.path.abspath [ os . path . abspath ] with an argument _STR:0_ , append the result to self.locale_paths [ self . locale_paths ] .
1
'locale' ||| _STR:0_
example# 3826
if self.locale_paths [ self . locale_paths ] is true ,
0
example# 3827
substitute first element of self.locale_paths [ self . locale_paths ] for self.default_locale_path [ self . default_locale_path ] .
0
example# 3828
if self.default_locale_path [ self . default_locale_path ] directory doesnt exists ,
0
example# 3829
create a directory self.default_locale_path [ self . default_locale_path ] .
0
example# 3830
call the function glob.glob [ glob . glob ] with an argument : string _STR:0_ appended to self.default_locale_path [ self . default_locale_path ] converted into a string , filter out the results for which function os.path.isdir [ os . path . isdir ] returns false , substitute the result for locale_dirs .
1
'/*' ||| _STR:0_
example# 3831
map the locale_dirs elements with mapping function os.path.basename [ os . path . basename ] , substitute the result for all_locales .
0
example# 3832
if process_all is true ,
0
example# 3833
substitute all_locales for locales .
0
example# 3834
if not ,
0
example# 3835
if locale is not false or None , substitute it for locales , otherwise substitute all_locales for locales .
0
example# 3836
locales is a difference between the locales and exclude sets .
0
example# 3837
if locales is true ,
0
example# 3839
call the function check_programs with an argument string _STR:0_ .
1
'xgettext' ||| _STR:0_
example# 3840
try ,
0
example# 3841
call the method self.build_potfiles [ self . build_potfiles ] , substitute the result for potfiles .
0
example# 3842
for every locale in locales ,
0
example# 3844
replace ' % s ' in string _STR:0_ with locale , write it to self.stdout [ self . stdout ] .
1
"processing locale %s\n" ||| _STR:0_
example# 3845
for every potfile in potfiles ,
0
example# 3847
finally perform ,
0
example# 3848
if self.keep_pot [ self . keep_pot ] is false ,
0
example# 3849
call the method self.remove_potfiles [ self . remove_potfiles ] .
0
example# 3850
define the method build_potfiles with an argument self .
0
example# 3851
call the method self.find_files [ self . find_files ] with an argument string _STR:0_ , substitute the result for file_list .
1
'.' ||| _STR:0_
example# 3852
call the method self.remove_potfiles [ self . remove_potfiles ] .
0
example# 3853
for f in file_list ,
0
example# 3854
try ,
0
example# 3856
if except UnicodeDecodeError exception is caught ,
0
example# 3857
substitute ' % s ' in string _STR:0_ with f.file [ f . file ] and f.dirpath [ f . dirpath ] , write it to self.stdout [ self . stdout ] .
1
"UnicodeDecodeError: skipped file %s in %s" ||| _STR:0_
example# 3858
potfiles is an empty list .
0
example# 3859
for every path in self.locale_paths [ self . locale_paths ] ,
0
example# 3860
join into a path : path and string _STR:0_ , where ' % s ' is replaced with self.domain [ self . domain ] converted into a string .
1
'%s.pot' ||| _STR:0_
example# 3861
if potfile file path doesnt exist ,
0
example# 3862
skip this loop iteration .
0
example# 3863
append self.msguniq_options [ self . msguniq_options ] to a list containing a string _STR:0_ , append list containing potfile to the result , substitute it for args .
1
'msguniq' ||| _STR:0_
example# 3864
call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively .
0
example# 3866
call the method msgs.decode [ msgs . decode ] with an argument string _STR:0_ , substitute it for msgs .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 3867
if errors is true ,
0
example# 3868
if status is not equal to STATUS_OK ,
0
example# 3869
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with errors .
1
"errors happened while running msguniq\n%s" ||| _STR:0_
example# 3871
write errors to self.stdout [ self . stdout ] .
0
example# 3873
with the result renamed to fp , perform the following : write msgs to fp .
0
example# 3874
append potfile to potfiles .
0
example# 3875
return potfiles .
0
example# 3876
define the method remove_potfiles with an argument self .
0
example# 3877
for every path in self.locale_paths [ self . locale_paths ] ,
0
example# 3878
join into a file path : path and string _STR:0_ , where ' % s ' is replaced with self.domain [ self . domain ] converted into a string , substitute the result for pot_path .
1
'%s.pot' ||| _STR:0_
example# 3879
if pot_path file path exists ,
0
example# 3880
call the method os.unlink [ os . unlink ] with an argument pot_path .
0
example# 3881
define the method find_potfiles with an arguments self and root .
0
example# 3882
define the function is_ignored with arguments path and ignore_patterns .
0
example# 3883
call the function os.path.basename [ os . path . basename ] with an arguments path , substitute the result for filename .
0
example# 3884
ignore is a lambda function with pattern as an argument , return value is the return value of the function fnmatch.fnmatchcase [ fnmatch . fnmatchcase ] , called with arguments : filename and pattern .
0
example# 3885
call the function ignore with an argument pattern , for every pattern in ignore_patterns , if any resulting element is true , return boolean True , otherwise return boolean False .
0
example# 3886
convert os.sep [ os . sep ] into a string and append _STR:0_ to it , substitute the result for dir_suffix .
1
'*' ||| _STR:0_
example# 3887
for p in self.ignore_patterns [ self . ignore_patterns ] if p ends with dir_suffix take sliced list p from the start , to the negative length of the dir_suffix as the end index and append it to a list , if p doesnt end with dir_suffix , append p to a list , substitute resulting list for norm_patterns .
0
example# 3888
all_files is an empty list .
0
example# 3890
for every dirpath , dirnames and filenames in the result , for every dirname in list dirnames ,
0
example# 3891
join dirpath and dirname into a file path , use is as an argument for the call to the function os.path.join [ os . path . join ] ,
0
example# 3892
use the result as an argument for the call to the os.path.join [ os . path . join ] function , use the result and the norm_patterns as arguments for the call to the is_ignored function , if it evaluates to true , remove dirname from the dirnames .
0
example# 3894
replace ' % s ' in string _STR:0_ with dirname , write it to self.stdout [ self . stdout ] stream .
1
'ignoring directory %s\n' ||| _STR:0_
example# 3895
otherwise if dirname equals string _STR:0_ ,
1
'locale' ||| _STR:0_
example# 3896
remove dirname from the dirnames .
0
example# 3897
call the method os.path.abspath [ os . path . abspath ] with an argument dirpath , join the result and dirname into a file path , inset it at the beggining of self.locale_paths [ self . locale_paths ] .
0
example# 3898
for every filename in filenames ,
0
example# 3899
join dirpath and filename into path , use it as an argument for the call to the function os.path.normpath [ os . path . normpath ] , substitute it for file_path .
0
example# 3900
call the function is_ignored , with arguments : file_path and self.ignore_patterns [ self . ignore_patterns ] , if it evaluates to true ,
0
example# 3902
replace ' % s ' in string _STR:0_ with filename and dirpath , write it to self.stdout [ self . stdout ] .
1
'ignoring file %s in %s\n' ||| _STR:0_
example# 3903
if not ,
0
example# 3904
locale_dir is None .
0
example# 3905
for every path in self.locale_paths [ self . locale_paths ] ,
0
example# 3906
call the function os.path.abspath [ os . path . abspath ] with an argument dirpath , if it starts with return value of the method os.path.dirname [ os . path . dirname ] ,
0
example# 3907
called with an argument path , substitute path for locale_dir .
0
example# 3908
break the loop execution .
0
example# 3909
if locale_dir is false ,
0
example# 3910
substitute self.default_locale_path [ self . default_locale_path ] for locale_dir .
0
example# 3911
if locale_dir is false ,
0
example# 3912
raise an CommandError with an argument string _STR:0_ ,
1
"Unable to find a locale path to store translations for file %s" ||| _STR:0_
example# 3913
where ' % s ' is replaced with file_path . create an object TranslatableFile with arguments : dirpath , filename and locale_dir , append it to all_files .
0
example# 3914
sort all_files and return it .
0
example# 3915
define the method write_po_file with arguments self , potfile and locale .
0
example# 3916
call the method os.path.dirname [ os . path . dirname ] with an argument potfile , join the result , locale and string _STR:0_ into a file path , substitute it for basedir .
1
'LC_MESSAGES' ||| _STR:0_
example# 3917
if basedir is not a directory ,
0
example# 3918
make basedir directory ,
0
example# 3919
convert self.domain [ self . domain ] into a string and append string _STR:0_ to it , join basedir and result in file path , substitute it for pofile .
1
'.po' ||| _STR:0_
example# 3920
if pofile path exists ,
0
example# 3921
append self.msgmerge_options [ self . msgmerge_options ] to a list containing string _STR:0_ , append to it a list containing pofile and potfile , substitute the result for args .
1
'msgmerge' ||| _STR:0_
example# 3922
call the function popen_wrapper with an argument args , assign the result to msgs , errors and status .
0
example# 3924
call the method msgs.decode [ msgs . decode ] with an argument string _STR:0_ , substitute the result for msgs .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 3925
if errors is true ,
0
example# 3926
if statue is not equal to STATUS_OK .
0
example# 3927
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with errors .
1
"errors happened while running msgmerge\n%s" ||| _STR:0_
example# 3929
write errors to self.stdout [ self . stdout ] .
0
example# 3930
if not ,
0
example# 3932
with the result renamed to fp , perform the following : read file fp and substitute the result for msgs .
0
example# 3933
if self.invoked_for_django [ self . invoked_for_django ] is false ,
0
example# 3934
call the method self.copy_plural_forms [ self . copy_plural_forms ] with arguments : msgs and locale , substitute it for msgs .
0
example# 3935
substitute ' % s ' in string _STR:0_ with self.domain [ self . domain ] , replace all the occurrences of previous string in msgs for an empty string , substitute the result for msgs .
1
"#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" ||| _STR:0_
example# 3937
with the result renamed to fp , perform the following : write msgs to fp .
0
example# 3938
if self.no_obsolete [ self . no_obsolete ] is true ,
0
example# 3939
append self.msgattrib_options [ self . msgattrib_options ] to a list containing string _STR:0_ , append to it a list containing string _STR:1_ , pofile and pofile , substitute the result for args .
2
'msgattrib' ||| _STR:0_
'-o' ||| _STR:1_
example# 3940
call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively .
0
example# 3941
if errors is true ,
0
example# 3942
if status is not equal to STATUS_OK ,
0
example# 3943
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with errors .
1
"errors happened while running msgattrib\n%s" ||| _STR:0_
example# 3945
write errors to self.stdout [ self . stdout ] .
0
example# 3946
define the method copy_plural_forms with arguments self , msgs and locale .
0
example# 3947
call the function os.path.dirname [ os . path . dirname ] with an argument django.__file__ [ django . __file__ ] , join the result into a path , use it as an argument for the call to the function os.path.normpath [ os . path . normpath ] , substitute the result for django_dir .
0
example# 3948
if self.domain [ self . domain ] equals a string _STR:0_ ,
1
'djangojs' ||| _STR:0_
example# 3950
if not ,
0
example# 3951
domains is a tuple with element string _STR:0_ .
1
'django' ||| _STR:0_
example# 3952
for every domain in domains ,
0
example# 3953
join into a file path : django_dir , _STR:0_ , _STR:1_ , locale , _STR:2_ and string _STR:3_ appended to domain , substitute the result for django_po .
4
'locale' ||| _STR:1_
'.po' ||| _STR:3_
'conf' ||| _STR:0_
'LC_MESSAGES' ||| _STR:2_
example# 3954
if django_po file path exists ,
0
example# 3956
with the result renamed to fp , perform the following : read data from file fp , use the result as an argument for the call to the function plural_forms_re.search [ plural_forms_re . search ] , substitute it for m .
0
example# 3957
if m is true ,
0
example# 3958
call the method m.group [ m . group ] with an argument string _STR:0_ , use the result as an argument for the call to the force_str , substitute the result for plural_form_line .
1
'value' ||| _STR:0_
example# 3960
replace ' % s ' in string _STR:0_ with plural_form_line , write it to self.stdout [ self . stdout ] .
1
"copying plural forms: %s\n" ||| _STR:0_
example# 3961
lines is an empty list .
0
example# 3962
found is boolean False .
0
example# 3963
split msgs by newline characters , for every line in result ,
0
example# 3964
if found is false and , line is false or return value of the function plural_forms_re.search [ plural_forms_re . search ] called with an argument line is false ,
0
example# 3965
append newline to plural_form_line , substitute the result for line .
0
example# 3966
found is boolean True .
0
example# 3967
append line to lines .
0
example# 3968
join elements of lines into a string , separated by newline characters , substitute it for msgs .
0
example# 3969
break the loop execution .
0
example# 3970
return msgs .
0
example# 3971
import module sys .
0
example# 3972
import module os .
0
example# 3973
import module operator .
0
example# 3974
from django.apps [ django . apps ] import apps into default name space .
0
example# 3975
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3976
from django.db.migrations [ django . db . migrations ] import Migration into default name space .
0
example# 3977
from django.db.migrations.loader [ django . db . migrations . loader ] import MigrationLoader into default name space .
0
example# 3978
from django.db.migrations.autodetector [ django . db . migrations . autodetector ] import MigrationAutodetector into default name space .
0
example# 3979
from django.db.migrations.questioner [ django . db . migrations . questioner ] import MigrationQuestioner and InteractiveMigrationQuestioner into default name space .
0
example# 3980
from django.db.migrations.state [ django . db . migrations . state ] import ProjectState into default name space .
0
example# 3981
from django.db.migrations.writer [ django . db . migrations . writer ] import MigrationWriter into default name space .
0
example# 3982
from django.utils.six.moves [ django . utils . six . moves ] import reduce into default name space .
0
example# 3983
derive the class Command from the BaseCommand class .
0
example# 3984
help is a string _STR:0_ .
1
"Creates new migration(s) for apps." ||| _STR:0_
example# 3992
get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3993
get the value under the _STR:0_ key of the options dictionary , substitute it for self.interactive [ self . interactive ] .
1
'interactive' ||| _STR:0_
example# 3994
get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.dry_run [ self . dry_run ] , if not , self.dry_run [ self . dry_run ] is boolean False .
1
'dry_run' ||| _STR:0_
example# 3995
get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.merge [ self . merge ] , if not , self.merge [ self . merge ] is boolean False .
1
'merge' ||| _STR:0_
example# 3996
get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.empty [ self . empty ] , if not , self.empty [ self . empty ] is boolean False .
1
'empty' ||| _STR:0_
example# 3997
crate a set containing of app_labels elements , substitute it for app_labels .
0
example# 3998
bad_app_labels is an empty set .
0
example# 3999
for every app_label in app_labels ,
0
example# 4000
try ,
0
example# 4001
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label .
0
example# 4002
if LookupError exception is caught ,
0
example# 4003
call the method bad_app_labels with an argument app_label ,
0
example# 4004
if bad_app_labels is true ,
0
example# 4005
for every app_label in bad_app_labels ,
0
example# 4006
write string _STR:0_ with ' % s ' where ' % s ' is replaced with app_label , write it for self.stderr [ self . stderr ] .
1
"App '%s' could not be found. Is it in INSTALLED_APPS?" ||| _STR:0_
example# 4009
call the method loader.detect_conflicts [ loader . detect_conflicts ] , substitute the result for conflicts .
0
example# 4010
if conflicts is true and self.merge [ self . merge ] is false ,
0
example# 4011
for every app and names in result of the method conflicts.items [ conflicts . items ] , join names into a string , separated by _STR:0_ , join it with app into a string , separated with string _STR:1_ , substitute it for name_str .
2
', ' ||| _STR:0_
'; ' ||| _STR:1_
example# 4012
substitute _STR:0_python manage.py [ manage . py ] makemigrations -- merge ' '' , with name_str , use it as an argument to throw an CommandError exception .
1
'%s\ in string "Conflicting migrations detected (%s).\nTo fix them run ' ||| _STR:0_
example# 4013
if self.merge [ self . merge ] is true and conflicts is false ,
0
example# 4014
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"No conflicts detected to merge." ||| _STR:0_
example# 4015
return nothing .
0
example# 4016
if self.merge [ self . merge ] and conflicts are both true ,
0
example# 4019
if self.empty [ self . empty ] is true ,
0
example# 4020
if app_labels is false ,
0
example# 4021
raise an CommandError with an argument string _STR:0_ .
1
"You must supply at least one app label when using --empty." ||| _STR:0_
example# 4022
crate a dictionary with app mapping and from the class Migration , created with arguments : string _STR:0_ and app , for every app in app_labels .
1
'custom' ||| _STR:0_
example# 4024
call the method self.write_migration_files [ self . write_migration_files ] with an argument changes .
0
example# 4025
return nothing .
0
example# 4029
substitute ' % s ' in string _STR:0_ with the result of the method app_labels.pop [ app_labels . pop ] , write it to self.stdout [ self . stdout ] .
1
"No changes detected in app '%s'" ||| _STR:0_
example# 4031
substitute ' % s ' in string _STR:0_ with the app_labels joined into a string , separated by string _STR:1_ , write it to self.stdout [ self . stdout ] .
2
"', '" ||| _STR:1_
"No changes detected in apps '%s'" ||| _STR:0_
example# 4032
if not ,
0
example# 4033
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"No changes detected" ||| _STR:0_
example# 4034
return nothing .
0
example# 4035
call the method self.write_migration_files [ self . write_migration_files ] with an argument changes .
0
example# 4036
define the method write_migration_files with arguments self and changes .
0
example# 4037
directory_created is an empty dictionary .
0
example# 4038
for every app_label and app_migrations in result of the method changes.items [ changes . items ] ,
0
example# 4040
substitute ' % s ' in a string _STR:0_ with app_label , append newline to it , use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] .
1
"Migrations for '%s':" ||| _STR:0_
example# 4041
for every migration in app_migrations ,
0
example# 4042
writer is an instance of MigrationWriter class , created with an argument migration .
0
example# 4044
substitute ' % s ' in a string _STR:0_ with return value of the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method called with argument writer.filename [ writer . filename ] , write the result to self.stdout [ self . stdout ] .
1
"  %s:\n" ||| _STR:0_
example# 4045
for every operation in migration.operations [ migration . operations ] ,
0
example# 4046
substitute ' % s ' in a string _STR:0_ with return value of the operation.describe [ operation . describe ] method , write the result to self.stdout [ self . stdout ] .
1
"    - %s\n" ||| _STR:0_
example# 4047
if self.dry_run [ self . dry_run ] is false ,
0
example# 4048
call the function os.path.dirname [ os . path . dirname ] with an argument writer.path [ writer . path ] , substitute the result for migrations_directory .
0
example# 4049
get the value under the app_label key of the directory_created dictionary , if exists and it is false ,
0
example# 4050
if migrations_directory is not a directory ,
0
example# 4051
make a directory migrations_directory .
0
example# 4052
join migrations_directory and string _STR:0_ into a file path , substitute it for init_path .
1
"__init__.py" ||| _STR:0_
example# 4053
if init_path is not a file ,
0
example# 4054
crate a file named init_path .
0
example# 4055
value under the all_label key of the directory_created dictionary is boolean True .
0
example# 4056
call the method writer.as_string [ writer . as_string ] , substitute the result for migration_string .
0
example# 4057
open writer.path [ writer . path ] file in write mode , with the file descriptor as fh , perform ,
0
example# 4058
write migration_string to file fh .
0
example# 4060
substitute ' % s ' in a string _STR:0_ with writer.filename [ writer . filename ] , append newline to it , use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] .
1
"Full migrations file '%s':" ||| _STR:0_
example# 4061
call the method writer.as_string [ writer . as_string ] , append newline to the result , write it to self.stdout [ self . stdout ] .
0
example# 4062
define the method handle_merge with arguments self , loader and conflicts .
0
example# 4063
if self.interactive [ self . interactive ] is true ,
0
example# 4064
questioner is an instance of a InteractiveMigrationQuestioner class .
0
example# 4065
if not ,
0
example# 4066
questioner is an instance of a InteractiveMigrationQuestioner class , created with an argument : defaults set to dictionary with entry : boolean True for _STR:0_ .
1
'ask_merge' ||| _STR:0_
example# 4067
for every app_label and migration_names in result of the method conflicts.items [ conflicts . items ] ,
0
example# 4068
merge_migrations is an empty list .
0
example# 4069
for every migration_name in migration_names ,
0
example# 4070
call the method loader.get_migration [ loader . get_migration ] with arguments app_label and migration_name , substitute the result for migration .
0
example# 4072
append migration to merge_migrations .
0
example# 4073
common_ancestor is None .
0
example# 4074
for m in merge_migrations append m.ancestry [ m . ancestry ] to a list , zip the resulting list into tuples of pairs , for every level in result ,
0
example# 4075
apply operator.eq [ operator . eq ] function to elements of level iterable , until level is reduced to a single value , if the result is true ,
0
example# 4076
substitute first element of level for common_ancestor .
0
example# 4077
if not ,
0
example# 4078
break the loop execution ,
0
example# 4079
if common_ancestor is None ,
0
example# 4080
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with migration_names .
1
"Could not find common ancestor of %s" ||| _STR:0_
example# 4081
for every migration in merge_migrations ,
0
example# 4082
call the method migration.ancestry.index [ migration . ancestry . index ] with an argument common_ancestor , increment the result by one , slice migration.ancestry [ migration . ancestry ] list from the last result as an starting index to the end , substitute the slice for migration.branch [ migration . branch ] .
0
example# 4083
migration.merged_operations [ migration . merged_operations ] is an empty list .
0
example# 4084
for every node_app and node_name in migration.branch [ migration . branch ] ,
0
example# 4085
call the method loader.get_migration [ loader . get_migration ] with arguments node_app and node_name , extend the migration.merged_operations [ migration . merged_operations ] with the operations field of the result .
0
example# 4087
substitute ' % s ' in a string _STR:0_ with app_label , use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] .
1
"Merging %s" ||| _STR:0_
example# 4088
for every migration in merge_migrations ,
0
example# 4089
substitute ' % s ' in a string _STR:0_ with migration.name [ migration . name ] , use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] .
1
"  Branch %s" ||| _STR:0_
example# 4090
for every operation in migration.merged_operations [ migration . merged_operations ] ,
0
example# 4091
substitute ' % s ' in a string _STR:0_ with return value of the operation.describe [ operation . describe ] method , write the result to self.stdout [ self . stdout ] .
1
"    - %s\n" ||| _STR:0_
example# 4092
call the method questioner.ask_merge [ questioner . ask_merge ] with an argument app_label , if it evaluates to true ,
0
example# 4093
numbers is a list containing return value of the MigrationAutodetector.parse_number [ MigrationAutodetector . parse_number ] method called with an argument migration.name [ migration . name ] , for every migration in merge_migrations .
0
example# 4094
try ,
0
example# 4095
biggest_number is maximum numbers element .
0
example# 4096
if ValueError exception is caught ,
0
example# 4097
biggest_number is integer 1 .
1
1.1 ||| _STR:0_
example# 4100
writer is instance of MigrationWriter class , created with new_migration argument .
0
example# 4101
open writer.path [ writer . path ] file in write mode , with the file descriptor as fh , perform the following ,
0
example# 4102
call the method writer.as_string [ writer . as_string ] , write the result to fh file .
0
example# 4104
substitute ' % s ' in a string _STR:0_ with writer path , write it to self.stdout [ self . stdout ] .
1
"\nCreated new merge migration %s" ||| _STR:0_
example# 4105
from __future__ import unicode_literals into default name space .
0
example# 4106
from collections import OrderedDict into default name space .
0
example# 4107
from importlib import import_module into default name space .
0
example# 4108
import module itertools .
0
example# 4109
import module traceback .
0
example# 4110
from django.apps [ django . apps ] import apps into default name space .
0
example# 4111
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 4112
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4113
from django.core.management.color [ django . core . management . color ] import no_style into default name space .
0
example# 4114
from django.core.management.sql [ django . core . management . sql ] import custom_sql_for_model , emit_post_migrate_signal and emit_pre_migrate_signal into default name space .
0
example# 4115
from django.db [ django . db ] import connections , router , transaction and DEFAULT_DB_ALIAS into default name space .
0
example# 4116
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4117
from django.db.migrations.loader [ django . db . migrations . loader ] import MigrationLoader and AmbiguityError into default name space .
0
example# 4118
from django.db.migrations.state [ django . db . migrations . state ] import ProjectState into default name space .
0
example# 4119
from django.db.migrations.autodetector [ django . db . migrations . autodetector ] import MigrationAutodetector into default name space .
0
example# 4120
from django.utils.module_loading [ django . utils . module_loading ] import module_has_submodule into default name space .
0
example# 4121
derive the class Command from the base class BaseCommand .
0
example# 4122
help is a string _STR:0_ .
1
"Updates database schema. Manages both apps with migrations and those without." ||| _STR:0_
example# 4123
define the method add_arguments with self class instance and parse as the arguments .
0
example# 4124
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , nargs set to charcter _STR:1_ , help containing string , _STR:2_ as arguments .
3
'App label of an application to synchronize the state.' ||| _STR:2_
'?' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4125
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , nargs set to charcter _STR:1_ , help containing string , _STR:2_ as arguments .
3
'migration_name' ||| _STR:0_
'?' ||| _STR:1_
'Database state will be brought to the state after that migration.' ||| _STR:2_
example# 4126
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , action containing string _STR:1_ , dest set to string _STR:2_ , default set to True , help containing string _STR:3_ as arguments .
4
'store_false' ||| _STR:1_
'interactive' ||| _STR:2_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:3_
'--noinput' ||| _STR:0_
example# 4127
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , action containing string _STR:1_ , dest set to string _STR:2_ , default set to True , help containing string _STR:3_ as arguments .
4
'--no-initial-data' ||| _STR:0_
'store_false' ||| _STR:1_
'Tells Django not to load any initial data after database synchronization.' ||| _STR:3_
'load_initial_data' ||| _STR:2_
example# 4128
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , action containing string _STR:1_ , dest set to string _STR:2_ , default set to DEFAULT_DB_ALIAS , help containing string _STR:3_ as arguments .
4
'--database' ||| _STR:0_
'database' ||| _STR:2_
'store' ||| _STR:1_
'Nominates a database to synchronize. Defaults to the "default" database.' ||| _STR:3_
example# 4129
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , action containing string _STR:1_ , dest set to string _STR:2_ , default set to False , help containing string _STR:3_ as arguments .
4
'--fake' ||| _STR:0_
'store_true' ||| _STR:1_
'fake' ||| _STR:2_
'Mark migrations as run without actually running them' ||| _STR:3_
example# 4130
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , string _STR:1_ , action contains string _STR:2_ , dest set to string _STR:3_ , default set to False , help containing string _STR:4_ as arguments .
5
'--list' ||| _STR:0_
'list' ||| _STR:3_
'store_true' ||| _STR:2_
'Show a list of all known migrations and which are applied' ||| _STR:4_
'-l' ||| _STR:1_
example# 4131
define the method handle with self instance of a class , list args , dictionary options as arguments .
0
example# 4132
get the value from the options dictionary under the key _STR:0_ , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 4133
get the value from the options dictionary under the key _STR:0_ , substitute it for self.interactive [ self . interactive ] .
1
'interactive' ||| _STR:0_
example# 4134
get the value from the options dictionary under the key _STR:0_ , substitute it for self.show_traceback [ self . show_traceback ] .
1
'traceback' ||| _STR:0_
example# 4135
get the value from the options dictionary under the key _STR:0_ , substitute it for self.load_initial_data [ self . load_initial_data ] .
1
'load_initial_data' ||| _STR:0_
example# 4136
get the value from the options dictionary under the key _STR:0_ , or False if the key dont exists , substitute it for self.test_database [ self . test_database ] .
1
'test_database' ||| _STR:0_
example# 4137
for every app_config in return value of the call to the function apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 4138
if call to the function module_has_submodule with app_config.module [ app_config . module ] and _STR:0_ evaluates to True .
1
"management" ||| _STR:0_
example# 4139
import module _STR:0_ from the package app_config.name [ app_config . name ] .
1
'.management' ||| _STR:0_
example# 4140
get the value under the key _STR:0_ of the options dictionary , substitute it for db .
1
'database' ||| _STR:0_
example# 4141
substitute connections element at the index of the value db for connections .
0
example# 4142
get the value under the _STR:0_ key of options dictionary , if key doesnt exist return False , if the return value is True ,
1
'list' ||| _STR:0_
example# 4143
call the method self.show_migration_list [ self . show_migration_list ] with connection as first argument , as second argument use value under the _STR:0_ key of options dictionary , if exists , if not use None as the second argument , return the result .
1
'app_label' ||| _STR:0_
example# 4144
call the function MigrationExecutor with connection and self.migration_progress_callback [ self . migration_progress_callback ] as arguments , substitute the result fro executor .
0
example# 4145
call the executor.loader.detect_conflicts [ executor . loader . detect_conflicts ] , substitute the result fr conflicts .
0
example# 4146
if conflicts is true ,
0
example# 4147
for every app and names in key , value tuple pairs of conflicts dictionary join names into a string separated by commas , in _STR:0_ substitute ' % s ' with names string and app , respective , join all the previous pairs into a string separated by _STR:1_ , substitute it for name_str .
2
';' ||| _STR:1_
"%s in %s" ||| _STR:0_
example# 4148
raise CommandError exception , with _STR:0_ , with ' % s ' substituted for name_str , as argument .
1
"Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" ||| _STR:0_
example# 4149
run_syncdb is boolean False .
0
example# 4150
target_app_labels_only is boolean True .
0
example# 4151
if values under the _STR:0_ and _STR:1_ keys of the options dictionary are True ,
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4152
assign values under the _STR:0_ and _STR:1_ keys of the options dictionary to the app_label and migration_name , respectively .
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4153
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4154
raise CommandError exception with _STR:0_ , with ' % s ' substituted for app_label , as arguments .
1
"App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" ||| _STR:0_
example# 4155
if migration_name equals to string _STR:0_ ,
1
'zero' ||| _STR:0_
example# 4156
targets is a list containing tuple with two elements , app_label and None .
0
example# 4157
if not ,
0
example# 4158
try ,
0
example# 4159
call the executor.loader.get_migration_by_prefix [ executor . loader . get_migration_by_prefix ] with app_label and migration_name , substitute the result for migration .
0
example# 4160
if AmbiguityError exception is caught ,
0
example# 4161
raise CommandError exception with _STR:0_ , with ' % s ' substituted for migration_name and app_label , respectively , as arguments .
1
"More than one migration matches '%s' in app '%s'. Please be more specific." ||| _STR:0_
example# 4162
if KeyError exception is caught ,
0
example# 4163
raise CommandError exception with _STR:0_ , with ' % s ' substituted for migration_name and app_label , respectively , as arguments .
1
"Cannot find a migration matching '%s' from app '%s'." ||| _STR:0_
example# 4164
targets is a list containing tuple with two elements , app_label and migration.name [ migration . name ] .
0
example# 4165
target_app_labels_only is boolean False .
0
example# 4166
otherwise if value under the _STR:0_ key of options dictionary is true ,
1
'app_label' ||| _STR:0_
example# 4167
substitute the value under the _STR:0_ key of options dictionary for app_label .
1
'app_label' ||| _STR:0_
example# 4168
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4169
raise CommandError exception with _STR:0_ , with ' % s ' substituted for app_label , as arguments .
1
"App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" ||| _STR:0_
example# 4170
for every key in return vale of the method executor.loader.graph.leaf_nodes [ executor . loader . graph . leaf_nodes ] , check if the first element of key equals to app_label , if it does append it to targets list .
0
example# 4171
if not ,
0
example# 4172
call the method executor.loader.graph.leaf_nodes [ executor . loader . graph . leaf_nodes ] and substitute its result for targets .
0
example# 4173
run_syncdb is boolean True .
0
example# 4174
call the executor.migration_plan [ executor . migration_plan ] method with targets as the argument , substitute the result for plan .
0
example# 4175
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 .
1
1.1 ||| _STR:0_
example# 4176
call the self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] method , with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
1
"Operations to perform:" ||| _STR:0_
example# 4177
if run_syncdb and executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] exist ,
0
example# 4178
join the executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] into a string separated by string _STR:0_ append it to the end of a string _STR:1_ , use it as an argument for the call to the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method , use the result of the previous method as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
2
"  Synchronize unmigrated apps: " ||| _STR:1_
', ' ||| _STR:0_
example# 4179
if target_app_labels_only is true ,
0
example# 4180
for every a and n in targets , put a into a set , join all the set elements into a string separated by string _STR:0_ , if set is empty return string _STR:1_ instead , append the previous to the string _STR:2_ , use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] , use the result as an argument for the call to the method self.stdout.write [ self . stdout . write ] .
3
', ' ||| _STR:0_
" Apply all migrations: " ||| _STR:2_
'(none)' ||| _STR:1_
example# 4181
if not ,
0
example# 4182
if element of targets in first row and second column is None ,
0
example# 4183
convert the first element of the first row of targets to string , append it to the string _STR:0_ , use the it as an argument for the call to the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method , use the result to cal the self.stdout.write [ self . stdout . write ] method .
1
"  Unapply all migrations: " ||| _STR:0_
example# 4184
if not ,
0
example# 4185
replace ' % s ' in string _STR:0_ with second and first element of the first targets row , respectively ,
1
"%s, from %s" ||| _STR:0_
example# 4186
append it to the string _STR:0_ , use it as the argument for the call to the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method , call the self.stdout.write [ self . stdout . write ] method with previous return value as an argument . if run_syncdb and executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] is true ,
1
"  Target specific migration: " ||| _STR:0_
example# 4187
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 .
1
1.1 ||| _STR:0_
example# 4188
call the self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] .
1
"Synchronizing apps without migrations:" ||| _STR:0_
example# 4189
call the self.sync_apps [ self . sync_apps ] method with connection and executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] as arguments , substitute it for created_models .
0
example# 4190
if not ,
0
example# 4191
create_models is an empty list .
0
example# 4192
if the value under the _STR:0_ key of the options dictionary exists ,
1
'test_flush' ||| _STR:0_
example# 4195
call the self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] method with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
1
"Running migrations:" ||| _STR:0_
example# 4196
if plan is not true ,
0
example# 4198
call the method self.stdout.write [ self . stdout . write ] with string _STR:0_ as an argument .
1
"  No migrations to apply." ||| _STR:0_
example# 4199
call the MigrationAutodetector function with arguments , return value of the call to the method executor.loader.project_state [ executor . loader . project_state ] , and return value of the call to the method ProjectState.from_apps [ ProjectState . from_apps ] with apps as an argument , assign it to the autodetector .
0
example# 4200
call the method autodetector.changes [ autodetector . changes ] with the graph set to executor.loader.graph [ executor . loader . graph ] as an argument , substitute it for the changes .
0
example# 4201
if changes is true ,
0
example# 4202
call the method self.style.NOTICE [ self . style . NOTICE ] with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
1
"  Your models have changes that are not yet reflected in a migration, and so won't be applied." ||| _STR:0_
example# 4203
call the method self.style.NOTICE [ self . style . NOTICE ] with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
1
"  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ||| _STR:0_
example# 4204
if not ,
0
example# 4205
call the executor.migrate [ executor . migrate ] method with , targets , plan and fake set to the value under the _STR:0_ key of options dictionary , if the _STR:0_ key doesnt exists set fake to boolean False , as arguments .
1
'fake' ||| _STR:0_
example# 4206
call the method emit_post_migrate_signal with created_models , self.verbosity [ self . verbosity ] , self.interactive [ self . interactive ] and connection.alias [ connection . alias ] as arguments .
0
example# 4207
define the method migration_progress_callback with self class instance , action , migration and fake set to boolean False as arguments .
0
example# 4209
if action equals to string _STR:0_ ,
1
"apply_start" ||| _STR:0_
example# 4210
call the self.stdout.write [ self . stdout . write ] method , with string _STR:0_ with ' % s ' replaced with migration and ending set to _STR:1_ , as arguments .
2
'' ||| _STR:1_
"  Applying %s..." ||| _STR:0_
example# 4211
flush the output buffer of the self.stdout [ self . stdout ] object .
0
example# 4212
otherwise if action equals to string _STR:0_ ,
1
'apply_success' ||| _STR:0_
example# 4213
if fake is true ,
0
example# 4214
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" FAKED" ||| _STR:0_
example# 4215
if not ,
0
example# 4216
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" OK" ||| _STR:0_
example# 4217
otherwise if action equals to string _STR:0_ .
1
'unapply_start' ||| _STR:0_
example# 4218
call the self.stdout.write [ self . stdout . write ] method , with string _STR:0_ with ' % s ' replaced with migration and ending set to _STR:1_ , as arguments .
2
'' ||| _STR:1_
"  Unapplying %s..." ||| _STR:0_
example# 4219
flush the output buffer of the self.stdout [ self . stdout ] object .
0
example# 4220
otherwise if action equals to string _STR:0_ .
1
"unapply_success" ||| _STR:0_
example# 4221
if fake is true ,
0
example# 4222
write to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" FAKED" ||| _STR:0_
example# 4223
if not ,
0
example# 4224
write to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" OK" ||| _STR:0_
example# 4225
define the method sync_apps with self class instance , connection and app_labels as arguments .
0
example# 4226
call the connection.cursor [ connection . cursor ] method , substitute the result for cursor .
0
example# 4227
try ,
0
example# 4228
call the connection.introspection.table_names [ connection . introspection . table_names ] with cursor as argument , store the result in tables .
0
example# 4229
call the connection.introspection.table_names [ connection . introspection . table_names ] with tables as argument , store the result in seen_models .
0
example# 4230
created_models is a set .
0
example# 4231
pending_references is a empty dictionary .
0
example# 4232
for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] if app_config.models_module [ app_config . models_module ] is not None , and app_config.label [ app_config . label ] is contained in app_labels , create a tuple containing app_config.label [ app_config . label ] and return value of the method router.get_migratable_models [ router . get_migratable_models ] called with app_config , connection.alias [ connection . alias ] and include_auto_created set to True , append the tuple to the list all_models .
0
example# 4233
define the method model_installed with model as an argument .
0
example# 4234
substitute model._meta [ model . _meta ] for opts .
0
example# 4235
substitute connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] for converter .
0
example# 4236
evaluate next boolean expression , value of converter function with opts.db_table [ opts . db_table ] as argument is contained in tables , or opts.auto_created [ opts . auto_created ] is True and return value of converter function with opts.auto_created._meta.db_table [ opts . auto_created . _meta . db_table ] is contained in tables , invert the evaluated expression and return it .
0
example# 4237
manifest is OrderDict class instance , created with tuple of two elements , app_name and list of elements of model_list for which model_installed function returned true , for every app_name and model_list in all_modules .
0
example# 4238
unpack the manifest.values [ manifest . values ] function return value and feed it to the itertools.chain [ itertools . chain ] function , create_models is a set containing chanied list .
0
example# 4239
call the emit_pre_migrate_signal with create_models , self.verbosity [ self . verbosity ] , self.interactive [ self . interactive ] . connection.alias [ connection . alias ] as arguments .
0
example# 4241
write the string _STR:0_ to the standard output .
1
"  Creating tables...\n" ||| _STR:0_
example# 4242
with the call to the transaction.atomic [ transaction . atomic ] method with using set to connection.alias [ connection . alias ] , savepoint set to connection.features.can_rollback_ddl [ connection . features . can_rollback_ddl ] as arguments ,
0
example# 4243
for every app_name and model_list in return value of manifest.items [ manifest . items ] function ,
0
example# 4244
for every model in model_list ,
0
example# 4246
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with , app_name and model._meta.object_name [ model . _meta . object_name ] , respectively .
1
"    Processing %s.%s model\n" ||| _STR:0_
example# 4247
evaluate connection.creation.sql_create_model [ connection . creation . sql_create_model ] method with model , no_style ( ) and seen_models as arguments , assign the result to the sql and references , respectively .
0
example# 4248
add model to seen_models set .
0
example# 4249
add model to created_models set .
0
example# 4250
for every refto and refs in return value of references.items [ references . items ] method .
0
example# 4251
call the method extend with refs as argument , on the result call the pending_references.setdefault [ pending_references . setdefault ] method with refto and empty list as arguments .
0
example# 4252
if refto is contained in seen_models ,
0
example# 4253
call the connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] method with refto , no_style ( ) and pending_references as arguments , use the result as the argument for the call to the sql.extend [ sql . extend ] method .
0
example# 4254
call the connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] method with refto , no_style ( ) and pending_references as arguments , use the result as the argument for the call to the sql.extend [ sql . extend ] method .
0
example# 4256
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with model._meta.db_table [ model . _meta . db_table ] .
1
" Creating table %s\n" ||| _STR:0_
example# 4257
for statements is sql ,
0
example# 4258
call the cursor.execute [ cursor . execute ] method with statement as argument .
0
example# 4259
evaluate the method connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] with model._meta.db_table [ model . _meta . db_table ] as argument , append it to tables .
0
example# 4260
finally , perform ,
0
example# 4261
call the cursor.close [ cursor . close ] method .
0
example# 4262
call the connection.cursor [ connection . cursor ] method , substitute it for cursor .
0
example# 4263
try ,
0
example# 4265
write the string _STR:0_ to the standard output .
1
"  Installing custom SQL...\n" ||| _STR:0_
example# 4266
for every app_name and mode_list in return value of manifest.items [ manifest . items ] method ,
0
example# 4267
for model in model_list ,
0
example# 4268
if model is contained in created_models ,
0
example# 4269
call the method custom_sql_for_model with model , no_style ( ) and connection as arguments , substitute the result for custom_sql .
0
example# 4270
if custom_sql is empty ,
0
example# 4272
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] , respectively .
1
"    Installing custom SQL for %s.%s model\n" ||| _STR:0_
example# 4273
try ,
0
example# 4274
with call to the function transaction.atomic [ transaction . atomic ] with using set to connection.alias [ connection . alias ] as argument ,
0
example# 4275
for every sql in custom_sql ,
0
example# 4276
call the cursor.execute [ cursor . execute ] method with sql as argument .
0
example# 4277
if exception of class Exception , as e , is caught ,
0
example# 4278
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] and e , respectively .
1
"  Failed to install custom SQL for %s.%s model: %s\n" ||| _STR:0_
example# 4279
if self.show_traceback [ self . show_traceback ] is true ,
0
example# 4280
call the traceback.print_exc [ traceback . print_exc ] method .
0
example# 4281
if not ,
0
example# 4283
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] , respectively .
1
"    No custom SQL for %s.%s model\n" ||| _STR:0_
example# 4285
write string _STR:0_ to the standard output .
1
"  Installing indexes...\n" ||| _STR:0_
example# 4286
for every app_name and model_list in return value of manifest.items [ manifest . items ] method ,
0
example# 4287
for every model in model_list ,
0
example# 4288
if model is contained in created_models ,
0
example# 4289
call the connection.creation.sql_indexes_for_model [ connection . creation . sql_indexes_for_model ] with model and no_style ( ) as arguments , substitute the result for index_squl .
0
example# 4290
if index_sql is not empty ,
0
example# 4292
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] , respectively .
1
"    Installing index for %s.%s model\n" ||| _STR:0_
example# 4293
try ,
0
example# 4294
with call to the function transaction.atomic [ transaction . atomic ] with using set to connection.alias [ connection . alias ] and savepoint set to connection.features.can_rollback_ddl [ connection . features . can_rollback_ddl ] , as arguments .
0
example# 4295
for every sql in index_sql ,
0
example# 4296
call the method cursor.execute [ cursor . execute ] with sql as argument .
0
example# 4297
if exception of the class Exception , as e , is caught ,
0
example# 4298
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] and e , respectively .
1
"    Failed to install index for %s.%s model: %s\n" ||| _STR:0_
example# 4299
finally perform ,
0
example# 4300
call the cursor.close [ cursor . close ] method .
0
example# 4301
if self.load_initial_data [ self . load_initial_data ] is not empty ,
0
example# 4302
for every app_label in app_labels ,
0
example# 4303
call the method call_command with string _STR:0_ , string _STR:1_ , verbosity set to self.verbosity [ self . verbosity ] , database set to connection.alias [ connection . alias ] , skip_validation set to boolean True , app_label set to app_label and hide_empty set to boolean True .
2
'loaddata' ||| _STR:0_
'initial_data' ||| _STR:1_
example# 4304
return created_models
0
example# 4305
define show_migration_list with self class instance , connection and app_names set to None , as arguments .
0
example# 4306
loader is instance of MigrationLoader initialized with connection as an argument .
0
example# 4307
substitute loader.graph [ loader . graph ] for graph .
0
example# 4308
if app_names is not empty ,
0
example# 4309
invalid_apps is an empty list .
0
example# 4310
for every app_name is app_names ,
0
example# 4311
if app_name is not contained in loader.migrated_apps [ loader . migrated_apps ] ,
0
example# 4312
append app_name to the invalid_apps .
0
example# 4313
if invalid_apps in not empty ,
0
example# 4314
raise a CommandError exception , with string _STR:0_ as argument , substitute ' % s ' in previous string with , string joined from invalided_apps list and separated with string _STR:1_ .
2
"No migrations present for: %s" ||| _STR:0_
', ' ||| _STR:1_
example# 4315
if not ,
0
example# 4316
sort loader.migrated_apps [ loader . migrated_apps ] , substitute it for app_names .
0
example# 4317
for every app_name in app_names .
0
example# 4318
call self.stdout.write [ self . stdout . write ] method with app_name and self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] as arguments .
0
example# 4319
shown is an empty set .
0
example# 4320
for every node in return value of the graph.leaf_nodes [ graph . leaf_nodes ] method called with the app_name argument ,
0
example# 4321
for every plan_node in return value of the graph.forwards_plan [ graph . forwards_plan ] method called with node as argument .
0
example# 4322
if plan_node is not contained in shown and first element of plan_node equals to app_name ,
0
example# 4323
substitute second element of plan_node for title .
0
example# 4324
if replaces filed of graph.nodes [ graph . nodes ] element at the plan_node index is true ,
0
example# 4325
substitute ' % s ' in the string _STR:0_ with length of replaces filed of graph.nodes [ graph . nodes ] element at the plan_node index , append the string to the title .
1
" (%s squashed migrations)" ||| _STR:0_
example# 4326
if plan_node is contained in loader.applied_migrations [ loader . applied_migrations ] ,
0
example# 4327
substitute ' % s ' with title in the string _STR:0_ , write it to the standard output .
1
" [X] %s" ||| _STR:0_
example# 4328
if not ,
0
example# 4329
substitute ' % s ' with title in the string _STR:0_ , write it to the standard output .
1
" [ ] %s" ||| _STR:0_
example# 4330
add plan_node to the shown set .
0
example# 4331
if shown is an empty set ,
0
example# 4332
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ and self.style.MIGRATE_FAILURE [ self . style . MIGRATE_FAILURE ] as arguments .
1
" (no migrations)" ||| _STR:0_
example# 4333
import module argparse .
0
example# 4334
import module warnings .
0
example# 4335
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4336
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 4337
derive the class Command from the BaseCommand class .
0
example# 4338
help is a string _STR:0_ .
1
"Runs this project as a FastCGI application. Requires flup." ||| _STR:0_
example# 4343
from django.conf [ django . conf ] import settings into default namespace .
0
example# 4344
from django.utils [ django . utils ] import translation into default namespace .
0
example# 4345
try ,
0
example# 4346
call the method translation.activate [ translation . activate ] with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
0
example# 4347
if AttributeError exception is caught ,
0
example# 4348
do nothing .
0
example# 4349
from django.core.servers.fastcgi [ django . core . servers . fastcgi ] import runfastcgi into default namespace .
0
example# 4350
call the function runfastcgi with an argument args .
0
example# 4352
from django.core.servers.fastcgi [ django . core . servers . fastcgi ] import FASTCGI_HELP into default namespace .
0
example# 4353
return FASTCGI_HELP .
0
example# 4354
from __future__ import unicode_literals into default name space .
0
example# 4355
from datetime import datetime into default name space .
0
example# 4356
import module errno .
0
example# 4357
import module os .
0
example# 4358
import module re .
0
example# 4359
import module sys .
0
example# 4360
import module socket .
0
example# 4361
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4362
from django.core.servers.basehttp [ django . core . servers . basehttp ] import run and get_internal_wsgi_application into default name space .
0
example# 4363
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4364
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4365
from django.utils [ django . utils ] import autoreload into default name space .
0
example# 4366
from django.utils [ django . utils ] import six into default name space .
0
example# 4367
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 4370
derive the class Command from the BaseCommand class .
0
example# 4371
help is a string _STR:0_ .
1
"Starts a lightweight Web server for development." ||| _STR:0_
example# 4372
requires_system_checks is boolean False .
0
example# 4379
call the function get_internal_wsgi_application , return the result .
0
example# 4381
from django.conf [ django . conf ] import settings into default namespace .
0
example# 4382
if not settings.DEBUG [ settings . DEBUG ] is true and settings.ALLOWED_HOSTS [ settings . ALLOWED_HOSTS ] is false ,
0
example# 4383
raise an CommandError exception with an argument string _STR:0_ .
1
'You must set settings.ALLOWED_HOSTS if DEBUG is False.' ||| _STR:0_
example# 4386
raise an CommandError exception with an argument string _STR:0_ .
2
'Your Python does not support IPv6.' ||| _STR:0_
6.6 ||| _STR:1_
example# 4388
get the value under the _STR:0_ key of the options dictionary , if it is false ,
1
'addrport' ||| _STR:0_
example# 4389
self.addr [ self . addr ] is an empty string .
0
example# 4390
substitute DEFAULT_PORT for self.port [ self . port ] .
0
example# 4391
if not ,
0
example# 4393
if m is None ,
0
example# 4394
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with value under the _STR:1_ key of the options dictionary .
2
'addrport' ||| _STR:1_
'"%s" is not a valid port number or address:port pair.' ||| _STR:0_
example# 4396
call the method self.port.isdigit [ self . port . isdigit ] , if it evaluates to false ,
0
example# 4397
raise an CommandError exception with an argument string _STR:0_ , where _STR:1_ is repaced with self.port [ self . port ] .
2
"%r is not a valid port number." ||| _STR:0_
'%r' ||| _STR:1_
example# 4398
if self.addr [ self . addr ] is true ,
0
example# 4400
substitute self.addr [ self . addr ] without the first and last element for self.addr [ self . addr ] .
0
example# 4405
if self.addr [ self . addr ] is false ,
0
example# 4408
call the self.run [ self . run ] method with unpacked dictionary options as an argument .
0
example# 4410
substitute value under the _STR:0_ key of the options dictionary for use_reloader .
1
'use_reloader' ||| _STR:0_
example# 4411
if use_reloader is true ,
0
example# 4413
if not ,
0
example# 4416
from django.conf [ django . conf ] import settings into default namespace .
0
example# 4417
django.utils [ django . utils ] import translation into default namespace .
0
example# 4418
substitute value under the _STR:0_ key of the options dictionary for threading .
1
'use_threading' ||| _STR:0_
example# 4419
get the value under the _STR:0_ key of the options dictionary , if it exists substitute it for shutdown_message , if not , shutdown_message is an empty string .
1
'shutdown_message' ||| _STR:0_
example# 4420
if sys.platform [ sys . platform ] equals string win32_STR:0_CTRL-BREAK_STR:1_CONTROL-C ' for quit_command .
3
323 ||| _STR:2_
' for quit_command, if not substitute string ' ||| _STR:1_
', substitute string ' ||| _STR:0_
example# 4421
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Performing system checks...\n\n" ||| _STR:0_
example# 4422
call the method self.validate [ self . validate ] with an argument display_num_errors set to boolean True .
0
example# 4423
try ,
0
example# 4424
call the method self.check_migrations [ self . check_migrations ] .
0
example# 4425
if ImproperlyConfigured exception is caught ,
0
example# 4426
do nothing .
0
example# 4427
call the function datetime.now [ datetime . now ] , on the result call the method strftime with an argument string _STR:0_ , substitute the result for now .
1
'%B %d, %Y - %X' ||| _STR:0_
example# 4429
call the method now.decode [ now . decode ] with an argument string _STR:0_ , substitute the result for now .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 4431
call the method translation.activate [ translation . activate ] with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
0
example# 4432
try ,
0
example# 4435
if socket.error [ socket . error ] , renamed to e , exception is caught ,
0
example# 4437
try ,
0
example# 4438
get the value under the e.errno [ e . errno ] key of the ERRORS dictionary , substitute it for error_text .
0
example# 4439
if KeyError exception is caught .
0
example# 4440
convert e to a string , substitute it for error_text .
0
example# 4441
replace ' % s ' in a string _STR:0_ with error_text , write it to self.stderr [ self . stderr ] .
1
"Error: %s" ||| _STR:0_
example# 4442
exit the program with the code integer 1 .
1
1.1 ||| _STR:0_
example# 4443
if KeyboardInterrupt exception is caught ,
0
example# 4444
if shutdown_message is true ,
0
example# 4445
write shutdown_message to self.stdout [ self . stdout ] file stream .
0
example# 4446
exit program with code integer 0 .
1
0.0 ||| _STR:0_
example# 4447
define the method check_migrations with an argument self .
0
example# 4448
executor is an instance of the class MigrationExecutor created with an argument : value under the DEFAULT_DB_ALIAS key of the connections dictionary .
0
example# 4449
call the method executor.migration_plan [ executor . migration_plan ] wiht return value of te method executor.loader.graph.leaf_nodes [ executor . loader . graph . leaf_nodes ] as argument , substitute it for plan .
0
example# 4450
if plan is true ,
0
example# 4451
call the method self.style.NOTICE [ self . style . NOTICE ] with an argument : string : _STR:0_ , write it to self.stdout [ self . stdout ] .
1
"\nYou have unapplied migrations; your app may not work properly until they are applied." ||| _STR:0_
example# 4452
call the method self.style.NOTICE [ self . style . NOTICE ] with an argument string _STR:0_ , write it to self.stdout [ self . stdout ] .
1
"Run 'python manage.py migrate' to apply them.\n" ||| _STR:0_
example# 4453
substitute Command for BaseRunserverCommand .
0
example# 4454
import module os .
0
example# 4455
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4456
derive the class Command from the BaseCommand class .
0
example# 4457
help is a string _STR:0_ .
1
"Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available." ||| _STR:0_
example# 4458
requires_system_checks is boolean False .
0
example# 4464
define the method _ipython_pre_011 with an argument self .
1
010 ||| _STR:0_
example# 4465
from IPython.Shell [ IPython . Shell ] import IPShell into default namespace .
0
example# 4466
shell is an instance of IPShell class , created with an argument argv as an empty list .
0
example# 4467
call the method shell.mainloop [ shell . mainloop ] .
0
example# 4468
define the method _ipython_pre_100 with an argument self .
1
101 ||| _STR:0_
example# 4469
from IPython.frontend.terminal.ipapp [ IPython . frontend . terminal . ipapp ] import TerminalIPythonApp into default namespace .
0
example# 4470
call the method instance of TerminalIPythonApp class , substitute the result for app .
0
example# 4471
call the method app.initialize [ app . initialize ] with an argument argv as an empty list .
0
example# 4472
call the method app.start [ app . start ] .
0
example# 4473
define the method _ipython with an argument self .
0
example# 4474
from IPython import start_ipython into default namespace .
0
example# 4475
call the method start_ipython with an argument argv as an empty list .
0
example# 4476
define the method ipython with an argument self .
0
example# 4478
try ,
0
example# 4479
call the function ip .
0
example# 4480
if ImportError exception is caught ,
0
example# 4481
do nothing .
0
example# 4482
if not ,
0
example# 4483
return nothing .
0
example# 4484
raise an ImportError exception with an argument string _STR:0_ .
1
"No IPython" ||| _STR:0_
example# 4485
define the method bpython with an argument self .
0
example# 4486
import bpython .
0
example# 4487
call the method bpython.embed [ bpython . embed ] .
0
example# 4488
define the method run_shell with an arguments self and shell set to None .
0
example# 4489
if shell is true substitute list with element shell for available_shells , if not substitute self.shells [ self . shells ] for available_shells .
0
example# 4490
for every shell in available_shells ,
0
example# 4491
try ,
0
example# 4492
get shell attribute of the self object , call it and return the result .
0
example# 4493
if ImportError exception is caught ,
0
example# 4494
do nothing .
0
example# 4495
raise an ImportError exception .
0
example# 4497
try ,
0
example# 4498
if value under _STR:0_ key of the options dictionary is true ,
1
'plain' ||| _STR:0_
example# 4499
raise an ImportError exception .
0
example# 4500
call the method self.run_shell [ self . run_shell ] with an argument shell set to value under the _STR:0_ key of the options dictionary .
1
'interface' ||| _STR:0_
example# 4501
if ImportError exception is caught ,
0
example# 4502
import code .
0
example# 4503
imported_objects is an empty dictionary .
0
example# 4504
try ,
0
example# 4505
import readline .
0
example# 4506
if ImportError exception is caught ,
0
example# 4507
do nothing .
0
example# 4508
if not ,
0
example# 4509
import rlcompleter .
0
example# 4510
call the method rlcompleter.Completer [ rlcompleter . Completer ] with an argument imported_objects , use the complete field of the result as an argument for the call to the method readline.set_completer [ readline . set_completer ] .
0
example# 4511
call the method readline.parse_and_bind [ readline . parse_and_bind ] with an argument string _STR:0_ .
1
"tab:complete" ||| _STR:0_
example# 4512
get the value under the _STR:0_ key of the options dictionary , if it evaluates to false ,
1
'no_startup' ||| _STR:0_
example# 4514
if pythonrc is true ,
0
example# 4515
skip this loop iteration .
0
example# 4516
call the function os.path.expanduser [ os . path . expanduser ] with an argument pythonrc , substitute the result for pythonrc .
0
example# 4517
if pythonrc is not a file ,
0
example# 4518
skip this loop iteration .
0
example# 4519
try ,
0
example# 4520
open pythonrc , with the file handle renamed to handle perform the following ,
0
example# 4521
compile the handle.read [ handle . read ] in mode _STR:0_ source is read from file pythonrc , execute the compiled script with imported_objects variables .
1
'exec' ||| _STR:0_
example# 4522
if NameError exception is caught ,
0
example# 4523
do nothing .
0
example# 4524
call the method code.interact [ code . interact ] with an argument local set to imported_objects .
0
example# 4525
from __future__ import unicode_literals into default name space .
0
example# 4526
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4527
from django.core.management.sql [ django . core . management . sql ] import sql_create into default name space .
0
example# 4528
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4529
derive the class Command from the AppCommand base class .
0
example# 4530
help is a string _STR:0_ .
1
"Prints the CREATE TABLE SQL statements for the given app name(s)." ||| _STR:0_
example# 4531
output_transaction is boolean True .
0
example# 4533
call the method add_arguments from the base class of the class Command , with an argument parser .
0
example# 4536
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4537
return nothing .
0
example# 4538
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4540
join statements into a string , separated by newlines , return it .
0
example# 4541
from __future__ import unicode_literals into default name space .
0
example# 4542
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4543
from django.core.management.sql [ django . core . management . sql ] import sql_all into default name space .
0
example# 4544
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4545
derive the class Command from the AppCommand base class .
0
example# 4546
help is a string _STR:0_ .
1
"Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)." ||| _STR:0_
example# 4547
output_transaction is boolean True .
0
example# 4549
call the method add_arguments from the base class of the class Command , with an argument parser .
0
example# 4552
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4553
return nothing .
0
example# 4554
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4556
join statements into a string , separated by newlines , return it .
0
example# 4557
from __future__ import unicode_literals into default name space .
0
example# 4558
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4559
from django.core.management.sql [ django . core . management . sql ] import sql_delete into default name space .
0
example# 4560
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4561
derive the class Command from the AppCommand base class .
0
example# 4562
help is a string _STR:0_ .
1
"Prints the DROP TABLE SQL statements for the given app name(s)." ||| _STR:0_
example# 4563
output_transaction is boolean True .
0
example# 4565
call the method add_arguments from the base class of the class Command , with an argument parser .
0
example# 4568
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4569
return nothing .
0
example# 4570
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4572
join statements into a string , separated by newlines , return it .
0
example# 4573
from __future__ import unicode_literals into default name space .
0
example# 4574
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4575
from django.core.management.sql [ django . core . management . sql ] import sql_custom into default name space .
0
example# 4576
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4577
derive class Command from the base class AppCommand .
0
example# 4578
help is a string , _STR:0_ .
1
"Prints the custom table modifying SQL statements for the given app name(s)." ||| _STR:0_
example# 4579
substitute True for output_transaction .
0
example# 4580
define method add_arguments with class instance self and parser as the input arguments .
0
example# 4581
call the function add_arguments with parser as an argument , from the base class of the Command class .
0
example# 4582
call the parser.add_argument [ parser . add_argument ] method with the string _STR:0_ , default set to DEFAULT_DB_ALIAS and help containig string , _STR:1_ as the arguments .
2
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:1_
'--database' ||| _STR:0_
example# 4583
define method handle_app_config with self class instance , app_config and dictionary options as arguments .
0
example# 4584
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4585
return nothing .
0
example# 4586
extract the value under the key _STR:0_ from the options dictionary , use the value for indexing connections list , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4587
call the function sql_custom with app_config , self.style [ self . style ] and connection as the arguments , substitute the result for statements .
0
example# 4588
join the list of statements into a string separated by new lines , return it .
0
example# 4589
from __future__ import unicode_literals into default name space .
0
example# 4590
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4591
from django.core.management.sql [ django . core . management . sql ] import sql_destroy_indexes into default name space .
0
example# 4592
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4593
derive the class Command from the AppCommand base class .
0
example# 4594
help is an string _STR:0_ .
1
"Prints the DROP INDEX SQL statements for the given model module name(s)." ||| _STR:0_
example# 4595
output_transaction is boolean True .
0
example# 4597
call the add_arguments method from the base class of the class Command with parser as an argument .
0
example# 4600
if app_config.models_module [ app_config . models_module ] is None .
0
example# 4601
return nothing .
0
example# 4602
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4604
join statements into a string , separated by newlines , return it .
0
example# 4605
from __future__ import unicode_literals into default name space .
0
example# 4606
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4607
from django.core.management.sql [ django . core . management . sql ] import sql_flush into default name space .
0
example# 4608
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4609
derive the class Command from the base class BaseCommand .
0
example# 4610
help is a string , containing _STR:0_ .
1
"Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed." ||| _STR:0_
example# 4611
output_transaction is boolean True .
0
example# 4612
define method add_arguments with self class instance and parser as the arguments .
0
example# 4613
call the parent class of Command class add_arguments method and parser as the arguments .
0
example# 4614
call the add_argument method on parser object , use string _STR:0_ , default set to DEFAULT_DB_ALIAS and help set to string , _STR:1_ as the arguments .
2
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:1_
'--database' ||| _STR:0_
example# 4615
define the method handle with self class instance and dictionary options as the arguments .
0
example# 4616
call the sql_flush function with self.style [ self . style ] , connections under the key with the value of options dictionary under the _STR:0_ key ,
1
'database' ||| _STR:0_
example# 4617
from __future__ import unicode_literals into default name space .
0
example# 4618
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4619
from django.core.management.sql [ django . core . management . sql ] import sql_indexes into default name space .
0
example# 4620
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4621
derive the class Command from the base class AppCommand .
0
example# 4622
help is a string _STR:0_ .
1
"Prints the CREATE INDEX SQL statements for the given model module name(s)." ||| _STR:0_
example# 4623
output_transaction is boolean True .
0
example# 4624
define the method add_arguments with self class instance and parser as the arguments .
0
example# 4625
call the add_arguments method with parser as argument form the base class of the class Command .
0
example# 4626
call parse.add_argument [ parse . add_argument ] method , with string _STR:0_ , default set to DEFAULT_DB_ALIAS , and help as a string _STR:1_ , as arguments .
2
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:1_
'--database' ||| _STR:0_
example# 4627
define the method handle_app_config with self class instance , app_config and dictionary options as arguments .
0
example# 4628
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4629
return nothing .
0
example# 4630
get the value under the _STR:0_ key of options dictionary , use it as a index to get connections list element , store it in connection .
1
'database' ||| _STR:0_
example# 4631
call the function sql_indexes with app_config , self.style [ self . style ] and connection as arguments , store the result in statements .
0
example# 4632
join statements in a string separated by newline , return the result .
0
example# 4633
from __future__ import unicode_literals into default name space .
0
example# 4634
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4635
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4636
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4637
from django.db.migrations.loader [ django . db . migrations . loader ] import AmbiguityError into default name space .
0
example# 4638
derive class Command from the base class BaseCommand .
0
example# 4639
help is a string _STR:0_
1
"Prints the SQL statements for the named migration." ||| _STR:0_
example# 4640
def method add_arguments with self class instance and parser as the arguments .
0
example# 4641
call the add_argument method on the parser object , with string _STR:0_ , and help set to string _STR:1_ as arguments .
2
'app_label' ||| _STR:0_
'App label of the application containing the migration.' ||| _STR:1_
example# 4642
call the add_argument method on the parser object , with string _STR:0_ , and help set to string _STR:1_ as arguments .
2
'migration_name' ||| _STR:0_
'Migration name to print the SQL for.' ||| _STR:1_
example# 4643
call the add_argument method on the parser object , with string _STR:0_ , default set to DEFAULT_DB_ALIAS and help set to string _STR:1_ as arguments .
2
'Nominates a database to create SQL for. Defaults to the default" database.' ||| _STR:1_
'--database' ||| _STR:0_
example# 4644
call the add_argument method on the parser object with string _STR:0_ , asction set to _STR:1_ , dest set to _STR:2_ , default set to False and help set to string_STR:3_ as arguments .
4
'--backwards' ||| _STR:0_
'Creates SQL to unapply the migration, rather than to apply it' ||| _STR:3_
'store_true' ||| _STR:1_
'backwards' ||| _STR:2_
example# 4645
define the method handle with self class instance , list of arguments args and options dictionary as the arguments .
0
example# 4646
get the value under the key _STR:0_ of the options dictionary , use it as a index to get an element from connections , substitute it for connection .
1
'database' ||| _STR:0_
example# 4647
call the MigrationExecutor with the connection as the argument , substitute it for executor .
0
example# 4648
get the values under the keys _STR:0_ and _STR:1_ of the options dictionary , substitute the results for app_label and migration_name , respectively .
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4649
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4650
raise a exception of CommandError class , with string _STR:0_ with ' % s ' replaced with app_label as the argument .
1
"App '%s' does not have migrations" ||| _STR:0_
example# 4651
try ,
0
example# 4652
call the executor.loader.get_migration_by_prefix [ executor . loader . get_migration_by_prefix ] with app_label and migration_name with arguments , substitute the result fr migration .
0
example# 4653
if AmbiguityError exception is raised ,
0
example# 4654
raise a exception of ComandError class with string _STR:0_ , with all ' % s ' strings replaced with migration_name and app_label , respectively , as an argument .
1
"More than one migration matches '%s' in app '%s'. Please be more specific." ||| _STR:0_
example# 4655
if KeyError exception is raised ,
0
example# 4656
raise a exception of CommandError class , with string _STR:0_ , replace all the ' % s ' occurrences with migration_name and app_label , respectively .
1
"Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" ||| _STR:0_
example# 4657
target is a list containing tuple with two elements app_label and migration.name [ migration . name ] .
0
example# 4658
get executor.loader.graph.nodes [ executor . loader . graph . nodes ] list item at the index of the first element of targets list , get the value under the _STR:0_ key of options dictionary , put previous two elements is a tuple , tuple is contained in a plan list .
1
'backwards' ||| _STR:0_
example# 4659
call method executor.collect_sql [ executor . collect_sql ] with plan as the argument , substitute the result for sql_statements .
0
example# 4660
for every statements in sql_statements :
0
example# 4661
call method self.stdout.write [ self . stdout . write ] with statement as an argument .
0
example# 4662
from __future__ import unicode_literals into default name space .
0
example# 4663
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4664
from django.core.management.sql [ django . core . management . sql ] import check_for_migrations into default name space .
0
example# 4665
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4666
derive the class Command from the AppCommand base class .
0
example# 4667
help is a string _STR:0_ .
1
'Prints the SQL statements for resetting sequences for the given app name(s).' ||| _STR:0_
example# 4668
output_transaction is boolean True .
0
example# 4670
call the method add_arguments from the base class of the Command class , with an argument parser .
0
example# 4673
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4674
return nothing .
0
example# 4675
get the value under the _STR:0_ key of the options dictionary , use the result as a key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4677
call the method app_config.get_models [ app_config . get_models ] with include_auto_created set to boolean True , substitute the result for models .
0
example# 4679
join statements into a string , separated by newline characters , return it .
0
example# 4680
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4681
from django.utils [ django . utils ] import six into default name space .
0
example# 4682
from django.db [ django . db ] import connections , DEFAULT_DB_ALIAS and migrations into default name space .
0
example# 4683
from django.db.migrations.loader [ django . db . migrations . loader ] import AmbiguityError into default name space .
0
example# 4684
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4685
from django.db.migrations.writer [ django . db . migrations . writer ] import MigrationWriter into default name space .
0
example# 4686
from django.db.migrations.optimizer [ django . db . migrations . optimizer ] import MigrationOptimizer into default name space .
0
example# 4687
derive the class Command from the BaseCommand class .
0
example# 4688
help is a string _STR:0_ .
1
"Squashes an existing set of migrations (from first until specified) into a single new one." ||| _STR:0_
example# 4695
get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 4696
get the value under the _STR:0_ key of the options dictionary , substitute it for self.interactive [ self . interactive ] .
1
'interactive' ||| _STR:0_
example# 4697
get the values under the _STR:0_ and _STR:1_ keys of the options dictionary , substitute them for app_label and migration_name , respectively .
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4698
executor is an instance of MigrationExecutor , created with value under the DEFAULT_DB_ALIAS key of the connections dictionary .
0
example# 4699
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4700
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with app_label .
1
"App '%s' does not have migrations (so squashmigrations on it makes no sense)" ||| _STR:0_
example# 4701
try ,
0
example# 4702
call the method executor.loader.get_migration_by_prefix [ executor . loader . get_migration_by_prefix ] with arguments app_label , migration_name , substitute the result for migration .
0
example# 4703
if AmbiguityError exception is caught ,
0
example# 4704
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with migration_name and app_label .
1
"More than one migration matches '%s' in app '%s'. Please be more specific." ||| _STR:0_
example# 4705
if KeyError exception is caught ,
0
example# 4706
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with migration_name and app_label .
1
"Cannot find a migration matching '%s' from app '%s'." ||| _STR:0_
example# 4709
call the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] with an argument string _STR:0_ , write it to self.stdout [ self . stdout ] .
1
"Will squash the following migrations:" ||| _STR:0_
example# 4710
for every migration in migrations_to_squash ,
0
example# 4711
append migration.name [ migration . name ] to string _STR:0_ , write it to self.stdout [ self . stdout ] stream .
1
' - ' ||| _STR:0_
example# 4712
if self.interactive [ self . interactive ] is true ,
0
example# 4713
answer is None .
0
example# 4714
while answer is false or answer is not contained in string _STR:0_ , perform the following ,
1
"yn" ||| _STR:0_
example# 4715
call the method six.moves.input [ six . moves . input ] with an argument string _STR:0_ , substitute the result for answer .
1
"Do you wish to proceed? [yN] " ||| _STR:0_
example# 4716
if answer is false ,
0
example# 4717
substitute _STR:0_ for answer .
1
'n' ||| _STR:0_
example# 4718
break from the loop execution ,
0
example# 4719
if not ,
0
example# 4720
convert first element of answer to lowercase and substitute it for answer .
0
example# 4721
if answer equals a string _STR:0_ ,
1
'y' ||| _STR:0_
example# 4722
return nothing .
0
example# 4723
operations is an empty list .
0
example# 4724
for every smigration in migrations_to_squash ,
0
example# 4725
call the method operations.extend [ operations . extend ] with an argument smigration.operations [ smigration . operations ] .
0
example# 4727
call the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] with an argument string _STR:0_ , write it to self.stdout [ self . stdout ] .
1
"Optimizing..." ||| _STR:0_
example# 4728
optimizer is an instance of MigrationOptimizer class .
0
example# 4731
if lengths of new_operations and operations are the same ,
0
example# 4732
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"  No optimizations possible." ||| _STR:0_
example# 4733
if not ,
0
example# 4734
replace ' % s ' in string _STR:0_ with lengths of operations and ew_operations , respectively , write it to self.stdout [ self . stdout ] stream .
1
"  Optimized from %s operations to %s operations." ||| _STR:0_
example# 4735
replaces is an empty list .
0
example# 4736
for every migration in migrations_to_squash ,
0
example# 4737
if migration.replaces [ migration . replaces ] is true ,
0
example# 4738
extend replaces list with migration.replaces [ migration . replaces ] ,
0
example# 4739
if not ,
0
example# 4741
subclass is a class named Migration , sub classed from migrations.Migration [ migrations . Migration ] base class , with fields dependencies set to an empty list , dependencies set to new_operations and replaces set to replaces .
0
example# 4743
writer is an instance of a class MigrationWriter , created with an argument new_migration .
0
example# 4744
open writer.path [ writer . path ] file in write mode , with file descriptor as fh , perform the following ,
0
example# 4745
call the method writer.as_string [ writer . as_string ] , write the result to file fh .
0
example# 4747
replace ' % s ' in a string _STR:0_ with writer.path [ writer . path ] , use it as an argument for the call to the method , self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] .
1
"Created new squashed migration %s" ||| _STR:0_
example# 4748
write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  You should commit this migration but leave the old ones in place;" ||| _STR:0_
example# 4749
write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  the new migration will be used for new installs. Once you are sure" ||| _STR:0_
example# 4750
write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  all instances of the codebase have applied the migrations you squashed," ||| _STR:0_
example# 4751
write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  you can delete them." ||| _STR:0_
example# 4752
from importlib import import_module into default name space .
0
example# 4753
from django.core.management.base [ django . core . management . base ] import CommandError into default name space .
0
example# 4754
from django.core.management.templates [ django . core . management . templates ] import TemplateCommand into default name space .
0
example# 4755
derive the class Command from the TemplateCommand base class .
0
example# 4756
help is a tuple containing a string _STR:0_ .
1
"Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory." ||| _STR:0_
example# 4757
missing_args_message is a string _STR:0_ .
1
"You must provide an application name." ||| _STR:0_
example# 4759
remove values under the keys _STR:0_ and _STR:1_ of the options dictionary and substitute it for app_name and target , respectively .
2
'directory' ||| _STR:1_
'name' ||| _STR:0_
example# 4761
try ,
0
example# 4762
call the function import_module with an argument app_name .
0
example# 4763
if ImportError exception is caught ,
0
example# 4764
do nothing .
0
example# 4765
in not ,
0
example# 4766
raise an CommandError exception with an argument string _STR:0_ _STR:1_ , where _STR:2_ is replaced with app_name .
3
"as an app name. Please try another name." ||| _STR:1_
"%r conflicts with the name of an existing Python module and cannot be used " ||| _STR:0_
'%r' ||| _STR:2_
example# 4768
from importlib import import_module into default name space .
0
example# 4769
from django.core.management.base [ django . core . management . base ] import CommandError into default name space .
0
example# 4770
from django.core.management.templates [ django . core . management . templates ] import TemplateCommand into default name space .
0
example# 4771
from django.utils.crypto [ django . utils . crypto ] import get_random_string into default name space .
0
example# 4772
derive class Command from the TemplateCommand base class .
0
example# 4773
help is a tuple containing string _STR:0_ _STR:1_ .
2
"Creates a Django project directory structure for the given " ||| _STR:0_
"project name in the current directory or optionally in the given directory." ||| _STR:1_
example# 4774
missing_args_message is a string _STR:0_ .
1
"You must provide a project name." ||| _STR:0_
example# 4775
define the method handle with arguments self and unpacked dictionary options .
0
example# 4776
remove the elements from the _STR:0_ and _STR:1_ keys of the options dictionary , substitute them for project_name and target , respectively .
2
'dictionary' ||| _STR:1_
'name' ||| _STR:0_
example# 4777
call the method self.validate_name [ self . validate_name ] with arguments project_name and string _STR:0_ .
1
"project" ||| _STR:0_
example# 4778
try ,
0
example# 4779
call the function import_module with an argument project_name .
0
example# 4780
if ImportError exception is caught ,
0
example# 4781
do nothing .
0
example# 4782
if not ,
0
example# 4783
raise an exception CommandError , with argument string _STR:0_ , where _STR:1_ is replaced with project_name .
2
"%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name." ||| _STR:0_
'%r' ||| _STR:1_
example# 4784
chars is a string _STR:0_ .
2
'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)' ||| _STR:0_
010 ||| _STR:1_
example# 4787
import module warnings .
0
example# 4788
from django.apps [ django . apps ] import apps into default name space .
0
example# 4789
from django.contrib.auth [ django . contrib . auth ] import get_user_model into default name space .
0
example# 4790
from django.db [ django . db ] import DEFAULT_DB_ALIAS into default name space .
0
example# 4791
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 4792
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4793
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 4794
from django.utils.six.moves [ django . utils . six . moves ] import input into default name space .
0
example# 4795
derive class Command from the BaseCommand base class .
0
example# 4796
help is a string _STR:0_ .
1
"Deprecated - use 'migrate' instead." ||| _STR:0_
example# 4797
define the method add_arguments with self and parser as arguments .
0
example# 4804
try ,
0
example# 4806
if LookupError exception is caught .
0
example# 4807
return nothing .
0
example# 4808
call the function get_user_model , substitute the result for UserModel .
0
example# 4809
if return value of the method UserModel._default_manager.exists [ UserModel . _default_manager . exists ] is false and value under the _STR:0_ key of the options dictionary is true ,
1
'interactive' ||| _STR:0_
example# 4810
msg is a tuple containing string _STR:0_ .
1
"\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): " ||| _STR:0_
example# 4811
call the method input with an argument msg and store the result in confirm .
0
example# 4812
endless loop ,
0
example# 4813
if confirm is not equal to string _STR:0_ or string _STR:1_ ,
2
'no' ||| _STR:1_
'yes' ||| _STR:0_
example# 4814
query a string _STR:0_ and store the result in confirm .
1
'Please enter either "yes" or "no": ' ||| _STR:0_
example# 4815
skip this loop iteration .
0
example# 4816
if confirm equals string _STR:0_ ,
1
'yes' ||| _STR:0_
example# 4818
break the loop execution .
0
example# 4819
import module logging .
0
example# 4820
import module sys .
0
example# 4821
import module os .
0
example# 4822
from django.conf [ django . conf ] import settings into default name space .
0
example# 4823
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4824
from django.test.utils [ django . test . utils ] import get_runner into default name space .
0
example# 4825
derive class Command from the BaseCommand base class .
0
example# 4826
help is a string _STR:0_ .
1
'Discover and run tests in the specified modules or the current directory.' ||| _STR:0_
example# 4827
requires_system_checks is boolean False .
0
example# 4828
define the method __init__ with an argument self .
0
example# 4829
self.test_runner [ self . test_runner ] is None .
0
example# 4830
call the method __init__ form the base class of the Command class .
0
example# 4831
define the method run_from_argv with arguments self and argv .
0
example# 4832
option is a string _STR:0_ .
1
'--testrunner=' ||| _STR:0_
example# 4833
for arg in argv list without the first two elements ,
0
example# 4834
if arg starts with options ,
0
example# 4835
get the length of the options , use it as a starting index for the slicing arg list , substitute it for self.test_runner [ self . test_runner ] .
0
example# 4836
break the loop execution .
0
example# 4837
call the run_from_argv function from the base class of the Command class with argv as a argument , .
0
example# 4838
define the method add_arguments with arguments self and parser .
0
example# 4844
call the function get_runner with arguments settings and self.test_runner [ self . test_runner ] , substitute the result for test_runner_class .
0
example# 4845
if test_runner_class has an _STR:0_ attribute ,
1
'option_list' ||| _STR:0_
example# 4846
raise an RuntimeError exception with an argument string _STR:0_
1
"The method to extend accepted command-line arguments by the " ||| _STR:0_
example# 4847
_STR:0_ if test_runner_class has an attribute _STR:1_ ,
3
'add_arguments' ||| _STR:1_
"test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this." ||| _STR:0_
1.1 ||| _STR:2_
example# 4848
call the method test_runner_class.add_arguments [ test_runner_class . add_arguments ] with an argument parser .
0
example# 4850
if value under the _STR:0_ key of the options dictionary is greater than zero ,
1
'verbosity' ||| _STR:0_
example# 4851
call the method logging.getLogger [ logging . getLogger ] with an argument string _STR:0_ , substitute the result for logger .
1
'py.warnings' ||| _STR:0_
example# 4852
call the method logging.StreamHandler [ logging . StreamHandler ] , substitute the result for handler .
0
example# 4853
call the method logger.addHandler [ logger . addHandler ] with an argument handler .
0
example# 4855
if value under the _STR:0_ key of the options dictionary is greater than zero ,
1
'verbosity' ||| _STR:0_
example# 4856
call the method logger.removeHandler [ logger . removeHandler ] with an argument handler .
0
example# 4858
from django.conf [ django . conf ] import settings into default namespace .
0
example# 4859
from django.test.utils [ django . test . utils ] import get_runner into default namespace .
0
example# 4861
if value under the _STR:0_ key of the options dictionary is not None ,
1
'liveserver' ||| _STR:0_
example# 4862
substitute value under the _STR:0_ key of the options dictionary for value under the _STR:1_ key of the os.environ [ os . environ ] dictionary .
2
'DJANGO_LIVE_TEST_SERVER_ADDRESS' ||| _STR:1_
'liveserver' ||| _STR:0_
example# 4863
delete the value under the _STR:0_ key of the options dictionary .
1
'liveserver' ||| _STR:0_
example# 4864
test_runner is an instance of TestRunner class , called with an argument unpacked dictionary options .
0
example# 4865
call the method test_runner.run_tests [ test_runner . run_tests ] with an argument test_labels , substitute it for failures .
0
example# 4866
if failures is true ,
0
example# 4867
exit the program with failures converted to boolean as a message .
0
example# 4868
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 4869
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4870
from django.db [ django . db ] import connection into default name space .
0
example# 4871
derive class Command from the BaseCommand base class .
0
example# 4872
help is a string _STR:0_ .
1
'Runs a development server with data from the given fixture(s).' ||| _STR:0_
example# 4873
args is a string _STR:0_ .
1
'[fixture ...]' ||| _STR:0_
example# 4874
requires_system_checks is boolean False .
0
example# 4875
define the method with self class instance and parser as arguments .
0
example# 4876
call parser.add_argument [ parser . add_argument ] method with _STR:0_ , metavar set to string _STR:1_ , nargs set to string _STR:2_ and help set to string _STR:3_ .
4
'*' ||| _STR:2_
'Path(s) to fixtures to load before running the server.' ||| _STR:3_
'fixture' ||| _STR:1_
'args' ||| _STR:0_
example# 4877
call parser.add_argument [ parser . add_argument ] method with _STR:0_ , action set to string _STR:1_ , dest set to string _STR:2_ , default set to boolean True and help set to string _STR:3_ .
4
'store_false' ||| _STR:1_
'interactive' ||| _STR:2_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:3_
'--noinput' ||| _STR:0_
example# 4878
call the parser.add_argument [ parser . add_argument ] with string _STR:0_ , default set to an empty string and help as string _STR:1_ .
2
'--addrport' ||| _STR:0_
'Port number or ipaddr:port to run the server on.' ||| _STR:1_
example# 4880
define the method handle with self class instance , list of arguments fixture_labels and dictionary options as arguments .
0
example# 4881
get the value under the key _STR:0_ of options dictionary , substitute it for verbosity .
1
'verbosity' ||| _STR:0_
example# 4882
get the value under the key _STR:0_ of options dictionary , substitute it for interactive .
1
'interactive' ||| _STR:0_
example# 4883
call the method connection.creation.create_test_db [ connection . creation . create_test_db ] with verbosity set to verbosity , autoclobber set to inverse value of interactive , serialize set to boolean False , substitute the return value for db_name .
0
example# 4885
replace _STR:0_ from string _STR:1_ , with db_name , substitute it for shutdown_message .
2
'%r' ||| _STR:0_
'\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' ||| _STR:1_
example# 4886
substitute connection.features.test_db_allows_multiple_connections [ connection . features . test_db_allows_multiple_connections ] for use_threading .
0
example# 4888
from __future__ import unicode_literals into default name space .
0
example# 4889
import module warnings .
0
example# 4890
from django.core.management.commands.check [ django . core . management . commands . check ] import Command as CheckCommand into default name space .
0
example# 4891
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 4892
derive class Command from CheckCommand base class .
0
example# 4893
concatenate CheckCommand.help [ CheckCommand . help ] to string _STR:0_ , substitute it for help .
1
'Deprecated. Use "check" command instead. ' ||| _STR:0_
example# 4894
define the method handle with self class instance and dictionary pair of elements options as arguments .
0
example# 4895
call the method warnings.warn [ warnings . warn ] with string _STR:0_ and RemovedInDjango19Warning as arguments .
2
191 ||| _STR:1_
'"validate" has been deprecated in favor of "check".' ||| _STR:0_
example# 4896
call the handle function with dictionary pair of elements options from the base class of the class Command .
0
example# 4897
from __future__ import unicode_literals into default name space .
0
example# 4898
import module codecs .
0
example# 4899
import module os .
0
example# 4900
import module re .
0
example# 4901
import module warnings .
0
example# 4902
from django.apps [ django . apps ] import apps into default name space .
0
example# 4903
from django.conf [ django . conf ] import settings into default name space .
0
example# 4904
from django.core.management.base [ django . core . management . base ] import CommandError into default name space .
0
example# 4905
from django.db [ django . db ] import models and router into default name space .
0
example# 4906
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 4908
from django.db.migrations.loader [ django . db . migrations . loader ] import MigrationLoader into default name space .
0
example# 4909
loader is an instance of MigrationLoader class , created with an argument connection .
0
example# 4910
if app_config.label [ app_config . label ] is contained in loader.migrated_apps [ loader . migrated_apps ] ,
0
example# 4911
raise an CommandError exception , with an arguent : string _STR:0_ , where ' % s ' is replaced for app_config.label [ app_config . label ] .
1
"App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." ||| _STR:0_
example# 4913
call the function check_for_migrations with an arguments app_config , connection .
0
example# 4914
if value under the _STR:0_ key of the connection.settings_dict [ connection . settings_dict ] dictionary equals a string _STR:1_ ,
2
'django.db.backends.dummy' ||| _STR:1_
'ENGINE' ||| _STR:0_
example# 4915
raise an CommandError exception with an argument string _STR:0_
1
"Django doesn't know which syntax to use for your SQL statements,\n" ||| _STR:0_
example# 4916
_STR:0_ . call the method app_config.get_models [ app_config . get_models ] with an argument include_auto_created set to boolean True , substitute it for app_models .
1
"because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" ||| _STR:0_
example# 4917
final_output is an empty list .
0
example# 4918
call the method connection.introspection.table_names [ connection . introspection . table_names ] , substitute the result for tables .
0
example# 4919
if model is not contained in app_models for every model in return value of the connection.introspection.installed_models [ connection . introspection . installed_models ] function return value , add model to a set , substitute the result for known_models .
0
example# 4920
pending_references is an empty dictionary .
0
example# 4921
for every model in return value of the function router.get_migratable_models [ router . get_migratable_models ] , called with arguments : app_config , connection.alias [ connection . alias ] and include_auto_created set to boolean True .
0
example# 4922
call the method connection.creation.sql_create_model [ connection . creation . sql_create_model ] with arguments model , style and known_models , substitute the result for output and references .
0
example# 4923
call the method final_output.extend [ final_output . extend ] with an argument output .
0
example# 4924
for every refto and refs in return value of the method references.items [ references . items ] ,
0
example# 4926
if refto is contained in known_models ,
0
example# 4929
add model to known_models set .
0
example# 4930
call the method pending_references.keys [ pending_references . keys ] , put the result into a set and substitute it for not_installed_models .
0
example# 4931
if not_installed_models is true ,
0
example# 4932
alter_sql is an empty list .
0
example# 4933
for every model in not_installed_models ,
0
example# 4934
for every sql in return value of the function connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] called with arguments : model , style , and pending_references append sql to the string _STR:0_ , put the results in a list , extend alter_sql with the result .
1
'-- ' ||| _STR:0_
example# 4935
if alter_sql ,
0
example# 4936
append string _STR:0_ to the final_output .
1
'-- The following references should be added but depend on non-existent tables:' ||| _STR:0_
example# 4937
extend final_output with alter_sql .
0
example# 4938
return final_output .
0
example# 4940
call the function check_for_migrations with arguments app_config and connection .
0
example# 4941
try ,
0
example# 4942
call the method connection.cursor [ connection . cursor ] , substitute the result for cursor .
0
example# 4943
if Exception exception is caught ,
0
example# 4944
cursor is None .
0
example# 4945
try ,
0
example# 4946
if cursor is true ,
0
example# 4947
call the method connection.introspection.table_names [ connection . introspection . table_names ] with an argument cursor , substitute the result for table_names .
0
example# 4948
if not ,
0
example# 4949
table_names is an empty list .
0
example# 4950
output is an empty list .
0
example# 4951
to_delete is an empty set .
0
example# 4952
references_to_delete is an empty dictionary .
0
example# 4953
call the method router.get_migratable_models [ router . get_migratable_models ] with argument : app_config , connection.alias [ connection . alias ] and include_auto_created set to True , substitute the result for app_models .
0
example# 4954
for every model in app_models ,
0
example# 4955
if cursor is true and return value of the function connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] called with an arugment : model._meta.db_table [ model . _meta . db_table ] is contained in table_names ,
0
example# 4956
substitute model._meta [ model . _meta ] for opts .
0
example# 4957
for every f in opts.local_fields [ opts . local_fields ] ,
0
example# 4958
if f.rel [ f . rel ] and f.rel.to [ f . rel . to ] are not contained in to_delete ,
0
example# 4960
call the method to_delete.add [ to_delete . add ] with an argument model .
0
example# 4961
for every model in app_models ,
0
example# 4962
if return value of the function connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] called with an arugment : model._meta.db_table [ model . _meta . db_table ] is contained in table_names
0
example# 4963
call the method connection.creation.sql_destroy_model [ connection . creation . sql_destroy_model ] with arguments : model , references_to_delete and style , extend with the result the list output .
0
example# 4964
finally perform ,
0
example# 4965
if both cursor and close_connection are true ,
0
example# 4966
call the method cursor.close [ cursor . close ] ,
0
example# 4967
call the method connection.close [ connection . close ] ,
0
example# 4968
return reversed list output .
0
example# 4970
if only_django ,
0
example# 4971
call the method connection.introspection.django_table_names [ connection . introspection . django_table_names ] with an argument boolean true , substitute the result for tables .
0
example# 4972
if not ,
0
example# 4973
call the method connection.introspection.table_names [ connection . introspection . table_names ] , substitute the result for tables .
0
example# 4974
call the method connection.introspection.sequence_list [ connection . introspection . sequence_list ] if reset_sequences is true , substitute the result for seqs , if not , seqs is an empty tuple .
0
example# 4975
call the method connection.ops.sql_flush [ connection . ops . sql_flush ] with arguments : style , tables , seqs and allow_cascade , substitute the result for statements .
0
example# 4976
return statements .
0
example# 4978
call the method check_for_migrations with arguments : app_config and connection .
0
example# 4979
output is an empty list .
0
example# 4980
call the method router.get_migratable_models [ router . get_migratable_models ] with arguments app_config and connection.alias [ connection . alias ] .
0
example# 4981
for every model in app_models ,
0
example# 4983
return output .
0
example# 4985
call the function check_for_migrations with an arguments app_config and connection .
0
example# 4986
outut is an empty list .
0
example# 4988
and include_auto_created set to boolean True , call the method connection.creation.sql_indexes_for_model [ connection . creation . sql_indexes_for_model ] with arguments model and style , extend output with the result .
0
example# 4989
return output .
0
example# 4991
call the function check_for_migrations with arguments app_config and connection .
0
example# 4992
output is an empty list .
0
example# 4993
for model in return value of the method router.get_migratable_models [ router . get_migratable_models ] with arguments app_config , connection.alias [ connection . alias ] ,
0
example# 4994
and include_auto_created set to boolean True , call the method connection.creation.sql_destroy_indexes_for_model [ connection . creation . sql_destroy_indexes_for_model ] with arguments model and style , extend the output with the result .
0
example# 4995
return output .
0
example# 4997
call the function check_for_migrations with arguments app_config and connection .
0
example# 4998
use the app_config , style and connection as arguments for the call to the sql_create , sql_custom and sql_indexes functions , append the results respectively , return the result .
0
example# 4999
define the function _split_statements with an argument content .
0
example# 5000
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for comment_re .
1
"^((?:'[^']*'|[^'])*?)--.*$" ||| _STR:0_
example# 5001
statements is an empty list .
0
example# 5002
statement is an empty list .
0
example# 5003
split content by newline character , for every line in result ,
0
example# 5005
if cleaned_line is false ,
0
example# 5006
skip this loop iteration ,
0
example# 5007
append cleaned_lien to statement .
0
example# 5008
if cleaned_line ends with _STR:0_ character ,
1
';' ||| _STR:0_
example# 5009
join statements into a string , separated by white spaces , append it to statements .
0
example# 5010
statement is an empty list .
0
example# 5011
return statements .
0
example# 5013
substitute model._meta [ model . _meta ] for opts .
0
example# 5014
app_dirs is an empty list .
0
example# 5015
call the method apps.get_app_config [ apps . get_app_config ] with an argument model._met.app_label [ model . _met . app_label ] , substitute path field of the result for app_dir .
0
example# 5016
join app_dir and string _STR:0_ into a file path , use the result as an argument for the call to the function os.path.normpath [ os . path . normpath ] ,
1
'sql' ||| _STR:0_
example# 5017
append the result to app_dirs . join app_dir and string _STR:0_ into a file path , use the result as an argument for the call to the function os.path.normpath [ os . path . normpath ] ,
1
'models/sql' ||| _STR:0_
example# 5018
append the result to old_app_dirs . if file path old_app_dir exists ,
0
example# 5020
append old_app_dir to app_dirs .
0
example# 5021
output is an empty list .
0
example# 5022
if opts.managed [ opts . managed ] is true ,
0
example# 5023
for every f in opts.local_fields [ opts . local_fields ] that has an _STR:0_ attribute , append f to a list , substitute the resulting list for post_sql_fields .
1
'post_create_sql' ||| _STR:0_
example# 5024
for every f in post_sql_fields ,
0
example# 5025
call the method f.post_create_sql [ f . post_create_sql ] with arguments : style and model._meta.db_table [ model . _meta . db_table ] , extend the output with the result .
0
example# 5026
once split at the _STR:0_ value under the _STR:1_ key of the connection.settings_dict [ connection . settings_dict ] dictionary , substitute last element of the result for backend_name .
2
'ENGINE' ||| _STR:1_
'.' ||| _STR:0_
example# 5027
sql_files is an empty list .
0
example# 5028
for every app_dir in app_dirs ,
0
example# 5029
join into a file path : app_dir and string % s. % s.sql [ s . sql ] , where ' % s ' is replaced by opts.model_name [ opts . model_name ] and backend_name , respectively ,
0
example# 5030
append the result to sql_files . join into a file path : app_dir and string % s. % s.sql [ s . sql ] , where ' % s ' is replaced by opts.model_name [ opts . model_name ] , append the result to sql_files .
0
example# 5031
for every sql_file in sql_files ,
0
example# 5032
if file path sql_file exists ,
0
example# 5035
return output .
0
example# 5037
for app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 5038
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 5039
skip this loop iteration ,
0
example# 5041
replace ' % s ' in string _STR:0_ with app_config.label [ app_config . label ] , print it to the standard output .
1
"Running pre-migrate handlers for application %s" ||| _STR:0_
example# 5045
for app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 5046
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 5047
skip this loop iteration ,
0
example# 5049
replace ' % s ' in string _STR:0_ with app_config.label [ app_config . label ] , print it to the standard output .
1
"Running post-migrate handlers for application %s" ||| _STR:0_
example# 5052
import module cgi .
0
example# 5053
import module errno .
0
example# 5054
import module mimetypes .
0
example# 5055
import module os .
0
example# 5056
import module posixpath .
0
example# 5057
import module re .
0
example# 5058
import module shutil .
0
example# 5059
import module stat .
0
example# 5060
import module sys .
0
example# 5061
import module tempfile .
0
example# 5062
from os import path into default name space .
0
example# 5063
import module django .
0
example# 5064
from django.template [ django . template ] import Template and Context into default name space .
0
example# 5065
from django.utils [ django . utils ] import archive into default name space .
0
example# 5066
from django.utils.six.moves.urllib.request [ django . utils . six . moves . urllib . request ] import urlretrieve into default name space .
0
example# 5067
from django.utils._os [ django . utils . _os ] import rmtree_errorhandle into default name space .
0
example# 5068
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 5069
from django.core.management.utils [ django . core . management . utils ] import handle_extensions into default name space .
0
example# 5072
derive the class TemplateCommand from the BaseCommand base class .
0
example# 5073
requires_system_checks is boolean False .
0
example# 5074
can_import_settings is boolean False .
0
example# 5075
url_schemes is list of strings _STR:0_ , _STR:1_ and _STR:2_ .
3
'https' ||| _STR:1_
'http' ||| _STR:0_
'ftp' ||| _STR:2_
example# 5076
leave_locale_alone is boolean True .
0
example# 5077
define the method add_aguments with arguments self and parser .
0
example# 5084
substitute app_or_project for self.app_or_project [ self . app_or_project ] .
0
example# 5085
self.paths_to_remove [ self . paths_to_remove ] is an empty list .
0
example# 5086
substitute value under the _STR:0_ key of the options dictionary for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 5088
if target is None ,
0
example# 5089
join the current working directory and name into a file path , substitute it for top_dir .
0
example# 5090
try ,
0
example# 5091
make a directory top_dir .
0
example# 5092
if OSError renamed to e , exception is caught ,
0
example# 5093
if e.errno [ e . errno ] equals errno.EEXIST [ errno . EEXIST ] ,
0
example# 5094
replace ' % s ' in string _STR:0_ with top_dir , substitute it for message .
1
"'%s' already exists" ||| _STR:0_
example# 5095
if not ,
0
example# 5096
substitute e for message .
0
example# 5097
raise an CommandError exception with an argument message .
0
example# 5098
if not ,
0
example# 5099
ge the absolute path of the return value of the function path.expanduser [ path . expanduser ] with the argument target , substitute it for top_dir .
0
example# 5100
if file path top_dir doesnt exists ,
0
example# 5101
raise an CommandError exception with an argument string _STR:0_ ,
1
"Destination directory '%s' does not exist, please create it first." ||| _STR:0_
example# 5103
and ignored as an empty tuple , convert the result into a tuple and substitute it for extensions . extra_files is an empty list .
0
example# 5104
for every file in value under the _STR:0_ key of the options dictionary .
1
'files' ||| _STR:0_
example# 5105
split file by _STR:0_ character , apply on its every element a lambda function which takes an argument x , and returns x striped of the surrounding whitespaces , extend the extra_files with the mapped list .
1
',' ||| _STR:0_
example# 5107
call the method self.stdout.write [ self . stdout . write ] , with an argument string _STR:0_ , where ' % s ' is replaced with app_or_project and extensions joined into a string , separated by a string _STR:1_ .
2
', ' ||| _STR:1_
"Rendering %s template files with extensions: %s\n" ||| _STR:0_
example# 5108
call the method self.stdout.write [ self . stdout . write ] , with an argument string _STR:0_ , where ' % s ' is replaced with app_or_project and extra_files joined into a string , separated by a string _STR:1_ .
2
', ' ||| _STR:1_
"Rendering %s template files with filenames: %s\n" ||| _STR:0_
example# 5109
append string _STR:0_ to app_or_project , substitute it for base_name .
1
'_name' ||| _STR:0_
example# 5110
append string _STR:0_ to app_or_project , substitute it for base_subdir .
1
'_template' ||| _STR:0_
example# 5111
append string _STR:0_ to app_or_project , substitute it for base_directory .
1
'_directory' ||| _STR:0_
example# 5112
if second last element of django.VERSION [ django . VERSION ] is not equal to a string _STR:0_ ,
1
'final' ||| _STR:0_
example# 5113
docs_version is a string _STR:0_ .
1
'dev' ||| _STR:0_
example# 5114
if not ,
0
example# 5117
from django.conf [ django . conf ] import settings into a default name space ,
0
example# 5118
if settings.configured [ settings . configured ] is false ,
0
example# 5119
call the method settings.configure [ settings . configure ] .
0
example# 5121
increment length of template_dir by one and substitute it for prefix_length .
0
example# 5122
for every root , dirs and files in subdirectory tree starting from the base dir template_dir ,
0
example# 5123
slice root starting from the prefix_length index to the end , substitute it for path_rest .
0
example# 5124
call the method path_rest.replace [ path_rest . replace ] with arguments base_name and name , substitute the result for relative_dir .
0
example# 5125
if relative_dir is true ,
0
example# 5126
join top_dir and relative_dir into a file path , substitute it for target_dir .
0
example# 5127
if target_dir path doesnt exists ,
0
example# 5128
make target_dir directory ,
0
example# 5129
for dirname in dirs ,
0
example# 5130
if dirname starts with character _STR:0_ or dirname equals a string _STR:1_ ,
2
'__pycache__' ||| _STR:1_
'.' ||| _STR:0_
example# 5131
remove dirname key from dirs .
0
example# 5132
for every filename in files ,
0
example# 5133
if filename ends with _STR:0_ , _STR:1_ or _STR:2_ ,
3
'.pyo' ||| _STR:0_
'.py.class' ||| _STR:2_
'.pyc' ||| _STR:1_
example# 5134
skip this loop iteration ,
0
example# 5135
join root and filename into a file path , substitute it for old_path .
0
example# 5137
if new_path file path exists ,
0
example# 5138
raise a CommandError exception with an argument : string _STR:0_ , where ' % s '' is replaced with new_path .
1
"%s already exists, overlaying a project or app into an existing directory won't replace conflicting files" ||| _STR:0_
example# 5139
open old_path file in _STR:0_ mode , with file descriptor renamed to template_file ,
1
'rb' ||| _STR:0_
example# 5140
call the method template_file.read [ template_file . read ] , substitute it for content .
0
example# 5141
if filename ends with extensions or filename is contained in extra_files ,
0
example# 5142
call the method content.decode [ content . decode ] with an argument string _STR:0_ , substitute it for content .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 5143
template is an instance of Template class , created with an argument content .
0
example# 5144
call the method template.render [ template . render ] with an argument context , substitute it for content .
0
example# 5145
call the method content.encode [ content . encode ] with an argument string _STR:0_ , substitute it for content .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 5146
open new_path file in _STR:0_ mode , with file descriptor renamed to new_file ,
1
'wb' ||| _STR:0_
example# 5147
write content to new_file file .
0
example# 5149
replace ' % s ' in string _STR:0_ with new_path , write it to the self.stdout [ self . stdout ] stream .
1
"Creating %s\n" ||| _STR:0_
example# 5150
try ,
0
example# 5151
call the function shutil.copymode [ shutil . copymode ] with arguments old_path and new_path .
0
example# 5152
call the method self.make_writeable [ self . make_writeable ] with an argument new_path .
0
example# 5153
if OSError exception is caught ,
0
example# 5154
replace ' % s ' in string _STR:0_ , with new_path and self.style.NOTICE [ self . style . NOTICE ] , respectively , write it to self.stderr [ self . stderr ] stream .
1
"Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem." ||| _STR:0_
example# 5155
if self.paths_to_remove [ self . paths_to_remove ] is true ,
0
example# 5157
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Cleaning up temporary files.\n" ||| _STR:0_
example# 5158
for every path_to_remove in self.paths_to_remove [ self . paths_to_remove ] ,
0
example# 5159
if path_to_remove is file ,
0
example# 5160
remove file path_to_remove ,
0
example# 5161
if not ,
0
example# 5164
if template is None ,
0
example# 5165
join first element of django.__path__ [ django . __path__ ] , string _STR:0_ and subdir into a valid file path , return it .
1
'conf' ||| _STR:0_
example# 5166
if not ,
0
example# 5167
if template starts with a string _STR:0_ ,
1
'file://' ||| _STR:0_
example# 5169
call the method path.expanduser [ path . expanduser ] with an argument template , substitute it for expanded_template .
0
example# 5170
call the method path.normpath [ path . normpath ] with an argument expanded_template , substitute it for expanded_template .
0
example# 5171
if expanded_template is a directory ,
0
example# 5172
return expanded_template .
0
example# 5173
call the method self.is_url [ self . is_url ] with an argument template , if it evaluates to true ,
0
example# 5174
call the method self.download [ self . download ] with an argument template , substitute the result for absolute_path .
0
example# 5175
if not ,
0
example# 5176
get the absolute file path of the expanded_template , substitute it for absolute_path .
0
example# 5177
if file path absolute_path exists ,
0
example# 5178
call the method self.extract [ self . extract ] with an argument absolute_path , return the result .
0
example# 5179
raise an CommandError exception with an argument string _STR:0_ , replace ' % s ' with self.app_or_project [ self . app_or_project ] and template .
1
"couldn't handle %s template %s." ||| _STR:0_
example# 5181
if name is None ,
0
example# 5182
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with string _STR:1_ , and app_or_project if app_or_project equals to string _STR:2_ , if not , it is replaced with _STR:3_ and app_or_project .
4
'a' ||| _STR:3_
"you must provide %s %s name" ||| _STR:0_
'an' ||| _STR:1_
'app' ||| _STR:2_
example# 5185
message is a string _STR:0_ .
1
'make sure the name begins with a letter or underscore' ||| _STR:0_
example# 5186
if not ,
0
example# 5187
message is a string _STR:0_ .
1
'use only numbers, letters and underscores' ||| _STR:0_
example# 5188
raise an CommandError with an argument string _STR:0_ , were _STR:1_ is replaced with name , and ' % s ' is replaced with app_or_project and message , respectively .
2
'%r' ||| _STR:1_
"%r is not a valid %s name. Please %s." ||| _STR:0_
example# 5189
define the method download with arguments self and url .
0
example# 5190
define the function cleanup_url with an argument url .
0
example# 5191
strip url of surrounding _STR:0_ characters , substitute it for tmp .
1
'/' ||| _STR:0_
example# 5192
split tmp at _STR:0_ character , substitute the last element of the result for filename .
1
'/' ||| _STR:0_
example# 5193
if url ends with _STR:0_ character ,
1
'/' ||| _STR:0_
example# 5194
append _STR:0_ to tmp , substitute it for display_url .
1
'/' ||| _STR:0_
example# 5195
if not ,
0
example# 5196
substitute url for display_url .
0
example# 5197
return filename and display_url .
0
example# 5198
replace ' % s ' in string _STR:0_ with self.app_or_project [ self . app_or_project ] .
1
'django_%s_template_' ||| _STR:0_
example# 5199
call the function tempfile.mkdtemp [ tempfile . mkdtemp ] with arguments : prefix set to prefix and suffix set to string _STR:0_ .
1
'_download' ||| _STR:0_
example# 5200
append the tempdir to self.paths_to_remove [ self . paths_to_remove ] .
0
example# 5201
call the function cleanup_url with an argument url , assign the result to filename and display_url , respectively .
0
example# 5203
replace ' % s ' in string _STR:0_ , with display_url , write it to self.stdout [ self . stdout ] stream .
1
"Downloading %s\n" ||| _STR:0_
example# 5204
try ,
0
example# 5205
call the function urlretrieve with arguments url and tempdir and filename joined into a file path , assign the result to the_path , and info , respectively .
0
example# 5206
if IOErro , renamed to e , exception is caught ,
0
example# 5207
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with url , filename and e .
1
"couldn't download URL %s to %s: %s" ||| _STR:0_
example# 5208
split the_path at the _STR:0_ character , substitute last element of the result for used_name .
1
'/' ||| _STR:0_
example# 5209
get the value under the _STR:0_ key of the info dictionary , substitute it for content_disposition .
1
'content-disposition' ||| _STR:0_
example# 5210
if content_disposition is true ,
0
example# 5211
call the method cgi.parse_header [ cgi . parse_header ] with an argument content_disposition , assign the result to _ and params , respectively .
0
example# 5212
get the value under the _STR:0_ key of the params dictionary , if the key exists substitute it for guessed_filename , if not , substitute used_name for guessed_filename .
1
'filename' ||| _STR:0_
example# 5213
if not ,
0
example# 5214
substitute used_name for guessed_filename .
0
example# 5215
call the method self.splitext [ self . splitext ] with an argument guessed_filename , substitute the second element of the result for ext .
0
example# 5216
get the value under the _STR:0_ key of the info dictionary , substitute it for content_type .
1
'content-type' ||| _STR:0_
example# 5217
if ext is false and content_type is true ,
0
example# 5218
call the method mimetypes.guess_extension [ mimetypes . guess_extension ] with an argument content_type , substitute result for ext .
0
example# 5219
if ext is true ,
0
example# 5220
append ext to guessed_filename .
0
example# 5221
if used_name is not equal to guessed_filename ,
0
example# 5222
join tempdir and guessed_filename into a file path , substitute it for guessed_path .
0
example# 5223
call the function shutil.move [ shutil . move ] with arguments the_path and guessed_path .
0
example# 5224
return guessed_path .
0
example# 5225
return the_path .
0
example# 5226
define the method splitext with arguments self and the_path .
0
example# 5227
call the method posixpath.splitext [ posixpath . splitext ] with an argument the_path .
0
example# 5228
convert base to lowercase , if it ends with string _STR:0_ ,
1
'.tar' ||| _STR:0_
example# 5229
take last four elements of base and append ext to it , substitute result for ext .
0
example# 5230
substitute last four elements of base for base .
0
example# 5231
return base and ext .
0
example# 5232
define the function with arguments self and filename .
0
example# 5233
replace ' % s ' in string _STR:0_ with self.app_or_project [ self . app_or_project ] , substitute it for prefix .
1
'django_%s_template_' ||| _STR:0_
example# 5235
append tempdir to self.self.paths_to_remove [ self . self . paths_to_remove ] .
0
example# 5236
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 .
1
2.2 ||| _STR:0_
example# 5237
substitute ' % s ' in string _STR:0_ with filename , write it to self.stdout [ self . stdout ] stream .
1
"Extracting %s\n" ||| _STR:0_
example# 5238
try ,
0
example# 5239
call the method archive.extract [ archive . extract ] with arguments : filename and tempdir .
0
example# 5240
return tempdir .
0
example# 5241
if archive.ArchiveException [ archive . ArchiveException ] or IOError , renamed to e , exception are caught ,
0
example# 5242
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with filename , tempdir and e .
1
"couldn't extract file %s to %s: %s" ||| _STR:0_
example# 5243
define the method is_url with arguments self and template .
0
example# 5244
if character _STR:0_ is not contained in template ,
1
':' ||| _STR:0_
example# 5245
return boolean False .
0
example# 5246
split template once at the first character _STR:0_ , convert the first element to lowercase and substitute it for scheme .
1
':' ||| _STR:0_
example# 5247
if scheme is countaine in self.url_schemes [ self . url_schemes ] return boolean True , otherwise return False .
0
example# 5248
define the method make_writeable with arguments self and filename .
0
example# 5249
if sys.platform [ sys . platform ] starts with string _STR:0_ ,
1
'java' ||| _STR:0_
example# 5250
return nothing .
0
example# 5251
if call to the method os.access [ os . access ] with arguments : filename and os.W_OK [ os . W_OK ] , evaluates to false ,
0
example# 5252
call the function os.stat [ os . stat ] with an argument filename , substitute the result for st .
0
example# 5253
call the method stat.S_IMODE [ stat . S_IMODE ] with an argument st.st_mode [ st . st_mode ] , calculate binary OR with the result and stat.S_IWUSR [ stat . S_IWUSR ] , as operands , substitute the result for new_permission .
0
example# 5254
call the function os.chmod [ os . chmod ] wiht arguments filename and new_permissions .
0
example# 5255
from __future__ import unicode_literals into default name space .
0
example# 5256
import module os .
0
example# 5257
from subprocess import PIPE and Popen into default name space .
0
example# 5258
import module sys .
0
example# 5259
from django.utils.encoding [ django . utils . encoding ] import force_text and DEFAULT_LOCALE_ENCODING into default name space .
0
example# 5260
from django.utils [ django . utils ] import six into default name space .
0
example# 5261
from .base import CommandError into default name space .
0
example# 5263
try ,
0
example# 5265
stderr set to PIPE , close_fds set to boolean True is os.name [ os . name ] is not equal to _STR:0_ , universal_newlines set to boolean True . if OSError , renamed to e , exception is caught ,
1
'nt' ||| _STR:0_
example# 5268
call the method p.communicate [ p . communicate ] , assign the result to output and errors , respectively .
0
example# 5271
ext_list is an empty list ,
0
example# 5272
for every ext in extensions ,
0
example# 5273
delete all the whitespaces from ext , split it by _STR:0_ character , extend ext_list with the result .
1
',' ||| _STR:0_
example# 5274
for every i and ext in enumerated iterable ext_list ,
0
example# 5275
if ext doesnt start with _STR:0_ character ,
1
'.' ||| _STR:0_
example# 5276
prepend _STR:0_ to the i-th element of the ext_list .
1
'.' ||| _STR:0_
example# 5277
if striped x by _STR:0_ character is not contained in ignored , for every x in ext_list put x into a set , return the resulting set .
1
'.' ||| _STR:0_
example# 5279
if path is None ,
0
example# 5281
if path is an instance of six.string_types [ six . string_types ] ,
0
example# 5282
path is an list containing path .
0
example# 5283
if pathext is None ,
0
example# 5285
for ext in pathext ,
0
example# 5286
if cmd ends with ext ,
0
example# 5287
pathext is an list containing an empty string .
0
example# 5288
break the loop execution .
0
example# 5289
for every p in path ,
0
example# 5290
join p and cmd into a file path , substitute it for f .
0
example# 5291
if f is a file ,
0
example# 5292
return f .
0
example# 5293
for every ext in pathext ,
0
example# 5294
add ext to f , substitute the result for fext .
0
example# 5295
if fext is a file ,
0
example# 5296
return fext .
0
example# 5297
return None .
0
example# 5298
import module collections .
0
example# 5299
from math import ceil into default name space .
0
example# 5300
from django.utils [ django . utils ] import six into default name space .
0
example# 5301
derive the class InvalidPage from the Exception base class .
0
example# 5302
do nothing .
0
example# 5303
derive the class PageNotAnInteger from the InvalidPage base class .
0
example# 5304
do nothing .
0
example# 5305
derive the class EmptyPage from the InvalidPage base class .
0
example# 5306
do nothing .
0
example# 5307
derive the class Paginator from the object base class .
0
example# 5309
substitute object_list for self.object_list [ self . object_list ] .
0
example# 5310
convert per_page into an integer and substitute it for self.per_page [ self . per_page ] .
0
example# 5311
convert orphans into an integer and substitute it for self.orphans [ self . orphans ] .
0
example# 5312
substitute allow_empty_first_page for self.allow_empty_first_page [ self . allow_empty_first_page ] .
0
example# 5313
self._num_pages [ self . _num_pages ] and self._count [ self . _count ] are None .
0
example# 5314
define the method validate_number with self class instance and number as arguments .
0
example# 5315
try ,
0
example# 5316
convert number into an integer and substitute it for number
0
example# 5317
if TypeError or ValueError exceptions are caught ,
0
example# 5318
raise an exception PageNotAnInteger with string _STR:0_ as an argument .
1
'That page number is not an integer' ||| _STR:0_
example# 5321
if number is greater than self.num_pages [ self . num_pages ] ,
0
example# 5323
do nothing .
0
example# 5324
if not ,
0
example# 5325
raise an EmptyPage exception with string _STR:0_ as an argument .
1
'That page contains no results' ||| _STR:0_
example# 5326
return number .
0
example# 5327
define the method page with self class instance and number as arguments .
0
example# 5328
call the method self.validate_number [ self . validate_number ] with an argument number , substitute it for number .
0
example# 5329
decrement number by one , multiply it with self.per_page [ self . per_page ] , substitute the result for bottom .
0
example# 5330
sum bottom and self.per_page [ self . per_page ] , substitute the result for top .
0
example# 5331
if sum of the top and self.orphans [ self . orphans ] is greater or equal to self.count [ self . count ] ,
0
example# 5332
substitute self.count [ self . count ] for top .
0
example# 5334
define the method _get_page with self class instance , unpacked list args and unpacked dictionary kwargs as arguments .
0
example# 5336
define the method _get_count with an argument self .
0
example# 5337
if self._count [ self . _count ] is None ,
0
example# 5338
try ,
0
example# 5339
substitute the return value of the method self.object_list.count [ self . object_list . count ] for self._count [ self . _count ] .
0
example# 5340
if TypeError or AttributeError exceptions are caught ,
0
example# 5341
substitute length of self.object_list [ self . object_list ] for self._count [ self . _count ] .
0
example# 5342
return self._count [ self . _count ] .
0
example# 5343
count is a property object with _get_count as a getter method .
0
example# 5344
define the method _get_num_pages with an argument self .
0
example# 5345
if self._num_pages [ self . _num_pages ] is None ,
0
example# 5347
self._num_pages [ self . _num_pages ] is a integer 0 .
1
0.0 ||| _STR:0_
example# 5348
if not ,
0
example# 5350
divide hits by a floating point number self.per_page [ self . per_page ] , convert its ceiling value to an integer and substitute it for self._num_pages [ self . _num_pages ] .
0
example# 5351
return self._num_pages [ self . _num_pages ] .
0
example# 5352
num_pages is a property object with _get_num_pages as a getter method .
0
example# 5353
define the method _get_page_range with an argument self .
0
example# 5355
page_range is a property object with _get_page_range as a getter method .
0
example# 5356
substitute Paginator for QuerySetPaginator .
0
example# 5357
derive the class Page from the collections.Sequence [ collections . Sequence ] base class .
0
example# 5359
substitute object_list for self.object_list [ self . object_list ] .
0
example# 5360
substitute number for self.number [ self . number ] .
0
example# 5361
substitute paginator for self.paginator [ self . paginator ] .
0
example# 5362
define the method __repr__ with an argument self .
0
example# 5363
return the string _STR:0_ , with occurrences of ' % s ' replaced by self.number [ self . number ] and self.paginator.num_pages [ self . paginator . num_pages ] , respectively .
1
'<Page %s of %s>' ||| _STR:0_
example# 5364
define the method __len__ with an argument self .
0
example# 5365
return the length of self.object_list [ self . object_list ] .
0
example# 5366
define the method __getitem__ with arguments self and index .
0
example# 5367
if index is not an instance of six.integer_types [ six . integer_types ] or tuple type ,
0
example# 5368
raise a TypeError exception ,
0
example# 5369
if self.object [ self . object ] is not an instance of list type ,
0
example# 5370
convert self.object_list [ self . object_list ] to a list .
0
example# 5371
return self.object_list [ self . object_list ] element at index .
0
example# 5372
define the method has_next with an argument self .
0
example# 5373
if self.number [ self . number ] is lesser than self.paginator.num_pages [ self . paginator . num_pages ] , return boolean True , otherwise return boolean False .
0
example# 5374
define the method has_previous with an argument self .
0
example# 5376
define the method has_other_pages with an argument self .
0
example# 5377
call the method self.has_previous [ self . has_previous ] , if it evaluate to false , call the self.has_next [ self . has_next ] method , return the result .
0
example# 5378
define the method next_page_number with an argument self .
0
example# 5380
define the method previous_page_number with an argument self .
0
example# 5382
define the method start_index with an argument self .
0
example# 5384
return integer 0 .
1
0.0 ||| _STR:0_
example# 5385
decrement self.number [ self . number ] by one , multiply it by self.paginator.per_page [ self . paginator . per_page ] , increment the result by one , return it .
0
example# 5386
define the method end_index with an argument self .
0
example# 5387
if self.number [ self . number ] equals to self.paginator.num_pages [ self . paginator . num_pages ] ,
0
example# 5388
return self.paginator.count [ self . paginator . count ] .
0
example# 5389
multiply self.number [ self . number ] and self.paginator.per_page [ self . paginator . per_page ] , return the result .
0
example# 5390
import module importlib .
0
example# 5391
from django.conf [ django . conf ] import settings into default name space .
0
example# 5392
from django.utils [ django . utils ] import six into default name space .
0
example# 5393
from django.core.serializers.base [ django . core . serializers . base ] import SerializerDoesNotExist into default name space .
0
example# 5395
_serializers is an empty dictionary .
0
example# 5396
derive the class BadSerializer from the object base class .
0
example# 5397
internal_use_only is boolean False .
0
example# 5398
define the __init__method with arguments self and exception .
0
example# 5399
substitute exception for self.exception [ self . exception ] .
0
example# 5400
define the __call__method with arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 5401
raise an self.exception [ self . exception ] exception .
0
example# 5403
if serializers is None and _serializers is false ,
0
example# 5404
call the function _load_serializers .
0
example# 5405
try ,
0
example# 5406
call the function importlib.import_module [ importlib . import_module ] with an argument serializer_module , substitute it for module .
0
example# 5407
if ImportError , renamed to exc , exception is caught ,
0
example# 5408
ba_serializer is a instance of BadSerializer class , created with an argument exc .
0
example# 5409
create a instance of a class BadSerializerModule from the object base class , with elements Deserializer set to bad_serializer and Serializer set to bad_serializer .
0
example# 5410
if serializers is None ,
0
example# 5411
substitute module for the value under the format key of the _serializers dictionary .
0
example# 5412
if not ,
0
example# 5413
substitute module for the value under the format key of the serializers dictionary .
0
example# 5414
define the function unregister_serializer with an argument format .
0
example# 5415
if _serializers is false ,
0
example# 5416
call the function _load_serializers .
0
example# 5417
if format is not contained in _serializers ,
0
example# 5418
raise a SerializerDoesNotExist exception with an argument format .
0
example# 5419
delete the _serializers dictionary entry at the format key .
0
example# 5420
define the function get_serializer with an argument format .
0
example# 5421
if _serializers is false ,
0
example# 5422
call the function _load_serializers .
0
example# 5423
if format is not contained in _serializers ,
0
example# 5424
raise a SerializerDoesNotExist exception with an argument format .
0
example# 5425
get the value under the format key of the _serializers dictionary , return the Serializer filed of the result .
0
example# 5426
define the function get_serializer_formats .
0
example# 5427
if _serializers is false ,
0
example# 5428
call the function _load_serializers .
0
example# 5429
convert _serializers into a list , return it .
0
example# 5430
define the function get_public_serializer_formats .
0
example# 5431
f _serializers is false ,
0
example# 5432
call the function _load_serializers .
0
example# 5433
append k into a list for every k and v in return value of the six.iteritems [ six . iteritems ] function with an argument _serializers , only if v.Serializer.internal_use_only [ v . Serializer . internal_use_only ] is false , return the resulting list .
0
example# 5434
define the function get_deserializer with an argument format .
0
example# 5435
f _serializers is false ,
0
example# 5436
call the function _load_serializers .
0
example# 5437
if format is not contained in _serializers ,
0
example# 5438
raise a SerializerDoesNotExist exception with an argument format .
0
example# 5439
get the value under the format key of the _serializers dictionary , return the Deserializer filed of the result .
0
example# 5441
call the get_serializer function with an argument format , call the return value object and substitute it for s .
0
example# 5442
call the s.serialize [ s . serialize ] method with arguments queryset and unpacked dictionary options .
0
example# 5443
evaluate the method s.getvalue [ s . getvalue ] , return the result .
0
example# 5445
call the get_deserializer function with an argument format , substitute the result for d .
0
example# 5446
call the object d with arguments stream_or_string and unpacked dictionary options , return the result .
0
example# 5447
define the function _load_serializers .
0
example# 5448
use the global variable _serializers .
0
example# 5449
serializers is an empty dictionary .
0
example# 5450
for every format in BUILTIN_SERIALIZERS ,
0
example# 5452
if setting has an _STR:0_ attribute ,
1
"SERIALIZATION_MODULES" ||| _STR:0_
example# 5453
for every format in settings.SERIALIZATION_MODULES [ settings . SERIALIZATION_MODULES ] ,
0
example# 5455
substitute serializers for _serializers .
0
example# 5456
import module warnings .
0
example# 5457
from django.db [ django . db ] import models into default name space .
0
example# 5458
from django.utils [ django . utils ] import six into default name space .
0
example# 5459
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 5460
derive the class SerializerDoesNotExist from the KeyError base class .
0
example# 5461
do nothing .
0
example# 5462
derive the class SerializationError from the Exception base class .
0
example# 5463
do nothing .
0
example# 5464
derive the class DeserializationError from the Exception base class .
0
example# 5465
do nothing .
0
example# 5466
derive the class Serializer from the object base class .
0
example# 5467
internal_use_only is a boolean False .
0
example# 5469
substitute options for self.options [ self . options ] .
0
example# 5470
remove the _STR:0_ key from the options dictionary and substitute it for self.stream [ self . stream ] , if the key doesnt exists call the six.String [ six . String ] function and substitute the result for self.stream [ self . stream ] .
1
'stream' ||| _STR:0_
example# 5471
remove the _STR:0_ key from the options dictionary and substitute it for self.selected_fields [ self . selected_fields ] , if the key doesnt exists substitute None for self.selected_fields [ self . selected_fields ] .
1
'fields' ||| _STR:0_
example# 5472
remove the _STR:0_ key from the options dictionary and substitute it for self.use_natural_keys [ self . use_natural_keys ] , if the key doesnt exists substitute boolean False for self.use_natural_keys [ self . use_natural_keys ] .
1
'use_natural_keys' ||| _STR:0_
example# 5473
if self.use_natural_keys [ self . use_natural_keys ] is true ,
0
example# 5475
remove the _STR:0_ key from the options dictionary and substitute it for self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] ,
1
'use_natural_primary_keys' ||| _STR:0_
example# 5476
if the key doesnt exists substitute self.use_natural_keys [ self . use_natural_keys ] for self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] . remove the _STR:0_ key from the options dictionary and substitute it for self.use_natural_primary_keys [ self . use_natural_primary_keys ] ,
1
'use_natural_primary_keys' ||| _STR:0_
example# 5477
if the key doesnt exists substitute boolean False for self.use_natural_primary_keys [ self . use_natural_primary_keys ] . call the method self.start_serialization [ self . start_serialization ]
0
example# 5478
self.first [ self . first ] is boolean True .
0
example# 5479
for every obj in queryset ,
0
example# 5480
call the self.start_object [ self . start_object ] with an argument obj .
0
example# 5481
substitute obj._meta.concrete_model [ obj . _meta . concrete_model ] for concrete_model .
0
example# 5482
for every field in concrete_model._meta.local_fields [ concrete_model . _meta . local_fields ] ,
0
example# 5483
if field.serialize [ field . serialize ] is true ,
0
example# 5484
if field.rel [ field . rel ] is None ,
0
example# 5485
if self.selected_fields [ self . selected_fields ] is None or field.attname [ field . attname ] is contained in self.selected_fields [ self . selected_fields ]
0
example# 5486
call the method self.handle_field [ self . handle_field ] with arguments obj and filed .
0
example# 5487
if not ,
0
example# 5488
if self.selected_fields [ self . selected_fields ] is None or last three elements of field.attname [ field . attname ] are contained in self.selected_fields [ self . selected_fields ] :
0
example# 5489
call the method self.handle_fk_field [ self . handle_fk_field ] with arguments obj and field .
0
example# 5490
for every field in concrete_model._meta.many_to_many [ concrete_model . _meta . many_to_many ] ,
0
example# 5491
if field.serialize [ field . serialize ] is true ,
0
example# 5492
if self.selected_fields [ self . selected_fields ] is None or field.attname [ field . attname ] is contained in self.selected_fields [ self . selected_fields ] ,
0
example# 5494
call the method self.end_object [ self . end_object ] with an argument obj .
0
example# 5495
if self.first [ self . first ] is true ,
0
example# 5496
self.first [ self . first ] is boolean False .
0
example# 5497
call the method self.end_serialization [ self . end_serialization ] .
0
example# 5498
call the method self.getvalue [ self . getvalue ] , return the result .
0
example# 5499
define the method start_serialization with an argument self .
0
example# 5500
raise a NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Serializer must provide a start_serialization() method' ||| _STR:0_
example# 5501
define the method end_serialization with an argument self .
0
example# 5502
do nothing .
0
example# 5503
define the method start_object with argument self and obj .
0
example# 5504
raise a NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Serializer must provide a start_object() method' ||| _STR:0_
example# 5505
define the method end_object with argument self and obj .
0
example# 5506
do nothing .
0
example# 5507
define the method handle_field with argument self , obj and field .
0
example# 5508
raise a NotImplementedError with an argument string
0
example# 5509
define the method handle_fk_field with argument self , obj and field .
0
example# 5510
raise a NotImplementedError with an argument string
0
example# 5513
define the method getvalue with an argument self .
0
example# 5514
get _STR:0_ attribute of the self.stream [ self . stream ] object , if it exists and is callable ,
1
'getvalue' ||| _STR:0_
example# 5515
evaluate self.stream.getvalue [ self . stream . getvalue ] method , return the result .
0
example# 5516
derive the class Deserializer from the six.Iterator [ six . Iterator ] base class .
0
example# 5518
substitute options for self.options [ self . options ] .
0
example# 5519
if stream_or_string is an instance of six.string_types [ six . string_types ] type .
0
example# 5520
call the function six.StringIO [ six . StringIO ] with an argument stream_or_string , substitute the result for self.stream [ self . stream ] .
0
example# 5521
if not ,
0
example# 5522
substitute stream_or_string for self.stream [ self . stream ] .
0
example# 5523
define the method __iter__ with an argument self .
0
example# 5524
return self .
0
example# 5525
define the method __next__ with an argument self .
0
example# 5526
raise a NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Deserializer must provide a __next__() method' ||| _STR:0_
example# 5527
derive the class DeserializedObject from the object base class .
0
example# 5529
substitute obj for self.object [ self . object ] .
0
example# 5531
define the method __repr__ with an argument self .
0
example# 5532
return a string _STR:0_ , where ' % s ' are replaced with self.object._meta.app_label [ self . object . _meta . app_label ] , self.object._meta.object_name [ self . object . _meta . object_name ] and self.object.pk [ self . object . pk ] , respectively .
1
"<DeserializedObject: %s.%s(pk=%s)>" ||| _STR:0_
example# 5534
call the models.Model.save_base [ models . Model . save_base ] method with arguments self.object [ self . object ] , using as using and raw set to boolean True .
0
example# 5537
set accessor_name of the self.object [ self . object ] to object_list .
0
example# 5540
obj is an instance of Model class , created with an unpacked dictionary data as argument .
0
example# 5541
if obj.pk [ obj . pk ] is None , and Model has an _STR:0_ attribute , and Model._default_manager [ Model . _default_manager ] has and _STR:1_ ,
2
'natural_key' ||| _STR:0_
'get_by_natural_key' ||| _STR:1_
example# 5542
call the method obj.natural_key [ obj . natural_key ] , substitute the result for natural_key .
0
example# 5543
try ,
0
example# 5544
call the method Model._default_manager.db_manager [ Model . _default_manager . db_manager ] with an argument db , on the result call the get_by_natural_key with , an unpacked list natural_key as argument , substitute the pk filed of the resulting object for obj.pk [ obj . pk ] .
0
example# 5545
if Model.DoesNotExist [ Model . DoesNotExist ] exception is caught ,
0
example# 5546
do nothing .
0
example# 5547
return obj .
0
example# 5548
from __future__ import absolute_import into default name space .
0
example# 5549
from __future__ import unicode_literals into default name space .
0
example# 5550
import module datetime .
0
example# 5551
import module decimal .
0
example# 5552
import module json .
0
example# 5553
import module sys .
0
example# 5554
from django.core.serializers.base [ django . core . serializers . base ] import DeserializationError into default name space .
0
example# 5555
from django.core.serializers.python [ django . core . serializers . python ] import Serializer as PythonSerializer into default name space .
0
example# 5556
from django.core.serializers.python [ django . core . serializers . python ] import Deserializer as PythonDeserializer into default name space .
0
example# 5557
from django.utils [ django . utils ] import six into default name space .
0
example# 5558
from django.utils.timezone [ django . utils . timezone ] import is_aware into default name space .
0
example# 5559
define the class Serializer from the PythonSerializer base class .
0
example# 5560
internal_use_only is boolean False .
0
example# 5561
define the method start_serialization with an argument self .
0
example# 5564
self._current [ self . _current ] is None .
0
example# 5565
call the method self.options.copy [ self . options . copy ] , substitute the result for self.json_kwargs [ self . json_kwargs ] .
0
example# 5566
remove the entry under the _STR:0_ key of the self.json_kwargs [ self . json_kwargs ] dictionary .
1
'stream' ||| _STR:0_
example# 5567
remove the entry under the _STR:0_ key of the self.json_kwargs [ self . json_kwargs ] dictionary .
1
'fields' ||| _STR:0_
example# 5568
get the value under the _STR:0_ key of self.options [ self . options ] dictionary , if it is true ,
1
'indent' ||| _STR:0_
example# 5570
write a _STR:0_ to the self.stream [ self . stream ] file stream .
1
'[' ||| _STR:0_
example# 5571
define the method end_serialization with an argument self .
0
example# 5572
if value under the _STR:0_ key of the self.options [ self . options ] dictionary is true ,
1
'indent' ||| _STR:0_
example# 5573
write a new line to the self.stream [ self . stream ] file stream .
0
example# 5574
write _STR:0_ to the self.stream [ self . stream ] file stream .
1
']' ||| _STR:0_
example# 5575
if value under the _STR:0_ key of the self.options [ self . options ] dictionary is true ,
1
'indent' ||| _STR:0_
example# 5576
write a new line to the self.stream [ self . stream ] file stream .
0
example# 5577
define the method end_object with arguments self and obj .
0
example# 5578
get the value under the _STR:0_ key of the self.options [ self . options ] dictionary , substitute it for indent .
1
'indent' ||| _STR:0_
example# 5579
if self.first [ self . first ] is false ,
0
example# 5580
write _STR:0_ to the self.stream [ self . stream ] file stream .
1
',' ||| _STR:0_
example# 5581
if indent is false ,
0
example# 5582
write a white space to the self.stream [ self . stream ] file stream .
0
example# 5583
if indent is true ,
0
example# 5584
write new line to the self.stream [ self . stream ] file stream .
0
example# 5586
self._current [ self . _current ] is None .
0
example# 5587
define the method getvalue with an argument self .
0
example# 5588
call the getvalue method from the base class of the class PythonSerializer , return the result .
0
example# 5589
define the function Deserializer with arguments stream_or_string and unpacked dictionary options .
0
example# 5590
if stream_or_string is not an instance of bytes or six.string_types [ six . string_types ] ,
0
example# 5591
call the stream_or_string.read [ stream_or_string . read ] function , substitute the result for stream_or_string .
0
example# 5592
if stream_or_string is instance of bytes type ,
0
example# 5593
call the method stream_or_string.decode [ stream_or_string . decode ] with an argument string _STR:0_ , substitute the result for stream_or_string .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 5594
try ,
0
example# 5595
call the function json.loads [ json . loads ] with an argument stream_or_string , substitute the result for objects .
0
example# 5596
for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options ,
0
example# 5597
yield obj as generator return value ,
0
example# 5598
if GeneratorExit exception is caught ,
0
example# 5599
raise an exception ,
0
example# 5600
if Exception , renamed to e , exception is caught ,
0
example# 5602
define the class DjangoJSONEncoder from the json.JSONEncoder [ json . JSONEncoder ] base class .
0
example# 5603
define the method defalt with arguments self and o .
0
example# 5604
if o is an instance of datetime.datetime [ datetime . datetime ] object .
0
example# 5605
call the method o.isoformat [ o . isoformat ] substitute the result for r .
0
example# 5606
if o.microsecond [ o . microsecond ] is true ,
0
example# 5608
if r ends with string _STR:0_ ,
3
+0+ ||| _STR:1_
000 ||| _STR:2_
'+00:00' ||| _STR:0_
example# 5610
return r .
0
example# 5611
otherwise if o is an instance of datetime.date [ datetime . date ] object ,
0
example# 5612
call the method o.isoformat [ o . isoformat ] , return the result .
0
example# 5613
otherwise if o is an instance of datetime.time [ datetime . time ] object ,
0
example# 5614
call the function is_aware with an argument o , if it evaluates to true ,
0
example# 5615
raise a ValueError exception with an argument string _STR:0_ .
1
"JSON can't represent timezone-aware times." ||| _STR:0_
example# 5616
call the method o.isoformat [ o . isoformat ] substitute the result for r .
0
example# 5617
if o.microsecond [ o . microsecond ] is true ,
0
example# 5618
substitute first 12 elements of r for r .
1
121 ||| _STR:0_
example# 5619
return r .
0
example# 5620
otherwise if o is an instance of decimal.Decimal [ decimal . Decimal ] object ,
0
example# 5621
convert o to an string , return it .
0
example# 5622
if not ,
0
example# 5623
call the method default with an argument o from the base class of the class DjangoJSONEncoder , return the result .
0
example# 5624
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder .
0
example# 5625
from __future__ import unicode_literals into default name space .
0
example# 5626
from django.apps [ django . apps ] import apps into default name space .
0
example# 5627
from django.conf [ django . conf ] import settings into default name space .
0
example# 5628
from django.core.serializers [ django . core . serializers ] import base into default name space .
0
example# 5629
from django.db [ django . db ] import models and DEFAULT_DB_ALIAS into default name space .
0
example# 5630
from django.utils.encoding [ django . utils . encoding ] import smart_text and is_protected_type into default name space .
0
example# 5631
from django.utils [ django . utils ] import six into default name space .
0
example# 5632
derive Serializer from the base.Serializer [ base . Serializer ] base class .
0
example# 5633
internal_use_only is boolean True .
0
example# 5634
define the method start_serialization with an argument self .
0
example# 5635
self._current [ self . _current ] is None .
0
example# 5636
self.objects [ self . objects ] is an empty list .
0
example# 5637
define the method end_serialization with an argument self .
0
example# 5638
do nothing .
0
example# 5639
define the method start_object with arguments self and obj .
0
example# 5640
self.current [ self . current ] is an empty dictionary .
0
example# 5641
define the method end_object with arguments self and obj .
0
example# 5642
call the self.get_dum_object [ self . get_dum_object ] method with an argument obj , use the result as an argument for the self.objects.append [ self . objects . append ] method .
0
example# 5643
self._current [ self . _current ] is None .
0
example# 5644
define the method get_dump_object with arguments self and obj .
0
example# 5646
if self.use_natural_primary_keys [ self . use_natural_primary_keys ] is false or obj doesnt have a _STR:0_ attribute .
1
'natural_key' ||| _STR:0_
example# 5648
return data .
0
example# 5649
define handle_field method with self , obj and field arguments .
0
example# 5650
call the method field._get_val_from_obj [ field . _get_val_from_obj ] with obj argument , substitute the result for value .
0
example# 5651
call the function is_protected_type with an argument value , if it evaluates to true ,
0
example# 5652
substitute value for field.name [ field . name ] key of self._current [ self . _current ] dictionary .
0
example# 5653
if not ,
0
example# 5654
call the function field.value_to_string [ field . value_to_string ] with an argument obj , substitute the result for value under the field.name [ field . name ] key of self._current [ self . _current ] dictionary .
0
example# 5655
define the method handle_fk_field with self , obj and field arguments .
0
example# 5656
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an _STR:0_ attribute .
1
'natural_key' ||| _STR:0_
example# 5657
get field.name [ field . name ] from the obj , substitute it for related .
0
example# 5658
if related is true ,
0
example# 5659
call the method related.natural_key [ related . natural_key ] , substitute the result for value .
0
example# 5660
if not ,
0
example# 5661
value is None .
0
example# 5662
if not ,
0
example# 5663
get return value of the field.get_attname [ field . get_attname ] function attribute of the obj object , substitute it for value .
0
example# 5664
substitute value for value under the field.name [ field . name ] key of the self._current [ self . _current ] dictionary .
0
example# 5666
if field.rel.through._meta.auto_created [ field . rel . through . _meta . auto_created ] is true ,
0
example# 5667
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an _STR:0_ attribute ,
1
'natural_key' ||| _STR:0_
example# 5669
if not ,
0
example# 5672
define the method getvalue with an argument self .
0
example# 5673
return self.objects [ self . objects ] .
0
example# 5674
define the function Deserializer with arguments object_list and unpacked dictionary options .
0
example# 5675
remove the value under the _STR:0_ key from the options dictionary , assign it to the db , if the entry doesnt exists , substitute DEFAULT_DB_ALIAS for db .
1
'using' ||| _STR:0_
example# 5676
remove the value under the _STR:0_ key from the options dictionary , assign it to the ignore , if the entry doesnt exists , substitute boolean False for ignore .
1
'ignorenonexistent' ||| _STR:0_
example# 5677
for every d in object_list ,
0
example# 5678
try ,
0
example# 5679
call the function _get_model with an argument value under the _STR:0_ key of the d dictionary , substitute the result for Model .
1
'model' ||| _STR:0_
example# 5680
if base.DeserializationError [ base . DeserializationError ] exception is caught ,
0
example# 5681
if ignore is true ,
0
example# 5682
skip this loop iteration ,
0
example# 5683
if not ,
0
example# 5684
raise an exception .
0
example# 5685
data is an empty dictionary ,
0
example# 5686
if _STR:0_ is contained in d ,
1
'pk' ||| _STR:0_
example# 5687
call the method Model._meta.pk.to_python [ Model . _meta . pk . to_python ] with one argument : value under the _STR:0_ key of dictionary d , or None if previous doesnt exists , substitute the result for the value under the Model._meta.pk.attname [ Model . _meta . pk . attname ] key of data dictionary .
1
'pk' ||| _STR:0_
example# 5689
call the method Model._meta.get_all_field_names [ Model . _meta . get_all_field_names ] , substitute the result for model_fields .
0
example# 5690
for every field_name and field_value in return value of the function six.iteritems [ six . iteritems ] called with value under the _STR:0_ key of dictionary d ,
1
'fields' ||| _STR:0_
example# 5691
if ignore is true and field_name is not contained in model_fields ,
0
example# 5692
skip this loop iteration ,
0
example# 5693
if field_value is an instance of the str type ,
0
example# 5695
call the Model._meta.get_field [ Model . _meta . get_field ] method with an argument field_name , substitute the result for field .
0
example# 5696
if field.rel [ field . rel ] is true , and field.rel [ field . rel ] is an instance of models.ManyToManyRel [ models . ManyToManyRel ] ,
0
example# 5697
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an attribute _STR:0_ ,
1
'get_by_natural_key' ||| _STR:0_
example# 5699
if value has an attribute _STR:0_ and value is not an instance of six.text_type [ six . text_type ] ,
1
'__iter__' ||| _STR:0_
example# 5700
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with an argument db on the return value call the method get_by_natural_key , with unpacked list value as an argument , return the pk field of the result .
0
example# 5701
if not ,
0
example# 5702
call the method field.rel.to._meta.pk.to_python [ field . rel . to . _meta . pk . to_python ] with an argument value , use the result as an argument for the call to the , smart_text function , return the result .
0
example# 5703
if not ,
0
example# 5706
otherwise if field.rel [ field . rel ] is true and field.rel [ field . rel ] is an instance of the models.ManyToOneRel [ models . ManyToOneRel ] object ,
0
example# 5707
if field_value is not None ,
0
example# 5708
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an _STR:0_ attribute ,
1
'get_by_natural_key' ||| _STR:0_
example# 5709
if field_value has an attribute _STR:0_ and is not an instance of six.text_type [ six . text_type ] object ,
1
'__iter__' ||| _STR:0_
example# 5710
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with db as argument , call the get_by_natural_key method on the result with , unpacked list field_value as an argument , substitute the result for obj .
0
example# 5711
get field.rel.field_name [ field . rel . field_name ] attribute of the object obj , substitute it for value .
0
example# 5712
if field.rel.to._meta.pk.rel [ field . rel . to . _meta . pk . rel ] is true ,
0
example# 5713
substitute value.pk [ value . pk ] for value .
0
example# 5714
if not ,
0
example# 5715
all the method field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] with field.rel.field_name [ field . rel . field_name ] as argument , call the to_python method on the result with , unpacked list field_value as an argument , substitute the result for value .
0
example# 5716
substitute value for value under the field.attname [ field . attname ] key of the data dictionary .
0
example# 5717
if not ,
0
example# 5718
all the method field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] with field.rel.field_name [ field . rel . field_name ] as argument , call the to_python method on the result with , unpacked list field_value as an argument , substitute the result for value of under the field.attname [ field . attname ] key of the data dictionary .
0
example# 5719
if not ,
0
example# 5720
value under the field.attname [ field . attname ] key of the data dictionary is None .
0
example# 5721
if not ,
0
example# 5722
call the field.to_python [ field . to_python ] method with field_value , substitute the result for field.name [ field . name ] key of the data dictionary .
0
example# 5723
call the method base.build_instance [ base . build_instance ] with arguments Model , data and db , substitute the result for obj .
0
example# 5725
define the function _get_model with an argument model_identifier .
0
example# 5726
try ,
0
example# 5727
call the method apps.get_model [ apps . get_model ] with an argument model_identifier .
0
example# 5728
if LookupError or TypeError exceptions are caught ,
0
example# 5729
raise an base.DeserializationError [ base . DeserializationError ] exception with an argument string _STR:0_ , where ' % s ' is replaced with model_identifier .
1
"Invalid model identifier: '%s'" ||| _STR:0_
example# 5730
import module decimal .
0
example# 5731
import module yaml .
0
example# 5732
import module sys .
0
example# 5733
from io import StringIO into default name space .
0
example# 5734
from django.db [ django . db ] import models into default name space .
0
example# 5735
from django.core.serializers.base [ django . core . serializers . base ] import DeserializationError into default name space .
0
example# 5736
from django.core.serializers.python [ django . core . serializers . python ] import Serializer as PythonSerializer into default name space .
0
example# 5737
from django.core.serializers.python [ django . core . serializers . python ] import Deserializer as PythonDeserializer into default name space .
0
example# 5738
from django.utils [ django . utils ] import six into default name space .
0
example# 5739
try ,
0
example# 5740
from yaml import CSafeLoader as SafeLoader into default name space .
0
example# 5741
yaml import CSafeDumper as SafeDumper into default name space .
0
example# 5742
if ImportError exception is caught ,
0
example# 5743
from yaml import SafeLoader , SafeDumper into default name space .
0
example# 5744
derive the class DjangoSafeDumper from the SafeDumper base class .
0
example# 5745
define the method represent_decimal with arguments self and data .
0
example# 5747
call the method DjangoSafeDumper.add_representer [ DjangoSafeDumper . add_representer ] with arguments decimal.Decimal [ decimal . Decimal ] and DjangoSafeDumper.represent_decimal [ DjangoSafeDumper . represent_decimal ] .
0
example# 5748
derive the class Serializer from the PythonSerializer base class .
0
example# 5749
internal_use_only is a boolean False .
0
example# 5750
define the method handle_field with arguments self , obj and field .
0
example# 5751
if field is an instance of models.TimeField [ models . TimeField ] and filed.name [ filed . name ] attribute of obj is not None ,
0
example# 5752
get field.name [ field . name ] attribute of obj , convert it to a string , substitute it for the value under the filed.name [ filed . name ] key of self._current [ self . _current ] dictionary .
0
example# 5753
if not ,
0
example# 5754
call the handle_filed method of the base class of the Serializer class , with arguments obj and field .
0
example# 5755
define the method end_serialization with an argument self .
0
example# 5757
define the method getvalue with an argument self .
0
example# 5758
call the getvalue method of the base class of the PythonSerializer class , return the result .
0
example# 5760
if stream_or_string is an instance of bytes ,
0
example# 5761
call the method stream_or_string.decode [ stream_or_string . decode ] with string _STR:0_ as argument , substitute the result for stream_or_string .
2
-8- ||| _STR:1_
'utf-8' ||| _STR:0_
example# 5762
if stream_or_string is an instance of the six.string_types [ six . string_types ] ,
0
example# 5763
call the function StringIO with an argument stream_or_string , substitute the result for stream .
0
example# 5764
if not ,
0
example# 5765
substitute stream_or_string for stream .
0
example# 5766
try ,
0
example# 5769
if exception GeneratorExit is caught ,
0
example# 5770
raise an exception .
0
example# 5771
if Exception , renamed to e , exception is caught ,
0
example# 5773
from __future__ import unicode_literals into default name space .
0
example# 5774
from django.apps [ django . apps ] import apps into default name space .
0
example# 5775
from django.conf [ django . conf ] import settings into default name space .
0
example# 5776
from django.core.serializers [ django . core . serializers ] import base into default name space .
0
example# 5777
from django.db [ django . db ] import models and DEFAULT_DB_ALIAS into default name space .
0
example# 5778
from django.utils.xmlutils [ django . utils . xmlutils ] import SimplerXMLGenerator into default name space .
0
example# 5779
from django.utils.encoding [ django . utils . encoding ] import smart_text into default name space .
0
example# 5780
from xml.dom [ xml . dom ] import pulldom into default name space .
0
example# 5781
from xml.sax [ xml . sax ] import handler into default name space .
0
example# 5782
from xml.sax.expatreader [ xml . sax . expatreader ] import ExpatParser as _ExpatParser into default name space .
0
example# 5783
derive the class Serializer from the base.Serializer [ base . Serializer ] base class .
0
example# 5784
define the method indent with argument self and level .
0
example# 5785
if value under the _STR:0_ key of the options dictionary exists and is not None ,
1
'indend' ||| _STR:0_
example# 5786
get the value under the _STR:0_ key of the options dictionary , multiply it with level , create a string containing number of whitespaces equal to the previous result , append it to the string containing newline character , use the result as the argument for the call to the self.xml.ignorableWhitespace [ self . xml . ignorableWhitespace ] method .
1
'indent' ||| _STR:0_
example# 5787
define the method start_serialization with an argument self .
0
example# 5789
call the self.xml.startDocument [ self . xml . startDocument ] method .
0
example# 5791
define the method end_serialization with an argument self .
0
example# 5793
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
"django-objects" ||| _STR:0_
example# 5794
call the self.xml.endDocument [ self . xml . endDocument ] method .
0
example# 5795
define the method start_object with arguments self and obj .
0
example# 5796
if _STR:0_ is not an attribute of obj ,
1
'_meta' ||| _STR:0_
example# 5797
raise an base.SerializationError [ base . SerializationError ] exception with argument string _STR:0_ , replace ' % s ' with type of the obj object .
1
"Non-model object (%s) encountered during serialization" ||| _STR:0_
example# 5798
call the method self.indent [ self . indent ] with argument integer 1 .
1
1.1 ||| _STR:0_
example# 5800
if self.use_natural_primary_keys [ self . use_natural_primary_keys ] is false and obj doesnt have _STR:0_ argument .
1
'natural_key' ||| _STR:0_
example# 5801
substitute return value of the method obj._get_pk_val [ obj . _get_pk_val ] for obj_pk .
0
example# 5802
if obj_pk is not None ,
0
example# 5803
substitute the return value of the smart_text function with an argument obj_pk for the value under the _STR:0_ key of the attrs dictionary .
1
'pk' ||| _STR:0_
example# 5804
call the method self.xml.startElement [ self . xml . startElement ] with arguments string _STR:0_ and attrs .
1
'object' ||| _STR:0_
example# 5805
define the method end_object with arguments self and obj .
0
example# 5806
call the method self.indent [ self . indent ] with argument integer 1 .
1
1.1 ||| _STR:0_
example# 5807
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
'object' ||| _STR:0_
example# 5808
define the method handle_field with arguments self , obj and field .
0
example# 5809
call the method self.indent [ self . indent ] with argument integer 2 .
1
2.2 ||| _STR:0_
example# 5811
if field.name [ field . name ] attribute of obj is not None ,
0
example# 5812
call the method field.value_to_string [ field . value_to_string ] with an argument obj , use the result as an argument for the call the method self.xml.characters [ self . xml . characters ] .
0
example# 5813
if not ,
0
example# 5814
call the method self.xml.addQuickElement [ self . xml . addQuickElement ] with an argument string _STR:0_ .
1
'None' ||| _STR:0_
example# 5815
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_
1
'field' ||| _STR:0_
example# 5816
define the method handle_fk_field with arguments self , obj and field .
0
example# 5817
call the method self._start_relational_field [ self . _start_relational_field ] with an argument field .
0
example# 5818
evaluate the field.get_attname [ field . get_attname ] , use the result as the name of the obj attribute to get , substitute it for related_att .
0
example# 5819
if related_att is not None ,
0
example# 5820
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an attribute _STR:0_ ,
1
'natural_key' ||| _STR:0_
example# 5821
get field.name [ field . name ] attribute of the obj , substitute it for related .
0
example# 5822
call the method related.natural_key [ related . natural_key ] , substitute the result for related .
0
example# 5823
for every key_value in related ,
0
example# 5824
call the method self.xml.startElement [ self . xml . startElement ] with arguments string _STR:0_ and an empty dictionary .
1
'natural' ||| _STR:0_
example# 5825
call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters [ self . xml . characters ] method .
0
example# 5826
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_
1
'natural' ||| _STR:0_
example# 5827
if not ,
0
example# 5828
call the function smart_text with argument related_att , use the result as an argument for the call to the self.xml.characters [ self . xml . characters ] method .
0
example# 5829
if not ,
0
example# 5830
call the method self.xml.addQuickElement [ self . xml . addQuickElement ] with an argument string _STR:0_ .
1
'None' ||| _STR:0_
example# 5831
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
'field' ||| _STR:0_
example# 5833
if field.rel.through._meta.auto_created [ field . rel . through . _meta . auto_created ] is true ,
0
example# 5834
call the method self._start_relational_field [ self . _start_relational_field ] with the argument field .
0
example# 5835
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an attribute _STR:0_ ,
1
'natural_key' ||| _STR:0_
example# 5837
call the value.natural_key [ value . natural_key ] method , substitute the result for natural .
0
example# 5838
call the method self.xml.startElement [ self . xml . startElement ] with argument string _STR:0_ and an empty dictionary .
1
'object' ||| _STR:0_
example# 5839
for every key_value in natural ,
0
example# 5840
call the method self.xml.startElement [ self . xml . startElement ] with argument string _STR:0_ and an empty dictionary .
1
'natural' ||| _STR:0_
example# 5841
call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters [ self . xml . characters ] method .
0
example# 5842
call the method self.xml.startElement [ self . xml . startElement ] with an argument string _STR:0_ .
1
'natural' ||| _STR:0_
example# 5843
call the method self.xml.startElement [ self . xml . startElement ] with an argument string _STR:0_ .
1
'object' ||| _STR:0_
example# 5844
if not ,
0
example# 5847
for every relobj in iterator generated from the field.name [ field . name ] attribute of the obj object .
0
example# 5849
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
'field' ||| _STR:0_
example# 5850
define the method _start_relational_field with arguments self and field .
0
example# 5851
call the method self.indent [ self . indent ] with argument integer 2 .
1
2.2 ||| _STR:0_
example# 5853
field.rel.__class__.__name__ [ field . rel . __class__ . __name__ ] for _STR:0_ and return value of the function smart_text with an argument field.rel.to._meta [ field . rel . to . _meta ] for _STR:1_ . derive the class Deserializer from the base.Deserializer [ base . Deserializer ] base class .
2
'rel' ||| _STR:0_
'to' ||| _STR:1_
example# 5855
call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options .
0
example# 5856
call the method pulldom.parse [ pulldom . parse ] with arguments : self.stream [ self . stream ] and return value of the method self._make_parser [ self . _make_parser ] ,
0
example# 5857
substitute the result for self.event_stream [ self . event_stream ] . remove the _STR:0_ key from the options dictionary , substitute the return value for self.db [ self . db ] , if the key doesnt exists substitute
1
'using' ||| _STR:0_
example# 5858
DEFAULT_DB_ALIAS for self.db [ self . db ] . remove the _STR:0_ key from the options dictionary , substitute the return value for self.db [ self . db ] , if the key doesnt exists substitute boolean False for self.ignore [ self . ignore ] .
1
'ignorenonexistent' ||| _STR:0_
example# 5859
define the method _make_parser with an argument self .
0
example# 5860
return the instance of DefusedExpatParser class .
0
example# 5861
define the method __next__ with an argument self .
0
example# 5862
for every event and node in self.event_stream [ self . event_stream ] ,
0
example# 5863
if event equals a string _STR:0_ and node.nodeName [ node . nodeName ] equals a string _STR:1_ ,
2
"START_ELEMENT" ||| _STR:0_
'object' ||| _STR:1_
example# 5864
call the method self.event_stream.expandNode [ self . event_stream . expandNode ] with an argument node .
0
example# 5865
call the method self._handle_object [ self . _handle_object ] with an argument node , return the result .
0
example# 5866
raise an StopIteration exception .
0
example# 5867
define the method _handle_object with arguments self and node .
0
example# 5868
call the method self._get_model_from_node [ self . _get_model_from_node ] with arguments node and string _STR:0_ .
1
'model' ||| _STR:0_
example# 5869
data is an empty dictionary .
0
example# 5870
call the method node.hasAttribute [ node . hasAttribute ] with string _STR:0_ as an argument , if it evaluates to true ,
1
'pk' ||| _STR:0_
example# 5871
call the method node.getAttribute [ node . getAttribute ] with an argument string _STR:0_ , use the result as the argument for the call to the method , Model._meta.pk.to_python [ Model . _meta . pk . to_python ] with , substitute the result for value under the Model._meta.pk.attname [ Model . _meta . pk . attname ] key of the data dictionary .
1
'pk' ||| _STR:0_
example# 5873
call the method Model._meta.get_all_field_names [ Model . _meta . get_all_field_names ] , substitute the result for model_fields .
0
example# 5874
for every field_node in return value of the method node.getElementsByTagName [ node . getElementsByTagName ] with an argument string _STR:0_ .
1
'field' ||| _STR:0_
example# 5875
call the method field_node.getAttribute [ field_node . getAttribute ] with an argument string _STR:0_ , substitute the result for field_name .
1
'name' ||| _STR:0_
example# 5876
if field_name is false ,
0
example# 5877
raise an base.DeserializationError [ base . DeserializationError ] exception with string _STR:0_ as argument .
1
"<field> node is missing the 'name' attribute" ||| _STR:0_
example# 5878
if self.ignore [ self . ignore ] is true and field_name is not contained in model_fields ,
0
example# 5879
skip this loop iteration .
0
example# 5880
call the method Model._meta.get_field [ Model . _meta . get_field ] with an argument field_name , substitute it for field .
0
example# 5881
if field.rel [ field . rel ] is true and field.rel [ field . rel ] is an instance of models.ManyToManyRel [ models . ManyToManyRel ] ,
0
example# 5883
otherwise , if field.rel [ field . rel ] is true and field.rel [ field . rel ] is an instance of models.ManyToOneRel [ models . ManyToOneRel ] ,
0
example# 5884
call the method self._handle_fk_field_node [ self . _handle_fk_field_node ] with field_node and field as arguments , substitute the result for the value under the field.attname [ field . attname ] of the data dictionary .
0
example# 5885
if not ,
0
example# 5886
call the method field_node.getElementsByTagName [ field_node . getElementsByTagName ] with an argument string _STR:0_ , if it evaluates to true ,
1
'None' ||| _STR:0_
example# 5887
value is None .
0
example# 5888
if not ,
0
example# 5889
call the function getInnerText with argument field_node , on the result call the method strip , use the result as an argument for the call to the field.to_python [ field . to_python ] method , substitute the result for value .
0
example# 5890
substitute value for value under the field.name [ field . name ] key of the data dictionary .
0
example# 5891
call the method base.build_instance [ base . build_instance ] with arguments Model , data and self.db [ self . db ] , substitute the result for obj .
0
example# 5893
define the method _handle_fk_field_node with arguments self , node and field .
0
example# 5894
call the method node.getElementsByTagName [ node . getElementsByTagName ] with an argument string _STR:0_ , if it evaluates to true ,
1
'None' ||| _STR:0_
example# 5895
return None .
0
example# 5896
if not ,
0
example# 5897
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an atttribute _STR:0_ ,
1
'get_by_natural_key' ||| _STR:0_
example# 5898
call the method node.getElementsByTagName [ node . getElementsByTagName ] with the argument string _STR:0_ , substitute the result for keys .
1
'natural' ||| _STR:0_
example# 5899
if keys is true ,
0
example# 5900
call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list .
0
example# 5901
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with an argument self.db [ self . db ] , on the result call the method get_by_natural_key , with unpacked list field_value as an argument , substitute the result for obj .
0
example# 5902
get the field.rel.field_name [ field . rel . field_name ] from the obj , substitute it for obj_pk .
0
example# 5903
if field.rel.to._meta.pk.rel [ field . rel . to . _meta . pk . rel ] is true ,
0
example# 5904
substitute obj_pk.pk [ obj_pk . pk ] for obj_pk .
0
example# 5905
if not ,
0
example# 5906
call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value .
0
example# 5907
call the field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] method with an field.rel.field_name [ field . rel . field_name ] argument , on the result call the method to_python , with field_value as an argument , substitute the result for obj_pk .
0
example# 5908
return obj_pk .
0
example# 5909
if not ,
0
example# 5910
call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value .
0
example# 5911
call the field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] method with an field.rel.field_name [ field . rel . field_name ] argument , on the result call the method to_python , with field_value as an argument , return the result .
0
example# 5913
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an attribute _STR:0_ ,
1
'get_by_natural_key' ||| _STR:0_
example# 5915
call the method n.getElementsByTagName [ n . getElementsByTagName ] with string _STR:0_ as argument , substitute result for keys .
1
'natural' ||| _STR:0_
example# 5916
if keys is true ,
0
example# 5917
call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list .
0
example# 5918
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with an argument self.db [ self . db ] , on the result call the method get_by_natural_key , with unpacked list field_value as an argument , substitute the field pk of the result for obj_pk .
0
example# 5919
if not ,
0
example# 5920
call the method n.getAttribute [ n . getAttribute ] with string _STR:0_ as argument , use the result as an argument for the call to the field.rel.to._meta.pk.to_python [ field . rel . to . _meta . pk . to_python ] method , substitute the result for obj_pk .
1
'pk' ||| _STR:0_
example# 5921
return obj_pk .
0
example# 5922
if not ,
0
example# 5925
define the method _get_model_from_node with arguments self , node and attr .
0
example# 5926
call the method node.getAttribute [ node . getAttribute ] with an argument attr , substitute the result for model_identifier .
0
example# 5927
if model_identifier is false ,
0
example# 5928
raise an base.DeserializationError [ base . DeserializationError ] exception with an argument string _STR:0_ , where ' % s ' is replaced with node.nodeName [ node . nodeName ] and attr .
1
"<%s> node is missing the required '%s' attribute" ||| _STR:0_
example# 5929
try ,
0
example# 5930
call the method apps.get_model [ apps . get_model ] with an argument model_identifier , return the result .
0
example# 5931
if LookupError or TypeError exceptions are caught ,
0
example# 5932
raise an base.DeserializationError [ base . DeserializationError ] exception with an argument string _STR:0_ , where ' % s ' is replaced with node.nodeName [ node . nodeName ] and attr .
1
"<%s> node has invalid model identifier: '%s'" ||| _STR:0_
example# 5933
define the function getInnerText with an argument node .
0
example# 5934
inner_text is an empty list .
0
example# 5935
for every child in node.childNodes [ node . childNodes ] ,
0
example# 5936
if child.nodeType [ child . nodeType ] equals to child.TEXT_NODE [ child . TEXT_NODE ] or child.nodeType [ child . nodeType ] equals to child.CDATA_SECTION_NODE [ child . CDATA_SECTION_NODE ] ,
0
example# 5937
append child.data [ child . data ] to the inner_text list .
0
example# 5938
otherwise if child.nodeType [ child . nodeType ] equals to child.ELEMENT_NODE [ child . ELEMENT_NODE ] ,
0
example# 5939
call the function getInnerText with an argument child , use the result as an argument for the call to the method inner_text.extend [ inner_text . extend ] .
0
example# 5940
if not ,
0
example# 5941
do nothing .
0
example# 5942
join inner_text elements into a string .
0
example# 5943
derive the class DefusedExpatParser from the _ExpatParser base class .
0
example# 5944
define the method __init__ with arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 5945
call the method _ExpatParser.__init__ [ _ExpatParser . __init__ ] with arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 5948
define the method start_doctype_decl with an arguments self , name , sysid , pubid and has_internal_subset .
0
example# 5949
raise an DTDForbidden exception with arguments name , sysid and pubid .
0
example# 5950
define the method entity_decl with arguments self , name , is_parameter_entity , value , base , sysid , pubid and notation_name .
0
example# 5951
raise an EntitiesForbidden exception with arguments name , value , base , sysid , pubid and notation_name .
0
example# 5952
define the method unparsed_entity_decl with arguments self , name , base , sysid , pubid and notation_name .
0
example# 5953
raise an EntitiesForbidden exception with arguments name , None , base , sysid , pubid and notation_name .
0
example# 5954
define the method external_entity_ref_handler with arguments self , context , base , sysid and pubid .
0
example# 5955
raise an ExternalReferenceForbidden exception with arguments context , base , sysid and pubid .
0
example# 5956
define the method reset with an argument self .
0
example# 5957
call the method _ExpatParser.reset [ _ExpatParser . reset ] with an argumen sefl .
0
example# 5958
substitute self._parser [ self . _parser ] for parser .
0
example# 5959
substitute self.start_doctype_decl [ self . start_doctype_decl ] for parser.StartDoctypeDeclHandler [ parser . StartDoctypeDeclHandler ] .
0
example# 5960
substitute self.entity_decl [ self . entity_decl ] for parser.EntityDeclHandler [ parser . EntityDeclHandler ] .
0
example# 5961
substitute self.unparsed_entity_decl [ self . unparsed_entity_decl ] for parser.UnparsedEntityDeclHandler [ parser . UnparsedEntityDeclHandler ] .
0
example# 5962
substitute self.external_entity_ref_handler [ self . external_entity_ref_handler ] for parser.ExternalEntityRefHandler [ parser . ExternalEntityRefHandler ] .
0
example# 5963
derive the class DefusedXmlException from the ValueError base class .
0
example# 5964
define the method __repr__ with an argument self .
0
example# 5965
convert self into a string and return it .
0
example# 5966
derive the class DTDForbidden from the DefusedXmlException base class .
0
example# 5967
define the method __init__ with arguments self , name , sysid and pubid .
0
example# 5968
call the method __init__ from the base class of the DTDForbidden class .
0
example# 5969
substitute name for self.name [ self . name ] .
0
example# 5970
substitute sysid for self.sysid [ self . sysid ] .
0
example# 5971
substitute pubid for self.pubid [ self . pubid ] .
0
example# 5972
define the method __str__ with an argument self .
0
example# 5973
tpl is an string _STR:0_ .
1
"DTDForbidden(name='{}', system_id={!r}, public_id={!r})" ||| _STR:0_
example# 5974
call the method tpl.format [ tpl . format ] with an arguments self.name [ self . name ] , self.sysid [ self . sysid ] and self.pubid [ self . pubid ] .
0
example# 5975
derive the class EntitiesForbidden from the DefusedXmlException base class .
0
example# 5976
define the method __init__ with arguments self , name , value , base , sysid , pubid and notation_name .
0
example# 5977
call the method __init__ from the base class of the EntitiesForbidden class .
0
example# 5978
substitute name for self.name [ self . name ] .
0
example# 5979
substitute value for self.value [ self . value ] .
0
example# 5980
substitute base for self.base [ self . base ] .
0
example# 5981
substitute sysid for self.sysid [ self . sysid ] .
0
example# 5982
substitute pubid for self.pubid [ self . pubid ] .
0
example# 5983
substitute notation_name for self.notation_name [ self . notation_name ] .
0
example# 5984
define the method __str__ with an argument self .
0
example# 5985
tpl is an string _STR:0_ .
1
"EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})" ||| _STR:0_
example# 5986
call the method tpl.format [ tpl . format ] with an arguments self.name [ self . name ] , self.sysid [ self . sysid ] and self.pubid [ self . pubid ] .
0
example# 5987
derive the class ExternalReferenceForbidden from the DefusedXmlException base class .
0
example# 5988
define the method __init__ with arguments self , context , base , sysid and pubid .
0
example# 5989
call the method __init__ from the base class of the ExternalReferenceForbidden class .
0
example# 5990
substitute context for self.context [ self . context ] .
0
example# 5991
substitute base for self.base [ self . base ] .
0
example# 5992
substitute sysid for self.sysid [ self . sysid ] .
0
example# 5993
substitute pubid for self.pubid [ self . pubid ] .
0
example# 5994
define the method __str__ with an argument self .
0
example# 5995
tpl is an string _STR:0_ .
1
"ExternalReferenceForbidden(system_id='{}', public_id={})" ||| _STR:0_
example# 5996
call the method tpl.format [ tpl . format ] with an arguments self.sysid [ self . sysid ] and self.pubid [ self . pubid ] .
0
example# 5997
from __future__ import unicode_literals into default name space .
0
example# 5998
import module socket .
0
example# 5999
import module sys .
0
example# 6000
from wsgiref import simple_server into default name space .
0
example# 6001
from wsgiref.util [ wsgiref . util ] import FileWrapper
0
example# 6002
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 6003
from django.core.management.color [ django . core . management . color ] import color_style into default name space .
0
example# 6004
from django.core.wsgi [ django . core . wsgi ] import get_wsgi_application into default name space .
0
example# 6005
from django.utils [ django . utils ] import six into default name space .
0
example# 6006
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 6007
from django.utils.six.moves [ django . utils . six . moves ] import socketserver into default name space .
0
example# 6009
define the funtion get_internal_wsgi_application .
0
example# 6010
from django.conf [ django . conf ] import settings into default name space .
0
example# 6011
get _STR:0_ attribute from the settings , substitute it for app_path .
1
'WSGI_APPLICATION' ||| _STR:0_
example# 6012
if app_path is None ,
0
example# 6013
call the function get_wsgi_application , return the result .
0
example# 6014
try ,
0
example# 6015
call the import_string with app_path as an argument , return the result .
0
example# 6016
if ImportError , rename it to e , exception is caught ,
0
example# 6017
msg is a tuple containing one initial entry : a string _STR:0_ , where _STR:1_ is replaced by app_path and _STR:2_ is replaced by e .
3
'%(exception)s' ||| _STR:2_
"WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'" ||| _STR:0_
'%(app_path)s' ||| _STR:1_
example# 6019
derive the class WSGIServer from simple_server.WSGIServer [ simple_server . WSGIServer ] and object base classes .
0
example# 6020
request_queue_size is integer 10 .
1
101 ||| _STR:0_
example# 6025
define the function server_bind with an argument self .
0
example# 6026
call the server_bind method from the base class of the WSGIServer class .
0
example# 6027
call the self.setup_environ [ self . setup_environ ] method .
0
example# 6028
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler [ simple_server . WSGIRequestHandler ] and object base classes .
0
example# 6030
call the color_style method , substitute the result for self.style [ self . style ] .
0
example# 6032
define the function address_string with an argument self .
0
example# 6033
return the first element of self.client_address [ self . client_address ] .
0
example# 6034
define the function server_bind with an argument self .
0
example# 6035
msg is a string _STR:0_ , where ' % s ' are replaced with return value of the method self.log_date_time_string [ self . log_date_time_string ] and formated args .
1
"[%s] %s\n" ||| _STR:0_
example# 6037
call the self.style.HTTP_SUCCESS [ self . style . HTTP_SUCCESS ] with an argument msg , substitute it for msg .
0
example# 6039
call the self.style.HTTP_INFO [ self . style . HTTP_INFO ] with an argument msg , substitute it for msg .
0
example# 6040
otherwise if second element of args equals a string _STR:0_ ,
2
303 ||| _STR:1_
'304' ||| _STR:0_
example# 6041
call the self.style.HTTP_NOT_MODIFIED [ self . style . HTTP_NOT_MODIFIED ] with an argument msg , substitute it for msg .
0
example# 6043
call the self.style.HTTP_REDIRECT [ self . style . HTTP_REDIRECT ] with an argument msg , substitute it for msg .
0
example# 6045
call the self.style.HTTP_NOT_FOUND [ self . style . HTTP_NOT_FOUND ] with an argument msg , substitute it for msg .
0
example# 6047
call the self.style.HTTP_BAD_REQUEST [ self . style . HTTP_BAD_REQUEST ] with an argument msg , substitute it for msg .
0
example# 6048
if not ,
0
example# 6049
call the self.style.HTTP_SERVER_ERROR [ self . style . HTTP_SERVER_ERROR ] with an argument msg , substitute it for msg .
0
example# 6050
call the sys.stderr.write [ sys . stderr . write ] function with an argument msg .
0
example# 6053
if threading is true ,
0
example# 6055
if not ,
0
example# 6056
substitute WSGIServer for httpd_cls .
0
example# 6058
if threading is true ,
0
example# 6059
httpd.daemon_threads [ httpd . daemon_threads ] is boolean True .
0
example# 6060
call the method httpd.set_app [ httpd . set_app ] with an argument wsgi_handler .
0
example# 6061
call the method httpd.serve_forever [ httpd . serve_forever ] .
0
example# 6062
import module importlib .
0
example# 6063
import module os .
0
example# 6064
import module sys .
0
example# 6065
__version__ is a string _STR:0_ .
2
"0.1" ||| _STR:0_
0.0 ||| _STR:1_
example# 6066
__all__ is a list containing a string _STR:0_ .
1
"runfastcgi" ||| _STR:0_
example# 6067
FASTCGI_OPTIONS is a dictionary containing 16 initial entries : _STR:0_ for _STR:1_ , None for _STR:2_ , None for _STR:3_ ,
5
'protocol' ||| _STR:1_
'port' ||| _STR:3_
161 ||| _STR:4_
'host' ||| _STR:2_
'fcgi' ||| _STR:0_
example# 6068
define the method fastcgi_help with an argument message set to None .
0
example# 6069
print FASTCGI_HELP to the standard output .
0
example# 6070
if message is true ,
0
example# 6071
print message to the standard output .
0
example# 6072
return boolean False .
0
example# 6074
call the method FASTCGI_OPTIONS.copy [ FASTCGI_OPTIONS . copy ] , substitute the result for options .
0
example# 6075
call the options.update [ options . update ] method with an argument kwargs .
0
example# 6076
for every x in argset ,
0
example# 6077
if character _STR:0_ is contained in x ,
1
'=' ||| _STR:0_
example# 6079
if not ,
0
example# 6080
substitute x for k and boolean True for v .
0
example# 6081
substitute v for value under the k converted to lower case key of options dictionary .
0
example# 6082
if string _STR:0_ is contained in options ,
1
'help' ||| _STR:0_
example# 6083
call the fastcgi_help function , return the result .
0
example# 6084
try ,
0
example# 6085
import flup
0
example# 6086
if ImportError , renamed to e , exception is caught ,
0
example# 6087
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ , where ' % s ' is replaced by e .
1
"ERROR: %s\n" ||| _STR:0_
example# 6088
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  Unable to load the flup package.  In order to run django\n" ||| _STR:0_
example# 6089
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  as a FastCGI application, you will need to get flup from\n" ||| _STR:0_
example# 6090
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  http://www.saddi.com/software/flup/   If you've already\n" ||| _STR:0_
example# 6091
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  installed flup, then make sure you have it in your PYTHONPATH.\n" ||| _STR:0_
example# 6092
return boolean False .
0
example# 6093
append value under the _STR:0_ key of the options dictionary to the string _STR:1_ , substitute it for flup_module .
2
'protocol' ||| _STR:0_
'server.' ||| _STR:1_
example# 6094
if value under the _STR:0_ key of the options dictionary equals to string _STR:1_ or _STR:2_ ,
3
'fork' ||| _STR:2_
'perfork' ||| _STR:1_
'method' ||| _STR:0_
example# 6096
append string _STR:0_ to flup_module .
1
'_fork' ||| _STR:0_
example# 6097
otherwise if value under the _STR:0_ key of optins dictionary equals to string _STR:1_ or _STR:2_ ,
3
'threaded' ||| _STR:2_
'thread' ||| _STR:1_
'method' ||| _STR:0_
example# 6099
if not ,
0
example# 6100
call the function fastcgi_help with an argument string _STR:0_ , return the result .
1
"ERROR: Implementation must be one of prefork or thread." ||| _STR:0_
example# 6101
if value under the _STR:0_ key of options dictionary is not None , substitute it for value under the _STR:0_ key of wsgi_opts dictionary .
1
'debug' ||| _STR:0_
example# 6102
try ,
0
example# 6104
substitute module.WSGIServer [ module . WSGIServer ] for WSGIServer .
0
example# 6105
if Exception exception is caught ,
0
example# 6106
append flup_module to string _STR:0_ , print it to the standard output .
1
"Can't import flup." ||| _STR:0_
example# 6107
return boolean False .
0
example# 6108
from django.core.servers.basehttp [ django . core . servers . basehttp ] import get_internal_wsgi_application into default name space .
0
example# 6109
if value under the _STR:0_ key of the options dictionary is false and values under the _STR:1_ and _STR:2_ keys of the options dictionary are true ,
3
'socket' ||| _STR:0_
'host' ||| _STR:1_
'port' ||| _STR:2_
example# 6111
if value under the _STR:0_ key of the options dictionary is true and values under the _STR:1_ and _STR:2_ keys of the options dictionary are false ,
3
'socket' ||| _STR:0_
'host' ||| _STR:1_
'port' ||| _STR:2_
example# 6112
substitute the value under the _STR:0_ key of options dictionary for value under the _STR:1_ key of wsgi_opts dictionary .
2
'socket' ||| _STR:0_
'bindAddress' ||| _STR:1_
example# 6113
if values under the _STR:0_ , _STR:1_ and _STR:2_ keys of the options dictionary are false ,
3
'socket' ||| _STR:0_
'host' ||| _STR:1_
'port' ||| _STR:2_
example# 6114
set value under the _STR:0_ key of wsgi_opts to None .
1
'bindAddress' ||| _STR:0_
example# 6115
if not ,
0
example# 6116
call the fastcgi_help function with an argument string _STR:0_ , return it .
1
"Invalid combination of host, port, socket." ||| _STR:0_
example# 6117
if value under the _STR:0_ of options dictionary is None ,
1
'daemonize' ||| _STR:0_
example# 6118
if the value under the _STR:0_ key of the wsgi_opts dictionary is not None , set daemonize to boolean True , if not , set it to boolean False .
1
'bindAddress' ||| _STR:0_
example# 6119
if not ,
0
example# 6120
convert the value under the _STR:0_ key of options dictionary to lowercase , if it equals to string _STR:1_ , _STR:2_ or _STR:3_ ,
4
'daemonize' ||| _STR:0_
'yes' ||| _STR:2_
'true' ||| _STR:1_
't' ||| _STR:3_
example# 6121
daemonize is boolean True .
0
example# 6122
convert the value under the _STR:0_ key of options dictionary to lowercase , if it equals to string _STR:1_ , _STR:2_ or _STR:3_ ,
4
'false' ||| _STR:1_
'daemonize' ||| _STR:0_
'f' ||| _STR:3_
'no' ||| _STR:2_
example# 6123
daemonize is boolean False .
0
example# 6124
if not ,
0
example# 6125
call the fastcgi_help function with an argument string _STR:0_ , return it .
1
"ERROR: Invalid option for daemonize parameter." ||| _STR:0_
example# 6126
daemon_kwargs is an empty dictionary .
0
example# 6127
if value under the _STR:0_ key of options dictionary is true ,
1
'outlog' ||| _STR:0_
example# 6128
substitute the value under the _STR:0_ key of options dictionary for value under the _STR:1_ key of daemon_kwargs dictionary .
2
'outlog' ||| _STR:0_
'out_log' ||| _STR:1_
example# 6129
if value under the _STR:0_ key of options dictionary is true ,
1
'errlog' ||| _STR:0_
example# 6130
substitute the value under the _STR:0_ key of options dictionary for value under the _STR:1_ key of daemon_kwargs dictionary .
2
'errlog' ||| _STR:0_
'err_log' ||| _STR:1_
example# 6131
if value under the _STR:0_ key of options dictionary is true ,
1
'umask' ||| _STR:0_
example# 6133
if daemonize is true ,
0
example# 6134
from django.utils.daemonize [ django . utils . daemonize ] import become_daemon into default name space .
0
example# 6136
if value under the _STR:0_ of options dictionary exists ,
1
'pidfile' ||| _STR:0_
example# 6137
open the file whose name is stored in the value under the _STR:0_ key of options dictionary and mode _STR:1_ , with the file descriptor as fp ,
2
'pidfile' ||| _STR:0_
'w' ||| _STR:1_
example# 6138
call the method fp.write [ fp . write ] with an argument string _STR:0_ % d ' replaced by os.getpid [ os . getpid ] function return value .
1
'%d\n", with ' ||| _STR:0_
example# 6140
if __name__ equals a string _STR:0_ .
1
'__main__' ||| _STR:0_
example# 6141
call the function runfastcgi with an argument all the elements , except the first from the sys.argv [ sys . argv ] list .
0
example# 6142
from django.dispatch [ django . dispatch ] import Signal into default name space .
0
example# 6143
request_started is a instance of a Signal class .
0
example# 6144
request_finished is a instance of a Signal class .
0
example# 6145
got_request_exception is a instance of a Signal class , created with an argument providing_args as the list containing string _STR:0_ .
1
'request' ||| _STR:0_
example# 6146
from __future__ import unicode_literals into default name space .
0
example# 6147
import module base64 .
1
646 ||| _STR:0_
example# 6148
import module json .
0
example# 6149
import module time .
0
example# 6150
import module zlib .
0
example# 6151
from django.conf [ django . conf ] import settings into default name space .
0
example# 6152
from django.utils [ django . utils ] import baseconv into default name space .
0
example# 6153
from django.utils.crypto [ django . utils . crypto ] import constant_time_compare and salted_hmac into default name space .
0
example# 6154
from django.utils.encoding [ django . utils . encoding ] import force_bytes , force_str and force_text into default name space .
0
example# 6155
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 6156
derive the class BadSignature from the Exception base class .
0
example# 6157
do nothing .
0
example# 6158
derive the class SignatureExpired from the BadSignature base class .
0
example# 6159
do nothing .
0
example# 6160
define the function b64_encode with an argument s .
1
646 ||| _STR:0_
example# 6161
call the method base64.urlsafe_b64encode [ base64 . urlsafe_b64encode ] with an argument s , on the result call the strip function with _STR:0_ as the argument , return the result .
2
'=' ||| _STR:0_
646 ||| _STR:1_
example# 6162
define the function b64_decode with an argument s .
1
646 ||| _STR:0_
example# 6164
call the method base64.urlsafe_b64decode [ base64 . urlsafe_b64decode ] with sum of s and pad as argument .
1
646 ||| _STR:0_
example# 6165
define the function b64_hmac with arguments salt , value and key .
1
646 ||| _STR:0_
example# 6167
define the function get_cookie_signer with an argument salt set to string _STR:0_ .
1
'django.core.signing.get_cookie_signer' ||| _STR:0_
example# 6168
call the import_string function with an argument settings.SIGNING_BACKEND [ settings . SIGNING_BACKEND ] , substitute the result for Signer .
0
example# 6169
call the force_bytes function with an argument settings.SECRET_KEY [ settings . SECRET_KEY ] , substitute the result for key .
0
example# 6171
derive the class JSONSerializer from the object base class .
0
example# 6172
define the method dumps with arguments self and obj .
0
example# 6174
define the method loads with arguments self and data .
0
example# 6175
call the data.decode [ data . decode ] method with a string _STR:0_ as an argument , use the result as an argument for the call to the json.load [ json . load ] function , return the result .
2
'latin-1' ||| _STR:0_
-1- ||| _STR:1_
example# 6177
call the serializer function , call the dumps method on the result with an argument obj , substitute result for data .
0
example# 6178
is_compressed is boolean False .
0
example# 6179
if compress is true ,
0
example# 6180
call the function zlib.compress [ zlib . compress ] with an argument data , substitute the result for compressed .
0
example# 6182
substitute compressed for data .
0
example# 6183
is_compressed is boolean True .
0
example# 6184
call the b64_encode function with an argument data , substitute the result for base64d .
1
646 ||| _STR:0_
example# 6185
if is_compressed is true ,
0
example# 6186
prefix the base64d with a _STR:0_ character .
2
'.' ||| _STR:0_
646 ||| _STR:1_
example# 6187
instantiate the TimestampSigner object with arguments key and salt set to salt , call its method sign with an argument base64 , return it .
1
646 ||| _STR:0_
example# 6189
instantiate TimestampSigner object with arguments key and salt set to salt , call its method unsign with arguments : s and max_age set to max_age , use it as an argument for the force_bytes function , substitute the result for base64d .
1
646 ||| _STR:0_
example# 6190
decompress is boolean False .
0
example# 6191
if first element of base64d equals to a _STR:0_ character ,
2
'.' ||| _STR:0_
646 ||| _STR:1_
example# 6192
substitute first element of base64d for base64d .
1
646 ||| _STR:0_
example# 6193
decompress is boolean True .
0
example# 6194
call the method b64_decode with an argument base64 , substitute the result for data .
1
646 ||| _STR:0_
example# 6195
if decompress is true ,
0
example# 6196
call the function zlib.decompress [ zlib . decompress ] with an argument data , substitute the result for data .
0
example# 6197
call the serializer function , call the loads method on the return value with an argument data , return the result .
0
example# 6198
derive the class Signer from the object base class .
0
example# 6200
call the function force_str with an argument sep , substitute the result for self.sep [ self . sep ] .
0
example# 6201
if key exists , substitute it for self.key [ self . key ] , if not substitute settings.SECRET_KEY [ settings . SECRET_KEY ] for key .
0
example# 6202
call the force_str function with an argument : salt , if it exists , if not with a string _STR:0_ , with ' % s ' replaced by , self.__class__.__module__ [ self . __class__ . __module__ ] and self.__class__.__name__ [ self . __class__ . __name__ ] , respectively , substitute the result for self.salt [ self . salt ] .
1
'%s.%s' ||| _STR:0_
example# 6203
define the method signature with arguments self and value .
0
example# 6205
call the function force_str with an argument signature , return the result .
0
example# 6206
define the method sign with arguments self and value .
0
example# 6207
call the function force_str with an argument value , substitute the result for value .
0
example# 6208
convert value , self.sep [ self . sep ] and return value of a method self.signature [ self . signature ] called with an argument value , concatenate them together , return the result .
0
example# 6209
define the method unsign with arguments self and signed_value .
0
example# 6210
call the function signed_value with an argument value , substitute the result for signed_value .
0
example# 6211
if self.sep [ self . sep ] is not contained in signed_value ,
0
example# 6212
raise an BadSignature exception with an argument string _STR:0_ , where ' % s ' is replaced by self.sep [ self . sep ] .
1
'No "%s" found in value' ||| _STR:0_
example# 6215
call the force_text function with an argument value , return the result .
0
example# 6216
raise an BadSignature exception with an argument string _STR:0_ , where ' % s ' is replaced by sig .
1
'Signature "%s" does not match' ||| _STR:0_
example# 6217
derive the class TimestampSigner from the Signer base class .
0
example# 6218
define the method timestamp with an argument self .
0
example# 6219
call the method baseconv.base62.encode [ baseconv . base62 . encode ] with result of the time.time [ time . time ] function converted to an integer , as an argument , return the result .
1
626 ||| _STR:0_
example# 6220
define the method sign with arguments self and value .
0
example# 6221
call the force_str function with an argument value , substitute the result for value .
0
example# 6222
convert value , self.sep [ self . sep ] and return value of the function timestamp , concatenate them , substitute the result for value .
0
example# 6223
call the sign method from the base class of the TimestampSigner class with an argument value , return the result
0
example# 6224
define the method unsign with arguments self , value and max_age set to None .
0
example# 6225
call the unsign method from the base class of the TimestampSigner class with an argument value , substitute the result for result .
0
example# 6227
call the baseconv.base62.decode [ baseconv . base62 . decode ] method with an argument timestamp , substitute the result for timestamp .
1
626 ||| _STR:0_
example# 6228
if max_age is not None ,
0
example# 6229
subtract timestamp from the return value of the function time.time [ time . time ] , substitute the result for age .
0
example# 6230
if age is greater than max_age ,
0
example# 6231
raise an SignatureExpired exception with an argument string _STR:0_ , where ' % s ' is replaced by age and max_age , respectively .
1
'Signature age %s > %s seconds' ||| _STR:0_
example# 6232
return value .
0
example# 6233
from __future__ import unicode_literals into default name space .
0
example# 6234
import module functools .
0
example# 6235
from importlib import import_module into default name space .
0
example# 6236
import module re .
0
example# 6237
from threading import local into default name space .
0
example# 6238
import module warnings .
0
example# 6240
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured and ViewDoesNotExist into default name space .
0
example# 6241
from django.utils.datastructures [ django . utils . datastructures ] import MultiValueDict into default name space .
0
example# 6242
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango20Warning into default name space .
1
202 ||| _STR:0_
example# 6243
from django.utils.encoding [ django . utils . encoding ] import force_str , force_text and iri_to_uri into default name space .
0
example# 6244
from django.utils.functional [ django . utils . functional ] import lazy into default name space .
0
example# 6245
from django.utils.http [ django . utils . http ] import urlquote into default name space .
0
example# 6246
from django.utils.module_loading [ django . utils . module_loading ] import module_has_submodule into default name space .
0
example# 6247
from django.utils.regex_helper [ django . utils . regex_helper ] import normalize into default name space .
0
example# 6248
from django.utils [ django . utils ] import six and lru_cache into default name space .
0
example# 6249
from django.utils.translation [ django . utils . translation ] import get_language into default name space .
0
example# 6250
call the function local , substitute the result for _prefixes .
0
example# 6251
call the function local , substitute the result _urlconf .
0
example# 6252
derive the class ResolverMatch with object as base class .
0
example# 6254
substitute func for self.func [ self . func ] .
0
example# 6255
substitute args for self.args [ self . args ] .
0
example# 6256
substitute kwargs for self.kwargs [ self . kwargs ] .
0
example# 6257
substitute url_name for self.url_name [ self . url_name ] .
0
example# 6258
substitute app_name for self.app_name [ self . app_name ] .
0
example# 6259
if namespaces is true ,
0
example# 6260
append x to self.namespaces [ self . namespaces ] list for every x in namespaces , only if x is true .
0
example# 6261
if not ,
0
example# 6262
self.namespaces [ self . namespaces ] is an empty list .
0
example# 6263
join self.namespaces [ self . namespaces ] into a string separated with character _STR:0_ , substitute it for self.namespace [ self . namespace ] .
1
':' ||| _STR:0_
example# 6264
if func doesnt have a attribute _STR:0_ ,
1
'__name__' ||| _STR:0_
example# 6265
join func.__class__.__module__ [ func . __class__ . __module__ ] and func.__class__.__name__ [ func . __class__ . __name__ ] into a string , separated by character _STR:0_ , substitute it for self._func_path [ self . _func_path ] .
1
'.' ||| _STR:0_
example# 6266
if not ,
0
example# 6267
join func.__module__ [ func . __module__ ] and func.__name__ [ func . __name__ ] into a string , separated by character _STR:0_ , substitute it for self._func_path [ self . _func_path ] .
1
'.' ||| _STR:0_
example# 6268
if url_name exists substitute it for view_path , if not substitute .self._func_path for view_path .
0
example# 6269
append list containing view_path to self.namespaces [ self . namespaces ] list , join all the elements into a string separated by character _STR:0_ , substitute it for self.view_name [ self . view_name ] .
1
':' ||| _STR:0_
example# 6270
define the method __getitem__ with arguments self and index .
0
example# 6272
define the method __repr__ with an argument self .
0
example# 6273
in the string _STR:0_ , replace all the occurrences of : string ' % s ' with self._func_path [ self . _func_path ] , self.args [ self . args ] , self.kwargs [ self . kwargs ] , self.url_name [ self . url_name ] , self.app_name [ self . app_name ] and self.namespaces [ self . namespaces ] , respectively .
1
"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" ||| _STR:0_
example# 6275
do nothing .
0
example# 6276
derive the class NoReverseMatch with Exception as base class .
0
example# 6277
do nothing .
0
example# 6278
method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None , as a decorator ,
0
example# 6279
define the function get_callable with arguments lookup_view and can_fail set to boolean False .
0
example# 6280
if lookup_view is a callable object ,
0
example# 6281
return lookup_view .
0
example# 6282
call the function get_mod_func with an argument lookup_view , store the result in mod_name and func_name , respectively .
0
example# 6283
if func_name is false ,
0
example# 6284
if can_fail is true ,
0
example# 6285
return lookup_view .
0
example# 6286
if not ,
0
example# 6287
raise an ImportError exception with an argument string _STR:0_ , where ' % s ' is replaced by lookup_view .
1
"Could not import '%s'. The path must be fully qualified." ||| _STR:0_
example# 6288
try ,
0
example# 6289
call the function import_module with an argument mod_name .
0
example# 6290
if ImportError exception is caught .
0
example# 6291
if can_fail is true ,
0
example# 6292
return lookup_view
0
example# 6293
if not ,
0
example# 6294
call the function get_mod_func with an argument mod_name , store the result in parentmod and submod , respectively .
0
example# 6296
raise an ViewDoesNotExist exception with an argument string _STR:0_ , where string ' % s ' is replaced by lookup_view and mod_name , respectively .
1
"Could not import '%s'. Parent module %s does not exist." ||| _STR:0_
example# 6297
if not ,
0
example# 6298
raise an exception .
0
example# 6299
if not ,
0
example# 6300
try ,
0
example# 6301
get func_name attribute from the mod object , substitute it for view_func .
0
example# 6302
if AttributeError exception is caught .
0
example# 6303
if can fail is true ,
0
example# 6304
return lookup_view
0
example# 6305
if not ,
0
example# 6306
raise an ViewDoesNotExist exception with an argument string _STR:0_ , where string ' % s ' is replaced by lookup_view and mod_name , respectively .
1
"Could not import '%s'. View does not exist in module %s." ||| _STR:0_
example# 6307
if not ,
0
example# 6308
if view_function is not a callable function ,
0
example# 6309
raise an ViewDoesNotExist exception with an argument string _STR:0_ , where string ' % s ' is replaced by mod_name and func_name , respectively .
1
"Could not import '%s.%s'. View is not callable." ||| _STR:0_
example# 6310
return view_func .
0
example# 6311
method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None , as a decorator ,
0
example# 6312
define the function get_resolver with an argument urlconf .
0
example# 6313
if urlconf is None ,
0
example# 6314
from django.conf [ django . conf ] import settings into default name space .
0
example# 6315
substitute settings.ROOT_URLCONF [ settings . ROOT_URLCONF ] for urlconf .
0
example# 6316
return an instance of a class RegexURLResolver created with arguments : raw string _STR:0_ and urlconf .
1
'^/' ||| _STR:0_
example# 6317
method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None , as a decorator ,
0
example# 6318
define the function get_ns_resolver with arguments ns_pattern and resolver .
0
example# 6320
return an instance of a class RegexURLResolver created with arguments : raw string _STR:0_ and a list containing an element ns_resolver .
1
'^/' ||| _STR:0_
example# 6321
define the function get_mod_func with an argument callback .
0
example# 6322
try ,
0
example# 6323
call the method callback.rindex [ callback . rindex ] with an argument character _STR:0_ , substitute the result for dot .
1
'.' ||| _STR:0_
example# 6324
if ValueError exception is caught ,
0
example# 6325
return callback and a empty string .
0
example# 6326
return callback split into two lists at the dot index , without the element at the dot index .
0
example# 6327
derive the class LocaleRegexProvider with object as base class .
0
example# 6328
define the method __init__ with arguments self and regex .
0
example# 6329
substitute regex for self._regex [ self . _regex ] .
0
example# 6330
self._regex_dict [ self . _regex_dict ] is an empty dictionary .
0
example# 6331
property decorator ,
0
example# 6332
define the method regex with an argument self .
0
example# 6333
call the function get_language , substitute the result for language_code .
0
example# 6334
if language_code is not contained in self._regex_dict [ self . _regex_dict ] ,
0
example# 6335
if self.regex [ self . regex ] is not an instance of six.string_types [ six . string_types ] ,
0
example# 6336
substitute self._regex [ self . _regex ] for regex .
0
example# 6337
if not ,
0
example# 6338
call the function force_text with arguments self and _regex , substitute the result for regex .
0
example# 6339
try ,
0
example# 6340
call the function re.compile [ re . compile ] with arguments regex and re.UNICODE [ re . UNICODE ] , substitute the result for compiled_regex .
0
example# 6341
if re.error [ re . error ] , renamed to e , is caught ,
0
example# 6342
raise an ImproperlyConfigured exception with argument string _STR:0_ , where ' % s ' is replace by regex and return value of the function six.text_type [ six . text_type ] with an argument e .
1
'"%s" is not a valid regular expression: %s' ||| _STR:0_
example# 6343
substitute the compiled_regex for value under the language_code key of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6344
return the value under the language_code key of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6345
derive the class RegexURLPattern with LocaleRegexProvider as base class .
0
example# 6347
call the method LocaleRegexProvider.__init__ [ LocaleRegexProvider . __init__ ] with arguments self and regex .
0
example# 6348
if callback is an callable object ,
0
example# 6349
substitute callback for self._callback [ self . _callback ] .
0
example# 6350
if not ,
0
example# 6351
self._callback [ self . _callback ] is None .
0
example# 6352
substitute callback for self._callback_str [ self . _callback_str ] .
0
example# 6353
if default_args exists substitute it for self.default_args [ self . default_args ] , if not , self.default_args [ self . default_args ] is an empty dictionary .
0
example# 6354
substitute name for self.name [ self . name ] .
0
example# 6355
define the method __repr__ with an argument self .
0
example# 6356
substitute ' % s ' in string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] , self.name [ self . name ] and self.regex.pattern [ self . regex . pattern ] , respectively , use it as an argument for the call to the force_str function , return the result .
1
'<%s %s %s>' ||| _STR:0_
example# 6357
define the method add_prefix with arguments self and prefix .
0
example# 6358
if prefix is false , and self doesnt have _STR:0_ attribute ,
1
'_callback_str' ||| _STR:0_
example# 6359
return nothing .
0
example# 6360
joint prefix , character _STR:0_ and self._callback_str [ self . _callback_str ] together , substitute the result for self._callback_str [ self . _callback_str ] .
1
'.' ||| _STR:0_
example# 6361
define the method resolve with arguments self and path .
0
example# 6362
call the method self.regex.search [ self . regex . search ] with an argument path , substitute the result for match .
0
example# 6363
if match is true ,
0
example# 6364
call the method match.groupdict [ match . groupdict ] , substitute the result for kwargs .
0
example# 6365
if kwargs is true ,
0
example# 6366
args is an empty tuple .
0
example# 6367
if not ,
0
example# 6368
call the method match.groups [ match . groups ] , substitute the result for args .
0
example# 6369
call the method kwargs.update [ kwargs . update ] with an argument self.default_args [ self . default_args ] .
0
example# 6370
return an instance of a ResolverMatch class , crated with arguments self.callback [ self . callback ] , args , kwargs and self.name [ self . name ] .
0
example# 6371
property decorator ,
0
example# 6372
define the method callback with an argument self .
0
example# 6373
if self._callback [ self . _callback ] is not None ,
0
example# 6374
return self._callback [ self . _callback ] .
0
example# 6375
call the function get_callable with an argument self._callback_str [ self . _callback_str ] , substitute the result for self._callback [ self . _callback ] .
0
example# 6376
return self._callback [ self . _callback ] .
0
example# 6377
derive the class RegexURLResolver with LocaleRegexProvider as base class .
0
example# 6379
call the method LocaleRegexProvider.__init__ [ LocaleRegexProvider . __init__ ] with arguments self and regex .
0
example# 6380
substitute urlconf_name for self.urlconf_name [ self . urlconf_name ] .
0
example# 6381
if urlconf_name is not an instance of six.string_types [ six . string_types ] class ,
0
example# 6382
substitute self.urlconf_name [ self . urlconf_name ] for self.urlconf_module [ self . urlconf_module ] .
0
example# 6383
self.callback [ self . callback ] is None .
0
example# 6384
if default_kwargs exists , substitute it for self.default_kwargs [ self . default_kwargs ] , otherwise self.default_kwargs [ self . default_kwargs ] is an empty dictionary .
0
example# 6385
substitute namespace for self.namespace [ self . namespace ] .
0
example# 6386
substitute app_name for self.app_name [ self . app_name ] .
0
example# 6387
self._reverse_dict [ self . _reverse_dict ] is an empty dictionary .
0
example# 6388
self._namespace_dict [ self . _namespace_dict ] is an empty dictionary .
0
example# 6389
self._app_dict [ self . _app_dict ] is an empty dictionary .
0
example# 6390
self._callback_strs [ self . _callback_strs ] is an empty set .
0
example# 6391
self._populated [ self . _populated ] is boolean False .
0
example# 6392
define the method __repr__ with an argument self .
0
example# 6393
if self.urlconf_name [ self . urlconf_name ] is an instance of a list type and its length is not zero .
0
example# 6394
replace ' % s ' in string _STR:0_ with __class__.__name__ [ __class__ . __name__ ] field of first element of self.urlconf_name [ self . urlconf_name ] , substitute it for urlconf_repr .
1
'<%s list>' ||| _STR:0_
example# 6395
if not ,
0
example# 6396
create a printable representation of self.urlconf_name [ self . urlconf_name ] object , substitute it for urlconf_repr .
0
example# 6397
replace all ' % s ' in string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] , urlconf_repr , self.app_name [ self . app_name ] , self.namespace [ self . namespace ] and self.regex.pattern [ self . regex . pattern ] , respectively . return it .
1
'<%s %s (%s:%s) %s>' ||| _STR:0_
example# 6398
define the method _populate with an argument self .
0
example# 6399
lookups is an instance of the MultiValueDict class .
0
example# 6400
namespaces is an empty dictionary .
0
example# 6401
apps is an empty dictionary .
0
example# 6402
call the function get_language , substitute the result for language_code .
0
example# 6403
for every pattern in reversed list self.url_patterns [ self . url_patterns ] ,
0
example# 6404
if pattern has an attribute _STR:0_ ,
1
'_callback_str' ||| _STR:0_
example# 6405
call the method self._callback_strs.add [ self . _callback_strs . add ] with an argument pattern._callback_str [ pattern . _callback_str ] .
0
example# 6406
otherwise , if pattern has an _STR:0_ attribute .
1
'_callback' ||| _STR:0_
example# 6407
substitute pattern._callback [ pattern . _callback ] for callback .
0
example# 6408
if callback is an instance of functools.partial [ functools . partial ] object ,
0
example# 6409
substitute callback.func [ callback . func ] for callback .
0
example# 6410
if callback doesnt have _STR:0_ attribute ,
1
'__name__' ||| _STR:0_
example# 6411
join callback.__module__ [ callback . __module__ ] , character _STR:0_ and callback.__class__.__name__ [ callback . __class__ . __name__ ] together , substitute the result for lookup_str .
1
"." ||| _STR:0_
example# 6412
if not ,
0
example# 6413
join together callback.__module__ [ callback . __module__ ] , character _STR:0_ and callback.__name__ [ callback . __name__ ] , substitute the result for lookup_str .
1
"." ||| _STR:0_
example# 6414
call the method self._callback_strs.add [ self . _callback_strs . add ] with an argument lookup_str .
0
example# 6415
substitute pattern.regex.pattern [ pattern . regex . pattern ] for p_pattern .
0
example# 6416
if p_pattern starts with a string _STR:0_ ,
1
'^' ||| _STR:0_
example# 6417
remove the first element from p_pattern .
0
example# 6418
if pattern is an instance of RegexURLResolver class ,
0
example# 6419
if pattern.namespace [ pattern . namespace ] is true ,
0
example# 6421
if pattern.app_name [ pattern . app_name ] is true ,
0
example# 6423
if not ,
0
example# 6424
substitute pattern.regex.pattern [ pattern . regex . pattern ] for parent_pat .
0
example# 6425
for every name in pattern.reverse_dict [ pattern . reverse_dict ] ,
0
example# 6426
for every matches , pat and defaults in return value of the method pattern.reverse_dict.getlist [ pattern . reverse_dict . getlist ] called with an argument name ,
0
example# 6427
call the method normalize with sum of parent_pat and pat as an argument , substitute the result for new_matches .
0
example# 6429
for every namespace and tuple containing : prefix and sub_pattern , in return value of the method pattern.namespace_dict.items [ pattern . namespace_dict . items ] ,
0
example# 6431
for every app_name and namespace_list in pattern.app_dict.items [ pattern . app_dict . items ] method return value ,
0
example# 6433
call the method self._callback_strs.update [ self . _callback_strs . update ] with an argument pattern._callback_strs [ pattern . _callback_strs ] .
0
example# 6434
if not ,
0
example# 6435
call the function normalize with an argument p_pattern , substitute the result for bits .
0
example# 6437
if pattern.name [ pattern . name ] is not None ,
0
example# 6439
substitute lookups for the value under language_code key of the self._reverse_dict [ self . _reverse_dict ] dictionary .
0
example# 6440
substitute namespaces for the value under language_code key of the self._namespace_dict [ self . _namespace_dict ] dictionary .
0
example# 6441
substitute apps for the value under language_code key of the self._app_dict [ self . _app_dict ] dictionary .
0
example# 6442
self._populated [ self . _populated ] is boolean True .
0
example# 6443
property decorator ,
0
example# 6444
define the method reverse_dict with an argument self .
0
example# 6445
call the function get_language , substitute the result for language_code .
0
example# 6446
if language_code is not contained in self._reverse_dict [ self . _reverse_dict ]
0
example# 6447
call the method self._populate [ self . _populate ] .
0
example# 6448
return the value under the language_code key of the self._reverse_dict [ self . _reverse_dict ] dictionary .
0
example# 6449
property decorator ,
0
example# 6450
define the method namespace_dict with an argument self .
0
example# 6451
call the method get_language , substitute the result for language_code .
0
example# 6452
if language_code is not contained in self._namespace_dict [ self . _namespace_dict ] ,
0
example# 6453
call the method self._populate [ self . _populate ] .
0
example# 6454
return the value under the language_code key of the self._namespace_dict [ self . _namespace_dict ] dictionary .
0
example# 6455
property decorator ,
0
example# 6456
define the method app_dict with an argument self .
0
example# 6457
call the method get_language , substitute the result for language_code .
0
example# 6458
if language_code is not containsed in self._app_dict [ self . _app_dict ]
0
example# 6459
call the method self._populate [ self . _populate ] .
0
example# 6460
return the value under the language_code key of the self._app_dict [ self . _app_dict ] dictionary .
0
example# 6461
define the method resolve with an argument self .
0
example# 6462
call the function force_text with an argument path , substitute the result for path .
0
example# 6463
tried is an empty list .
0
example# 6464
call the function self.regex.search [ self . regex . search ] with an argument path , substitute the result for match .
0
example# 6465
if match is true ,
0
example# 6466
slice the path list from the result of the match.end [ match . end ] method as the start index to the end , substitute it for new_path .
0
example# 6467
for every pattern in self.url_patterns [ self . url_patterns ] ,
0
example# 6468
try ,
0
example# 6469
call the method pattern.resolve [ pattern . resolve ] with an argument new_path , substitute the result for sub_match .
0
example# 6471
call the get method with an argument string _STR:0_ on the first element of the e.args [ e . args ] , substitute the result for sub_tried .
1
'tried' ||| _STR:0_
example# 6472
if sub_tried is not None ,
0
example# 6473
call the method tried.extend [ tried . extend ] with an argument : t added to a list containing element pattern , for every t in sub_tried .
0
example# 6474
if not ,
0
example# 6475
append list containing pattern to tried .
0
example# 6476
if not ,
0
example# 6477
if sub_match is true ,
0
example# 6478
sub_match_dict is a dictionary created from self.default_kwargs [ self . default_kwargs ] dictionary using mapping function match.groupdict [ match . groupdict ] .
0
example# 6479
call the method sub_match_dict.update [ sub_match_dict . update ] with an argument sub_match.kwargs [ sub_match . kwargs ] .
0
example# 6481
append pattern to tried list .
0
example# 6484
property decorator ,
0
example# 6485
define the method urlconf_module with an argument self .
0
example# 6486
try ,
0
example# 6487
return self._urlconf_module [ self . _urlconf_module ] .
0
example# 6488
if AttributeError exception is caught .
0
example# 6489
call the function import_module with argument self.urlconf_name [ self . urlconf_name ] , substitute the result for self._urlconf_module [ self . _urlconf_module ] .
0
example# 6490
return self._urlconf_module [ self . _urlconf_module ] .
0
example# 6491
property decorator ,
0
example# 6492
define the method url_patterns with an argument self .
0
example# 6493
get attribute _STR:0_ form the self.urlconf_module [ self . urlconf_module ] , substitute it for patterns , if the attribute doesnt exist , substitute self.urlconf_module [ self . urlconf_module ] for self.urlconf_module [ self . urlconf_module ] .
1
"urlpatterns" ||| _STR:0_
example# 6494
try ,
0
example# 6495
call the function iter with an argument patterns .
0
example# 6496
if TypeError exception is caught ,
0
example# 6497
msg is a string _STR:0_The included urlconf _STR:1_ does not appear to have any patterns in it .
2
'{name}' ||| _STR:1_
"" ||| _STR:0_
example# 6498
If you see valid patterns in the file then the issue is probably caused by a circular import . '' raise an ImproperlyConfigured exception with an argument : return value of the method msg.format [ msg . format ] , called with an argument name set to self.urlconf_name [ self . urlconf_name ] .
0
example# 6499
return patterns .
0
example# 6500
define the method resolve_error_handler with arguments self and view_type .
0
example# 6501
replace ' % s ' in the string _STR:0_ with view_type , use it as an name of the attribute to get from the self.urlconf_module [ self . urlconf_module ] , substitute it for callback , if the attribute doesnt exists , callback is None .
1
'handler%s' ||| _STR:0_
example# 6502
if not callback ,
0
example# 6503
from django.conf [ django . conf ] import urls into default name space ,
0
example# 6504
replace ' % s ' in the string _STR:0_ with view_type , use it as an name of the attribute to get from the urls , substitute it for callback .
1
'handler%s' ||| _STR:0_
example# 6505
call the function get_callable with an argument callback , return the result and an empty dictionary .
0
example# 6506
define the method reverse with arguments self , lookup_view , unpacked list args and unpacked dictionary kwargs .
0
example# 6508
define the method _reverse_with_prefix with arguments self , lookup_view , _prefix , unpacked list args and unpacked dictionary kwargs .
0
example# 6509
if args and kwargs are both true ,
0
example# 6510
raise an ValueError exception with an argument string _STR:0_ .
1
"Don't mix *args and **kwargs in call to reverse()!" ||| _STR:0_
example# 6511
call the function force_text with an argument v , for every v in args , put the results in a text_args list .
0
example# 6512
text_kwargs is a dictionary created from the result of the function force_text with an argument v , mapped through function k , for every k and v in return value of the kwargs.items [ kwargs . items ] .
0
example# 6513
if self._populated [ self . _populated ] is false ,
0
example# 6514
call the method self._populate [ self . _populate ] ,
0
example# 6515
substitute lookup_view for original_lookup ,
0
example# 6516
try ,
0
example# 6517
if lookup_view is contained in self._callback_strs [ self . _callback_strs ] ,
0
example# 6518
call the function get_callable with arguments lookup_view and boolean True , substitute the result for lookup_view .
0
example# 6519
if ImportError , AttributeError , renamed to e , exceptions are caught ,
0
example# 6520
raise an NoReverseMatch exception with an argument string _STR:0_ , where ' % s ' is replaced with lookup_view and e , respectively .
1
"Error importing '%s': %s." ||| _STR:0_
example# 6521
if not ,
0
example# 6522
if original_lookup and lookup_view are not callable objects ,
0
example# 6524
call the method self.reverse_dict.getlist [ self . reverse_dict . getlist ] with an argument lookup_view , substitute the result for possibilities .
0
example# 6525
call the function urlquote with an argument _prefix , use the result as an argument for the call to the normalize function , substitute the fitst element of the result for prefix_norm and prefix_args , respectively .
0
example# 6526
for every possibility , pattern and defaults in possibilities ,
0
example# 6527
for every result and params in possibility ,
0
example# 6528
if args is true ,
0
example# 6529
if length of args is not equal to the sum of the lengths of params and prefix_args ,
0
example# 6530
skip this loop iteration .
0
example# 6532
if not ,
0
example# 6533
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
0
example# 6534
dictionary keys converted into sets , skip this loop iteration ,
0
example# 6535
matches is boolean True ,
0
example# 6536
for every k and v in return value of the function defaults.items [ defaults . items ] ,
0
example# 6537
if the value of the kwargs dictionary under the key k is not equal to v ,
0
example# 6538
matches is boolean False .
0
example# 6539
break from this loop execution .
0
example# 6540
if matches is false ,
0
example# 6541
skip this loop iteration ,
0
example# 6542
substitute text_kwargs for candidate_subs .
0
example# 6543
replace all the occurrences of the _STR:0_ string for _STR:1_ , append result to the previous result , substitute it for candidate_pat .
2
'%%' ||| _STR:1_
'%' ||| _STR:0_
example# 6545
candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v , mapped with a function k , for every k and v in return value of the method candidate_subs.items [ candidate_subs . items ] .
0
example# 6546
format candidate_pat with candidate_subs , return the result .
0
example# 6547
get the attribute _STR:0_ from the getattr , if it exists substitute it for m , if not , m is None .
1
'__module__' ||| _STR:0_
example# 6548
get the attribute _STR:0_ from the getattr , if it exists substitute it for m , if not , m is None .
1
'__name__' ||| _STR:0_
example# 6549
if m and n are not None ,
0
example# 6550
join m and n into a string , separated by _STR:0_ , substitute the result for lookup_view_s .
1
'.' ||| _STR:0_
example# 6551
if not ,
0
example# 6552
substitute lookup_view for lookup_view_s .
0
example# 6553
append pattern into a list patterns , for every possibility , pattern and defaults in possibilities .
0
example# 6554
raise an NoReverseMatch exception with an argument string _STR:0_ , _STR:1_ , replace ' % s ' with lookup_view_s , args , kwargs , length of patterns , patterns , and respectively .
2
"Reverse for '%s' with arguments '%s' and keyword " ||| _STR:0_
"arguments '%s' not found. %d pattern(s) tried: %s" ||| _STR:1_
example# 6555
derive the class LocaleRegexURLResolver with RegexURLResolver as base class .
0
example# 6557
call the __init__ method of the base class of the class LocaleRegexURLResolver , with arguments : None , urlconf_name , default_kwargs , app_name and namespace .
0
example# 6558
property decorator ,
0
example# 6559
define the method regex with an argument self .
0
example# 6560
call the function get_language , substitute the result for language_code .
0
example# 6561
if language_code is not contained in self._regex_dict [ self . _regex_dict ] ,
0
example# 6563
substitute the regex_compiled for value under the language_code key of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6564
return the value under the language_code of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6565
define the function resolve with arguments path and urlconf set to None .
0
example# 6566
if urlconf is None ,
0
example# 6567
call the function get_urlconf with an argument urlconf .
0
example# 6568
call the function get_resolver with an argument urlconf , on the result call the method resolve with an argument path , return it .
0
example# 6570
if urlconf is None ,
0
example# 6571
call the function get_urlconf with an argument urlconf .
0
example# 6572
call the function get_resolver with an argument urlconf , substitute the result for resolver .
0
example# 6573
if args in None of boolean False , substitute it for an empty list .
0
example# 6574
if args in None of boolean False , substitute it for an empty dictionary .
0
example# 6575
if prefix is None ,
0
example# 6576
call the function get_script_prefix , substitute the result for prefix .
0
example# 6577
if viewname is not an instance of the six.string_types [ six . string_types ] object ,
0
example# 6578
substitute viewname for view .
0
example# 6579
if not ,
0
example# 6580
call the method viewname.split [ viewname . split ] , with an argument _STR:0_ , substitute the result for parts .
1
':' ||| _STR:0_
example# 6581
call the method parts.reverse [ parts . reverse ] .
0
example# 6582
substitute first element of parts for view .
0
example# 6583
substitute parts , without the first element , for path .
0
example# 6584
resolved_path is an empty list .
0
example# 6585
ns_pattern is an empty string .
0
example# 6586
while path is true ,
0
example# 6587
pop the element form the path as substitute the result for ns .
0
example# 6588
try ,
0
example# 6589
get the value under the ns key of the resolver.app_dict [ resolver . app_dict ] dictionary , substitute it for app_list .
0
example# 6590
if current_app and is true and current_app is contained in app_list ,
0
example# 6591
substitute current_app for ns .
0
example# 6592
otherwise if ns is not contained in app_list ,
0
example# 6593
substitute first element of app_list for ns .
0
example# 6594
if KeyError exception is caught ,
0
example# 6595
do nothing .
0
example# 6596
try ,
0
example# 6597
substitute the value under the ns key of the resolver.namespace_dict [ resolver . namespace_dict ] dictionary for extra and resolver , respectively .
0
example# 6598
call the method resolved_path.append [ resolved_path . append ] with an argument ns .
0
example# 6599
add ns_pattern and extra , substitute the result for ns_pattern .
0
example# 6600
if KeyError , renamed to key , exception is caught ,
0
example# 6601
if resolved_path is true ,
0
example# 6602
raise an NoReverseMatch exception with an argument string _STR:0_ , respectively replace ' % s ' with key and elements of the resolved_path joined into a string , separated by _STR:1_ .
2
"%s is not a registered namespace inside '%s'" ||| _STR:0_
':' ||| _STR:1_
example# 6603
if not ,
0
example# 6604
raise an NoReverseMatch exception with an argument string _STR:0_ , with ' % s ' replaced with key .
1
"%s is not a registered namespace" ||| _STR:0_
example# 6605
if ns_pattern is true ,
0
example# 6606
call the function get_ns_resolver with arguments ns_pattern and resolver , substitute the result for resolver .
0
example# 6608
call the function lazy with arguments reverse and str , substitute the results for reverse_lazy .
0
example# 6609
define the function clear_url_caches .
0
example# 6610
call the function get_callable.cache_clear [ get_callable . cache_clear ] .
0
example# 6611
call the function get_resolver.cache_clear [ get_resolver . cache_clear ] .
0
example# 6612
call the function get_ns_resolver.cache_clear [ get_ns_resolver . cache_clear ] .
0
example# 6613
define the function set_script_prefix with an argument prefix .
0
example# 6614
if prefix doesnt end with character _STR:0_ ,
1
'/' ||| _STR:0_
example# 6615
append _STR:0_ to prefix .
1
'/' ||| _STR:0_
example# 6616
substitute prefix for _prefixes.values [ _prefixes . values ] .
0
example# 6617
define the function get_script_prefix .
0
example# 6618
get _STR:0_ attribute of the _prefixes , if it exists , return it , otherwise return _STR:1_ .
2
'value' ||| _STR:0_
'/' ||| _STR:1_
example# 6619
define the function clear_script_prefix .
0
example# 6620
try ,
0
example# 6621
delete _prefixes.values [ _prefixes . values ] .
0
example# 6622
if AttributeError exception is caught ,
0
example# 6623
do nothing .
0
example# 6624
define the function set_urlconf with an argument urlconf_name .
0
example# 6625
if urlconf_name is true ,
0
example# 6626
substitute urlconf_name for _urlconfs.value [ _urlconfs . value ] .
0
example# 6627
if not ,
0
example# 6628
if _urlconfs has an attribute _STR:0_ ,
1
'value' ||| _STR:0_
example# 6629
delete _urlconfs.value [ _urlconfs . value ] .
0
example# 6630
define the function get_urlconf with an argument default set to None .
0
example# 6631
get the _STR:0_ attribute of the _urlconfs , if it exists return it , otherwise return defaults .
1
'value' ||| _STR:0_
example# 6632
define the function is_valid_path with arguments path and urlconf set to None .
0
example# 6633
try ,
0
example# 6634
call the function resolve with arguments path and urlconf .
0
example# 6635
return boolean True .
0
example# 6637
return boolean False .
0
example# 6638
from __future__ import unicode_literals into default name space .
0
example# 6639
import module re .
0
example# 6640
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 6641
from django.utils.deconstruct [ django . utils . deconstruct ] import deconstructible into default name space .
0
example# 6642
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ and ungettext_lazy into default name space .
0
example# 6643
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 6645
from django.utils [ django . utils ] import six into default name space .
0
example# 6646
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urlsplit and urlunsplit into default name space .
0
example# 6648
decorator deconstructible ,
0
example# 6649
derive the class RegexValidator form the object base class .
0
example# 6650
regex is an empty string .
0
example# 6651
call a function _ with a string _STR:0_ as an argument , substitute the result for message .
1
'Enter a valid value.' ||| _STR:0_
example# 6652
code is a string _STR:0_
1
'invalid' ||| _STR:0_
example# 6653
inverse_match is boolean False .
0
example# 6654
flags is a integer 0 .
1
0.0 ||| _STR:0_
example# 6656
if regex is not None ,
0
example# 6657
substitute regex for self.regex [ self . regex ] .
0
example# 6658
if message is not None ,
0
example# 6659
substitute message for self.message [ self . message ] .
0
example# 6660
if code is not None ,
0
example# 6661
substitute code for self.code [ self . code ] .
0
example# 6662
if inverse_match is not None ,
0
example# 6663
substitute inverse_match for self.inverse_match [ self . inverse_match ] .
0
example# 6664
if flags is not None ,
0
example# 6665
substitute flags for self.flags [ self . flags ] .
0
example# 6666
if self.flags [ self . flags ] is true and self.regex [ self . regex ] is not an instance of a six.string_types [ six . string_types ] type ,
0
example# 6667
raise an TypeError exception with an argument string _STR:0_ .
1
"If the flags are set, regex must be a regular expression string." ||| _STR:0_
example# 6668
if self.regex [ self . regex ] is not an instance of a six.string_types [ six . string_types ] type ,
0
example# 6669
call the re.compile [ re . compile ] function with self.regex [ self . regex ] and self.flags [ self . flags ] as arguments , substitute the result for self.regex [ self . regex ] .
0
example# 6670
define the method __call__ with arguments self and value .
0
example# 6671
if self.inverse_match [ self . inverse_match ] equals to return value of the self.regex.search [ self . regex . search ] method converted to boolean , called with argument force_text ( value ) ,
0
example# 6672
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6673
define the method __eq__ with arguments self and other .
0
example# 6674
evaluate the logical expression , if other is an instance of RegexValidator and self.regex.pattern [ self . regex . pattern ] equals to other.regex.pattern [ other . regex . pattern ] , and self.regex.flags [ self . regex . flags ] equals to other.regex.flags [ other . regex . flags ] and self.message [ self . message ] equals to other.message [ other . message ] and self.code [ self . code ] equals to other.code [ other . code ] , and self.inverse_match [ self . inverse_match ] equals to other.inverse_match [ other . inverse_match ] , return the result .
0
example# 6675
define the method __ne__ with arguments self and other .
0
example# 6676
if self equals to other return boolean False , otherwise return boolean True .
0
example# 6677
decorator deconstructible ,
0
example# 6678
derive the class URLValidator form the RegexValidator base class .
0
example# 6680
call a function _ with a string _STR:0_ as an argument , substitute the result for message .
1
'Enter a valid value.' ||| _STR:0_
example# 6683
call the __init__ method of the base class of the class URLValidator , with unpacked dictionary kwargs as argument .
0
example# 6684
if schemes is not None ,
0
example# 6685
substitute schemes for self.schemes [ self . schemes ] .
0
example# 6686
define the method __call__ with arguments self and value .
0
example# 6687
call the function force_text with an argument value , substitute the result for value .
0
example# 6688
call the value.split [ value . split ] method with _STR:0_ as argument , convert first element of the result to lower case , substitute the result for scheme .
1
'://' ||| _STR:0_
example# 6689
if scheme is not contained in self.schemes [ self . schemes ] ,
0
example# 6690
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6691
try ,
0
example# 6692
call the __call__ method from the base class of the class URLValidator , with an argument value .
0
example# 6693
if ValidationError , renamed to e , is caught ,
0
example# 6694
if value is true ,
0
example# 6695
call the function urlsplit with an argument value , assign the result to scheme , netloc , path , query and fragment , respectively .
0
example# 6696
try ,
0
example# 6697
call the method netloc.encode [ netloc . encode ] with an argument string _STR:0_ , on the return value call the decode method with string _STR:1_ as argument , substitute the result for netloc .
2
'idna' ||| _STR:0_
'ascii' ||| _STR:1_
example# 6698
if UnicodeError exception is caught ,
0
example# 6699
raise an exception e .
0
example# 6701
call the __call__ method from the base class of the URLValidator class , with an argument url .
0
example# 6702
if not ,
0
example# 6703
raise an exception .
0
example# 6704
if not ,
0
example# 6705
substitute value for url .
0
example# 6706
define the function validate_integer with an argument value .
0
example# 6707
try ,
0
example# 6708
convert value into an integer .
0
example# 6709
if ValueError or TypeError exceptions are caught ,
0
example# 6711
decorator deconstructible ,
0
example# 6712
derive the class EmailValidator form the object base class .
0
example# 6713
call a function _ with a string _STR:0_ as an argument , substitute the result for message .
1
'Enter a valid value.' ||| _STR:0_
example# 6714
code is a string _STR:0_ .
1
'invalid' ||| _STR:0_
example# 6718
domain_whitelist is a list containing string _STR:0_ .
1
'localhost' ||| _STR:0_
example# 6720
if message is not None
0
example# 6721
substitute message for self.message [ self . message ] .
0
example# 6722
if code is not None
0
example# 6723
substitute code for self.code [ self . code ] .
0
example# 6724
if whitelist is not None
0
example# 6725
substitute whitelist for self.domain_whitelist [ self . domain_whitelist ] .
0
example# 6726
define the method __call__ with arguments self and value .
0
example# 6727
call the function force_text with an argument value , substitute the result for value .
0
example# 6728
if value is false or character _STR:0_ is not contained in value ,
1
'@' ||| _STR:0_
example# 6729
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6731
call the self.user_regex.match [ self . user_regex . match ] method with an argument user_part , if it evaluates to false ,
0
example# 6732
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6733
if domain_part is not contained in self.domain_whitelist [ self . domain_whitelist ] and method self.validate_domain_part [ self . validate_domain_part ] with an argument domain_part evaluates to false ,
0
example# 6734
try ,
0
example# 6735
call the method domain_part.encode [ domain_part . encode ] with an argument string _STR:0_ , on the return value call the decode method with string _STR:1_ as argument , substitute the result for domain_part .
2
'idna' ||| _STR:0_
'ascii' ||| _STR:1_
example# 6736
if method self.validate_domain_part [ self . validate_domain_part ] with an argument domain_part evaluates to true ,
0
example# 6737
return nothing .
0
example# 6738
if UnicodeError exception is caught ,
0
example# 6739
do nothing .
0
example# 6740
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6741
define the method validate_domain_part with arguments self and domain_part .
0
example# 6742
call the self.domain_regex.match [ self . domain_regex . match ] method with an argument domain_part , if it evaluates to true ,
0
example# 6743
return boolean True .
0
example# 6744
evaluate method self.literal_regex.match [ self . literal_regex . match ] with an argument domain_part , substitute the result for literal_match .
0
example# 6745
if literal_match is true ,
0
example# 6747
try ,
0
example# 6748
call the function validate_ipv46_address with an argument ip_address .
1
464 ||| _STR:0_
example# 6749
return boolean True .
0
example# 6750
if ValidationError exception is caught ,
0
example# 6751
do nothing .
0
example# 6752
return boolean False .
0
example# 6753
define the method __eq__ with arguments self and other .
0
example# 6754
if other is instance of EmailValidator and , self.domain_whitelist [ self . domain_whitelist ] equals to other.domain_whitelist [ other . domain_whitelist ] , and self.message [ self . message ] equals to other.message [ other . message ] , and self.code [ self . code ] equals to other.code [ other . code ] , return boolean True , otherwise return boolean False .
0
example# 6755
validate_email is an instance of EmailValidator class .
0
example# 6763
define the function validate_ipv46_address with an argument value .
1
464 ||| _STR:0_
example# 6764
try ,
0
example# 6766
if ValidationError exception is caught ,
0
example# 6767
try ,
0
example# 6769
if ValidationError exception is caught ,
0
example# 6772
define the function ip_address_validators with arguments protocol and unpack_ipv4 .
1
4.4 ||| _STR:0_
example# 6775
try ,
0
example# 6776
convert protocol to lowercase , use it as a key to get a value from the ip_address_validator_map dictionary , return it .
0
example# 6777
if KeyError exception is caught ,
0
example# 6778
raise a ValueError exception with an argument _STR:0_ , replace ' % s ' with protocol , and ip_address_validator_map converted to a list , respectively .
1
"The protocol '%s' is unknown. Supported: %s" ||| _STR:0_
example# 6779
call the re.compile [ re . compile ] function with an argument raw string _STR:0_ , substitute the result for comma_separated_int_list_re .
1
'^[\d,]+$' ||| _STR:0_
example# 6781
decorator deconstructible ,
0
example# 6782
derive the class BaseValidator form the object base class .
0
example# 6783
compare is a lambda function with arguments self , a and b , return value is boolean True if a is not b , otherwise it is False .
0
example# 6784
clean is a lambda function with arguments self and x , return value is x .
0
example# 6785
call the function _ with the argument string _STR:0_ , substitute the result for message .
1
'Ensure this value is %(limit_value)s (it is %(show_value)s).' ||| _STR:0_
example# 6786
code is a string _STR:0_
1
'limit_value' ||| _STR:0_
example# 6787
define the method __init__ with self and limit_value as arguments .
0
example# 6788
substitute the limit_value for self.limit_value [ self . limit_value ] .
0
example# 6789
define the method __call__ with arguments self and value .
0
example# 6790
call the method self.clean [ self . clean ] with value as argument , substitute the result for cleaned .
0
example# 6792
call the self.compare [ self . compare ] method with arguments cleaned and self.limit_value [ self . limit_value ] , if it evaluates to true ,
0
example# 6793
raise a ValidationError exception with arguments self.message [ self . message ] , code set to self.code [ self . code ] and params set to params .
0
example# 6794
define the method __eq__ with arguments self and other .
0
example# 6795
if other is an instance of self.__class__ [ self . __class__ ] and , self.limit_value [ self . limit_value ] equals to other.limit_value [ other . limit_value ] , and self.message [ self . message ] equals to other.message [ other . message ] , and self.code [ self . code ] equals to other.code [ other . code ] , return boolean True , otherwise return boolean False .
0
example# 6796
decorator deconstructible ,
0
example# 6797
derive the class MaxValueValidator form the BaseValidator base class .
0
example# 6798
compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
0
example# 6799
call the function _ with an argument string _STR:0_ , substitute the result for message .
1
'Ensure this value is less than or equal to %(limit_value)s.' ||| _STR:0_
example# 6800
code is a string _STR:0_
1
'max_value' ||| _STR:0_
example# 6801
decorator deconstructible ,
0
example# 6802
derive the class MinValueValidator form the BaseValidator base class .
0
example# 6803
compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
0
example# 6804
call the function _ with an argument string _STR:0_ , substitute the result for message .
1
'Ensure this value is greater than or equal to %(limit_value)s.' ||| _STR:0_
example# 6805
code is a string _STR:0_
1
'min_value' ||| _STR:0_
example# 6806
decorator deconstructible ,
0
example# 6807
derive the class MinLengthValidator form the BaseValidator base class .
0
example# 6808
compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
0
example# 6809
clean is a lambda function with self and x as arguments , return value is length of x .
0
example# 6811
code is a string _STR:0_
1
'min_length' ||| _STR:0_
example# 6812
decorator deconstructible ,
0
example# 6813
derive the class MaxLengthValidator form the BaseValidator base class .
0
example# 6814
compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
0
example# 6815
clean is a lambda function with self and x as arguments , return value is length of x .
0
example# 6817
code is a string _STR:0_
1
'max_length' ||| _STR:0_
example# 6818
import module django .
0
example# 6819
from django.core.handlers.wsgi [ django . core . handlers . wsgi ] import WSGIHandler into default name space .
0
example# 6820
define the function get_wsgi_application .
0
example# 6821
call the django.setup [ django . setup ] method .
0
example# 6822
return WSGIHandler object .
0
example# 6823
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 6824
from django.forms.fields [ django . forms . fields ] import everything into default name space .
0
example# 6825
from django.forms.forms [ django . forms . forms ] import everything into default name space .
0
example# 6826
from django.forms.formsets [ django . forms . formsets ] import everything into default name space .
0
example# 6827
from django.forms.models [ django . forms . models ] import everything into default name space .
0
example# 6828
from django.forms.widgets [ django . forms . widgets ] import everything into default name space .
0
example# 6829
from django.forms.extras.widgets [ django . forms . extras . widgets ] import SelectDateWidget into default name space .
0
example# 6830
__all__ is an list containing string _STR:0_ .
1
'SelectDateWidget' ||| _STR:0_
example# 6831
from __future__ import unicode_literals into default name space .
0
example# 6832
import module datetime .
0
example# 6833
import module re .
0
example# 6834
from django.forms.widgets [ django . forms . widgets ] import Widget and Select into default name space .
0
example# 6835
from django.utils [ django . utils ] import datetime_safe into default name space .
0
example# 6836
from django.utils.dates [ django . utils . dates ] import MONTHS into default name space .
0
example# 6837
from django.utils.encoding [ django . utils . encoding ] import force_str into default name space .
0
example# 6838
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 6839
from django.utils.formats [ django . utils . formats ] import get_format into default name space .
0
example# 6840
from django.utils [ django . utils ] import six into default name space .
0
example# 6841
from django.conf [ django . conf ] import settings into default name space .
0
example# 6842
__all__ is an tuple containing string _STR:0_ .
1
'SelectDateWidget' ||| _STR:0_
example# 6844
define the function _parse_date_fmt .
0
example# 6845
call the function get_format with an argument string _STR:0_ , substitute it for fmt .
1
'DATE_FORMAT' ||| _STR:0_
example# 6846
escaped is boolean False .
0
example# 6847
for every char in fmt ,
0
example# 6848
if escaped is true ,
0
example# 6849
escaped is boolean False .
0
example# 6850
otherwise if cahr equals a string '\\ ' ,
0
example# 6851
escaped is boolean True .
0
example# 6852
otherwis if char is contained in string _STR:0_ ,
1
'Yy' ||| _STR:0_
example# 6853
yield string _STR:0_ as an return value of the generator .
1
'year' ||| _STR:0_
example# 6854
otherwise if char is contained in string _STR:0_ ,
1
'bEFMmNn' ||| _STR:0_
example# 6855
yield string _STR:0_ as an return value of the generator .
1
'month' ||| _STR:0_
example# 6856
otherwise if char is contained in string _STR:0_ ,
1
'dj' ||| _STR:0_
example# 6857
yield string _STR:0_ as an return value of the generator .
1
'day' ||| _STR:0_
example# 6858
derive the class SelectDateWidget for the Widget base class .
0
example# 6860
month_field is a string _STR:0_ .
1
'%s_month' ||| _STR:0_
example# 6861
day_field is a string _STR:0_ .
1
'%s_day' ||| _STR:0_
example# 6862
year_field is a string _STR:0_ .
1
'%s_year' ||| _STR:0_
example# 6864
if attrs is not None substitute it for self.attrs [ self . attrs ] , or if not self.attrs [ self . attrs ] is an empty dictionary .
0
example# 6865
if years is true ,
0
example# 6866
substitute years for self.years [ self . years ] .
0
example# 6867
if not ,
0
example# 6868
call the function datetime.date.today [ datetime . date . today ] , substitute the year field of the result for this_year .
0
example# 6869
self.years [ self . years ] is list containing 10 successive integers from this_year .
1
101 ||| _STR:0_
example# 6870
if months is true ,
0
example# 6871
substitute months for self.months [ self . months ] .
0
example# 6872
if not ,
0
example# 6873
substitute MONTHS for self.months [ self . months ] .
0
example# 6874
if empty_label is an instance of list or tuple type ,
0
example# 6875
if length of empty_label is not equal to integer 3 .
1
3.3 ||| _STR:0_
example# 6880
if not ,
0
example# 6881
if empty_label is not None ,
0
example# 6883
substitute self.none_value [ self . none_value ] for self.year_none_value [ self . year_none_value ] .
0
example# 6884
substitute self.none_value [ self . none_value ] for self.month_none_value [ self . month_none_value ] .
0
example# 6885
substitute self.none_value [ self . none_value ] for self.day_none_value [ self . day_none_value ] .
0
example# 6887
try ,
0
example# 6888
substitute value.year [ value . year ] , value.month [ value . month ] and value.day [ value . day ] for year_val , month_val and day_val , respectively .
0
example# 6889
if AttributeError exception is caught ,
0
example# 6890
year_val and month_val and day_val are set to None .
0
example# 6891
if value is an instance of six.string_types [ six . string_types ] ,
0
example# 6892
if settings.USE_L10N [ settings . USE_L10N ] is true ,
1
101 ||| _STR:0_
example# 6893
try ,
0
example# 6894
call the function get_format with an argument string _STR:0_ , substitute the first element of the result for input_format .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 6896
substitute v.year [ v . year ] , v.month [ v . month ] and v.day [ v . day ] for year_val , month_val and day_val , respectively .
0
example# 6897
if ValueError exception is caught ,
0
example# 6898
do nothing .
0
example# 6899
if not ,
0
example# 6900
call the method RE_DATE.match [ RE_DATE . match ] with an argument value , substitute the result for match .
0
example# 6901
if match is true ,
0
example# 6902
for v in return value of the function match.groups [ match . groups ] , convert v into an integer and append i to a list , assign the result for year_val , month_val and day_val , respectively .
0
example# 6903
html is an empty dictionary .
0
example# 6904
for every i in self.years [ self . years ] append tuple containing i and i elements into a list , substitute the resulting string for choices .
0
example# 6906
call the function six.iteritems [ six . iteritems ] with an argument self.months [ self . months ] , convert the result to a list and substitute it for choices .
0
example# 6910
output is an empty list .
0
example# 6911
for every field in return value of the function _parse_date_fmt ,
0
example# 6912
get the value under the field key of the html dictionary , append it to output .
0
example# 6913
join output into a string , separated by newline characters , use it as an argument for the call to the mark_safe , return the result .
0
example# 6914
define the method id_for_label with arguments self and id .
0
example# 6915
for every first_select in return value of the function _parse_date_fmt .
0
example# 6916
substitute ' % s ' in string _STR:0_ with id_ and first_select , return it .
1
'%s_%s' ||| _STR:0_
example# 6917
if not ,
0
example# 6918
convert if into a string append to it a string _STR:0_ , return the result .
1
'_month' ||| _STR:0_
example# 6919
define the method id_for_label with arguments self , data , files and name .
0
example# 6920
format self.year_field [ self . year_field ] string with name , use it as the key for the data dictionary , substitute the result for y .
0
example# 6921
format self.month_field [ self . month_field ] string with name , use it as the key for the data dictionary , substitute the result for m .
0
example# 6922
format self.day_field [ self . day_field ] string with name , use it as the key for the data dictionary , substitute the result for d .
0
example# 6924
return None .
0
example# 6925
if y and m and d are all true ,
0
example# 6926
if settings.USE_L10N [ settings . USE_L10N ] is true ,
1
101 ||| _STR:0_
example# 6927
call the function get_format with an argument string _STR:0_ , substitute the first element of the result for input_format .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 6928
try ,
0
example# 6930
if ValueError exception is caught ,
0
example# 6931
substitute ' % s ' in string _STR:0_ with y , m and d , return the result .
1
'%s-%s-%s' ||| _STR:0_
example# 6932
if not ,
0
example# 6933
call the method datetime_safe.new_date [ datetime_safe . new_date ] with an argument date_value , substitute the result for date_value .
0
example# 6934
call the method date_value.strftime [ date_value . strftime ] with an argument input_format , return the result .
0
example# 6935
if not ,
0
example# 6936
substitute ' % s ' in string _STR:0_ with y , m and d , return the result .
1
'%s-%s-%s' ||| _STR:0_
example# 6937
get the name key of the data dictionary , if the key exists return it , if not return None .
0
example# 6938
define the method id_for_label with arguments self , name , field , value , val , choices and none_value .
0
example# 6939
if _STR:0_ is contained in self.attrs [ self . attrs ] ,
1
'id' ||| _STR:0_
example# 6940
get the value under the _STR:0_ key of the attrs dictionary , substitute the return value field of the self object for id_ .
1
'id' ||| _STR:0_
example# 6941
if not ,
0
example# 6942
substitute ' % s ' in string _STR:0_ with name , return it .
1
'id_%s' ||| _STR:0_
example# 6943
if self.is_required [ self . is_required ] is false ,
0
example# 6944
insert none_value at the beginning of the choices list .
0
example# 6945
call the method self.build_attrs [ self . build_attrs ] with an argument id set to field modulus id_ , substitute the result for local_attrs .
0
example# 6946
s is an instance of the Select class , created with choices set to choices .
0
example# 6948
return select_html .
0
example# 6949
from __future__ import unicode_literals into default name space .
0
example# 6950
import module copy .
0
example# 6951
import module datetime .
0
example# 6952
import module os .
0
example# 6953
import module re .
0
example# 6954
import module sys .
0
example# 6955
import module warnings .
0
example# 6956
from decimal import Decimal and DecimalException into default name space .
0
example# 6957
from io import BytesIO into default name space .
0
example# 6958
from django.core [ django . core ] import validators into default name space .
0
example# 6959
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 6960
from django.forms.utils [ django . forms . utils ] import from_current_timezone and to_current_timezone into default name space .
0
example# 6961
from django.forms.widgets [ django . forms . widgets ] import TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput ,
0
example# 6962
CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION . from django.utils [ django . utils ] import formats into default name space .
0
example# 6963
from django.utils.encoding [ django . utils . encoding ] import smart_text , force_str and force_text into default name space .
0
example# 6965
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 6966
from django.utils [ django . utils ] import six into default name space .
0
example# 6967
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urlsplit and urlunsplit into default name space .
0
example# 6968
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ and ungettext_lazy into default name space .
0
example# 6969
from django.core.validators [ django . core . validators ] import EMPTY_VALUES into default name space .
0
example# 6970
__all__ a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ ,
7
'IntegerField' ||| _STR:2_
'DateField' ||| _STR:3_
'CharField' ||| _STR:1_
'DateTimeField' ||| _STR:5_
'Field' ||| _STR:0_
'TimeField' ||| _STR:4_
'RegexField' ||| _STR:6_
example# 6971
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ , _STR:11_ , _STR:12_ , _STR:13_ , _STR:14_ , _STR:15_ , _STR:16_ , _STR:17_ , _STR:18_ . derive the class Field from the base class object .
19
'FilePathField' ||| _STR:15_
'FileField' ||| _STR:1_
'MultiValueField' ||| _STR:9_
'TypedChoiceField' ||| _STR:17_
'ImageField' ||| _STR:2_
'URLField' ||| _STR:3_
'BooleanField' ||| _STR:4_
'NullBooleanField' ||| _STR:5_
'IPAddressField' ||| _STR:13_
'ComboField' ||| _STR:8_
'SplitDateTimeField' ||| _STR:12_
'EmailField' ||| _STR:0_
'GenericIPAddressField' ||| _STR:14_
'MultipleChoiceField' ||| _STR:7_
'SlugField' ||| _STR:16_
'DecimalField' ||| _STR:11_
'ChoiceField' ||| _STR:6_
'FloatField' ||| _STR:10_
'TypedMultipleChoiceField' ||| _STR:18_
example# 6972
substitute substitute TextInput for widget .
0
example# 6973
substitute HiddenInput for hidden_widget .
0
example# 6974
default_validators is an empty list .
0
example# 6975
default_error_messages is an dictionary containing entry : return value of the function _ called with an string _STR:0_ for _STR:1_ .
2
'This field is required.' ||| _STR:0_
'required' ||| _STR:1_
example# 6976
put elements of validators.EMPTY_VALUES [ validators . EMPTY_VALUES ] to a list , substitute the result for empty_values .
0
example# 6977
creation_counter is an integer 0 .
1
0.0 ||| _STR:0_
example# 6978
define the function __init__ with 11 arguments : self , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , error_messages set to None , show_hidden_initial set to boolean False , validators is an empty , localize set to boolean False , label_suffix set to None .
1
111 ||| _STR:0_
example# 6979
substitute required , label and initial for self.required [ self . required ] , self.label [ self . label ] and self.initial [ self . initial ] .
0
example# 6980
substitute show_hidden_initial for self.show_hidden_initial [ self . show_hidden_initial ] .
0
example# 6981
substitute help_text for self.help_text [ self . help_text ] .
0
example# 6982
substitute label_suffix for self.label_suffix [ self . label_suffix ] .
0
example# 6983
substitute self.widget [ self . widget ] if the widget is false , otherwise substitute widget for widget .
0
example# 6984
if widget is an instance of type class ,
0
example# 6985
call the function widget , substitute the result for widget .
0
example# 6986
substitute localize for self.localize [ self . localize ] .
0
example# 6987
if self.localize [ self . localize ] is true ,
0
example# 6988
widget.is_localized [ widget . is_localized ] is boolean True .
0
example# 6989
substitute self.required [ self . required ] for widget.is_required [ widget . is_required ] .
0
example# 6990
call the method self.widget_attrs [ self . widget_attrs ] with an argument widget , substitute the result for extra_attrs .
0
example# 6991
if extra_attrs is true ,
0
example# 6992
update widget.attrs [ widget . attrs ] dictionary with extra_attrs .
0
example# 6993
substitute widget for self.widget [ self . widget ] .
0
example# 6994
substitute Field.creation_counter [ Field . creation_counter ] for self.creation_counter [ self . creation_counter ] .
0
example# 6995
increment Field.creation_counter [ Field . creation_counter ] by one .
0
example# 6996
messages is an empty dictionary .
0
example# 6997
for every c in reversed order of self.__class__.__mro__ [ self . __class__ . __mro__ ] ,
0
example# 6998
get _STR:0_ from the c object , if it doesnt exists return an empty dictionary , use the result as the argument for the call to the messages.update [ messages . update ] function .
1
'default_error_messages' ||| _STR:0_
example# 6999
update messages dictionary with error_messages , if it exists , if not do n't update it .
0
example# 7000
substitute messages for self.error_messages [ self . error_messages ] .
0
example# 7001
add self.default_validators [ self . default_validators ] and validators , substitute the result for self.validators [ self . validators ] .
0
example# 7002
call the method __init__ from the base class of the Field class .
0
example# 7003
define the method prepare_value with arguments : self and value .
0
example# 7004
return value .
0
example# 7005
define the method to_python with arguments self and value .
0
example# 7006
return value .
0
example# 7007
define the method to_python with arguments self and value .
0
example# 7008
if value is contained in self.empty_values [ self . empty_values ] and self.required [ self . required ] is true ,
0
example# 7010
define the method run_validators with arguments self and value .
0
example# 7011
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7012
return nothing ,
0
example# 7013
errors is an empty list .
0
example# 7014
for every v in self.validators [ self . validators ] ,
0
example# 7015
try
0
example# 7016
call the function v with an argument value .
0
example# 7017
if ValidationError , substituted for e , exception is caught ,
0
example# 7018
if e has an attribute _STR:0_ and e.code [ e . code ] is contained in self.error_messages [ self . error_messages ] ,
1
'code' ||| _STR:0_
example# 7019
get the value under the e.code [ e . code ] key of the self.error_messages [ self . error_messages ] dictionary , substitute the result for e.message [ e . message ] .
0
example# 7020
extend errors list with e.error_list [ e . error_list ] .
0
example# 7021
if errors is true ,
0
example# 7022
raise an ValidationError exception with an argument errors ,
0
example# 7023
define the method clean with arguments self and value .
0
example# 7024
call the method self.to_python [ self . to_python ] with an argument value , substitute it for value .
0
example# 7025
call the method self.validate [ self . validate ] with an argument value .
0
example# 7026
call the method self.run_validators [ self . run_validators ] with an argument value .
0
example# 7027
return value .
0
example# 7028
define the method bound_data with arguments self , data and initial .
0
example# 7029
return data .
0
example# 7030
define the method widget_attrs with arguments self and widget .
0
example# 7031
return is empty dictionary .
0
example# 7032
define the method get_limit_choices_to with arguments self .
0
example# 7033
if self.limit_choices_to [ self . limit_choices_to ] object is callable ,
0
example# 7034
call the method self.limit_choices_to [ self . limit_choices_to ] , return the result ,
0
example# 7035
return self.limit_choices_to [ self . limit_choices_to ] .
0
example# 7036
define the method _has_changed with arguments self , initial and data .
0
example# 7037
substitute initial for initial_value , if initial is not None , if not , initial_value is an empty string .
0
example# 7038
try ,
0
example# 7039
call the function self.to_python [ self . to_python ] with an argument data , substitute the result for data .
0
example# 7040
if self has an attribute _STR:0_ ,
1
'_coerce' ||| _STR:0_
example# 7041
call the method self._coerce [ self . _coerce ] with an argument data , substitute the result for data .
0
example# 7042
if ValidationError exception is caught ,
0
example# 7043
return boolean True .
0
example# 7044
substitute data for data_value if data is not None , otherwise data_value is an empty list .
0
example# 7045
if initial_value is not equal to data_value , return boolean True , otherwise return boolean False .
0
example# 7046
define the method __deepcopy__ with arguments self and memo .
0
example# 7047
call the method copy.copy [ copy . copy ] with an argument self , substitute the result for result .
0
example# 7048
substitute result for the value of the memo dictionary , with identity of the self object as an key .
0
example# 7049
call the method copy.deepcopy [ copy . deepcopy ] with arguments self.widget [ self . widget ] and memo , substitute the result for result.widget [ result . widget ] .
0
example# 7050
substitute elements of self.validators [ self . validators ] list for result.validators [ result . validators ] .
0
example# 7051
return result .
0
example# 7052
derive the class CharField from the base class Field class .
0
example# 7054
substitute max_length and min_length for self.max_length [ self . max_length ] for self.min_length [ self . min_length ] .
0
example# 7055
call the method __init__ from the base class of the class CharField , with arguments unpacked list args and unpacked dictionary kwargs .
0
example# 7056
if min_length is not None ,
0
example# 7057
call the method validators.MinLengthValidator [ validators . MinLengthValidator ] with min_length converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7058
if max_length is not None ,
0
example# 7059
call the method validators.MaxLengthValidator [ validators . MaxLengthValidator ] with max_length converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7060
define the method to_python with arguments self and value .
0
example# 7061
if value in self.empty_values [ self . empty_values ] ,
0
example# 7062
return an empty string .
0
example# 7063
evaluate the function smart_text with an argument value , return the result .
0
example# 7064
define the method widget_attrs with arguments self and widget .
0
example# 7065
call the method widget_attrs from the base class of the class CharField , with an argument widget , substitute the result for attrs .
0
example# 7066
if self.max_length [ self . max_length ] is not None ,
0
example# 7067
update attrs dictionary with entry : self.max_length [ self . max_length ] converted into a string for _STR:0_ .
1
'maxlength' ||| _STR:0_
example# 7068
return attrs .
0
example# 7069
derive the class IntegerField from the base class Field class .
0
example# 7070
substitute NumberInput for widget .
0
example# 7071
default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string , _STR:0_ for _STR:1_ .
2
'Enter a whole number.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 7073
substitute max_value and min_value for self.max_value [ self . max_value ] and self.min_value [ self . min_value ] .
0
example# 7074
get the value under the _STR:0_ key of the kwargs dictionary , if it is true and self.widget [ self . widget ] equals to NumberInput ,
1
'localize' ||| _STR:0_
example# 7075
if _STR:0_ key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value .
1
'widget' ||| _STR:0_
example# 7076
call the method __init__ from the base class of the class IntegerField , with arguments unpacked list args and unpacked dictionary kwargs .
0
example# 7077
if max_value is not None ,
0
example# 7078
call the method validators.MaxValueValidator [ validators . MaxValueValidator ] with max_value converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7079
if min_value is not None ,
0
example# 7080
call the method validators.MinValueValidator [ validators . MinValueValidator ] with min_value converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7081
define the method to_python with arguments self and value .
0
example# 7082
call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value .
0
example# 7083
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7084
return None .
0
example# 7085
if self.localize [ self . localize ] is true ,
0
example# 7086
call the method formats.sanitize_separators [ formats . sanitize_separators ] with an argument value , substitute the result for value .
0
example# 7087
try ,
0
example# 7088
convert value into an string , convert the result into an integer and substitute it for value .
0
example# 7089
if ValueError or TypeError exceptions are caught ,
0
example# 7091
return value
0
example# 7092
define the method widget_attrs with arguments self and widget .
0
example# 7093
call the method widget_attrs with an argument widget , from the base class of the class IntegerField , substitute it for attrs .
0
example# 7094
if widget is an instance of the NumberInput ,
0
example# 7095
if self.min_value [ self . min_value ] is not None ,
0
example# 7096
substitute self.min_value [ self . min_value ] for the value under the _STR:0_ key of the attrs dictionary .
1
'min' ||| _STR:0_
example# 7097
if self.max_value [ self . max_value ] is not None ,
0
example# 7098
substitute self.max_value [ self . max_value ] for the value under the _STR:0_ key of the attrs dictionary .
1
'max' ||| _STR:0_
example# 7099
return attrs .
0
example# 7100
derive the class FloatField from the base class IntegerField class .
0
example# 7101
default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string , _STR:0_ for _STR:1_ .
2
'Enter a number.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 7102
define the method to_python with arguments self and value .
0
example# 7103
call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value .
0
example# 7104
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7105
return None .
0
example# 7106
if self.localize [ self . localize ] is true ,
0
example# 7107
call the method formats.sanitize_separators [ formats . sanitize_separators ] with an argument value , substitute the result for value .
0
example# 7108
try ,
0
example# 7109
convert value into an floating point number , substitute it for value .
0
example# 7110
if ValueError or TypeError exceptions are caught ,
0
example# 7112
return value .
0
example# 7113
define the method validate with arguments self and value .
0
example# 7114
call the method validate with an argument value , from the base class of the FloatField class .
0
example# 7115
if value is Nan , or value is contained in return value of the Decimal called twice with string _STR:0_ and with string _STR:1_ ,
2
'Inf' ||| _STR:0_
'-Inf' ||| _STR:1_
example# 7117
return value .
0
example# 7118
define the method widget_attrs with arguments self and widget .
0
example# 7119
call the method widget_attrs with an argument widget , from the base class of the FloatField class , substitute the result for attrs .
0
example# 7120
if widget is an instance of the NumberInput class , and string _STR:0_ is not contained in widget.attrs [ widget . attrs ] ,
1
'step' ||| _STR:0_
example# 7121
if _STR:0_ attribute of attrs dictionary does not exists , set it to to string _STR:1_ .
2
'step' ||| _STR:0_
'any' ||| _STR:1_
example# 7122
return attrs .
0
example# 7123
derive the class DecimalField from the base class IntegerField class .
0
example# 7126
substitute max_digits and decimal_places for self.max_digits [ self . max_digits ] and self.decimal_places [ self . decimal_places ] .
0
example# 7128
define the method to_python with arguments self and value .
0
example# 7129
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7130
return None .
0
example# 7131
if self.localize [ self . localize ] is true ,
0
example# 7132
call the method formats.sanitize_separators [ formats . sanitize_separators ] with an argument value , substitute the result for value .
0
example# 7133
call the function smart_text with an argument value , strip the result of whitespaces from both ends and substitute it for value .
0
example# 7134
try ,
0
example# 7135
value is an instance of a class Decimal created with value as an argument .
0
example# 7136
if DecimalException exception is caught ,
0
example# 7138
return value .
0
example# 7139
define the method validate with arguments self and value .
0
example# 7140
call the method validate with an argument value from the base class of the DecimalField class .
0
example# 7141
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7142
return nothing .
0
example# 7143
if value is not equal to value or value equals return value of the call to Decimal with argument _STR:0_ ,
1
'Inf' ||| _STR:0_
example# 7145
call the method value.as_tuple [ value . as_tuple ] , assign the result to sign , digittuple and exponent , respectively .
0
example# 7146
substitute absolute value of the exponent for decimals .
0
example# 7147
substitute length of digittuple for digits .
0
example# 7148
if decimals is greater than digits ,
0
example# 7149
substitute decimals for digits .
0
example# 7150
subtract decimals from digits , substitute the result for whole_digits .
0
example# 7151
if self.max_digits [ self . max_digits ] is not None and digits is grater than self.max_digits [ self . max_digits ] ,
0
example# 7153
if self.decimal_places [ self . decimal_places ] is not None and decimals is grater than self.decimal_places [ self . decimal_places ] :
0
example# 7155
if self.max_digits [ self . max_digits ] is not None and self.decimal_places [ self . decimal_places ] is not None and whole_digits is grater than the difference of ,
0
example# 7157
return value .
0
example# 7158
define the method widget_attrs with arguments self and widget .
0
example# 7159
call the method widget_attrs with an argument widget , from the base class of the DecimalField class , substitute the result for attrs .
0
example# 7160
if widget is an instance of NumberInput and string _STR:0_ is not contained in widget.attrs [ widget . attrs ] .
1
'step' ||| _STR:0_
example# 7161
if self.decimal_places [ self . decimal_places ] is not None ,
0
example# 7163
if not ,
0
example# 7164
step is an string _STR:0_ .
1
'any' ||| _STR:0_
example# 7165
if _STR:0_ key of the attrs dictionary doesnt exists assign it step as an value .
1
'step' ||| _STR:0_
example# 7166
return attrs .
0
example# 7167
derive the class BaseTemporalField from the base class Field class .
0
example# 7168
define the method __init__ with arguments self , input_formats set to None , unpacked list args and unpacked dictionary kwargs .
0
example# 7169
call the method __init__ from the base class of the BaseTemporalField class , with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 7170
if input_formats is not None ,
0
example# 7171
substitute input_formats for self.input_formats [ self . input_formats ] .
0
example# 7172
define the method to_python with arguments self and value .
0
example# 7173
call the function force_text with arguments value and strings_only set to boolean True , substitute the result for unicode_value .
0
example# 7174
if unicode_value is an instance of six.text_type [ six . text_type ] ,
0
example# 7175
strip whitespaces from both ends of unicode_value , substitute the result for value .
0
example# 7176
if value is an instance of six.text_type [ six . text_type ] class ,
0
example# 7177
for every format in self.input_formats [ self . input_formats ] ,
0
example# 7178
try ,
0
example# 7179
call the method self.strptime [ self . strptime ] with arguments value and format , return the result .
0
example# 7180
if ValueError or TypeError exceptions are caught ,
0
example# 7181
skip this loop iteration .
0
example# 7183
define the method strptime with arguments self , value and format .
0
example# 7184
raise an NotImplementedError with an argument string _STR:0_ .
1
'Subclasses must define this method.' ||| _STR:0_
example# 7185
derive the class DateField from the base class BaseTemporalField class .
0
example# 7186
substitute DateInput for widget .
0
example# 7187
call the method formats.get_format_lazy [ formats . get_format_lazy ] with an argument string _STR:0_ , substitute the result for input_formats .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 7188
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'Enter a valid date.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 7189
define the method to_python with arguments self and value .
0
example# 7190
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7191
return None .
0
example# 7192
if value is an instance of datetime.datetime [ datetime . datetime ] class ,
0
example# 7193
call the method value.date [ value . date ] , return the result .
0
example# 7194
if value is an instance of datetime.date [ datetime . date ] class ,
0
example# 7195
return value .
0
example# 7196
call the method to_python with an argument value from the base class of the DateField class , return the result .
0
example# 7197
define the method strptime with arguments self , value and format .
0
example# 7199
derive the class TimeField from the base class BaseTemporalField class .
0
example# 7200
substitute TimeInput for widget .
0
example# 7201
call the method formats.get_format_lazy [ formats . get_format_lazy ] with an argument string _STR:0_ , substitute the result for input_formats .
1
'TIME_INPUT_FORMATS' ||| _STR:0_
example# 7202
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid time.' ||| _STR:0_
example# 7203
define the method to_python with arguments self and value .
0
example# 7204
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7205
return None .
0
example# 7206
if value is an instance of datetime.time [ datetime . time ] ,
0
example# 7207
return value ,
0
example# 7208
call the method to_python with an argument value from the base class of the TimeField class , return the result .
0
example# 7209
define the method strptime with arguments self , value and format .
0
example# 7211
derive the class DateTimeField from the base class BaseTemporalField class .
0
example# 7212
substitute DateTimeInput for widget .
0
example# 7213
call the method formats.get_format_lazy [ formats . get_format_lazy ] with an argument string _STR:0_ , substitute the result for input_formats .
1
'DATETIME_INPUT_FORMATS' ||| _STR:0_
example# 7214
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid date/time.' ||| _STR:0_
example# 7215
define the method prepare_value with arguments self and value .
0
example# 7216
if value is an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 7217
call the function to_current_timezone with an argument value , substitute the result for value .
0
example# 7218
return value .
0
example# 7219
define the method to_python with arguments self and value .
0
example# 7220
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7221
return None .
0
example# 7222
if value is an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 7223
call the function __current_timezone with an argument value , return the result .
0
example# 7224
if value is an instance of datetime.date [ datetime . date ] ,
0
example# 7226
call the function from_current_timezone with an argument result , return the result .
0
example# 7227
if value is an instance of list type ,
0
example# 7231
if first and second elements of value are contained in self.empty_values [ self . empty_values ] ,
0
example# 7232
return None .
0
example# 7233
substitute ' % s ' in string _STR:0_ with the elements of value converted into a tuple , substitute the result for value .
1
'%s %s' ||| _STR:0_
example# 7234
call the method to_python with an argument value from the base class of the DateTimeField class , substitute the result for result .
0
example# 7235
call the function from_current_timezone with an argument , return the result .
0
example# 7236
define the method strptime with arguments self , value and format .
0
example# 7238
derive the class RegexField from the base class CharField class .
0
example# 7240
if error_message is not None ,
0
example# 7241
get the value under the _STR:0_ key of the kwargs dictionary , if it exists substitute it for error_messages , if not , error_messages is an empty dictionary .
1
'error_messages' ||| _STR:0_
example# 7242
substitute error_message for value under the _STR:0_ key of the error_messages dictionary .
1
'invalid' ||| _STR:0_
example# 7243
substitute error_messages for value under the _STR:0_error_messages ' key of the kwargs dictionary .
1
'' ||| _STR:0_
example# 7245
call the method self._set_regex [ self . _set_regex ] with an argument regex .
0
example# 7246
define the method _get_regex an argument self .
0
example# 7247
return self._regex [ self . _regex ] .
0
example# 7248
define the method _set_regex with arguments self and regex .
0
example# 7249
if regex is an instance of six.string_types [ six . string_types ] class ,
0
example# 7251
substitute regex for self._regex [ self . _regex ] .
0
example# 7252
if self has an _STR:0_ attribute and self._regex_validator [ self . _regex_validator ] is contained in self.validators [ self . validators ] ,
1
'_regex_validator' ||| _STR:0_
example# 7253
remove self._regex_validator [ self . _regex_validator ] from self.validators [ self . validators ] .
0
example# 7254
call the method validators.RegexValidator [ validators . RegexValidator ] with an argument regex set to regex , substitute it for self._regex_validator [ self . _regex_validator ] .
0
example# 7255
append self._regex_validator [ self . _regex_validator ] to self.validators [ self . validators ] .
0
example# 7256
regex is an property object of this class , with _get_regex getter and _set_regex setter function .
0
example# 7257
derive the class EmailField from the base class CharField class .
0
example# 7258
substitute EmailInput for widget .
0
example# 7259
default_validators is a list with an element validators.validate_email [ validators . validate_email ] .
0
example# 7261
call the method self.to_python [ self . to_python ] with an argument value , strip the whitespaces from the both ends of the result and substitute it for value .
0
example# 7262
call the method clean with an argument value from the base class of the EmailField class .
0
example# 7263
derive the class FileField from the base class Field class .
0
example# 7264
substitute ClearableFileInput for widget .
0
example# 7267
remove the value under _STR:0_ key from the kwargs dictionary and if the key exists substitute it for self.max_length [ self . max_length ] , if not self.max_length [ self . max_length ] is None .
1
'max_length' ||| _STR:0_
example# 7268
remove the value under _STR:0_ key from the kwargs dictionary and if the key exists , substitute it for self.allow_empty_file [ self . allow_empty_file ] , if not self.allow_empty_file [ self . allow_empty_file ] is boolean False .
1
'allow_empty_file' ||| _STR:0_
example# 7270
define the method to_python with arguments self and data .
0
example# 7271
if data in self.empty_values [ self . empty_values ] is true ,
0
example# 7272
return None .
0
example# 7273
try ,
0
example# 7274
substitute data.name [ data . name ] for file_name .
0
example# 7275
substitute data.size [ data . size ] for file_name .
0
example# 7276
if AttributeError exception is caught ,
0
example# 7278
if self.max_length [ self . max_length ] is not None and length of file_name is grater than self.max_length [ self . max_length ] ,
0
example# 7281
if file_name is false ,
0
example# 7283
if self.allow_empty_file [ self . allow_empty_file ] and file_size are both false ,
0
example# 7285
return data .
0
example# 7286
define the method clean with arguments self , data and initial set to None .
0
example# 7287
if data is bound to the same object as FILE_INPUT_CONTRADICTION ,
0
example# 7289
if data is boolean False ,
0
example# 7290
if self.required [ self . required ] is false ,
0
example# 7291
return boolean False .
0
example# 7292
data is None .
0
example# 7293
if data is false and initial is true ,
0
example# 7294
return initial .
0
example# 7295
call the method clean with an argument data from the base class of the class FileField , return the result .
0
example# 7296
define the method bound_data with arguments self , data and initial .
0
example# 7297
if data is not None or FILE_INPUT_CONTRADICTION ,
0
example# 7298
return initial .
0
example# 7299
return data .
0
example# 7300
define the method _has_changed with arguments self , data and initial .
0
example# 7301
if data is None ,
0
example# 7302
return is boolean False .
0
example# 7303
return is boolean True .
0
example# 7304
derive the class ImageField from the base class FileField class .
0
example# 7305
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string , _STR:0_ for _STR:1_ .
2
'"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' ||| _STR:0_
'invalid_image' ||| _STR:1_
example# 7306
define the method to_python with arguments self and data .
0
example# 7307
call the method to_python with an argument data from the base class of the class ImageField , substitute the result for f .
0
example# 7308
if f is None ,
0
example# 7309
return None .
0
example# 7310
from PIL import Image into default namespace .
0
example# 7311
if data has an _STR:0_ attribute ,
1
'temporary_file_path' ||| _STR:0_
example# 7312
substitute the result of the function data.temporary_file_path [ data . temporary_file_path ] for file .
0
example# 7313
if not ,
0
example# 7314
if data has an attribute _STR:0_ ,
1
'read' ||| _STR:0_
example# 7315
file is an instance of BytesIO class created with an argument : return value of the method data.read [ data . read ] .
0
example# 7316
if not ,
0
example# 7317
file is an instance of BytesIO class created with an argument : value under the _STR:0_ key of the data dictionary .
1
'content' ||| _STR:0_
example# 7318
try ,
0
example# 7319
call the method Image.open [ Image . open ] with an argument file , on the result call the verify method
0
example# 7320
if Exception exception is caught ,
0
example# 7322
if f has an attribute _STR:0_ and if f.seek [ f . seek ] is an callable object ,
1
'seek' ||| _STR:0_
example# 7323
call the method f.seek [ f . seek ] with an argument integer 0 .
1
0.0 ||| _STR:0_
example# 7324
return f .
0
example# 7325
derive the class URLField from the base class CharField class .
0
example# 7326
substitute URLInput for widget .
0
example# 7327
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid URL.' ||| _STR:0_
example# 7328
default_validators is a list with an element , return value of the validators.URLValidator [ validators . URLValidator ] method .
0
example# 7329
define the method to_python with arguments self and data .
0
example# 7330
define the function split_url with an argument url .
0
example# 7331
try ,
0
example# 7332
call the urlsplit with an argument url , convert the result into a list and return it .
0
example# 7333
if ValueError exception is caught ,
0
example# 7335
call the method to_python with an argument data from the base class of the class URLField , substitute the result for value .
0
example# 7336
if value is true ,
0
example# 7337
call the function split_url with an argument value , substitute the result for url_fields .
0
example# 7338
if first element of the url_fields is false ,
0
example# 7339
first element of url_fields is string _STR:0_ .
1
'http' ||| _STR:0_
example# 7340
if second element of url_fields is false ,
0
example# 7341
substitute third element of url_fields for second element of url_fields .
0
example# 7342
third element of url_fields is an empty string .
0
example# 7343
call the function urlunsplit with an argument url_fields , use the result as an argument for the call to the function split_url , substitute the result for url_fields .
0
example# 7344
call the function urlunsplit with an argument url_fields , substitute the result for value .
0
example# 7345
return value .
0
example# 7346
define the method clean with arguments self and value .
0
example# 7347
call the method self.to_python [ self . to_python ] with an argument value , strip the whitespaces from the result , substitute it for value .
0
example# 7348
call the method clean with an argument data from the base class of the class URLField , return the result .
0
example# 7349
derive the class BooleanField from the base class Field class .
0
example# 7350
substitute CheckboxInput for widget .
0
example# 7351
define the method to_python with arguments self and value .
0
example# 7353
value is boolean False .
0
example# 7354
if not ,
0
example# 7355
convert value into boolean and substitute it for value .
0
example# 7356
call the method to_python with an argument data from the base class of the class BooleanField , return the result .
0
example# 7357
define the method validate with arguments self and value .
0
example# 7358
if value is false and self.required [ self . required ] is true ,
0
example# 7360
define the method _has_changed with arguments self , initial and data .
0
example# 7361
if initial equals a string _STR:0_ ,
1
'False' ||| _STR:0_
example# 7362
initial is boolean False .
0
example# 7363
convert initial and data into boolean , if they are not equal return boolean True , if they are return boolean False .
0
example# 7364
derive the class NullBooleanField from the base class BooleanField class .
0
example# 7365
substitute NullBooleanSelect for widget .
0
example# 7366
define the method to_python with arguments self and value .
0
example# 7368
return boolean True .
0
example# 7370
return boolean False ,
0
example# 7371
if not ,
0
example# 7372
return None .
0
example# 7373
define the method validate with arguments self and value .
0
example# 7374
do nothing .
0
example# 7375
define the method _has_changed with arguments self , initial and data .
0
example# 7376
if initial is not None ,
0
example# 7377
convert initial into boolean and substitute it for initial .
0
example# 7378
if data is not None ,
0
example# 7379
convert data into boolean and substitute it for data .
0
example# 7380
if initial is not equal to data , return boolean True , if it is return boolean False .
0
example# 7381
derive the class ChoiceField from the base class Field class .
0
example# 7382
substitute Select for widget .
0
example# 7383
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string , _STR:0_ for _STR:1_ .
2
'invalid_choice' ||| _STR:1_
'Select a valid choice. %(value)s is not one of the available choices.' ||| _STR:0_
example# 7386
substitute choices for self.choices [ self . choices ] .
0
example# 7387
define the method __deepcopy__ with arguments self and memo .
0
example# 7388
call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField , substitute the result for result .
0
example# 7389
call the method copy.deepcopy [ copy . deepcopy ] with arguments self._choices [ self . _choices ] and memo , substitute the result for result._choices [ result . _choices ] .
0
example# 7390
return result .
0
example# 7391
define the method _get_choices with an argument self .
0
example# 7392
return self._choices [ self . _choices ] .
0
example# 7393
define the method _set_choices with arguments self and value .
0
example# 7394
self._choices [ self . _choices ] and self.widget.choices [ self . widget . choices ] are assigned value converted into a list .
0
example# 7395
choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function .
0
example# 7396
define the method to_python with arguments self and value .
0
example# 7397
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7398
return an empty string .
0
example# 7399
call the function smart_text with an argument value , return the result .
0
example# 7400
define the method validate with arguments self and value .
0
example# 7401
call the method validate with an argument value from the base class of the class ChoiceField .
0
example# 7402
if value is true and method self.valid_value [ self . valid_value ] called with an argument value evaluates to false ,
0
example# 7404
define the method valid_value with arguments self and value .
0
example# 7405
call the function force_text with an argument value , substitute the result for text_value .
0
example# 7406
for every k and v in self.choices [ self . choices ] ,
0
example# 7407
if v is an instance of list or tuple type ,
0
example# 7410
return boolean True .
0
example# 7411
if not ,
0
example# 7412
if value equals k or text_value equals return value of the function force_text called with argument k ,
0
example# 7413
return boolean True .
0
example# 7414
return boolean False .
0
example# 7415
derive the class TypedChoiceField from the base class ChoiceField class .
0
example# 7417
if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.coerce [ self . coerce ] ,
1
'coerce' ||| _STR:0_
example# 7418
if not , self.coerce [ self . coerce ] is an identity lambda function with an argument val . if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.empty_value [ self . empty_value ] , if not , sself.empty_value [ sself . empty_value ] is an empty string .
1
'empty_value' ||| _STR:0_
example# 7420
define the method _coerce with arguments self and value .
0
example# 7421
if value equals self.empty_value [ self . empty_value ] or value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7422
return self.empty_value [ self . empty_value ] .
0
example# 7423
try ,
0
example# 7424
call the function self.coerce [ self . coerce ] with an argument value , substitute it for value .
0
example# 7425
if ValueError , TypeError or ValidationError exception is caught ,
0
example# 7427
return value .
0
example# 7428
define the method clean with arguments self and value .
0
example# 7429
call the method clean with an argument value from the base class of the class TypedChoiceField , substitute the result for value .
0
example# 7430
call the method self._coerce [ self . _coerce ] with an argument value , return the result .
0
example# 7431
derive the class MultipleChoiceField from the base class ChoiceField class .
0
example# 7432
substitute MultipleHiddenInput for hidden_widget .
0
example# 7433
substitute SelectMultiple for widget .
0
example# 7434
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string , _STR:0_ for _STR:1_ , and return value of the function _ called with an argument string _STR:2_ for _STR:3_ .
4
'invalid_list' ||| _STR:3_
'invalid_choice' ||| _STR:1_
'Enter a list of values.' ||| _STR:2_
'Select a valid choice. %(value)s is not one of the available choices.' ||| _STR:0_
example# 7435
define the method to_python with arguments self and value .
0
example# 7436
if value is false ,
0
example# 7437
return an empty list .
0
example# 7438
otherwise if value is not an instance of list ot tuple type ,
0
example# 7440
for every val in value call the function smart_text with an argument val , return the results in a lit .
0
example# 7441
define the method validate with arguments self and value .
0
example# 7442
if self.required [ self . required ] is true and value is false ,
0
example# 7444
for every val in value ,
0
example# 7445
call the method self.valid_value [ self . valid_value ] with an argument val , if it evaluates to false ,
0
example# 7447
define the method _has_changed with arguments self , initial and data .
0
example# 7448
if initial is None ,
0
example# 7449
initial is an empty list .
0
example# 7450
if data is None ,
0
example# 7451
data is an empty list .
0
example# 7452
if lengths of initial and data are not the same ,
0
example# 7453
return boolean True .
0
example# 7454
for every value in initial call the function force_text with an argument value , add the results into a set , substitute the resulting set for initial_set .
0
example# 7455
for every value in data call the function force_text with an argument value , add the results into a set , substitute the resulting set for data_set .
0
example# 7456
if data_set is not equal to initial_set , return boolean True , otherwise return boolean False .
0
example# 7457
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class .
0
example# 7459
if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.coerce [ self . coerce ] , if not , self.coerce [ self . coerce ] is an identity lambda function with an argument val .
1
'coerce' ||| _STR:0_
example# 7460
if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.empty_value [ self . empty_value ] , if not , self.empty_value [ self . empty_value ] is an empty list .
1
'empty_value' ||| _STR:0_
example# 7462
define the method _coerce with arguments self and value .
0
example# 7463
if value equals self.empty_value [ self . empty_value ] or value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7464
return self.empty_value [ self . empty_value ] .
0
example# 7465
new_value is an empty list .
0
example# 7466
for every choice in value ,
0
example# 7467
try ,
0
example# 7468
call the method self.coerce [ self . coerce ] with an argument choice , append the result to new_value .
0
example# 7469
if ValueError , TypeError or ValidationError exception is caught ,
0
example# 7471
return new_value .
0
example# 7472
define the method clean with arguments self and value .
0
example# 7473
call the method clean with an argument value from the base class of the class TypedMultipleChoiceField , substitute the result for value .
0
example# 7474
call the method self._coerce [ self . _coerce ] with an argument value , return the result .
0
example# 7475
define the method validate with arguments self and value .
0
example# 7476
if value is not equal self.empty_value [ self . empty_value ] ,
0
example# 7477
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField .
0
example# 7478
otherwise if self.required [ self . required ] is true ,
0
example# 7480
derive the class ComboField from the base class Field class .
0
example# 7481
define the method __init__ with arguments : self , fields set to an empty tuple , unpacked list args and unpacked dictionary kwargs .
0
example# 7483
for every f in fields ,
0
example# 7484
f.required [ f . required ] is boolean False .
0
example# 7485
substitute fields for self.fields [ self . fields ] .
0
example# 7486
define the method clean with arguments self and value .
0
example# 7487
call the method clean with an argument value from the base class of the class ComboField .
0
example# 7488
for every field in self.fields [ self . fields ] ,
0
example# 7489
call the method field.clean [ field . clean ] with an argument value , substitute the result for value .
0
example# 7490
return value .
0
example# 7491
derive the class MultiValueField from the base class Field class .
0
example# 7493
define the method __init__ with arguments self , fields set to an empty ilst , unpacked list args and unpacked dictionary kwargs .
0
example# 7494
if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields [ self . require_all_fields ] , if not , self.require_all_fields [ self . require_all_fields ] is boolean True .
1
'require_all_fields' ||| _STR:0_
example# 7496
for every f in fields ,
0
example# 7497
if _STR:0_ key of the f.error_messages [ f . error_messages ] doesnt exists , assign it the value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary .
1
'incomplete' ||| _STR:0_
example# 7498
if self.require_all_fields [ self . require_all_fields ] is true ,
0
example# 7499
f.required [ f . required ] is boolean False .
0
example# 7500
substitute fields for self.fields [ self . fields ] .
0
example# 7501
define the method __deepcopy__ with arguments self and memo .
0
example# 7502
call the method __deepcopy__ with an argument memo , from the base class of the class MultiValueField , substitute the result for result .
0
example# 7503
for every x in self.fields [ self . fields ] call the method x.__deepcopy__ [ x . __deepcopy__ ] with an argument memo , put the result into a tuple , substitute it for result.fields [ result . fields ] .
0
example# 7504
return result .
0
example# 7505
define the method validate with arguments self and value .
0
example# 7506
do nothing .
0
example# 7507
define the method clean with arguments self and value .
0
example# 7508
clean_data is an empty list .
0
example# 7509
errors is an empty list .
0
example# 7510
if value is false or value is not an instance of list or tuple types ,
0
example# 7511
if value is false or for every v in value every v is contained in self.empty_values [ self . empty_values ] ,
0
example# 7512
if self.required [ self . required ] is true ,
0
example# 7514
if not ,
0
example# 7515
call the function self.compress [ self . compress ] with empty list as an argument , return the result .
0
example# 7516
if not ,
0
example# 7518
for every i and field in enumerated iterable self.fields [ self . fields ] ,
0
example# 7519
try ,
0
example# 7520
substitute i-th element of value for field_value .
0
example# 7521
if IndexError exception is caught ,
0
example# 7522
field_value is None .
0
example# 7523
if field_value is cotained in self.empty_values [ self . empty_values ] ,
0
example# 7524
if self.require_all_fields [ self . require_all_fields ] is boolean true ,
0
example# 7525
if self.required [ self . required ] is boolean true ,
0
example# 7527
otherwise if field.required [ field . required ] is true ,
0
example# 7528
get the value under the _STR:0_ key of the field.error_messages [ field . error_messages ] dictionary , if it is not contained in errors ,
1
'incomplete' ||| _STR:0_
example# 7529
get the value under the _STR:0_ key of the field.error_messages [ field . error_messages ] dictionary , append it to errors .
1
'incomplete' ||| _STR:0_
example# 7530
skip this loop iteration ,
0
example# 7531
try ,
0
example# 7532
call the method field.clean [ field . clean ] with an argument field_value , append the result to clean_data .
0
example# 7533
if ValidationError , renamed to e , is caught ,
0
example# 7534
extend errors list with m for every m in e.error_list [ e . error_list ] , only if m is not in errors .
0
example# 7535
if errors is true ,
0
example# 7536
raise an ValidationError with an argument errors .
0
example# 7537
call the method self.compress [ self . compress ] with an argument clean_data , substitute the result for out .
0
example# 7538
call the method self.validate [ self . validate ] with an argument out .
0
example# 7539
call the method self.run_validators [ self . run_validators ] with an argument out .
0
example# 7540
return out .
0
example# 7541
define the method compress with arguments self and data_list .
0
example# 7542
raise an NotImplementedError with an argument string _STR:0_ .
1
'Subclasses must implement this method.' ||| _STR:0_
example# 7543
define the method has_changed with arguments self , initial and data .
0
example# 7544
if initial is None ,
0
example# 7546
if not ,
0
example# 7547
if initial is not an instance of the list type ,
0
example# 7548
call the method self.widget.decompress [ self . widget . decompress ] with an argument initial , substitute the result for initial .
0
example# 7549
for every field , initial and data in list of tuples tuple containing elements of self.fields [ self . fields ] , initial and data , respectively ,
0
example# 7551
and data , if it evaluates to true , return boolean True .
0
example# 7552
return boolean False .
0
example# 7553
derive the class FilePathField from the base class ChoiceField class .
0
example# 7554
define the method __init__ with 13 arguments : self , path , match set to None , recursive set to boolean False , allow_files set to boolean True , allow_folders set to boolean False , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , unpacked list args , unpacked dictionary kwargs .
1
131 ||| _STR:0_
example# 7555
substitute path , match and recursive for self.path [ self . path ] , self.match [ self . match ] and self.recursive [ self . recursive ] .
0
example# 7556
substitute allow_files and allow_folders for self.allow_files [ self . allow_files ] and self.allow_folders [ self . allow_folders ] .
0
example# 7558
if self.required [ self . required ] is true ,
0
example# 7559
self.choices [ self . choices ] is an empty list .
0
example# 7560
if not ,
0
example# 7562
if self.match [ self . match ] is not None ,
0
example# 7563
compile self.match [ self . match ] regular expression , substitute it for self.match_re [ self . match_re ] .
0
example# 7564
if recursive is true ,
0
example# 7565
for root , dirs and files in sorted list of the directory tree starting from the directory self.path [ self . path ] ,
0
example# 7566
if self.allow_files [ self . allow_files ] is true ,
0
example# 7567
for every f in files ,
0
example# 7568
if self.match [ self . match ] is None or call to the method self.match_re.search [ self . match_re . search ] with an argument f , evaluated to true ,
0
example# 7569
join root and f into a file , substitute it for f .
0
example# 7571
if self.allow_folders [ self . allow_folders ] is true ,
0
example# 7572
for every f in files ,
0
example# 7573
if f equals to string _STR:0_ ,
1
'__pycache__' ||| _STR:0_
example# 7574
skip this loop execution .
0
example# 7575
if self.match [ self . match ] is None or call to the method self.match_re.search [ self . match_re . search ] with an argument f , evaluated to true ,
0
example# 7576
join root and f in path , substitute the result for f .
0
example# 7578
if not ,
0
example# 7579
try ,
0
example# 7580
for f in sorted list of the files in the self.path [ self . path ] directory ,
0
example# 7581
if f equals to string _STR:0_ ,
1
'__pycache__' ||| _STR:0_
example# 7582
skip this loop execution .
0
example# 7583
join self.path [ self . path ] and f in path , substitute the result for full_file .
0
example# 7584
if self.allow_files [ self . allow_files ] is true and full_file is a file , or if self.allow_folders [ self . allow_folders ] is true and full_file is an directory , and only if self.match [ self . match ] is None or return value of the method self.match_re.search [ self . match_re . search ] called with an argument f is true .
0
example# 7586
if OSError exception is caught ,
0
example# 7587
do nothing .
0
example# 7588
substitute self.choices [ self . choices ] for self.widgetchoices [ self . widgetchoices ] .
0
example# 7589
derive the class SplitDateTimeField from the base class MultiValueField class .
0
example# 7590
substitute SplitDateTimeWidget for widget .
0
example# 7591
substitute SplitHiddenDateTimeWidget for hidden_widget .
0
example# 7594
and errors set to the result of self.default_error_messages.copy [ self . default_error_messages . copy ] .
0
example# 7595
if _STR:0_ is contained in kwargs ,
1
'error_messages' ||| _STR:0_
example# 7596
get the value under the _STR:0_ key of the kwargs dictionary , update errors dictionary with it .
1
'error_messages' ||| _STR:0_
example# 7597
get the value under the _STR:0_ key of the kwargs dictionary , substitute it for localize , if the key doesnt exists , substitute the result for localize .
1
'localize' ||| _STR:0_
example# 7600
define the method compress with arguments self and data_list .
0
example# 7601
if data_list is true ,
0
example# 7602
if first element of data_list is contained in self.empty_values [ self . empty_values ] ,
0
example# 7604
if second element of data_list is contained in self.empty_values [ self . empty_values ] ,
0
example# 7606
call the method datetime.datetime.combine [ datetime . datetime . combine ] with unpacked list data_list , substitute the result for result .
0
example# 7607
call the method from_current_timezone with an argument result , return the result .
0
example# 7608
return None .
0
example# 7609
derive the class IPAddressField from the base class CharField class .
0
example# 7613
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class .
0
example# 7614
define the method to_python with arguments self and value .
0
example# 7615
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7616
return an empty string .
0
example# 7617
strip whitespaces from both sides of the value , return the result .
0
example# 7618
derive the class GenericIPAddressField from the base class CharField class .
0
example# 7622
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class .
0
example# 7623
define the method to_python with arguments self and value .
0
example# 7624
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7625
return an empty string .
0
example# 7626
strip whitespaces from both sides of the value , substitute it for value .
0
example# 7627
if value is true and character _STR:0_ is contained in value ,
1
':' ||| _STR:0_
example# 7629
return value .
0
example# 7630
derive the class SlugField from the base class CharField class .
0
example# 7631
default_validators is an list containing validators.validate_slug [ validators . validate_slug ] .
0
example# 7632
define the method clean with arguments self and value .
0
example# 7633
call the self.to_python [ self . to_python ] method with an argument value , strip the result of the whitespaces from the sides , substitute the result for value .
0
example# 7634
call the clean method wiht value argument from the base class of the SlugField class , return the result .
0
example# 7635
from __future__ import unicode_literals into default name space .
0
example# 7636
from collections import OrderedDict into default name space .
0
example# 7637
import module copy .
0
example# 7638
import module datetime .
0
example# 7639
import module warnings .
0
example# 7640
from django.core.exceptions [ django . core . exceptions ] import ValidationError and NON_FIELD_ERRORS into default name space .
0
example# 7641
from django.forms.fields [ django . forms . fields ] import Field and FileField into default name space .
0
example# 7642
from django.forms.utils [ django . forms . utils ] import flatatt , ErrorDict and ErrorList into default name space .
0
example# 7643
from django.forms.widgets [ django . forms . widgets ] import Media , MediaDefiningClass , TextInput and Textarea into default name space .
0
example# 7644
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 7646
from django.utils.html [ django . utils . html ] import conditional_escape and format_html into default name space .
0
example# 7647
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 7648
from django.utils.translation [ django . utils . translation ] import ugettext as _ into default name space .
0
example# 7649
from django.utils [ django . utils ] import six into default name space .
0
example# 7651
define the function pretty_name with an argument name .
0
example# 7652
if name is false ,
0
example# 7653
return an empty string .
0
example# 7654
replace all the occurrences of character _STR:0_ in name with a whitespace , capitalize the first letter and return the result .
1
'_' ||| _STR:0_
example# 7658
sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x .
0
example# 7659
if with_base_fields is true ,
0
example# 7660
for every base in reversed order of bases ,
0
example# 7661
if base has an attribute _STR:0_ .
1
'base_fields' ||| _STR:0_
example# 7662
call the method six.iteritems [ six . iteritems ] with an argument base.base_fields [ base . base_fields ] , convert it to a list and append fields to it , substitute the result for fields .
0
example# 7663
if not ,
0
example# 7664
for every base in reversed order of bases ,
0
example# 7665
if base has an _STR:0_ attribute ,
1
'declared_fields' ||| _STR:0_
example# 7666
call the method six.iteritems [ six . iteritems ] with an argument base.declared_fields [ base . declared_fields ] , convert it to a list and append fields to it , substitute the result for fields .
0
example# 7667
return an instance of OrderedDict class , created with an argument fields .
0
example# 7668
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass .
0
example# 7670
current_fields is an empty list .
0
example# 7671
for every key and value in list created out of the elements of the result of the call to the method attrs.items [ attrs . items ] ,
0
example# 7672
if value is an instance of Field class ,
0
example# 7673
append a tuple with elements key and value to current_fields .
0
example# 7674
remove entry at the key key of the attrs dictionary .
0
example# 7675
sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x .
0
example# 7676
value under the _STR:0_ key of the attrs dictionary is an instance of OrderedDict class , created with an argument current_fields .
1
'declared_fields' ||| _STR:0_
example# 7678
declared_fields is an instance of OrderedDict class .
0
example# 7679
for every base in new_class.__mro__ [ new_class . __mro__ ] in reversed order ,
0
example# 7680
if base has an attribute _STR:0_ ,
1
'declared_fields' ||| _STR:0_
example# 7681
update declared_fields dictionary with entry base.declared_fields [ base . declared_fields ] .
0
example# 7682
call the method base.__dict__.items [ base . __dict__ . items ] , for every attr and value in the result ,
0
example# 7683
if value is None and attr is contained in declared_fields ,
0
example# 7684
remove entry at the attr key of the declared_fields dictionary .
0
example# 7685
substitute declared_fields for new_class.base_fields [ new_class . base_fields ] .
0
example# 7686
substitute declared_fields for new_class.declared_fields [ new_class . declared_fields ] .
0
example# 7687
return new_class .
0
example# 7689
derive the class BaseForm from the base class object .
0
example# 7691
if data is not None or files is not None , self.is_bound [ self . is_bound ] is boolean True , otherwise it is boolean False .
0
example# 7692
if data is true , substitute it for self.data [ self . data ] , if not self.data [ self . data ] is an empty dictionary .
0
example# 7693
if files is true , substitute it for self.files [ self . files ] , if not self.files [ self . files ] is an empty dictionary .
0
example# 7694
substitute auto_id for self.auto_id [ self . auto_id ] .
0
example# 7695
substitute prefix for self.prefix [ self . prefix ] .
0
example# 7696
if initial is true , substitute it for self.initial [ self . initial ] , if not self.files [ self . files ] is an empty dictionary .
0
example# 7697
substitute .error_class for self.error_class [ self . error_class ] .
0
example# 7698
if label_suffix is not None substitute label_suffix for self.label_suffix [ self . label_suffix ] , otherwise substitute return value of the function _ called with an argument _STR:0_ for self.label_suffix [ self . label_suffix ] .
1
':' ||| _STR:0_
example# 7699
substitute empty_permitted for self.empty_permitted [ self . empty_permitted ] .
0
example# 7700
self._errors [ self . _errors ] is None .
0
example# 7701
self._changed_data [ self . _changed_data ] is None .
0
example# 7702
call the function copy.deepcopy [ copy . deepcopy ] with an argument self.base_fields [ self . base_fields ] , substitute the result for self.fields [ self . fields ] .
0
example# 7703
define the method __str__ with an argument self .
0
example# 7704
call the method self.as_table [ self . as_table ] , return the result .
0
example# 7705
define the method __iter__ with an argument self .
0
example# 7706
for every name in self.fields [ self . fields ] ,
0
example# 7707
get the value under the name key of the self dictionary , yield it as the return value of the generator .
0
example# 7709
try ,
0
example# 7710
get the value under the name key of the self.fields [ self . fields ] dictionary , substitute it for field .
0
example# 7711
if KeyError exception is caught ,
0
example# 7712
raise an KeyError with an argument string _STR:0_ , substitute ' % s ' with name and self.__class__.__name__ [ self . __class__ . __name__ ] .
1
"Key %r not found in '%s'" ||| _STR:0_
example# 7713
return an instance of BoundField class , created with arguments self , field and name .
0
example# 7714
property decorator ,
0
example# 7715
define the method errors with an argument self .
0
example# 7716
if self._errors [ self . _errors ] is None ,
0
example# 7717
call the method self.full_clean [ self . full_clean ] .
0
example# 7718
return self._errors [ self . _errors ] .
0
example# 7719
define the method is_valid with an argument self .
0
example# 7720
if self.is_bound [ self . is_bound ] is true and self.errors [ self . errors ] is false , return boolean True , otherwise return boolean False .
0
example# 7722
substitute ' % s ' in string _STR:0_ with self.prefix [ self . prefix ] and field_name and return it , if self.prefix [ self . prefix ] is true , if not return field_name .
1
'%s-%s' ||| _STR:0_
example# 7724
return string _STR:0_ where ' % s ' is replaced with return value of the self.add_prefix [ self . add_prefix ] method called with an argument field_name .
1
'initial-%s' ||| _STR:0_
example# 7726
call the method self.non_field_errors [ self . non_field_errors ] , substitute the result for top_errors .
0
example# 7727
output and hidden_fields are both empty lists .
0
example# 7728
call the method self.fields.items [ self . fields . items ] , for every name and field in return value ,
0
example# 7729
html_class_attr is an empty string .
0
example# 7730
substitute value under the name key for bf .
0
example# 7731
call the method self.error_class [ self . error_class ] with an argument list containing results of the function conditional_escape , called with an argument error , for every error in bf.errors [ bf . errors ] , substitute the result for bf_errors .
0
example# 7732
if bf.is_hidden [ bf . is_hidden ] is true ,
0
example# 7733
if bf_errors is true ,
0
example# 7734
call the function _ with an argument string _STR:0_ , where _STR:1_ is replaced with name , and _STR:2_ is replaced with return value of the force_text function called with an argument e , extend the top_errors with the result .
3
'%(name)s' ||| _STR:1_
'(Hidden field %(name)s) %(error)s' ||| _STR:0_
'%(error)s' ||| _STR:2_
example# 7735
call the function six.text_type [ six . text_type ] with an argument bf , append the result to hidden_fields .
0
example# 7736
if not ,
0
example# 7737
call the method bf.css_classes [ bf . css_classes ] , substitute the result for css_classes .
0
example# 7738
if css_classes is true ,
0
example# 7739
replace `` % s '' from the string _STR:0_ with css_classes , substitute it for html_class_attr .
1
' class="%s"' ||| _STR:0_
example# 7740
if errors_on_separate_row and bf_errors are both true ,
0
example# 7741
call the function force_text with an argument bf_errors , format the error_row string with the result , append it to the output .
0
example# 7742
if bf.label [ bf . label ] is true ,
0
example# 7743
call the function force_text with an argument bf.label [ bf . label ] , use the result as an argument for the call to the function conditional_escape , substitute the result label .
0
example# 7744
call the function bf.label_tag [ bf . label_tag ] with an argument label , if the result is true substitute it for label , otherwise label is an empty string .
0
example# 7745
if not ,
0
example# 7746
label is an empty string .
0
example# 7747
if field.help_text [ field . help_text ] is true ,
0
example# 7748
call the function force_text with an argument field.help_text [ field . help_text ] , format help_text_html with it , substitute the result for help_text .
0
example# 7749
if not ,
0
example# 7750
label is an empty string .
0
example# 7752
if top_errors is true ,
0
example# 7753
call the function force_text with an argument top_errors , format error_row with it , insert it at the beginning of output .
0
example# 7754
if hidden_fields is true ,
0
example# 7755
join hidden_fields elements into a string , without separation , substitute the result for str_hidden .
0
example# 7756
if output is true ,
0
example# 7757
substitute last element of output for last_row .
0
example# 7758
if last_row doesnt ends with row_ender ,
0
example# 7760
append last_row to output .
0
example# 7761
create list out of last_row elements from the start to the last length of row_ender element , append str_hidden and row_ender to it , substitute the result for last element of output .
0
example# 7762
if not ,
0
example# 7763
append str_hidden to output .
0
example# 7764
join elements of output into a string with newline as separator , use it as an argument for the call to the function mark_safe , return it .
0
example# 7765
define the method as_table with an argument self .
0
example# 7767
define the method as_ul with an argument self .
0
example# 7769
define the method as_p with an argument self .
0
example# 7771
define the method non_field_errors with an argument self .
0
example# 7774
substitute the value under the fieldname key of the self.fields [ self . fields ] dictionary for field .
0
example# 7775
call the method self.add_prefix [ self . add_prefix ] with an argument fieldname , substitute it for prefix .
0
example# 7778
if error is not an instance of ValidationError ,
0
example# 7779
error is an instance of ValidationError created with an argument error .
0
example# 7780
if error has an attribute _STR:0_ ,
1
'error_dict' ||| _STR:0_
example# 7781
if field is not None ,
0
example# 7782
raise an TypeError with an argument string _STR:0_ .
1
"The argument `field` must be `None` when the `error`argument contains errors for multiple fields." ||| _STR:0_
example# 7783
if not ,
0
example# 7784
substitute error.error_dict [ error . error_dict ] for error .
0
example# 7785
if not ,
0
example# 7786
error is an dictionary with an initial entry error.error_list [ error . error_list ] for filed if true , or NON_FIELD_ERRORS if not .
0
example# 7787
call the method error.items [ error . items ] , for every field and error_list in the result ,
0
example# 7788
if field is not contained in self.errors [ self . errors ] ,
0
example# 7789
if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields [ self . fields ] ,
0
example# 7790
raise an ValueError with an argument string _STR:0_ , with ' % s ' replaced with self.__class__.__name__ [ self . __class__ . __name__ ] and field , respectively .
1
"'%s' has no field named '%s'." ||| _STR:0_
example# 7791
if field equals NON_FIELD_ERRORS ,
0
example# 7792
call the method self.error_class [ self . error_class ] with an argument error_class as an string _STR:0_ , substitute the result for value under the field key of the self._errors [ self . _errors ] dictionary .
1
'nonfield' ||| _STR:0_
example# 7793
if not ,
0
example# 7794
call the method self.error_class [ self . error_class ] , substitute the result for value under the field key of the self._errors [ self . _errors ] dictionary .
0
example# 7795
extend the value under the field key of the self._errors [ self . _errors ] dictionary with error_list .
0
example# 7796
if field is contained in self.cleaned_data [ self . cleaned_data ] ,
0
example# 7797
delete the entry of self.cleaned_data [ self . cleaned_data ] dictionary under the key field .
0
example# 7799
if code is None ,
0
example# 7800
if field is contained in self.errors [ self . errors ] return boolean True , if not , return boolean False .
0
example# 7801
if field is contained in self.errors [ self . errors ] ,
0
example# 7802
call the method self.errors.as_data [ self . errors . as_data ] , for every error for value under the filed key of the returned dictionary ,
0
example# 7803
if error.code [ error . code ] equals code ,
0
example# 7804
return boolean True .
0
example# 7805
return boolean False .
0
example# 7806
define the method full_clean with an argument self .
0
example# 7807
self._errors [ self . _errors ] is an instance of ErrorDict .
0
example# 7808
if self.is_bound [ self . is_bound ] is false ,
0
example# 7809
return nothing .
0
example# 7810
self.cleaned_data [ self . cleaned_data ] is an empty dictionary .
0
example# 7811
if self.empty_permitted [ self . empty_permitted ] is true and call to the method self.has_changed [ self . has_changed ] evaluates to false ,
0
example# 7812
return nothing .
0
example# 7813
call the method self._clean_fields [ self . _clean_fields ] .
0
example# 7814
call the method self._clean_form [ self . _clean_form ] .
0
example# 7815
call the method self._post_clean [ self . _post_clean ] .
0
example# 7816
define the method _clean_fields with an argument self .
0
example# 7817
call the method self.fields.items [ self . fields . items ] , for every name and field in result ,
0
example# 7819
try ,
0
example# 7820
if field is an instance of FileField ,
0
example# 7821
get the value under the name key of the self.initial [ self . initial ] dictionary , if it exists substitute it for initial , if not substitute field.initial [ field . initial ] for initial .
0
example# 7822
call the method filed.clean [ filed . clean ] with arguments value and initial , substitute the result for value .
0
example# 7823
if not ,
0
example# 7824
call the method field.clean [ field . clean ] with an argument value , substitute the result for value .
0
example# 7825
substitute value for the value under the name key of the self.cleaned_data [ self . cleaned_data ] dictionary .
0
example# 7826
if self has an attribute _STR:0_ , where ' % s ' is replaced with name ,
1
'clean_%s' ||| _STR:0_
example# 7827
get _STR:0_ , where ' % s ' is replaced with name ' attribute of the self object , call the result as an function , substitute the result for value .
1
'clean_%s' ||| _STR:0_
example# 7828
substitute value for the value under the name key of the self.cleaned_data [ self . cleaned_data ] dictionary .
0
example# 7829
if ValidationError renamed to e , exception is caught ,
0
example# 7831
define the method _clean_form with an argument self .
0
example# 7832
try ,
0
example# 7833
call the method self.clean [ self . clean ] , substitute the result for cleaned_data .
0
example# 7834
if ValidationError renamed to e , exception is caught ,
0
example# 7836
if not ,
0
example# 7837
if cleaned_data is not None ,
0
example# 7838
substitute cleaned_data for self.cleaned_data [ self . cleaned_data ] .
0
example# 7839
define the method _post_clean with an argument self .
0
example# 7840
do nothing .
0
example# 7841
define the method clean with an argument self .
0
example# 7842
return self.cleaned_data [ self . cleaned_data ] .
0
example# 7843
define the method has_changed with an argument self .
0
example# 7844
convert self.changed_data [ self . changed_data ] into boolean , return it .
0
example# 7845
property decorator ,
0
example# 7846
define the method changed_data with an argument self .
0
example# 7847
if self._changed_data [ self . _changed_data ] is None ,
0
example# 7848
self._changed_data [ self . _changed_data ] is an empty list .
0
example# 7849
call the method self.fields.items [ self . fields . items ] , for every name and field in the result ,
0
example# 7850
call the method self.add_prefix [ self . add_prefix ] with an argument name , substitute the result for prefixed_name .
0
example# 7852
if field.show_hidden_initial [ field . show_hidden_initial ] is false ,
0
example# 7853
get the value under the name key of the self.initial [ self . initial ] dictionary , if it exists substitute it for initial_value , if not substitute field.initial [ field . initial ] for initial_value .
0
example# 7854
if initial_value is an callable object ,
0
example# 7855
call the function initial_value , substitute the result for initial_value .
0
example# 7856
if not ,
0
example# 7857
call the method self.add_initial_prefix [ self . add_initial_prefix ] with an argument name , substitute the result for initial_prefixed_name .
0
example# 7858
call the method field.hidden_widget [ field . hidden_widget ] , substitute the result for field.hidden_widget [ field . hidden_widget ] .
0
example# 7859
try ,
0
example# 7861
if ValidationError exception is caught ,
0
example# 7862
append name to self._changed_data [ self . _changed_data ] .
0
example# 7863
skip this loop iteration .
0
example# 7865
append name to self._changed_data [ self . _changed_data ] list .
0
example# 7866
return self._changed_data [ self . _changed_data ] .
0
example# 7867
property decorator ,
0
example# 7868
define the method media with an argument self .
0
example# 7869
media is an instance of Media class .
0
example# 7870
call the method self.fields.values [ self . fields . values ] , for every field in result ,
0
example# 7871
append field.widget.media [ field . widget . media ] to media , substitute the result for media .
0
example# 7872
return media .
0
example# 7873
define the method is_multipart with an argument self .
0
example# 7874
call the method self.fields.values [ self . fields . values ] , for every field in result ,
0
example# 7875
if field.widget.needs_multipart_form [ field . widget . needs_multipart_form ] is true ,
0
example# 7876
return boolean True .
0
example# 7877
return boolean False .
0
example# 7878
define the method hidden_fields with an argument self .
0
example# 7879
for field in self if field.is_hidden [ field . is_hidden ] is true , append field to a list , return the resulting list .
0
example# 7880
define the method visible_fields with an argument self .
0
example# 7881
for field in self if field.is_hidden [ field . is_hidden ] is false , append field to a list , return the resulting list .
0
example# 7882
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm .
0
example# 7884
derive the class BoundField from the base class object .
0
example# 7886
substitute form for self.form [ self . form ] .
0
example# 7887
substitute field for self.field [ self . field ] .
0
example# 7888
substitute name for self.name [ self . name ] .
0
example# 7889
call the method form.add_prefix [ form . add_prefix ] with an argument self , substitute the result for self.html_name [ self . html_name ] .
0
example# 7890
call the method form.add_initial_prefix [ form . add_initial_prefix ] with an argument name , substitute the result for self.html_initial_name [ self . html_initial_name ] .
0
example# 7891
call the method form.add_initial_prefix [ form . add_initial_prefix ] with an argument self.auto_id [ self . auto_id ] , substitute the result for self.html_initial_id [ self . html_initial_id ] .
0
example# 7892
if self.field.label [ self . field . label ] is None ,
0
example# 7893
call the method pretty_name with an argument name , substitute the result for self.label [ self . label ] .
0
example# 7894
if not ,
0
example# 7895
substitute self.field.label [ self . field . label ] for self.label [ self . label ] .
0
example# 7896
if field.help_text [ field . help_text ] is true , substitute field.help_text [ field . help_text ] for self.help_text [ self . help_text ] , if not self.help_text [ self . help_text ] is an empty string .
0
example# 7897
define the method __str__ with an argument self .
0
example# 7898
if self.field.show_hidden_initial [ self . field . show_hidden_initial ] is true ,
0
example# 7899
call the method self.as_hidden [ self . as_hidden ] with an argument only_initial set to boolean True , append the result to the result of the method , self.as_widget [ self . as_widget ] , return the resulting string .
0
example# 7900
call the method self.as_widget [ self . as_widget ] , return the result .
0
example# 7901
define the method __iter__ with an argument self .
0
example# 7902
get the value under the _STR:0_ key of the self.field.widget.attrs [ self . field . widget . attrs ] dictionary , if the key exists substitute it for id_ , if not , substitute self.auto_id [ self . auto_id ] for id_ .
1
'id' ||| _STR:0_
example# 7903
if if_is true attrs is an dictionary with initial entry : id_ for _STR:0_ , if not , attrs is an empty dictionary .
1
'id' ||| _STR:0_
example# 7905
yield subwidget , as the result of the generator .
0
example# 7906
define the method __len__ with an argument self .
0
example# 7907
convert result of the method self.__iter__ [ self . __iter__ ] into a list , return its length .
0
example# 7909
convert result of the method self.__iter__ [ self . __iter__ ] into a list , return element at the idx index .
0
example# 7910
property decorator ,
0
example# 7911
define the method errors with an argument self .
0
example# 7912
get the value under the self.name [ self . name ] key of the self.form.errors [ self . form . errors ] dictionary , if the key exists , return it , if not evaluate the method self.form.error_class [ self . form . error_class ] and return the result .
0
example# 7914
if widget is false ,
0
example# 7915
substitute self.field.widget [ self . field . widget ] for widget .
0
example# 7916
if self.field.localize [ self . field . localize ] is true ,
0
example# 7917
widget.is_localized [ widget . is_localized ] is boolean True .
0
example# 7918
if attrs is false , make it an empty dictionary .
0
example# 7919
substitute self.auto_id [ self . auto_id ] for auto_id .
0
example# 7920
if auto_id is true and _STR:0_ is not contained in attrs and _STR:0_ is not contained in widget.attrs [ widget . attrs ] ,
1
'id' ||| _STR:0_
example# 7921
if only_initial is false ,
0
example# 7922
substitute auto_id for value under the _STR:0_ key of the attrs dictionary .
1
'id' ||| _STR:0_
example# 7923
if not ,
0
example# 7924
substitute self.html_initial_id [ self . html_initial_id ] for value under the _STR:0_ key of the attrs dictionary .
1
'id' ||| _STR:0_
example# 7925
if only_initial is false ,
0
example# 7926
substitute self.html_name [ self . html_name ] for name .
0
example# 7927
if not ,
0
example# 7928
substitute self.html_initial_name [ self . html_initial_name ] for name .
0
example# 7936
property decorator ,
0
example# 7937
define the method data with an argument self .
0
example# 7939
define the method value with an argument self .
0
example# 7940
if self.form.is_bound [ self . form . is_bound ] is false ,
0
example# 7941
get the value under the self.name [ self . name ] key of the self.form.initial [ self . form . initial ] dictionary , if it exists , substitute it for data , if not , substitute self.field.initial [ self . field . initial ] for data .
0
example# 7942
if data is an callable object ,
0
example# 7943
call the method data , substitute the result for data .
0
example# 7944
if data is an instance of datetime.datetime [ datetime . datetime ] or datetime.time [ datetime . time ] classes , and supports_microseconds field of self.field.widget [ self . field . widget ] is false ,
0
example# 7946
if not ,
0
example# 7948
call the method self.field.prepare_value [ self . field . prepare_value ] with an argument data , return the result .
0
example# 7950
if contents is false , substitute self.label [ self . label ] for contents .
0
example# 7951
if label_suffix is None ,
0
example# 7952
if self.field.label_suffix [ self . field . label_suffix ] is not None , substitute self.field.label_suffix [ self . field . label_suffix ] for label_suffix , otherwise substitute self.form.label_suffix [ self . form . label_suffix ] for label_suffix .
0
example# 7953
if label_suffix and contents are both true and last element of contents is not contained in the result of the function _ , called with an argument string _STR:0_ .
1
':?.!' ||| _STR:0_
example# 7955
substitute self.field.widget [ self . field . widget ] for widget .
0
example# 7956
get the value under the _STR:0_ key of the widget.attrs [ widget . attrs ] dictionary , if the key exists substitute it for id_ , if not , substitute self.auto_id [ self . auto_id ] for id_ .
1
'id' ||| _STR:0_
example# 7957
if id_ is true ,
0
example# 7958
call the method widget.id_for_label [ widget . id_for_label ] with an argument id_ , substitute the result for id_for_label .
0
example# 7959
if id_for_label is true ,
0
example# 7960
unpack a dictionary with an entry id_for_label for _STR:0_ , map it through attrs mapping if attrs is true , and convert it again to the dictionary , if attrs is false , leave it alone , substitute the result for attrs .
1
'for' ||| _STR:0_
example# 7961
if self.field.required [ self . field . required ] is true and self.form [ self . form ] has an attribute _STR:0_ ,
1
'required_css_class' ||| _STR:0_
example# 7962
if attrs is false , make attrs an empty dictionary .
0
example# 7963
if _STR:0_ is contained in attrs ,
1
'class' ||| _STR:0_
example# 7964
append self.form.required_css_class [ self . form . required_css_class ] to a whitespace character , append it to the value under the _STR:0_ key of the attrs dictionary .
1
'class' ||| _STR:0_
example# 7965
if not ,
0
example# 7966
substitute self.form.required_css_class [ self . form . required_css_class ] for the value under the _STR:0_ key of the attrs dictionary .
1
'class' ||| _STR:0_
example# 7967
if attrs is true , call the function flatatt with an argument attrs , substitute the result for attrs , if not attrs is an empty string .
0
example# 7969
if not ,
0
example# 7970
call the function conditional_escape with an argument contents , substitute the result for contents .
0
example# 7971
call the function mark_safe with an argument contents , return the result .
0
example# 7973
if extra_classes has an attribute _STR:0_ ,
1
'split' ||| _STR:0_
example# 7974
split extra_classes into words , by whitespaces , substitute the result for extra_classes .
0
example# 7975
if extra_classes is not empty put its elements into a set , substitute it for extra_classes , if not extra_classes is an empty set .
0
example# 7976
if self.errors [ self . errors ] is true and self.form [ self . form ] has an attribute _STR:0_ ,
1
'error_css_class' ||| _STR:0_
example# 7977
add self.form.error_css_class [ self . form . error_css_class ] to extra_classes set .
0
example# 7978
if self.field.required [ self . field . required ] is true and self.form [ self . form ] has an attribute _STR:0_ ,
1
'required_css_class' ||| _STR:0_
example# 7979
add self.form.required_css_class [ self . form . required_css_class ] to extra_classes set .
0
example# 7980
join elements of extra_classes into a string separated by whitespaces , return it .
0
example# 7981
property decorator ,
0
example# 7982
define the method is_hidden with an argument self .
0
example# 7983
return self.field.widget.is_hidden [ self . field . widget . is_hidden ] ,
0
example# 7984
property decorator ,
0
example# 7985
define the method auto_id with an argument self .
0
example# 7986
substitute self.form.auto_id [ self . form . auto_id ] for auto_id .
0
example# 7987
if auto_id is true and ' % s ' is contained in result of the call to the function smart_text with an argument auto_id ,
0
example# 7988
call the function smart_text with an argument auto_id , format the result with self.html_name [ self . html_name ] , return it .
0
example# 7989
otherwise if auto_id is true ,
0
example# 7990
return self.html_name [ self . html_name ] .
0
example# 7991
return an empty string .
0
example# 7992
property decorator ,
0
example# 7993
define the method id_for_label with an argument self .
0
example# 7994
substitute self.field.widget [ self . field . widget ] for widget .
0
example# 7995
get the value under the _STR:0_ key of the widget.attrs [ widget . attrs ] dictionary , if the key exists substitute it for id_ , if not , substitute self.auto_id [ self . auto_id ] for id_ .
1
'id' ||| _STR:0_
example# 7996
call the method widget.id_for_label [ widget . id_for_label ] with an argument id_ , return the result .
0
example# 7997
from __future__ import unicode_literals into default name space .
0
example# 7998
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 7999
from django.forms [ django . forms ] import Form into default name space .
0
example# 8000
from django.forms.fields [ django . forms . fields ] import IntegerField and BooleanField into default name space .
0
example# 8001
from django.forms.utils [ django . forms . utils ] import ErrorList into default name space .
0
example# 8002
from django.forms.widgets [ django . forms . widgets ] import HiddenInput into default name space .
0
example# 8004
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 8005
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 8006
from django.utils [ django . utils ] import six into default name space .
0
example# 8007
from django.utils.six.moves [ django . utils . six . moves ] import xrange into default name space .
0
example# 8008
from django.utils.translation [ django . utils . translation ] import ungettext and ugettext as _ into default name space .
0
example# 8009
__all__ is a tuple containing strings _STR:0_ , _STR:1_ and _STR:2_ .
3
'all_valid' ||| _STR:2_
'BaseFormSet' ||| _STR:0_
'formset_factory' ||| _STR:1_
example# 8010
TOTAL_FORM_COUNT is a string _STR:0_ .
1
'TOTAL_FORMS' ||| _STR:0_
example# 8011
INITIAL_FORM_COUNT is a string _STR:0_ .
1
'INITIAL_FORMS' ||| _STR:0_
example# 8012
MIN_NUM_FORM_COUNT is a string _STR:0_ .
1
'MIN_NUM_FORMS' ||| _STR:0_
example# 8013
MAX_NUM_FORM_COUNT is a string _STR:0_ .
1
'MAX_NUM_FORMS' ||| _STR:0_
example# 8014
ORDERING_FIELD_NAME is a string _STR:0_ .
1
'ORDER' ||| _STR:0_
example# 8015
DELETION_FIELD_NAME is a string _STR:0_ .
1
'DELETE' ||| _STR:0_
example# 8016
DEFAULT_MIN_NUM is an integer 0 .
1
0.0 ||| _STR:0_
example# 8017
DEFAULT_MAX_NUM is an integer 1000 .
1
101 ||| _STR:0_
example# 8018
derive the class ManagementForm from the Form base class .
0
example# 8020
value under the TOTAL_FORM_COUNT of the self.base_fields [ self . base_fields ] dictionary is an instance of IntegerField class , created with an argument widget set to HiddenInput .
0
example# 8021
value under the INITIAL_FORM_COUNT of the self.base_fields [ self . base_fields ] dictionary is an instance of IntegerField class , created with an argument widget set to HiddenInput .
0
example# 8026
derive the class BaseFormSet from the object base class .
0
example# 8028
if data is not None or files is not None , self.is_bound [ self . is_bound ] is boolean True , otherwise it is boolean False .
0
example# 8029
if prefix is true , substitute it for self.prefix [ self . prefix ] , otherwise call the method self.get_default_prefix [ self . get_default_prefix ] , and substitute the result for self.prefix [ self . prefix ] .
0
example# 8030
substitute auto_id for self.auto_id [ self . auto_id ] .
0
example# 8031
if data is true , substitute it for self.data [ self . data ] , otherwise self.data [ self . data ] is an empty dictionary .
0
example# 8032
if data is true , substitute it for self.files [ self . files ] , otherwise self.files [ self . files ] is an empty dictionary .
0
example# 8033
substitute initial_id for self.auto_id [ self . auto_id ] .
0
example# 8034
substitute error_class for self.error_class [ self . error_class ] .
0
example# 8035
self._errors [ self . _errors ] is None .
0
example# 8036
self._non_form_errors [ self . _non_form_errors ] is None .
0
example# 8037
define the method __str__ with an argument self .
0
example# 8038
call the method self.as_table [ self . as_table ] , return the result .
0
example# 8039
define the method __iter__ with an argument self .
0
example# 8040
convert self.forms [ self . forms ] into an iterable , return it .
0
example# 8041
define the method __getitem__ with an argument self .
0
example# 8042
return self.forms [ self . forms ] element at the index index .
0
example# 8043
define the method __len__ with an argument self .
0
example# 8044
return the length of self.forms [ self . forms ] .
0
example# 8045
define the method __bool__ with an argument self .
0
example# 8046
return boolean True .
0
example# 8047
define the method __nonzero__ with an argument self .
0
example# 8048
get the type of self object , call the __bool__ method on the result with an argument self , return the result .
0
example# 8049
property decorator ,
0
example# 8050
define the method management_form with an argument self .
0
example# 8051
if self.is_bound [ self . is_bound ] is true ,
0
example# 8053
call the form.is_valid [ form . is_valid ] method , if it evaluates to false ,
0
example# 8055
if not ,
0
example# 8057
return form .
0
example# 8058
define the method total_form_count with an argument self .
0
example# 8059
if self.is_bound [ self . is_bound ] is true ,
0
example# 8060
get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data [ self . management_form . cleaned_data ] dictionary , and self.absolute_max [ self . absolute_max ] , return the result .
0
example# 8061
if not ,
0
example# 8062
call the method self.initial_form_count [ self . initial_form_count ] , return the result initial_forms .
0
example# 8063
get the element with maximal value between initial_forms and self.min_num [ self . min_num ] , add self.extra [ self . extra ] to it , substitute the result for total_forms .
0
example# 8065
substitute initial_forms for total_forms .
0
example# 8067
substitute self.max_num [ self . max_num ] for total_forms .
0
example# 8068
return total_forms .
0
example# 8069
define the method initial_form_count with an argument self .
0
example# 8070
if self.is_bound [ self . is_bound ] is true ,
0
example# 8071
return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data [ self . management_form . cleaned_data ] dictionary .
0
example# 8072
if not ,
0
example# 8073
if self.initial [ self . initial ] is true , substitute the length of self.initial [ self . initial ] for initial_forms , if not , initial_forms is integer 0 .
1
0.0 ||| _STR:0_
example# 8074
return initial_forms .
0
example# 8075
cached_property decorator ,
0
example# 8076
define the method forms with an argument self .
0
example# 8078
return forms .
0
example# 8081
if self.is_bound [ self . is_bound ] is true ,
0
example# 8082
substitute self.data [ self . data ] for value under the _STR:0_ key of the defaults dictionary .
1
'data' ||| _STR:0_
example# 8083
substitute self.files [ self . files ] for value under the _STR:0_ key of the defaults dictionary .
1
'files' ||| _STR:0_
example# 8084
if self.initial [ self . initial ] is true and _STR:0_ key is not contained in kwargs ,
1
'initial' ||| _STR:0_
example# 8085
try ,
0
example# 8086
substitute i-th element of self.initial [ self . initial ] for value under the _STR:0_ key of the defaults dictionary .
1
'initial' ||| _STR:0_
example# 8087
if IndexError exception is caught ,
0
example# 8088
do nothing .
0
example# 8089
if i is greater than , or equal to the result of the call to the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8090
and i is greater than or equal to self.min_num [ self . min_num ] , value under the _STR:0_ key of the defaults dictionary is boolean True .
1
'empty_permitted' ||| _STR:0_
example# 8091
update defaults dictionary with kwargs .
0
example# 8092
call the method self.form [ self . form ] with unpacked dictionary defaults as an argument , substitute it for form .
0
example# 8093
call the method self.add_fields [ self . add_fields ] with arguments form and i ) .
0
example# 8094
return form .
0
example# 8095
property decorator ,
0
example# 8096
define the method initial_forms with an argument self .
0
example# 8097
call the self.initial_form_count [ self . initial_form_count ] method , return the sublist of self.forms [ self . forms ] from the beginning to the previous result as the end index .
0
example# 8098
property decorator ,
0
example# 8099
define the method extra_forms with an argument self .
0
example# 8100
call the self.initial_form_count [ self . initial_form_count ] method , return the sublist of self.forms [ self . forms ] , using previous result as start index to the end .
0
example# 8101
property decorator ,
0
example# 8102
define the method empty_form with an argument self .
0
example# 8104
call the method self.add_fields [ self . add_fields ] with arguments form and None .
0
example# 8105
return form .
0
example# 8106
property decorator ,
0
example# 8107
define the method cleaned_data with an argument self .
0
example# 8108
call the method self.is_valid [ self . is_valid ] , if it evaluates to false ,
0
example# 8109
raise an AttributeError exception with an argument string : _STR:0_ , where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] .
1
"'%s' object has no attribute 'cleaned_data'" ||| _STR:0_
example# 8110
for form in self.forms [ self . forms ] append form.cleaned_data [ form . cleaned_data ] to a list , return the resulting list .
0
example# 8111
property decorator ,
0
example# 8112
define the method deleted_forms with an argument self .
0
example# 8113
if call to the method self.is_valid [ self . is_valid ] , evaluates to false or self.can_delete [ self . can_delete ] is boolean false ,
0
example# 8114
return an empty list .
0
example# 8115
if self doesnt have an _STR:0_ attribute ,
1
'_deleted_form_indexes' ||| _STR:0_
example# 8116
self._deleted_form_indexes [ self . _deleted_form_indexes ] is an empty list .
0
example# 8118
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8119
if i is greater than or equal to the result of the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8120
and call to the method form.has_changed [ form . has_changed ] evaluates to false , skip this loop iteration ,
0
example# 8121
call the method self._should_delete_form [ self . _should_delete_form ] with an argument form , if it evaluates to true ,
0
example# 8122
call the method self._deleted_form_indexes.append [ self . _deleted_form_indexes . append ] with an argument i .
0
example# 8123
for i in self._deleted_form_indexes [ self . _deleted_form_indexes ] append i-th element of self.forms [ self . forms ] into a list , return the resulting list .
0
example# 8124
property decorator ,
0
example# 8125
define the method ordered_forms with an argument self .
0
example# 8126
if call to the self.is_valid [ self . is_valid ] method evaluates to false or self.can_order [ self . can_order ] is false ,
0
example# 8127
raise an AttributeError exception with an argument string : _STR:0_ , where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] .
1
"'%s' object has no attribute 'ordered_forms'" ||| _STR:0_
example# 8128
if self doesnt have an _STR:0_ attribute ,
1
'_ordering' ||| _STR:0_
example# 8129
self._ordering [ self . _ordering ] is an empty list .
0
example# 8131
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8132
if i is greater than or equal to the result of the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8133
and call to the method form.has_changed [ form . has_changed ] evaluates to false , skip this loop iteration ,
0
example# 8134
if self.can_delete [ self . can_delete ] is true and call to the method self._should_delete_form [ self . _should_delete_form ] with an argument form , evaluates to true ,
0
example# 8135
skip this loop iteration ,
0
example# 8137
define the function compare_ordering_key with an argument k .
0
example# 8138
if second element of k is None ,
0
example# 8141
call the method self._ordering.sort [ self . _ordering . sort ] with an argument key as compare_ordering_key .
0
example# 8142
for i in self._ordering [ self . _ordering ] append to a list value under the first element of i key of the self.forms [ self . forms ] dictionary , return resulting list .
0
example# 8143
classmethod decorator ,
0
example# 8144
define the method get_default_prefix with an argument cls .
0
example# 8145
return string _STR:0_ .
1
'form' ||| _STR:0_
example# 8146
define the method non_form_errors with an argument self .
0
example# 8147
if self._non_form_errors [ self . _non_form_errors ] is None ,
0
example# 8148
call the method self.full_clean [ self . full_clean ] .
0
example# 8149
return self._non_form_errors [ self . _non_form_errors ] .
0
example# 8150
property decorator ,
0
example# 8151
define the method errors with an argument self .
0
example# 8152
if self._errors [ self . _errors ] is None ,
0
example# 8153
call the method self.full_clean [ self . full_clean ] .
0
example# 8154
return self._errors [ self . _errors ] .
0
example# 8155
define the method total_error_count with an argument self .
0
example# 8156
for every form_errors in self.errors [ self . errors ] sum length of return value of the method self.non_form_errors [ self . non_form_errors ] and length of form_errors , return the result .
0
example# 8157
define the method _should_delete_form with an argument self .
0
example# 8158
get the value under the DELETION_FIELD_NAME key of the form.cleaned_data [ form . cleaned_data ] dictionary , if it exists return it , if not , return boolean False .
0
example# 8159
define the method is_valid with an argument self .
0
example# 8160
if self.is_bound [ self . is_bound ] is false ,
0
example# 8161
return boolean False .
0
example# 8162
forms_valid is True .
0
example# 8163
call self.errors [ self . errors ] .
0
example# 8165
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8166
if self.can_delete [ self . can_delete ] is true ,
0
example# 8167
call the method self._should_delete_form [ self . _should_delete_form ] with an argument , if it evaluates to true ,
0
example# 8168
skip this loop iteration ,
0
example# 8169
call the method form.is_valid [ form . is_valid ] , perform bitwise and with the result and forms_valid as operands , substitute the result for forms_valid .
0
example# 8170
if forms_valid is true and call to the method self.non_form_errors [ self . non_form_errors ] , evaluates to false , return boolean True , otherwise return False .
0
example# 8171
define the method full_clean with an argument self .
0
example# 8172
self._errors [ self . _errors ] is an empty list .
0
example# 8173
call the method self.error_class [ self . error_class ] , substitute the result for self._non_form_errors [ self . _non_form_errors ] .
0
example# 8174
if self.is_bound [ self . is_bound ] is false ,
0
example# 8175
return nothing .
0
example# 8177
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8178
append form.errors [ form . errors ] to self._errors [ self . _errors ] .
0
example# 8179
try ,
0
example# 8180
if self.validate_max [ self . validate_max ] is true , and length of self.deleted_forms [ self . deleted_forms ] subtracted from the return value of the method self.total_form_count [ self . total_form_count ] , is greater than self.max_num [ self . max_num ] , or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data [ self . management_form . cleaned_data ] dictionary , is grater than self.absolute_max [ self . absolute_max ] ,
0
example# 8182
if self.validate_min [ self . validate_min ] is true , and length of self.deleted_forms [ self . deleted_forms ] subtracted from the return value of the method self.total_form_count [ self . total_form_count ] , is smaller than self.min_num [ self . min_num ] ,
0
example# 8184
call the method self.clean [ self . clean ] .
0
example# 8185
if ValidationError , renamed to e , exception is caught ,
0
example# 8186
call the method self.error_class [ self . error_class ] with an argument e.error_list [ e . error_list ] , substitute the result for self._non_form_errors [ self . _non_form_errors ] .
0
example# 8187
define the method clean with an argument self .
0
example# 8188
do nothing .
0
example# 8189
define the method has_changed with an argument self .
0
example# 8190
for every form in self call the method form.has_changed [ form . has_changed ] if any of the results evaluates to true , return boolean True , if not return boolean False .
0
example# 8192
if self.can_order [ self . can_order ] is true ,
0
example# 8193
if index is not None and index is smaller than return value of the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8195
if not ,
0
example# 8197
if self.can_delete [ self . can_delete ] is true ,
0
example# 8199
define the method add_prefix with an argument self .
0
example# 8200
replace ' % s ' in sting _STR:0_ with self.prefix [ self . prefix ] and index , return the result .
1
'%s-%s' ||| _STR:0_
example# 8201
define the method is_multipart with an argument self .
0
example# 8202
if self.forms [ self . forms ] is true ,
0
example# 8203
call the method is_multipart on the first element of self.forms [ self . forms ] , return it .
0
example# 8204
if not ,
0
example# 8205
call the method self.empty_form.is_multipart [ self . empty_form . is_multipart ] , return the result
0
example# 8206
property decorator ,
0
example# 8207
define the method media with an argument self .
0
example# 8208
if self.forms [ self . forms ] is true ,
0
example# 8209
return the media field of the first element of self.forms [ self . forms ] .
0
example# 8210
if not ,
0
example# 8211
return self.empty_form.media [ self . empty_form . media ] .
0
example# 8212
define the method as_table with an argument self .
0
example# 8213
for every form in self call the form.as_table [ form . as_table ] method , join the results in a string , separated by an empty string .
0
example# 8214
join return value of the function six.text_type [ six . text_type ] called with an argument self.management_form [ self . management_form ] and forms into a string , separated by newline , use it as an argument for the call to the function mark_safe , return the result .
0
example# 8215
define the method as_p with an argument self .
0
example# 8216
for every form in self call the form.as_p [ form . as_p ] method , join the results in a string , separated by an empty string .
0
example# 8217
join return value of the function six.text_type [ six . text_type ] called with an argument self.management_form [ self . management_form ] and forms into a string , separated by newline , use it as an argument for the call to the function mark_safe , return the result .
0
example# 8218
define the method as_ul with an argument self .
0
example# 8219
for every form in self call the form.as_ul [ form . as_ul ] method , join the results in a string , separated by an empty string .
0
example# 8220
join return value of the function six.text_type [ six . text_type ] called with an argument self.management_form [ self . management_form ] and forms into a string , separated by newline , use it as an argument for the call to the function mark_safe , return the result .
0
example# 8222
if min_num is None ,
0
example# 8223
substitute DEFAULT_MIN_NUM for min_num ,
0
example# 8224
if max_num is None ,
0
example# 8225
substitute DEFAULT_MAX_NUM for max_num ,
0
example# 8226
sum max_num and DEFAULT_MAX_NUM , substitute the result for absolute_max .
0
example# 8228
create a class class which name is generated by converting _STR:0_ into a string and appending it to form.__name__ [ form . __name__ ] , is derived from the formset base class and with fields contained in attrs , return an instance of the obtained class .
1
'FormSet' ||| _STR:0_
example# 8229
define the function all_valid with an argument formsets .
0
example# 8230
valid is boolean True .
0
example# 8231
for every formset in formsets ,
0
example# 8232
call the function formset.is_valid [ formset . is_valid ] , if it evaluates to false ,
0
example# 8233
valid is boolean False .
0
example# 8234
return valid .
0
example# 8235
from __future__ import unicode_literals into default name space .
0
example# 8236
from collections import OrderedDict into default name space .
0
example# 8237
import module warnings .
0
example# 8238
django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS and FieldError into default namespace .
0
example# 8239
from django.forms.fields [ django . forms . fields ] import Field and ChoiceField into default name space .
0
example# 8240
from django.forms.forms [ django . forms . forms ] import DeclarativeFieldsMetaclass and BaseForm into default name space .
0
example# 8241
from django.forms.formsets [ django . forms . formsets ] import BaseFormSet and formset_factory into default name space .
0
example# 8242
from django.forms.utils [ django . forms . utils ] import ErrorList into default name space .
0
example# 8243
from django.forms.widgets [ django . forms . widgets ] import SelectMultiple , HiddenInput , MultipleHiddenInput into default namespace .
0
example# 8244
from django.utils [ django . utils ] import six into default name space .
0
example# 8245
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 8246
from django.utils.encoding [ django . utils . encoding ] import smart_text and force_text into default name space .
0
example# 8247
from django.utils.text [ django . utils . text ] import get_text_list and capfirst into default name space .
0
example# 8248
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ and ugettext into default name space .
0
example# 8249
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ ,
5
'ModelForm' ||| _STR:0_
'fields_for_model' ||| _STR:3_
'save_instance' ||| _STR:4_
'model_to_dict' ||| _STR:2_
'BaseModelForm' ||| _STR:1_
example# 8250
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , and _STR:6_ . ALL_FIELDS is a string _STR:7_ .
8
'__all__' ||| _STR:7_
'ALL_FIELDS' ||| _STR:2_
'BaseModelFormSet' ||| _STR:3_
'inlineformset_factory' ||| _STR:6_
'ModelChoiceField' ||| _STR:0_
'modelformset_factory' ||| _STR:4_
'BaseInlineFormSet' ||| _STR:5_
'ModelMultipleChoiceField' ||| _STR:1_
example# 8252
from django.db [ django . db ] import models into default namespace .
0
example# 8253
substitute instance._meta [ instance . _meta ] for opts .
0
example# 8254
substitute form.cleaned_data [ form . cleaned_data ] for cleaned_data .
0
example# 8255
file_field_list is an empty list .
0
example# 8256
for every f in opts.fields [ opts . fields ] ,
0
example# 8257
if f.editable [ f . editable ] is true and f is an instance of models.AutoField [ models . AutoField ] , or f.name [ f . name ] is not contained in cleaned_data ,
0
example# 8258
skip this loop iteration .
0
example# 8259
if fields is not None and f.name [ f . name ] is not contained in fields ,
0
example# 8260
skip this loop iteration .
0
example# 8261
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8262
skip this loop iteration .
0
example# 8263
if f is an instance of models.FileField [ models . FileField ] ,
0
example# 8264
append f to file_field_list .
0
example# 8265
if not ,
0
example# 8267
for every f in file_field_list ,
0
example# 8269
return instance .
0
example# 8271
if construct is true ,
0
example# 8273
substitute instance._meta [ instance . _meta ] for opts .
0
example# 8274
if form.errors [ form . errors ] is true ,
0
example# 8275
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with opts.object_name [ opts . object_name ] and fail_message , respectively .
1
"The %s could not be %s because the data didn't validate." ||| _STR:0_
example# 8277
substitute form.cleaned_data [ form . cleaned_data ] for cleaned_data .
0
example# 8278
append opts.virtual_fields [ opts . virtual_fields ] to opts.many_to_many [ opts . many_to_many ] , for every f in the result ,
0
example# 8279
if f doesnt has an _STR:0_ attribute ,
1
'save_form_data' ||| _STR:0_
example# 8280
skip this loop iteration .
0
example# 8281
if fields is true and f.name [ f . name ] is not contained in fields ,
0
example# 8282
skip this loop iteration .
0
example# 8283
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8284
skip this loop iteration .
0
example# 8285
if f.name [ f . name ] is contained in cleaned_data ,
0
example# 8287
if commit is true ,
0
example# 8288
call the method instance.save [ instance . save ] .
0
example# 8290
if not ,
0
example# 8292
return instance .
0
example# 8294
from django.db.models.fields.related [ django . db . models . fields . related ] import ManyToManyField .
0
example# 8295
substitute instance._meta [ instance . _meta ] for opts .
0
example# 8296
data is an empty dictionary .
0
example# 8297
concatenate opts.concrete_fields [ opts . concrete_fields ] , opts.virtual_fields [ opts . virtual_fields ] and opts.many_to_many [ opts . many_to_many ] , for every f in the result ,
0
example# 8298
get _STR:0_ attribute from object f , if it doesnt exists or its true ,
1
'editable' ||| _STR:0_
example# 8299
skip this loop iteration .
0
example# 8300
if fields is true and f.name [ f . name ] is not contained in fields ,
0
example# 8301
skip this loop iteration .
0
example# 8302
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8303
skip this loop iteration .
0
example# 8304
if f is an instance of ManyToManyField ,
0
example# 8305
if instance.pk [ instance . pk ] is None ,
0
example# 8306
value under f.name [ f . name ] key of the dta dictionary is an empty list .
0
example# 8307
if not ,
0
example# 8308
call the method f.value_from_object [ f . value_from_object ] with an argument instance , substitute the result for qs .
0
example# 8309
if qs._result_cache [ qs . _result_cache ] is not None ,
0
example# 8310
for every item in qu append item.pk [ item . pk ] to a list , substitute resulting list for value under f.name [ f . name ] key of the data dictionary .
0
example# 8311
if not ,
0
example# 8313
if not ,
0
example# 8314
call the method f.value_from_object [ f . value_from_object ] with an argument instance , substitute the result for value under the f.name [ f . name ] key of the data dictionary .
0
example# 8315
return data .
0
example# 8317
field_list is an empty list .
0
example# 8318
ignored is an empty list .
0
example# 8319
substitute model._meta [ model . _meta ] for opts .
0
example# 8320
from django.db.models.fields [ django . db . models . fields ] import Field as ModelField .
0
example# 8321
if f is an instance of ModelFiled , for every f in opts.virtual_fields [ opts . virtual_fields ] , append f to a list , substitute the resulting list for sortable_virtual_fields .
0
example# 8322
concatenate opts.concrete_fields [ opts . concrete_fields ] , sortable_virtual_fields and opts.many_to_many [ opts . many_to_many ] , for every f in sorted result ,
0
example# 8323
get _STR:0_ attribute from object f , if it doesnt exists or its true ,
1
'editable' ||| _STR:0_
example# 8324
skip this loop iteration .
0
example# 8325
if fields is not None and f.name [ f . name ] is not contained in fields ,
0
example# 8326
skip this loop iteration .
0
example# 8327
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8328
skip this loop iteration .
0
example# 8329
kwargs is an empty dictionary ,
0
example# 8330
if widgets is true and f.name [ f . name ] is contained in widgets ,
0
example# 8331
substitute value under the f.name [ f . name ] key of the widgets dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'widget' ||| _STR:0_
example# 8332
if localized_fields equals ALL_FIELDS , or if localized_fields is true and f.name [ f . name ] is contained in localized_fields ,
0
example# 8333
value under _STR:0_ key of kwargs dictionary is boolean True .
1
'localize' ||| _STR:0_
example# 8334
if labels is true and f.name [ f . name ] is contained in labels ,
0
example# 8335
substitute value under the f.name [ f . name ] key of the labels dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'label' ||| _STR:0_
example# 8336
if help_texts is true and f.name [ f . name ] is contained in help_texts ,
0
example# 8337
substitute value under the f.name [ f . name ] key of the help_texts dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'help_text' ||| _STR:0_
example# 8338
if error_messages is true and f.name [ f . name ] is contained in error_messages ,
0
example# 8339
substitute value under the f.name [ f . name ] key of the error_messages dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'error_messages' ||| _STR:0_
example# 8340
if formfield_callback is None ,
0
example# 8341
call the method f.formfield [ f . formfield ] with an argument , unpacked dictionary kwargs , substitute the result for formfield .
0
example# 8342
otherwise if formfield_callback is not callable object ,
0
example# 8343
raise an TypeError with an string _STR:0_ .
1
'formfield_callback must be a function or callable' ||| _STR:0_
example# 8344
if not ,
0
example# 8346
if formfield is true ,
0
example# 8348
if not ,
0
example# 8349
append f.name [ f . name ] to ignored list .
0
example# 8350
field_dict is an instance of OrderedDict class , created with an argument field_list .
0
example# 8351
if fields is true ,
0
example# 8353
return field_dict .
0
example# 8354
derive the class ModelFormOptions from object base class .
0
example# 8355
define the method __init__ with arguments : self and options set to None .
0
example# 8356
get _STR:0_ attribute from the options object , if it exists substitute it for self.model [ self . model ] , if not self.model [ self . model ] is None .
1
'model' ||| _STR:0_
example# 8357
get _STR:0_ attribute from the options object , if it exists substitute it for self.fields [ self . fields ] , if not self.fields [ self . fields ] is None .
1
'fields' ||| _STR:0_
example# 8358
get _STR:0_ attribute from the options object , if it exists substitute it for self.exclude [ self . exclude ] , if not self.exclude [ self . exclude ] is None .
1
'exclude' ||| _STR:0_
example# 8359
get _STR:0_ attribute from the options object , if it exists substitute it for self.widgets [ self . widgets ] , if not self.widgets [ self . widgets ] is None .
1
'widgets' ||| _STR:0_
example# 8360
get _STR:0_ attribute from the options object , if it exists substitute it for self.localized_fields [ self . localized_fields ] , if not self.localized_fields [ self . localized_fields ] is None .
1
'localized_fields' ||| _STR:0_
example# 8361
get _STR:0_ attribute from the options object , if it exists substitute it for self.labels [ self . labels ] , if not self.labels [ self . labels ] is None .
1
'labels' ||| _STR:0_
example# 8362
get _STR:0_ attribute from the options object , if it exists substitute it for self.help_texts [ self . help_texts ] , if not self.help_texts [ self . help_texts ] is None .
1
'help_texts' ||| _STR:0_
example# 8363
get _STR:0_ attribute from the options object , if it exists substitute it for self.error_messages [ self . error_messages ] , if not self.error_messages [ self . error_messages ] is None .
1
'error_messages' ||| _STR:0_
example# 8364
derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class .
0
example# 8366
remove entry under the _STR:0_ key of the attrs dictionary , if it exists substitute if for formfield_callback , if not formfield_callback is None .
1
'formfield_callback' ||| _STR:0_
example# 8368
if bases equals a tuple with an element : class BaseModelForm .
0
example# 8369
return new_class .
0
example# 8370
instantiate class ModelFormOptions with argument : attribute _STR:0_ of the new_class object . if it exists or None , if not , assign the result to opts and new_class._meta [ new_class . _meta ] .
1
'Meta' ||| _STR:0_
example# 8372
get opt attribute of the opts object , substitute it for value .
0
example# 8373
if value is an instance of six.string_types [ six . string_types ] and value is not equal to ALL_FIELDS ,
0
example# 8374
msg is a string _STR:0_ , where _STR:1_ is replaced , with new_class.__name__ [ new_class . __name__ ] , _STR:2_ is replaced with opt and _STR:3_ is replaced with value .
4
'%(model)s' ||| _STR:1_
'%(value)s' ||| _STR:3_
"%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?" ||| _STR:0_
'%(opt)s' ||| _STR:2_
example# 8375
raise an TypeError exception with an argument msg .
0
example# 8376
if opts.model [ opts . model ] is true ,
0
example# 8377
if opts.fields [ opts . fields ] is None and opts.exclude [ opts . exclude ] is None ,
0
example# 8378
raise an ImproperlyConfigured exception with an argument string _STR:0_or the _STR:1_ attribute is prohibited ; form % s needs updating . `` , where ' % s ' is replaced with name .
2
"Creating a ModelForm without either the 'fields' attribute, " ||| _STR:0_
'exclude' ||| _STR:1_
example# 8379
if opts.fields [ opts . fields ] equals ALL_FIELDS ,
0
example# 8380
opts.fields [ opts . fields ] is None .
0
example# 8382
for every k and v in return value of the function six.iteritems [ six . iteritems ] called with an argument fields , if n is false , append it to a list , substitute the resulting list for none_model_fields .
0
example# 8383
missing_fields is difference between set containing none_model_fields and set containing result of the method , new_class.declared_fields.keys [ new_class . declared_fields . keys ] .
0
example# 8384
if missing_fields is true ,
0
example# 8385
message is an string _STR:0_ .
1
'Unknown field(s) (%s) specified for %s' ||| _STR:0_
example# 8386
join missing_fields into a string separated by string _STR:0_ , use it and opts.model.__name__ [ opts . model . __name__ ] to format message , substitute the result for message .
1
', ' ||| _STR:0_
example# 8387
raise an FieldError exception with an argument message .
0
example# 8388
update fields dictionary with new_class.declared_fields [ new_class . declared_fields ] .
0
example# 8389
if not ,
0
example# 8390
substitute new_class.declared_fields [ new_class . declared_fields ] for fields .
0
example# 8391
substitute fields for new_class.base_fields [ new_class . base_fields ] .
0
example# 8392
return new_class .
0
example# 8393
derive the class BaseModelForm from the BaseForm base class .
0
example# 8394
define the method __init__ with 10 arguments : self , data set to None , files set to None , auto_id set to string _STR:0_ , prefix set to None , initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False , instance set to None .
2
'id_%s' ||| _STR:0_
101 ||| _STR:1_
example# 8395
substitute self._meta [ self . _meta ] for opts .
0
example# 8396
if opts.model [ opts . model ] is None .
0
example# 8397
raise an ValueError with an argument string _STR:0_ .
1
'ModelForm has no model class specified.' ||| _STR:0_
example# 8398
if instance is None ,
0
example# 8399
call the method opts.model [ opts . model ] , substitute the result for self.instance [ self . instance ] .
0
example# 8400
object_data is an empty dictionary .
0
example# 8401
if not ,
0
example# 8402
substitute instance for self.instance [ self . instance ] .
0
example# 8404
if initial is not None ,
0
example# 8405
update object_data dictionary with initial .
0
example# 8406
self._validate_unique [ self . _validate_unique ] is boolean False .
0
example# 8408
for every field_name in self.fields [ self . fields ] ,
0
example# 8409
substitute value under the field_name key of the self.fields [ self . fields ] dictionary for formfield .
0
example# 8410
if formfield has an attribute _STR:0_ ,
1
'queryset' ||| _STR:0_
example# 8411
substitute formfield.limit_choices_to [ formfield . limit_choices_to ] for limit_choices_to .
0
example# 8412
if limit_choices_to is not None ,
0
example# 8413
if limit_choices_to is callable object ,
0
example# 8414
call the function limit_choices_to , substitute the result for limit_choices_to .
0
example# 8415
call the method formfield.queryset.complex_filter [ formfield . queryset . complex_filter ] with an argument limit_choices_to , substitute the result for formfield.queryset [ formfield . queryset ] .
0
example# 8416
define the method _get_validation_exclusions with an argument self .
0
example# 8417
exclude is an empty list .
0
example# 8418
for every f in self.instance._meta.fields [ self . instance . _meta . fields ] ,
0
example# 8419
substitute f.name [ f . name ] for field .
0
example# 8420
if field is not contained in self.fields [ self . fields ] ,
0
example# 8421
append f.name [ f . name ] to exclude .
0
example# 8422
otherwise if self._meta.fields [ self . _meta . fields ] is true and field is not contained in self._meta.fields [ self . _meta . fields ] ,
0
example# 8423
append f.name [ f . name ] to exclude .
0
example# 8424
otherwise if self._meta.exclude [ self . _meta . exclude ] is true and field is not contained in self._meta.exclude [ self . _meta . exclude ] ,
0
example# 8425
append f.name [ f . name ] to exclude .
0
example# 8426
otherwise if field is contained in the result of the call to the method self._errors.keys [ self . _errors . keys ] ,
0
example# 8427
append f.name [ f . name ] to exclude .
0
example# 8428
if not ,
0
example# 8429
substitute value under the field key of the self.fields [ self . fields ] dictionary for form_field .
0
example# 8430
get the value under the field key of the self.cleaned_data [ self . cleaned_data ] dictionary , if it exists substitute it for field_value , if not field_value is None .
0
example# 8431
if f.blank [ f . blank ] is false and form_field.required [ form_field . required ] is false and field_value is contained in form_field.empty_values [ form_field . empty_values ] ,
0
example# 8432
append f.name [ f . name ] to exclude .
0
example# 8433
return exclude .
0
example# 8434
define the method clean with an argument self .
0
example# 8435
self._validate_unique [ self . _validate_unique ] is boolean True .
0
example# 8436
return self.cleaned_data [ self . cleaned_data ] .
0
example# 8438
substitute self._meta [ self . _meta ] for opts .
0
example# 8439
call the function errors.error_dict.items [ errors . error_dict . items ] , for every field and messages in the result ,
0
example# 8440
if field equals NON_FIELD_ERRORS and opts.error_messages [ opts . error_messages ] is true and NON_FIELD_ERRORS is contained in opts.error_messages [ opts . error_messages ] ,
0
example# 8441
substitute value under the NON_FIELD_ERRORS key of opts.error_messages [ opts . error_messages ] dictionary for error_messages .
0
example# 8442
otherwise if field is contained in self.fields [ self . fields ] ,
0
example# 8443
get the value under the field key of self.fields [ self . fields ] dictionary , substitute error_messages field of the result for error_messages .
0
example# 8444
if not ,
0
example# 8445
skip this loop iteration .
0
example# 8446
for every message in messages ,
0
example# 8447
if message is an instance of ValidationError class and message.code [ message . code ] is contained in error_messages ,
0
example# 8448
substitute error_messages under the message.code [ message . code ] key of error_messages dictionary for message.message [ message . message ] .
0
example# 8450
define the method _post_clean with an argument self .
0
example# 8451
substitute self._meta [ self . _meta ] for opts .
0
example# 8452
call the method self._get_validation_exclusions [ self . _get_validation_exclusions ] , substitute the result for exclude .
0
example# 8453
convert exclude elements to list , substitute it for construct_instance_exclude .
0
example# 8454
call the method self.fields.items [ self . fields . items ] , for every name and field in result ,
0
example# 8455
if field is an instance of InlineForeignKeyField class ,
0
example# 8456
if value under the name key of self.cleaned_data [ self . cleaned_data ] dictionary is not None ,
0
example# 8457
and field _state.adding [ _state . adding ] of value under the name key of self.cleaned_data [ self . cleaned_data ] dictionary is true , append name to construct_instance_exclude list .
0
example# 8458
append name to exclude .
0
example# 8460
try ,
0
example# 8462
if ValidationError , renamed to e , exception is caught ,
0
example# 8463
call the method self._update_errors [ self . _update_errors ] with an argument e .
0
example# 8464
if self._validate_unique [ self . _validate_unique ] is true ,
0
example# 8465
call the method self.validate_unique [ self . validate_unique ] .
0
example# 8466
define the method validate_unique with an argument self .
0
example# 8467
call the method self._get_validation_exclusions [ self . _get_validation_exclusions ] , substitute the result for exclude .
0
example# 8468
try ,
0
example# 8469
call the method self.instance.validate_unique [ self . instance . validate_unique ] with an argument exclude set to exclude .
0
example# 8470
if ValidationError , renamed to e , exception is caught ,
0
example# 8471
call the method self._update_errors [ self . _update_errors ] with an argument e .
0
example# 8473
if self.instance.pk [ self . instance . pk ] is None ,
0
example# 8474
fail_message is a string _STR:0_ .
1
'created' ||| _STR:0_
example# 8475
if not ,
0
example# 8476
fail_message is a string changed ' .
0
example# 8478
save.alters_data [ save . alters_data ] is boolean True .
0
example# 8480
do nothing .
0
example# 8481
define the function modelform_factory with 10 arguments : model , form set to ModelForm , fields set to None , exclude set to None ,
1
101 ||| _STR:0_
example# 8482
attrs is a dictionary with model for _STR:0_ .
1
'model' ||| _STR:0_
example# 8483
if fields is not None ,
0
example# 8484
substitute fields for value under the _STR:0_ key of attrs dictionary .
1
'fields' ||| _STR:0_
example# 8485
if exclude is not None ,
0
example# 8486
substitute exclude for value under the _STR:0_ key of attrs dictionary .
1
'exclude' ||| _STR:0_
example# 8487
if widgets is not None ,
0
example# 8488
substitute widgets for value under the _STR:0_ key of attrs dictionary .
1
'widgets' ||| _STR:0_
example# 8489
if localized_fields is not None ,
0
example# 8490
substitute localized_fields for value under the _STR:0_ key of attrs dictionary .
1
'localized_fields' ||| _STR:0_
example# 8491
if labels is not None ,
0
example# 8492
substitute labels for value under the _STR:0_ key of attrs dictionary .
1
'labels' ||| _STR:0_
example# 8493
if help_texts is not None ,
0
example# 8494
substitute help_texts for value under the _STR:0_ key of attrs dictionary .
1
'help_texts' ||| _STR:0_
example# 8495
if error_messages is not None ,
0
example# 8496
substitute error_messages for value under the _STR:0_ key of attrs dictionary .
1
'error_messages' ||| _STR:0_
example# 8498
if form has an attribute _STR:0_ ,
1
'Meta' ||| _STR:0_
example# 8500
Meta is an instance of class with name _STR:0_ , parent base class and fields attrs .
1
'Meta' ||| _STR:0_
example# 8501
append string _STR:0_ to model.__name__ [ model . __name__ ] , substitute the result for class_name .
1
'Form' ||| _STR:0_
example# 8503
if _STR:0_ attribute of Meta object is None and _STR:1_ attribute of Meta object is None ,
2
'fields' ||| _STR:0_
'exclude' ||| _STR:1_
example# 8504
raise an ImproperlyConfigured with an argument string _STR:0_
1
"Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited." ||| _STR:0_
example# 8506
derive the class BaseModelFormSet from the BaseFormSet base class .
0
example# 8507
model is None .
0
example# 8509
substitute queryset for self.queryset [ self . queryset ] .
0
example# 8510
remove entry under _STR:0_ key of the kwargs dictionary , substitute it for self.initial_extra [ self . initial_extra ] if it exists , if not self.initial_extra [ self . initial_extra ] is None .
1
'initial' ||| _STR:0_
example# 8512
update defaults dictionary with kwargs .
0
example# 8513
call the method __init__ from the base class of the class BaseModelFormSet , with an argument unpacked dictionary defaults .
0
example# 8514
define the method initial_form_count with an argument self .
0
example# 8515
if self.data [ self . data ] and self.files [ self . files ] are both False ,
0
example# 8516
call the method self.get_queryset [ self . get_queryset ] , return the length of the result .
0
example# 8517
call the method initial_form_count from the base class of the class BaseModelFormSet , return the result .
0
example# 8519
if self has an attribute _STR:0_ ,
1
'_object_dict' ||| _STR:0_
example# 8521
return the value under the pk key of self._object_dict [ self . _object_dict ] dictionary .
0
example# 8523
while field.rel [ field . rel ] is not None ,
0
example# 8524
call the method field.rel.get_related_field [ field . rel . get_related_field ] , substitute the result for field .
0
example# 8525
return field.to_python [ field . to_python ] .
0
example# 8527
if self.is_bound [ self . is_bound ] is true and i is smaller than self.initial_form_count [ self . initial_form_count ] ,
0
example# 8528
pk_key is a string _STR:0_ , where ' % s ' is replaced with : result of the method self.add_prefix [ self . add_prefix ] called with an argument i , and self.model._meta.pk.name [ self . model . _meta . pk . name ] .
1
"%s-%s" ||| _STR:0_
example# 8529
substitute the value under the pk_key key of the self.data [ self . data ] dictionary for pk .
0
example# 8530
substitute self.model._meta.pk [ self . model . _meta . pk ] for pk_field .
0
example# 8531
call the method self._get_to_python [ self . _get_to_python ] with an argument pk_field , substitute the result for to_python .
0
example# 8532
call the function to_python with an argument pk , substitute the result for pk .
0
example# 8533
call the method self._existing_object [ self . _existing_object ] with an argument pk , substitute the result for value under the _STR:0_ key of kwargs .
1
'instance' ||| _STR:0_
example# 8534
if i is smaller than result of the method self.initial_form_count [ self . initial_form_count ] and key _STR:0_ is not contained in kwargs ,
1
'instance' ||| _STR:0_
example# 8535
call the method self.get_queryset [ self . get_queryset ] , substitute i-th element of the result for value under the _STR:0_ key of kwargs dictionary .
1
'instance' ||| _STR:0_
example# 8536
if i is greater or equal to the result of the method self.initial_form_count [ self . initial_form_count ] and self.initial_extra [ self . initial_extra ] is true ,
0
example# 8537
try ,
0
example# 8538
subtract result of the method self.initial_form_count [ self . initial_form_count ] from i , use the result as an index to get the element from self.initial_extra [ self . initial_extra ] , substitute it for value under the _STR:0_ key of kwargs dictionary .
1
'initial' ||| _STR:0_
example# 8539
if IndexError exception is caught ,
0
example# 8540
do nothing .
0
example# 8542
define the method get_queryset with an argument self .
0
example# 8543
if self doesnt have _STR:0_ attribute ,
1
'_queryset' ||| _STR:0_
example# 8544
if self.queryset [ self . queryset ] is not None ,
0
example# 8545
substitute self.queryset [ self . queryset ] for qs .
0
example# 8546
if not ,
0
example# 8547
call the method self.model._default_manager.get_queryset [ self . model . _default_manager . get_queryset ] with an argument qs .
0
example# 8548
if qs.ordered [ qs . ordered ] is false ,
0
example# 8549
call the method qs.order_by [ qs . order_by ] with argument self.model._meta.pk.name [ self . model . _meta . pk . name ] , substitute the result for qs .
0
example# 8550
substitute qs for self._queryset [ self . _queryset ] .
0
example# 8551
return self._queryset [ self . _queryset ] .
0
example# 8553
call the method form.save [ form . save ] with an argument commit as commit , return the result .
0
example# 8555
call the method form.save [ form . save ] with an argument commit as commit , return the result .
0
example# 8557
if commit is true ,
0
example# 8558
self.saved_forms [ self . saved_forms ] is an empty list .
0
example# 8560
for every form in self.saved_forms [ self . saved_forms ] ,
0
example# 8563
sum results of method self.save_existing_objects [ self . save_existing_objects ] called with an argument commit and of method self.save_new_objects [ self . save_new_objects ] , called with an argument commit , return the result .
0
example# 8564
save.alters_data [ save . alters_data ] is boolean True .
0
example# 8565
define the method clean with an argument self .
0
example# 8566
call the method self.validate_unique [ self . validate_unique ] .
0
example# 8567
define the method validate_unique with an argument self .
0
example# 8568
all_unique_checks is an empty set .
0
example# 8569
all_date_checks is an empty set .
0
example# 8570
substitute self.deleted_forms [ self . deleted_forms ] for forms_to_delete .
0
example# 8571
for every form in self.forms [ self . forms ] append form to a list , if function form.is_valid [ form . is_valid ] evaluates to true , and form is not contained in forms_to_delete , substitute the resulting list for valid_forms .
0
example# 8572
for every form in valid_forms ,
0
example# 8573
call the method form._get_validation_exclusions [ form . _get_validation_exclusions ] , substitute the result for exclude .
0
example# 8574
call the method form.instance._get_unique_checks [ form . instance . _get_unique_checks ] with an argument exclude as exclude , substitute the result for unique_checks , and date_checks , respectively .
0
example# 8575
all_unique_checks is union of all_unique_checks set and unique_checks set .
0
example# 8576
all_date_checks is union of all_date_checks set and date_checks set .
0
example# 8577
errors is an empty list .
0
example# 8578
for every uclass , unique_check in all_unique_checks ,
0
example# 8579
seen_data is an empty set .
0
example# 8580
for every form in valid_forms ,
0
example# 8581
row_data is an generator object that returns value under the field key of form.cleaned_data [ form . cleaned_data ] dictionary , for every field in unique_check , if field is contained in form.cleaned_data [ form . cleaned_data ] .
0
example# 8582
create a generator that for every d in row_data , if d has an _STR:0_ attribute , returns the result of the call the method d._get_pk_val [ d . _get_pk_val ] , if not return d , put all the generator items into a tuple row_data .
1
'_get_pk_val' ||| _STR:0_
example# 8583
if row_data is true and None is not contained in row_data ,
0
example# 8584
if row_data is contained in seen_data ,
0
example# 8585
call the method self.get_unique_error_message [ self . get_unique_error_message ] with an argument unique_check , append the result to errors .
0
example# 8586
call the method self.error_class [ self . error_class ] with an argument list with a element : result of the method self.get_form_error [ self . get_form_error ] , substitute the result for value under the NON_FIELD_ERRORS key of the form._errors [ form . _errors ] dictionary .
0
example# 8587
for every field in unique_check ,
0
example# 8588
if field is contained in form.cleaned_data [ form . cleaned_data ] ,
0
example# 8589
delete the form.cleaned_data [ form . cleaned_data ] dictionary entry under the field key .
0
example# 8590
add row_data to seen_data set .
0
example# 8591
for every date_check in all_date_checks ,
0
example# 8592
seen_data is an empty set .
0
example# 8593
substitute date_check elements to uclass , lookup , field and unique_for , respectively .
0
example# 8594
for every form in valid_forms ,
0
example# 8595
if form.cleaned_data [ form . cleaned_data ] is true and value under the field key of form.cleaned_data [ form . cleaned_data ] dictionary is not None ,
0
example# 8596
and value under the unique_for key of form.cleaned_data [ form . cleaned_data ] dictionary is not None , if lookup equals a string _STR:0_ ,
1
'date' ||| _STR:0_
example# 8597
substitute value under the unique_for key of form.cleaned_data [ form . cleaned_data ] dictionary for date .
0
example# 8599
if not ,
0
example# 8600
date_data is a tuple with an entry : attribute lookup from the value under the unique_for key of the form.cleaned_data [ form . cleaned_data ] dictionary .
0
example# 8601
create a tuple out of elements under the key field of the form.cleaned_data [ form . cleaned_data ] dictionary , add elements of date_data to it , substitute it for data .
0
example# 8602
if data is contained in seen_data ,
0
example# 8603
call the method self.get_date_error_message [ self . get_date_error_message ] with an argument date_check , append the result to errors .
0
example# 8604
call the method self.error_class [ self . error_class ] with an argument list with one element , return value of the method self.get_form_error [ self . get_form_error ] , substitute the result for the value under the NON_FIELD_ERRORS key of form._errors [ form . _errors ] dictionary .
0
example# 8605
delete entry from form.cleaned_data [ form . cleaned_data ] dictionary under the field key .
0
example# 8606
add data to seen_data set .
0
example# 8607
if errors is true ,
0
example# 8608
raise an ValidationError exception with an argument errors .
0
example# 8611
call the function ugettext with an argument string _STR:0_ , where _STR:1_ is replaced with first element of unique_check , return the result .
2
'%(field)s' ||| _STR:1_
"Please correct the duplicate data for %(field)s." ||| _STR:0_
example# 8612
if not ,
0
example# 8615
call the function ugettext with an argument string _STR:0_ , where _STR:1_ is replaced with third element of data_check , _STR:2_ is replaced with fourth element of date_check and _STR:3_ is replaced with result of the function , six.text_type [ six . text_type ] called with second element of date_check as an argument , return the result .
4
"Please correct the duplicate data for %(field_name)s which must be unique for, the %(lookup)s in %(date_field)s." ||| _STR:0_
'%(field_name)s' ||| _STR:1_
'%(date_field)s' ||| _STR:2_
'%(lookup)s' ||| _STR:3_
example# 8616
define the method get_form_error with an argument self .
0
example# 8617
call the function ugettext with an argument string _STR:0_ , return the result .
1
"Please correct the duplicate values below." ||| _STR:0_
example# 8619
self.changed_objects [ self . changed_objects ] is an empty list .
0
example# 8620
self.deleted_objects [ self . deleted_objects ] is an empty list .
0
example# 8621
if self.initial_forms [ self . initial_forms ] is false ,
0
example# 8622
return an empty list .
0
example# 8623
saved_instances is an empty list .
0
example# 8624
substitute self.deleted_forms [ self . deleted_forms ] for forms_to_delete .
0
example# 8625
for every form in self.initial_forms [ self . initial_forms ] ,
0
example# 8626
substitute form.instance [ form . instance ] for obj .
0
example# 8627
if form is contained in forms_to_delete ,
0
example# 8628
if obj.pk [ obj . pk ] is None ,
0
example# 8629
skip this loop iteration .
0
example# 8630
append obj to self.deleted_objects [ self . deleted_objects ] list .
0
example# 8631
if commit is true ,
0
example# 8632
call the method obj.delete [ obj . delete ] .
0
example# 8633
otherwise if form.has_changed [ form . has_changed ] method evaluates to true ,
0
example# 8636
if commit is false ,
0
example# 8637
append form to self.saved_forms [ self . saved_forms ] .
0
example# 8638
return saved_instances .
0
example# 8640
self.new_objects [ self . new_objects ] is an empty list .
0
example# 8641
for every form in self.extra_forms [ self . extra_forms ] ,
0
example# 8642
if function form.has_changed [ form . has_changed ] evaluates to false ,
0
example# 8643
skip this loop iteration .
0
example# 8644
if self.can_delete [ self . can_delete ] is true and call to the function self._should_delete_form [ self . _should_delete_form ] with an argument form evaluates to true ,
0
example# 8645
skip this loop iteration .
0
example# 8647
if commit is false ,
0
example# 8648
append form to self.saved_forms [ self . saved_forms ] .
0
example# 8649
return self.new_objects [ self . new_objects ] .
0
example# 8651
from django.db.models [ django . db . models ] import AutoField , OneToOneField and ForeignKey .
0
example# 8652
assign self.model._meta.pk [ self . model . _meta . pk ] to self._pk_field [ self . _pk_field ] and pk .
0
example# 8653
define the method pk_is_not_editable with an argument pk .
0
example# 8654
if pk.editable [ pk . editable ] is true , or pk.auto_created [ pk . auto_created ] is true or pk is an instance of AutoField class , or if pk.rel [ pk . rel ] is true ,
0
example# 8655
and pk.rel.parent_link [ pk . rel . parent_link ] is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk [ pk . rel . to . _meta . pk ] evaluates to true , if function pk_is_not_editable called with an argument pk evaluates to true , or pk.name [ pk . name ] is not contained in form.fields [ form . fields ] ,
0
example# 8656
if form.is_bound [ form . is_bound ] is true ,
0
example# 8657
substitute form.instance.pk [ form . instance . pk ] for pk_value .
0
example# 8658
if not ,
0
example# 8659
try ,
0
example# 8660
if index is not None ,
0
example# 8661
call the method self.get_queryset [ self . get_queryset ] , substitute field pk under the result at the index index for pk_value .
0
example# 8662
if not ,
0
example# 8663
pk_value is None .
0
example# 8664
if IndexError exception is caught ,
0
example# 8665
pk_value is None .
0
example# 8666
if pk is an instance of OneToOneField or ForeignKey classes ,
0
example# 8667
call the method pk.rel.to._default_manager.get_queryset [ pk . rel . to . _default_manager . get_queryset ] , substitute the result for qs .
0
example# 8668
if not ,
0
example# 8669
call the method self.model._default_manager.get_queryset [ self . model . _default_manager . get_queryset ] with an argument qs .
0
example# 8670
call the method qs.using [ qs . using ] with an argument form.instance._state.db [ form . instance . _state . db ] , substitute the result for qs .
0
example# 8671
if form._meta.widgets [ form . _meta . widgets ] is true ,
0
example# 8672
get the value under self._pk_field.name [ self . _pk_field . name ] key of form._meta.widgets [ form . _meta . widgets ] dictionary , if it exists substitute it for widget , if not , widget is an instance of HiddenInput class .
0
example# 8673
if not ,
0
example# 8674
widget is an instance of HiddenInput class
0
example# 8677
define the function modelformset_factory with 18 arguments : model , form set to ModelForm , formfield_callback set to None ,
1
181 ||| _STR:0_
example# 8678
get _STR:0_ attribute from form object , if it exists substitute it for meta , if not meta is None .
1
'Meta' ||| _STR:0_
example# 8679
if meta is None ,
0
example# 8680
meta is an instance of a class named _STR:0_ , derived from the object base class , without any fields .
1
'Meta' ||| _STR:0_
example# 8681
if _STR:0_ attribute of meta is None , or if it doesnt exists if fields is None and if _STR:1_ attribute of meta is None , or if it doesnt exists if exclude is None .
2
'fields' ||| _STR:0_
'exclude' ||| _STR:1_
example# 8682
raise an ImproperlyConfigured with an argument string _STR:0_
1
"Calling modelformset_factory without defining 'fields' or 'exclude', explicitly is prohibited." ||| _STR:0_
example# 8683
call the function modelform_factory with 10 arguments : model , form as form , fields as fields , exclude as exclude , formfield_callback as formfield_callback , widgets as widgets , localized_fields as localized_fields , labels as labels , help_texts as help_texts and error_messages as error_messages , substitute the result for form .
1
101 ||| _STR:0_
example# 8684
call the function formset_factory with 10 arguments : form , formset , extra as extra , min_num as min_num , max_num as max_num , can_order as can_order , can_delete as can_delete , validate_min as validate_min , validate_max as validate_max , substitute the result for form .
1
101 ||| _STR:0_
example# 8685
substitute model for FormSet.model [ FormSet . model ] .
0
example# 8686
return FormSet .
0
example# 8687
derive the class BaseInlineFormSet from the BaseModelFormSet base class .
0
example# 8689
if instance is None ,
0
example# 8690
call the method self.fk.rel.to [ self . fk . rel . to ] , substitute the result for self.instance [ self . instance ] .
0
example# 8691
if not ,
0
example# 8692
substitute instance for self.instance [ self . instance ] .
0
example# 8693
substitute save_as_new for self.save_as_new [ self . save_as_new ] .
0
example# 8694
if queryset is None ,
0
example# 8695
substitute self.model._default_manager [ self . model . _default_manager ] for queryset .
0
example# 8696
if self.instance.pk [ self . instance . pk ] is not None ,
0
example# 8697
call the method queryset.filter [ queryset . filter ] with an argument unpacked dictionary containing self.instance [ self . instance ] for self.fk.name [ self . fk . name ] , substitute the result for qs .
0
example# 8698
if not ,
0
example# 8699
call the method queryset.none [ queryset . none ] , substitute it for qs .
0
example# 8701
define the method initial_form_count with an argument self .
0
example# 8702
if self.save_as_new [ self . save_as_new ] is true ,
0
example# 8703
return integer 0 .
1
0.0 ||| _STR:0_
example# 8704
call the method initial_form_count from the base class of the class BaseInlineFormSet , return the result .
0
example# 8707
if self.save_as_new [ self . save_as_new ] is true ,
0
example# 8708
call the method form.add_prefix [ form . add_prefix ] with an argument self._pk_field.name [ self . _pk_field . name ] , use the result as an key to get the value of the form.data [ form . data ] dictionary , assign it value None .
0
example# 8709
call the method form.add_prefix [ form . add_prefix ] with an argument self.fk.name [ self . fk . name ] , use the result as an key to get the value of the form.data [ form . data ] dictionary , assign it value None .
0
example# 8710
use return value of the self.fk.get_attname [ self . fk . get_attname ] as the name of the attribute of form.instance [ form . instance ] object to set , set it to self.instance.pk [ self . instance . pk ] .
0
example# 8711
return form .
0
example# 8712
classmethod decorator ,
0
example# 8713
define the method get_default_prefix with an argument cls .
0
example# 8714
from django.db.models.fields.related [ django . db . models . fields . related ] import RelatedObject into default namespace .
0
example# 8717
call the method form.save [ form . save ] , with an argument commit set to boolean False , substitute the result for obj .
0
example# 8718
get self.instance [ self . instance ]
0
example# 8719
get attribute _STR:0_ of the pk_value object , if it doesnt exists use pk_value , set to it self.fk.get_attname [ self . fk . get_attname ] return value attribute , of the obj object .
1
'pk' ||| _STR:0_
example# 8720
if commit is true ,
0
example# 8721
call the method obj.save [ obj . save ] .
0
example# 8724
return obj .
0
example# 8727
if self._pk_field [ self . _pk_field ] equals self.fk [ self . fk ] ,
0
example# 8728
substitute self._pk_field.name [ self . _pk_field . name ] for name .
0
example# 8729
kwargs is a dictionary with boolean True for _STR:0_ .
1
'pk_field' ||| _STR:0_
example# 8730
if not ,
0
example# 8731
substitute self.fk.name [ self . fk . name ] for name .
0
example# 8732
kwargs is a dictionary with an entry : attribute _STR:0_ of the object under the name key of the form.fields [ form . fields ] dictionary for _STR:0_ , if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name [ self . fk . verbose_name ] for _STR:0_ .
1
'label' ||| _STR:0_
example# 8733
if self.fk.rel.field_name [ self . fk . rel . field_name ] is not equal to self.fk.rel.to._meta.pk.name [ self . fk . rel . to . _meta . pk . name ] ,
0
example# 8734
substitute self.fk.rel.field_name [ self . fk . rel . field_name ] for value under the _STR:0_ key of the kwargs dictionary .
1
'to_field' ||| _STR:0_
example# 8736
if form._meta.fields [ form . _meta . fields ] is true ,
0
example# 8737
if form._meta.fields [ form . _meta . fields ] is an instance of tuple type ,
0
example# 8738
form._meta.fields [ form . _meta . fields ] is a list created out of form._meta.fields [ form . _meta . fields ] elements .
0
example# 8739
append self.fk.name [ self . fk . name ] to form._meta.fields [ form . _meta . fields ] .
0
example# 8741
unique_check is a list with elements field , for every field in unique_check if field is not equal to self.fk.name [ self . fk . name ] .
0
example# 8742
call the method get_unique_error_message from the base class of the class BaseInlineFormSet , with an argument unique_check , return the result .
0
example# 8744
from django.db.models [ django . db . models ] import ForeignKey .
0
example# 8745
substitute model._meta [ model . _meta ] for opts .
0
example# 8746
if fk_name is true ,
0
example# 8747
fks_to_parent is a list containing f , for every f in opts.fields [ opts . fields ] if f.name [ f . name ] equals fk_name .
0
example# 8748
if length of fks_to_parent equals integer 1 .
1
1.1 ||| _STR:0_
example# 8749
substitute first element of fks_to_parent for fk .
0
example# 8750
if fk is not an instance of ForeignKey class , or fk.rel.to [ fk . rel . to ] is not equal to parent_model , and fk.rel.to [ fk . rel . to ] is not contained in result of the call to the method parent_model._meta.get_parent_list [ parent_model . _meta . get_parent_list ] .
0
example# 8751
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with , fk_name , parent_model._meta.app_label [ parent_model . _meta . app_label ] and parent_model._meta.object_name [ parent_model . _meta . object_name ] , respectively .
1
"fk_name '%s' is not a ForeignKey to '%s.%'." ||| _STR:0_
example# 8752
otherwise if length of fks_to_parent is zero ,
0
example# 8753
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with , model._meta.app_label [ model . _meta . app_label ] , model._meta.object_name [ model . _meta . object_name ] , fk_name , respectively .
1
"'%s.%s' has no field named '%s'." ||| _STR:0_
example# 8754
if not ,
0
example# 8755
fks_to_parent is a list containing f for every f in opts.fields [ opts . fields ] , only if f is an instance of ForeignKey , and , if f.rel.toequals [ f . rel . toequals ] parent_model or f.rel.to [ f . rel . to ] is contained in result of the call to the method parent_model._meta.get_parent_list [ parent_model . _meta . get_parent_list ] .
0
example# 8757
substitute first element of fks_to_parent for fk .
0
example# 8758
otherwise if length of fks_to_parent is zero ,
0
example# 8759
if can_fail is true ,
0
example# 8760
return nothing .
0
example# 8761
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with , model._meta.app_label [ model . _meta . app_label ] , model._meta.object_name [ model . _meta . object_name ] , parent_model._meta.app_label [ parent_model . _meta . app_label ] , parent_model._meta.object_name [ parent_model . _meta . object_name ] , respectively .
1
"'%s.%s' has no ForeignKey to '%s.%s'." ||| _STR:0_
example# 8762
if not ,
0
example# 8763
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with , model._meta.app_label [ model . _meta . app_label ] , model._meta.object_name [ model . _meta . object_name ] , parent_model._meta.app_label [ parent_model . _meta . app_label ] , parent_model._meta.object_name [ parent_model . _meta . object_name ] , respectively .
1
"'%s.%s' has more than one ForeignKey to '%s.%s'." ||| _STR:0_
example# 8764
return fk .
0
example# 8765
define the function inlineformset_factory with 20 arguments : parent_model , model , form set to ModelForm ,
1
202 ||| _STR:0_
example# 8767
if fk.unique [ fk . unique ] is boolean true ,
0
example# 8768
max_num is integer 1 .
1
1.1 ||| _STR:0_
example# 8769
kwargs is a dictionary with 17 entries : form for _STR:0_ , formfield_callback for _STR:1_ , formset for _STR:2_ , extra for _STR:3_ , can_delete for _STR:4_ , can_order for _STR:5_ , fields for _STR:6_ , exclude for _STR:7_ , min_num for _STR:8_ , max_num for _STR:9_ , widgets for _STR:10_ , validate_min for _STR:11_ , validate_max for _STR:12_ , localized_fields for _STR:13_ , labels for _STR:14_ , help_texts for _STR:15_ , and error_messages for _STR:16_ .
18
'error_messages' ||| _STR:16_
'formset' ||| _STR:2_
'form' ||| _STR:0_
'min_num' ||| _STR:8_
'exclude' ||| _STR:7_
'extra' ||| _STR:3_
'can_order' ||| _STR:5_
'can_delete' ||| _STR:4_
'fields' ||| _STR:6_
'max_num' ||| _STR:9_
171 ||| _STR:17_
'formfield_callback' ||| _STR:1_
'localized_fields' ||| _STR:13_
'validate_min' ||| _STR:11_
'help_texts' ||| _STR:15_
'widgets' ||| _STR:10_
'validate_max' ||| _STR:12_
'labels' ||| _STR:14_
example# 8771
substitute fk for FormSet.fk [ FormSet . fk ] .
0
example# 8772
return FormSet .
0
example# 8773
derive the class InlineForeignKeyField from the Field base class .
0
example# 8774
substitute HiddenInput for widget .
0
example# 8775
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument , string _STR:0_ for _STR:1_ .
2
'The inline foreign key did not match the parent instance primary key.' ||| _STR:0_
'invalid_choice' ||| _STR:1_
example# 8777
substitute parent_instance for self.parent_instance [ self . parent_instance ] .
0
example# 8778
remove element from kwargs dictionary under the key _STR:0_ , substitute it for self.pk_field [ self . pk_field ] if it exists , if not self.pk_field [ self . pk_field ] is boolean False .
1
'pk_field' ||| _STR:0_
example# 8779
remove element from kwargs dictionary under the key _STR:0_ , substitute it for self.to_field [ self . to_field ] if it exists , if not self.to_field [ self . to_field ] is None .
1
'to_field' ||| _STR:0_
example# 8780
if self.parent_instance [ self . parent_instance ] is not None ,
0
example# 8781
if self.to_field [ self . to_field ] is true ,
0
example# 8782
get self.to_field [ self . to_field ] attribute of self.parent_instance [ self . parent_instance ] object , substitute it for value under the _STR:0_ key of the kwargs dictionary .
1
'initial' ||| _STR:0_
example# 8783
if not ,
0
example# 8784
substitute self.parent_instance.pk [ self . parent_instance . pk ] for value under the _STR:0_ key of the kwargs dictionary .
1
'initial' ||| _STR:0_
example# 8785
value under the _STR:0_ key of the kwargs dictionary is boolean False .
1
'required' ||| _STR:0_
example# 8788
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 8789
if self.pk_field [ self . pk_field ] ,
0
example# 8790
return None .
0
example# 8791
return self.parent_instance [ self . parent_instance ] .
0
example# 8792
if self.to_field [ self . to_field ] is true ,
0
example# 8793
get self.to_field [ self . to_field ] attribute of self.parent_instance [ self . parent_instance ] , substitute it for orig .
0
example# 8794
if not ,
0
example# 8795
substitute self.parent_instance.pk [ self . parent_instance . pk ] for orig .
0
example# 8798
return self.parent_instance [ self . parent_instance ] .
0
example# 8800
return boolean False .
0
example# 8801
derive the class ModelChoiceIterator from object base class .
0
example# 8803
substitute field for self.field [ self . field ] .
0
example# 8804
substitute field.queryset [ field . queryset ] for self.queryset [ self . queryset ] .
0
example# 8805
define the method __iter__ with an argument self .
0
example# 8806
if self.field.empty_label [ self . field . empty_label ] is not None ,
0
example# 8808
if self.field.cache_choices [ self . field . cache_choices ] is true ,
0
example# 8809
if self.field.choice_cache [ self . field . choice_cache ] is None ,
0
example# 8810
self.field.choice_cache [ self . field . choice_cache ] is a list containing results of the method self.choice [ self . choice ] called with an argument obj , for every obj in result of the method self.queryset.all [ self . queryset . all ] .
0
example# 8811
for every choice in self.field.choice_cache [ self . field . choice_cache ] ,
0
example# 8812
yield choice .
0
example# 8813
if not ,
0
example# 8814
for every obj in result of the call to the method self.queryset.all [ self . queryset . all ] ,
0
example# 8815
call the method self.choice [ self . choice ] with an argument obj , yield the result .
0
example# 8816
define the method __len__ with an argument self .
0
example# 8820
derive the class ModelChoiceField from the ChoiceField base class .
0
example# 8821
default_error_messages is a dictionary with an entry , result of the call to the function _ with an argument , string _STR:0_ for _STR:1_ .
2
'invalid_choice' ||| _STR:1_
'Select a valid choice. That choice is not one of the available choices.' ||| _STR:0_
example# 8822
define the method __init__ with 13 arguments : self , queryset , empty_label set to a string _STR:0_ , cache_choices set to None , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , to_field_name set to None , limit_choices_to set to None , unpacked list args and unpacked dictionary kwargs .
2
"---------" ||| _STR:0_
131 ||| _STR:1_
example# 8823
if required is true and initial is not None ,
0
example# 8824
self.empty_label [ self . empty_label ] is None .
0
example# 8825
if not ,
0
example# 8826
substitute empty_label for self.empty_label [ self . empty_label ] .
0
example# 8827
if cache_choices is not None ,
0
example# 8829
if not ,
0
example# 8830
substitute boolean False for cache_choices .
0
example# 8831
substitute cache_choices for self.cache_choices [ self . cache_choices ] .
0
example# 8833
substitute queryset for self.queryset [ self . queryset ] .
0
example# 8834
substitute limit_choices_to for self.limit_choices_to [ self . limit_choices_to ] .
0
example# 8835
self.choice_cache [ self . choice_cache ] is None .
0
example# 8836
substitute to_field_name for self.to_field_name [ self . to_field_name ]
0
example# 8838
call the method __deepcopy__ from the base class of the class ChoiceField , with an argument memo , substitute the result for result .
0
example# 8839
substitute result.queryset [ result . queryset ] for result.queryset [ result . queryset ] .
0
example# 8840
return result .
0
example# 8841
define the method _get_queryset with an argument self .
0
example# 8842
return self._queryset [ self . _queryset ] .
0
example# 8844
substitute queryset for self._queryset [ self . _queryset ] .
0
example# 8845
substitute self.choices [ self . choices ] for self.widget.choices [ self . widget . choices ] .
0
example# 8846
queryset is an property object of this class , with _get_queryset getter and _set_queryset setter functions .
0
example# 8848
call the function smart_text with an argument obj , return the result .
0
example# 8849
define the method _get_choices with an argument self .
0
example# 8850
if self has an attribute _STR:0_ ,
1
'_choices' ||| _STR:0_
example# 8851
return self._choices [ self . _choices ] .
0
example# 8852
return an instance of ModelChoiceIterator class , created with an argument self .
0
example# 8853
choices is an property property object of this class , with _get_choices getter and ChoiceField._set_choices [ ChoiceField . _set_choices ] setter functions .
0
example# 8855
if value has an attribute _STR:0_ ,
1
'_meta' ||| _STR:0_
example# 8856
if self.to_field_name [ self . to_field_name ] is true ,
0
example# 8857
call the method value.serializable_value [ value . serializable_value ] with an argument self.to_field_name [ self . to_field_name ] , return the result .
0
example# 8858
if not ,
0
example# 8859
return value.pk [ value . pk ] .
0
example# 8860
call the method prepare_value from the base class of the class ModelChoiceField , with an argument value , return the result .
0
example# 8862
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 8863
return None .
0
example# 8864
try ,
0
example# 8865
substitute self.to_field_name [ self . to_field_name ] , if exists , for key , if not substitute string _STR:0_ for key .
1
'pk' ||| _STR:0_
example# 8866
call the method self.queryset.get [ self . queryset . get ] with an argument , unpacked dictionary with an element : value for key , substitute the result for value .
0
example# 8867
if ValueError or self.queryset.model.DoesNotExist [ self . queryset . model . DoesNotExist ] exception is caught ,
0
example# 8869
return value .
0
example# 8873
if initial is not None , substitute initial for initial_value , otherwise initial_value is an empty string .
0
example# 8874
if data is not None , substitute data for initial_value , otherwise data_value is an empty string .
0
example# 8875
call the method self.prepare_value [ self . prepare_value ] with an argument initial_value , use it as the argument for the call to the function force_text , if the result is equal to the result of the call to the function force_text with data_value as an argument , return boolean True , otherwise return boolean False .
0
example# 8876
derive the class ModelMultipleChoiceField from the ModelChoiceField base class .
0
example# 8877
substitute SelectMultiple for widget .
0
example# 8878
substitute MultipleHiddenInput for hidden_widget .
0
example# 8880
define the method __init__ with 10 arguments : self , queryset , cache_choices set to None , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty strign , unpacked list args and unpacked dictionary kwargs .
1
101 ||| _STR:0_
example# 8881
call the method __init__ from the base class of the class ModelMultipleChoiceField , with 10 arguments : queryset , None , cache_choices , required , widget , label , initial , help_text , unpacked list args and unpacked dictionary kwargs .
1
101 ||| _STR:0_
example# 8883
if value is false ,
0
example# 8884
return an empty list .
0
example# 8885
instantiate base class of the class ModelMultipleChoiceField , substitute filed to_python of the result for to_py .
0
example# 8886
return a list containing return values of the function to_py called with an argument val , for every val in value .
0
example# 8888
if self.required [ self . required ] is true and value is false ,
0
example# 8890
otherwise if self.required [ self . required ] is false and value is false ,
0
example# 8891
call the method self.queryset.none [ self . queryset . none ] , return the result .
0
example# 8892
if value is not an instance of list or tuple types ,
0
example# 8894
substitute self.to_field_name [ self . to_field_name ] , if true , for key , or if not , substitute string _STR:0_ for key .
1
'pk' ||| _STR:0_
example# 8895
for every pk in value ,
0
example# 8896
try ,
0
example# 8897
call the method self.queryset.filter [ self . queryset . filter ] with an argument , unpacked dictionary with an entry : pk for key .
0
example# 8898
if ValueError exception is caught ,
0
example# 8900
call the method self.queryset.filter [ self . queryset . filter ] with an argument , unpacked dictionary with an entry : value for string _STR:0_ appended to key , substitute the result for qs .
1
'__in' ||| _STR:0_
example# 8901
pks is a set containing results of the call to the function force_text with an argument , key attribute of the o object , for every o in opts .
0
example# 8902
for every val in value ,
0
example# 8903
call the function force_text with an argument val , if the result is not contained in pks ,
0
example# 8905
call the method self.run_validators [ self . run_validators ] with an argument value .
0
example# 8906
return qs .
0
example# 8908
if value has an attribute _STR:0_ and value is not an instance of six.text_type [ six . text_type ] and value doesnt have an attribute _STR:1_ ,
2
'__iter__' ||| _STR:0_
'_meta' ||| _STR:1_
example# 8909
call the method prepare_value from the base class of the class ModelMultipleChoiceField , with an argument v , for every v in value , return the list of results .
0
example# 8910
call the method prepare_value the base class of the class ModelMultipleChoiceField , with an argument value , return the result .
0
example# 8912
if initial is None ,
0
example# 8913
initial is an empty list .
0
example# 8914
if data is None ,
0
example# 8915
data is an empty list .
0
example# 8916
if lengths of initial and data are equal ,
0
example# 8917
return boolean True .
0
example# 8918
initial_set is set created out of return values of the function force_text called with an argument value , for every value in result of the method self.prepare_value [ self . prepare_value ] called with an argument initial .
0
example# 8919
data_set is set created out of return values of the function force_text called with an argument value , for every value in data .
0
example# 8920
if data_set is not equal to initial_set return boolean True , otherwise return boolean False .
0
example# 8921
define the function modelform_defines_fields with an argument form_class .
0
example# 8922
only if form_class is not None , and if form_class has an attribute _STR:0_ and form_class._meta.fields [ form_class . _meta . fields ] is not None ,
1
'_meta' ||| _STR:0_
example# 8923
import module warnings .
0
example# 8924
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
1
191 ||| _STR:0_
example# 8926
from django.forms.utils [ django . forms . utils ] import everything into default name space .
0
example# 8927
from __future__ import unicode_literals into default name space .
0
example# 8928
import module json .
0
example# 8929
import module sys .
0
example# 8930
try ,
0
example# 8931
from collections import UserList into default namespace .
0
example# 8932
if ImportError exception is caught .
0
example# 8933
from UserList import UserList into default namespace .
0
example# 8934
from django.conf [ django . conf ] import settings into default name space .
0
example# 8936
from django.utils.html [ django . utils . html ] import format_html , format_html_join and escape into default name space .
0
example# 8937
from django.utils [ django . utils ] import timezone into default name space .
0
example# 8938
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ into default name space .
0
example# 8939
from django.utils [ django . utils ] import six into default name space .
0
example# 8940
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 8941
define the function flatatt with an argument attrs .
0
example# 8942
boolean_attrs is an empty list .
0
example# 8943
convert items of attrs dictionary to list of tuples , for every attr and value in it ,
0
example# 8944
if value is boolean True ,
0
example# 8945
append tuple containing element attr to boolean_attrs .
0
example# 8946
delete entry under the attr key of the attrs dictionary .
0
example# 8947
otherwise if value is boolean False ,
0
example# 8948
delete entry under the attr key of the attrs dictionary .
0
example# 8951
derive the class ErrorDict from the dict base class .
0
example# 8952
define the method as_data with an argument self .
0
example# 8953
return a dictionary generated with an expression , return value of the method e.as_data [ e . as_data ] for f , for every f and e in list of tuples of self dictionary key , pair entries .
0
example# 8955
call the method json.dumps [ json . dumps ] with a dictionary generate with an expression as an argument , return value of the function e.get_json_data [ e . get_json_data ] , with an argument escape_html for f , for every f and e in list of tuples of self dictionary key , pair entries , return the result .
0
example# 8956
define the method as_ul with an argument self .
0
example# 8957
if self is false ,
0
example# 8958
return an empty string .
0
example# 8960
define the method as_text with an argument self .
0
example# 8961
output is an empty list .
0
example# 8962
call the method self.items [ self . items ] , for every field and errors in the result .
0
example# 8963
convert field into a string and concatenate it to a string _STR:0_ , append the result to output .
1
'* ' ||| _STR:0_
example# 8964
for every e in errors convert e into a string and append it to a string _STR:0_ , join all the results into a string separated by newlines , append the result to output .
1
'  * ' ||| _STR:0_
example# 8965
join elements of output into a string , separated by newline characters , return the result .
0
example# 8966
define the method __str__ with an argument self .
0
example# 8967
call the method self.as_ul [ self . as_ul ] , return the result .
0
example# 8969
derive the class ErrorList from the UserList and list base classes .
0
example# 8971
call the method __init__ with an argument initlist from the base class of the class ErrorList .
0
example# 8972
if error_class is None ,
0
example# 8973
self.error_class [ self . error_class ] is a string _STR:0_ .
1
'errorlist' ||| _STR:0_
example# 8974
if not ,
0
example# 8975
append error_class converted into a string to string _STR:0_ , substitute the result for self.error_class [ self . error_class ] .
1
'errorlist ' ||| _STR:0_
example# 8976
define the method as_text with an argument self .
0
example# 8977
instantiate ValidationError class with an argument self.data [ self . data ] , return its field error_list .
0
example# 8979
errors is an empty list .
0
example# 8980
call the method self.as_data [ self . as_data ] , for every error in the result .
0
example# 8981
convert elements of error into a list , substitute the first element for message .
0
example# 8983
with an argument message for _STR:0_ , or if not message for _STR:0_ and error.code [ error . code ] for _STR:1_ in error.code [ error . code ] is true , if not , an empty string for _STR:1_ . return errors .
2
'message' ||| _STR:0_
'code' ||| _STR:1_
example# 8985
call the method self.get_json_data [ self . get_json_data ] with an argument escape_html , use the result as an argument for the call to the json.dumps [ json . dumps ] function , return the result .
0
example# 8986
define the method as_text with an argument self .
0
example# 8987
if self.data [ self . data ] is false ,
0
example# 8988
return an empty string .
0
example# 8990
define the method as_text with an argument self .
0
example# 8991
for every e in self , append convert e to an string and append it to string _STR:0_ , join all of the results into a string separated by newline character , return the result .
1
'* ' ||| _STR:0_
example# 8992
define the method __str__ with an argument self .
0
example# 8993
call the method self.as_ul [ self . as_ul ] , return the result .
0
example# 8994
define the method __repr__ with an argument self .
0
example# 8995
convert elements of self into a list , return the its printable representation .
0
example# 8996
define the method __contains__ with an argument self .
0
example# 8997
if item is contained in the list of the elements of self , return boolean True , otherwise return boolean False .
0
example# 8998
define the method __eq__ with an argument self .
0
example# 8999
if other equals list containing elements of self , return boolean True , otherwise return boolean False .
0
example# 9000
define the method __ne__ with an argument self .
0
example# 9001
if other is not equal to list containing elements of self , return boolean True , otherwise return boolean False .
0
example# 9002
define the method __getitem__ with an argument self .
0
example# 9003
substitute i-th element of self.data [ self . data ] for error .
0
example# 9004
if error is an instance of ValidationError ,
0
example# 9005
return first element of the list containing elements of error .
0
example# 9006
call the function force_text with an argument error , return the result .
0
example# 9007
define the function from_current_timezone with an argument value .
0
example# 9008
if settings.USE_TZ [ settings . USE_TZ ] is true and value is not None and call to the function timezone.is_naive [ timezone . is_naive ] with an argument value , evaluates to true ,
0
example# 9009
call the method timezone.get_current_timezone [ timezone . get_current_timezone ] , substitute the result for current_timezone .
0
example# 9010
try ,
0
example# 9011
call the function timezone.make_aware [ timezone . make_aware ] with arguments value and current_timezone , return the result .
0
example# 9012
if Exception exception is caught ,
0
example# 9013
call the function _ with an argument string _STR:0_ _STR:1_ , substitute the result for message .
2
'%(datetime)s couldnt be interpreted in time zone %(current_timezone)s; it ' ||| _STR:0_
'may be ambiguous or it may not exist.' ||| _STR:1_
example# 9016
return value .
0
example# 9017
define the function to_current_timezone with an argument value .
0
example# 9018
if settings.USE_TZ [ settings . USE_TZ ] is true and value is not None and call to the function timezone.is_aware [ timezone . is_aware ] with an argument value , evaluates to true ,
0
example# 9019
call the function timezone.get_current_timezone [ timezone . get_current_timezone ] , substitute the result for current_timezone .
0
example# 9021
return value .
0
example# 9022
from __future__ import unicode_literals into default name space .
0
example# 9023
import module copy .
0
example# 9024
from itertools import chain into default name space .
0
example# 9025
from django.conf [ django . conf ] import settings into default name space .
0
example# 9026
from django.forms.utils [ django . forms . utils ] import flatatt and to_current_timezone into default name space .
0
example# 9027
from django.utils.datastructures [ django . utils . datastructures ] import MultiValueDict and MergeDict into default name space .
0
example# 9029
from django.utils.html [ django . utils . html ] import conditional_escape and format_html into default name space .
0
example# 9030
from django.utils.translation [ django . utils . translation ] import ugettext_lazy into default name space .
0
example# 9031
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 9032
from django.utils [ django . utils ] import formats and six into default name space .
0
example# 9033
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urljoin into default name space .
0
example# 9034
__all__ is a tuple of strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ , _STR:11_ , _STR:12_ , _STR:13_ , _STR:14_ , _STR:15_ , _STR:16_ , _STR:17_ , _STR:18_ , _STR:19_ , _STR:20_ , _STR:21_ , _STR:22_ , _STR:23_ and _STR:24_ .
25
'DateInput' ||| _STR:12_
'TimeInput' ||| _STR:14_
'Textarea' ||| _STR:15_
'ClearableFileInput' ||| _STR:10_
'EmailInput' ||| _STR:4_
'CheckboxInput' ||| _STR:16_
'DateTimeInput' ||| _STR:13_
'MediaDefiningClass' ||| _STR:1_
'URLInput' ||| _STR:5_
'MultiWidget' ||| _STR:22_
'HiddenInput' ||| _STR:8_
'SplitDateTimeWidget' ||| _STR:23_
'MultipleHiddenInput' ||| _STR:9_
'NumberInput' ||| _STR:6_
'SplitHiddenDateTimeWidget' ||| _STR:24_
'Media' ||| _STR:0_
'CheckboxSelectMultiple' ||| _STR:21_
'SelectMultiple' ||| _STR:19_
'Select' ||| _STR:17_
'PasswordInput' ||| _STR:7_
'RadioSelect' ||| _STR:20_
'Widget' ||| _STR:2_
'NullBooleanSelect' ||| _STR:18_
'FileInput' ||| _STR:11_
'TextInput' ||| _STR:3_
example# 9037
derive the class Media from the object base class .
0
example# 9039
if media is true ,
0
example# 9040
substitute media.__dict__ [ media . __dict__ ] for media_attrs .
0
example# 9041
if not ,
0
example# 9042
substitute kwargs for media_attrs .
0
example# 9043
self._css [ self . _css ] is an empty dictionary .
0
example# 9044
self._js [ self . _js ] is an empty list .
0
example# 9045
for every name in MEDIA_TYPES ,
0
example# 9046
append name to string _STR:0_ use it as the name of the attribute to get from object self , call the result as an function , with an argument : value under the name key of the media_attrs dictionary , if it exists , if not use None as an argument .
1
'add_' ||| _STR:0_
example# 9047
define the method __str__ with an argument self .
0
example# 9048
call the method self.render [ self . render ] , return the result .
0
example# 9049
define the method render with an argument self .
0
example# 9050
call the function chain with an argument unpacked list , append name to string _STR:0_ , and use it as the name of the attribute to get from the self object , call the result and append it to a list for every name in MEDIA_TYPES , join all the results into a string with newline separator , use the result as an argument for the call to the function mark_safe , return the result .
1
'render_' ||| _STR:0_
example# 9051
define the method render_js with an argument self .
0
example# 9053
define the method render_css with an argument self .
0
example# 9054
call