--- scripts/plot_learning.py
+++ scripts/plot_learning.py
@@ -42,6 +42,9 @@ def learning():
     function_accuracy = np.array(data['function_accuracy'])
     train_fnacc = 100*function_accuracy[:,0]
     dev_fnacc = 100*function_accuracy[:,1]
+    grammar_accuracy = np.array(data.get('grammar_accuracy', data['correct grammar']))
+    train_gracc = 100*grammar_accuracy[:,0]
+    dev_gracc = 100*grammar_accuracy[:,1]
     #recall = np.array(data['recall'])
     #train_recall = 100*recall[:,0]
     #dev_recall = 100*recall[:,1]
@@ -98,16 +101,26 @@ def learning():
     plt.plot(X, dev_acc)
     plt.ylim(0, 100)
     plt.legend(["Train Accuracy", "Dev Accuracy"], loc="lower right")
-
+    
     plt.subplot(3, 2, 6)
-    plt.title('Parse-Action F1 score')
+    plt.title('Grammar Accuracy')
     plt.xlim(1, len(train_eval_loss)+0.5)
     plt.xticks(X)
     plt.xlabel('Train Epoch')
-    plt.plot(X, train_f1)
-    plt.plot(X, dev_f1)
+    plt.plot(X, train_gracc)
+    plt.plot(X, dev_gracc)
     plt.ylim(0, 100)
-    plt.legend(["Train F1", "Dev F1"], loc="lower right")
+    plt.legend(["Train Accuracy", "Dev Accuracy"], loc="lower right")
+
+    #plt.subplot(3, 2, 6)
+    #plt.title('Parse-Action F1 score')
+    #plt.xlim(1, len(train_eval_loss)+0.5)
+    #plt.xticks(X)
+    #plt.xlabel('Train Epoch')
+    #plt.plot(X, train_f1)
+    #plt.plot(X, dev_f1)
+    #plt.ylim(0, 100)
+    #plt.legend(["Train F1", "Dev F1"], loc="lower right")
 
 
 #     plt.subplot(3, 2, 6)
